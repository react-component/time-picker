(window['webpackJsonp'] = window['webpackJsonp'] || []).push([
  ['common'],
  {
    /***/ './assets/index.less':
      /*!***************************!*\
  !*** ./assets/index.less ***!
  \***************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        // extracted by mini-css-extract-plugin
        /***/
      },

    /***/ './index.js':
      /*!******************!*\
  !*** ./index.js ***!
  \******************/
      /*! exports provided: default */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var _src___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! ./src/ */ './src/index.js',
        );
        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          'default',
          function() {
            return _src___WEBPACK_IMPORTED_MODULE_0__['default'];
          },
        );

        /***/
      },

    /***/ './node_modules/add-dom-event-listener/lib/EventBaseObject.js':
      /*!********************************************************************!*\
  !*** ./node_modules/add-dom-event-listener/lib/EventBaseObject.js ***!
  \********************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';
        /**
         * @ignore
         * base event object for custom and dom event.
         * @author yiminghe@gmail.com
         */

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        function returnFalse() {
          return false;
        }

        function returnTrue() {
          return true;
        }

        function EventBaseObject() {
          this.timeStamp = Date.now();
          this.target = undefined;
          this.currentTarget = undefined;
        }

        EventBaseObject.prototype = {
          isEventObject: 1,

          constructor: EventBaseObject,

          isDefaultPrevented: returnFalse,

          isPropagationStopped: returnFalse,

          isImmediatePropagationStopped: returnFalse,

          preventDefault: function preventDefault() {
            this.isDefaultPrevented = returnTrue;
          },

          stopPropagation: function stopPropagation() {
            this.isPropagationStopped = returnTrue;
          },

          stopImmediatePropagation: function stopImmediatePropagation() {
            this.isImmediatePropagationStopped = returnTrue;
            // fixed 1.2
            // call stopPropagation implicitly
            this.stopPropagation();
          },

          halt: function halt(immediate) {
            if (immediate) {
              this.stopImmediatePropagation();
            } else {
              this.stopPropagation();
            }
            this.preventDefault();
          },
        };

        exports['default'] = EventBaseObject;
        module.exports = exports['default'];

        /***/
      },

    /***/ './node_modules/add-dom-event-listener/lib/EventObject.js':
      /*!****************************************************************!*\
  !*** ./node_modules/add-dom-event-listener/lib/EventObject.js ***!
  \****************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';
        /**
         * @ignore
         * event object for dom
         * @author yiminghe@gmail.com
         */

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        var _EventBaseObject = __webpack_require__(
          /*! ./EventBaseObject */ './node_modules/add-dom-event-listener/lib/EventBaseObject.js',
        );

        var _EventBaseObject2 = _interopRequireDefault(_EventBaseObject);

        var _objectAssign = __webpack_require__(
          /*! object-assign */ './node_modules/object-assign/index.js',
        );

        var _objectAssign2 = _interopRequireDefault(_objectAssign);

        var TRUE = true;
        var FALSE = false;
        var commonProps = [
          'altKey',
          'bubbles',
          'cancelable',
          'ctrlKey',
          'currentTarget',
          'eventPhase',
          'metaKey',
          'shiftKey',
          'target',
          'timeStamp',
          'view',
          'type',
        ];

        function isNullOrUndefined(w) {
          return w === null || w === undefined;
        }

        var eventNormalizers = [
          {
            reg: /^key/,
            props: ['char', 'charCode', 'key', 'keyCode', 'which'],
            fix: function fix(event, nativeEvent) {
              if (isNullOrUndefined(event.which)) {
                event.which = !isNullOrUndefined(nativeEvent.charCode)
                  ? nativeEvent.charCode
                  : nativeEvent.keyCode;
              }

              // add metaKey to non-Mac browsers (use ctrl for PC 's and Meta for Macs)
              if (event.metaKey === undefined) {
                event.metaKey = event.ctrlKey;
              }
            },
          },
          {
            reg: /^touch/,
            props: ['touches', 'changedTouches', 'targetTouches'],
          },
          {
            reg: /^hashchange$/,
            props: ['newURL', 'oldURL'],
          },
          {
            reg: /^gesturechange$/i,
            props: ['rotation', 'scale'],
          },
          {
            reg: /^(mousewheel|DOMMouseScroll)$/,
            props: [],
            fix: function fix(event, nativeEvent) {
              var deltaX = undefined;
              var deltaY = undefined;
              var delta = undefined;
              var wheelDelta = nativeEvent.wheelDelta;
              var axis = nativeEvent.axis;
              var wheelDeltaY = nativeEvent.wheelDeltaY;
              var wheelDeltaX = nativeEvent.wheelDeltaX;
              var detail = nativeEvent.detail;

              // ie/webkit
              if (wheelDelta) {
                delta = wheelDelta / 120;
              }

              // gecko
              if (detail) {
                // press control e.detail == 1 else e.detail == 3
                delta = 0 - (detail % 3 === 0 ? detail / 3 : detail);
              }

              // Gecko
              if (axis !== undefined) {
                if (axis === event.HORIZONTAL_AXIS) {
                  deltaY = 0;
                  deltaX = 0 - delta;
                } else if (axis === event.VERTICAL_AXIS) {
                  deltaX = 0;
                  deltaY = delta;
                }
              }

              // Webkit
              if (wheelDeltaY !== undefined) {
                deltaY = wheelDeltaY / 120;
              }
              if (wheelDeltaX !== undefined) {
                deltaX = (-1 * wheelDeltaX) / 120;
              }

              // 默认 deltaY (ie)
              if (!deltaX && !deltaY) {
                deltaY = delta;
              }

              if (deltaX !== undefined) {
                /**
                 * deltaX of mousewheel event
                 * @property deltaX
                 * @member Event.DomEvent.Object
                 */
                event.deltaX = deltaX;
              }

              if (deltaY !== undefined) {
                /**
                 * deltaY of mousewheel event
                 * @property deltaY
                 * @member Event.DomEvent.Object
                 */
                event.deltaY = deltaY;
              }

              if (delta !== undefined) {
                /**
                 * delta of mousewheel event
                 * @property delta
                 * @member Event.DomEvent.Object
                 */
                event.delta = delta;
              }
            },
          },
          {
            reg: /^mouse|contextmenu|click|mspointer|(^DOMMouseScroll$)/i,
            props: [
              'buttons',
              'clientX',
              'clientY',
              'button',
              'offsetX',
              'relatedTarget',
              'which',
              'fromElement',
              'toElement',
              'offsetY',
              'pageX',
              'pageY',
              'screenX',
              'screenY',
            ],
            fix: function fix(event, nativeEvent) {
              var eventDoc = undefined;
              var doc = undefined;
              var body = undefined;
              var target = event.target;
              var button = nativeEvent.button;

              // Calculate pageX/Y if missing and clientX/Y available
              if (
                target &&
                isNullOrUndefined(event.pageX) &&
                !isNullOrUndefined(nativeEvent.clientX)
              ) {
                eventDoc = target.ownerDocument || document;
                doc = eventDoc.documentElement;
                body = eventDoc.body;
                event.pageX =
                  nativeEvent.clientX +
                  ((doc && doc.scrollLeft) || (body && body.scrollLeft) || 0) -
                  ((doc && doc.clientLeft) || (body && body.clientLeft) || 0);
                event.pageY =
                  nativeEvent.clientY +
                  ((doc && doc.scrollTop) || (body && body.scrollTop) || 0) -
                  ((doc && doc.clientTop) || (body && body.clientTop) || 0);
              }

              // which for click: 1 === left; 2 === middle; 3 === right
              // do not use button
              if (!event.which && button !== undefined) {
                if (button & 1) {
                  event.which = 1;
                } else if (button & 2) {
                  event.which = 3;
                } else if (button & 4) {
                  event.which = 2;
                } else {
                  event.which = 0;
                }
              }

              // add relatedTarget, if necessary
              if (!event.relatedTarget && event.fromElement) {
                event.relatedTarget =
                  event.fromElement === target ? event.toElement : event.fromElement;
              }

              return event;
            },
          },
        ];

        function retTrue() {
          return TRUE;
        }

        function retFalse() {
          return FALSE;
        }

        function DomEventObject(nativeEvent) {
          var type = nativeEvent.type;

          var isNative =
            typeof nativeEvent.stopPropagation === 'function' ||
            typeof nativeEvent.cancelBubble === 'boolean';

          _EventBaseObject2['default'].call(this);

          this.nativeEvent = nativeEvent;

          // in case dom event has been mark as default prevented by lower dom node
          var isDefaultPrevented = retFalse;
          if ('defaultPrevented' in nativeEvent) {
            isDefaultPrevented = nativeEvent.defaultPrevented ? retTrue : retFalse;
          } else if ('getPreventDefault' in nativeEvent) {
            // https://bugzilla.mozilla.org/show_bug.cgi?id=691151
            isDefaultPrevented = nativeEvent.getPreventDefault() ? retTrue : retFalse;
          } else if ('returnValue' in nativeEvent) {
            isDefaultPrevented = nativeEvent.returnValue === FALSE ? retTrue : retFalse;
          }

          this.isDefaultPrevented = isDefaultPrevented;

          var fixFns = [];
          var fixFn = undefined;
          var l = undefined;
          var prop = undefined;
          var props = commonProps.concat();

          eventNormalizers.forEach(function(normalizer) {
            if (type.match(normalizer.reg)) {
              props = props.concat(normalizer.props);
              if (normalizer.fix) {
                fixFns.push(normalizer.fix);
              }
            }
          });

          l = props.length;

          // clone properties of the original event object
          while (l) {
            prop = props[--l];
            this[prop] = nativeEvent[prop];
          }

          // fix target property, if necessary
          if (!this.target && isNative) {
            this.target = nativeEvent.srcElement || document; // srcElement might not be defined either
          }

          // check if target is a text node (safari)
          if (this.target && this.target.nodeType === 3) {
            this.target = this.target.parentNode;
          }

          l = fixFns.length;

          while (l) {
            fixFn = fixFns[--l];
            fixFn(this, nativeEvent);
          }

          this.timeStamp = nativeEvent.timeStamp || Date.now();
        }

        var EventBaseObjectProto = _EventBaseObject2['default'].prototype;

        (0, _objectAssign2['default'])(DomEventObject.prototype, EventBaseObjectProto, {
          constructor: DomEventObject,

          preventDefault: function preventDefault() {
            var e = this.nativeEvent;

            // if preventDefault exists run it on the original event
            if (e.preventDefault) {
              e.preventDefault();
            } else {
              // otherwise set the returnValue property of the original event to FALSE (IE)
              e.returnValue = FALSE;
            }

            EventBaseObjectProto.preventDefault.call(this);
          },

          stopPropagation: function stopPropagation() {
            var e = this.nativeEvent;

            // if stopPropagation exists run it on the original event
            if (e.stopPropagation) {
              e.stopPropagation();
            } else {
              // otherwise set the cancelBubble property of the original event to TRUE (IE)
              e.cancelBubble = TRUE;
            }

            EventBaseObjectProto.stopPropagation.call(this);
          },
        });

        exports['default'] = DomEventObject;
        module.exports = exports['default'];

        /***/
      },

    /***/ './node_modules/add-dom-event-listener/lib/index.js':
      /*!**********************************************************!*\
  !*** ./node_modules/add-dom-event-listener/lib/index.js ***!
  \**********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports['default'] = addEventListener;

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        var _EventObject = __webpack_require__(
          /*! ./EventObject */ './node_modules/add-dom-event-listener/lib/EventObject.js',
        );

        var _EventObject2 = _interopRequireDefault(_EventObject);

        function addEventListener(target, eventType, callback, option) {
          function wrapCallback(e) {
            var ne = new _EventObject2['default'](e);
            callback.call(target, ne);
          }

          if (target.addEventListener) {
            var _ret = (function() {
              var useCapture = false;
              if (typeof option === 'object') {
                useCapture = option.capture || false;
              } else if (typeof option === 'boolean') {
                useCapture = option;
              }

              target.addEventListener(eventType, wrapCallback, option || false);

              return {
                v: {
                  remove: function remove() {
                    target.removeEventListener(eventType, wrapCallback, useCapture);
                  },
                },
              };
            })();

            if (typeof _ret === 'object') return _ret.v;
          } else if (target.attachEvent) {
            target.attachEvent('on' + eventType, wrapCallback);
            return {
              remove: function remove() {
                target.detachEvent('on' + eventType, wrapCallback);
              },
            };
          }
        }

        module.exports = exports['default'];

        /***/
      },

    /***/ './node_modules/babel-runtime/core-js/object/assign.js':
      /*!*************************************************************!*\
  !*** ./node_modules/babel-runtime/core-js/object/assign.js ***!
  \*************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = {
          default: __webpack_require__(
            /*! core-js/library/fn/object/assign */ './node_modules/core-js/library/fn/object/assign.js',
          ),
          __esModule: true,
        };

        /***/
      },

    /***/ './node_modules/babel-runtime/core-js/object/create.js':
      /*!*************************************************************!*\
  !*** ./node_modules/babel-runtime/core-js/object/create.js ***!
  \*************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = {
          default: __webpack_require__(
            /*! core-js/library/fn/object/create */ './node_modules/core-js/library/fn/object/create.js',
          ),
          __esModule: true,
        };

        /***/
      },

    /***/ './node_modules/babel-runtime/core-js/object/define-property.js':
      /*!**********************************************************************!*\
  !*** ./node_modules/babel-runtime/core-js/object/define-property.js ***!
  \**********************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = {
          default: __webpack_require__(
            /*! core-js/library/fn/object/define-property */ './node_modules/core-js/library/fn/object/define-property.js',
          ),
          __esModule: true,
        };

        /***/
      },

    /***/ './node_modules/babel-runtime/core-js/object/set-prototype-of.js':
      /*!***********************************************************************!*\
  !*** ./node_modules/babel-runtime/core-js/object/set-prototype-of.js ***!
  \***********************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = {
          default: __webpack_require__(
            /*! core-js/library/fn/object/set-prototype-of */ './node_modules/core-js/library/fn/object/set-prototype-of.js',
          ),
          __esModule: true,
        };

        /***/
      },

    /***/ './node_modules/babel-runtime/core-js/symbol.js':
      /*!******************************************************!*\
  !*** ./node_modules/babel-runtime/core-js/symbol.js ***!
  \******************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = {
          default: __webpack_require__(
            /*! core-js/library/fn/symbol */ './node_modules/core-js/library/fn/symbol/index.js',
          ),
          __esModule: true,
        };

        /***/
      },

    /***/ './node_modules/babel-runtime/core-js/symbol/iterator.js':
      /*!***************************************************************!*\
  !*** ./node_modules/babel-runtime/core-js/symbol/iterator.js ***!
  \***************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = {
          default: __webpack_require__(
            /*! core-js/library/fn/symbol/iterator */ './node_modules/core-js/library/fn/symbol/iterator.js',
          ),
          __esModule: true,
        };

        /***/
      },

    /***/ './node_modules/babel-runtime/helpers/classCallCheck.js':
      /*!**************************************************************!*\
  !*** ./node_modules/babel-runtime/helpers/classCallCheck.js ***!
  \**************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';

        exports.__esModule = true;

        exports.default = function(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        };

        /***/
      },

    /***/ './node_modules/babel-runtime/helpers/createClass.js':
      /*!***********************************************************!*\
  !*** ./node_modules/babel-runtime/helpers/createClass.js ***!
  \***********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';

        exports.__esModule = true;

        var _defineProperty = __webpack_require__(
          /*! ../core-js/object/define-property */ './node_modules/babel-runtime/core-js/object/define-property.js',
        );

        var _defineProperty2 = _interopRequireDefault(_defineProperty);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        exports.default = (function() {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              (0, _defineProperty2.default)(target, descriptor.key, descriptor);
            }
          }

          return function(Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        /***/
      },

    /***/ './node_modules/babel-runtime/helpers/defineProperty.js':
      /*!**************************************************************!*\
  !*** ./node_modules/babel-runtime/helpers/defineProperty.js ***!
  \**************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';

        exports.__esModule = true;

        var _defineProperty = __webpack_require__(
          /*! ../core-js/object/define-property */ './node_modules/babel-runtime/core-js/object/define-property.js',
        );

        var _defineProperty2 = _interopRequireDefault(_defineProperty);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        exports.default = function(obj, key, value) {
          if (key in obj) {
            (0, _defineProperty2.default)(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          } else {
            obj[key] = value;
          }

          return obj;
        };

        /***/
      },

    /***/ './node_modules/babel-runtime/helpers/extends.js':
      /*!*******************************************************!*\
  !*** ./node_modules/babel-runtime/helpers/extends.js ***!
  \*******************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';

        exports.__esModule = true;

        var _assign = __webpack_require__(
          /*! ../core-js/object/assign */ './node_modules/babel-runtime/core-js/object/assign.js',
        );

        var _assign2 = _interopRequireDefault(_assign);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        exports.default =
          _assign2.default ||
          function(target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];

              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }

            return target;
          };

        /***/
      },

    /***/ './node_modules/babel-runtime/helpers/inherits.js':
      /*!********************************************************!*\
  !*** ./node_modules/babel-runtime/helpers/inherits.js ***!
  \********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';

        exports.__esModule = true;

        var _setPrototypeOf = __webpack_require__(
          /*! ../core-js/object/set-prototype-of */ './node_modules/babel-runtime/core-js/object/set-prototype-of.js',
        );

        var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

        var _create = __webpack_require__(
          /*! ../core-js/object/create */ './node_modules/babel-runtime/core-js/object/create.js',
        );

        var _create2 = _interopRequireDefault(_create);

        var _typeof2 = __webpack_require__(
          /*! ../helpers/typeof */ './node_modules/babel-runtime/helpers/typeof.js',
        );

        var _typeof3 = _interopRequireDefault(_typeof2);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        exports.default = function(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                (typeof superClass === 'undefined'
                  ? 'undefined'
                  : (0, _typeof3.default)(superClass)),
            );
          }

          subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              enumerable: false,
              writable: true,
              configurable: true,
            },
          });
          if (superClass)
            _setPrototypeOf2.default
              ? (0, _setPrototypeOf2.default)(subClass, superClass)
              : (subClass.__proto__ = superClass);
        };

        /***/
      },

    /***/ './node_modules/babel-runtime/helpers/objectWithoutProperties.js':
      /*!***********************************************************************!*\
  !*** ./node_modules/babel-runtime/helpers/objectWithoutProperties.js ***!
  \***********************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';

        exports.__esModule = true;

        exports.default = function(obj, keys) {
          var target = {};

          for (var i in obj) {
            if (keys.indexOf(i) >= 0) continue;
            if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
            target[i] = obj[i];
          }

          return target;
        };

        /***/
      },

    /***/ './node_modules/babel-runtime/helpers/possibleConstructorReturn.js':
      /*!*************************************************************************!*\
  !*** ./node_modules/babel-runtime/helpers/possibleConstructorReturn.js ***!
  \*************************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';

        exports.__esModule = true;

        var _typeof2 = __webpack_require__(
          /*! ../helpers/typeof */ './node_modules/babel-runtime/helpers/typeof.js',
        );

        var _typeof3 = _interopRequireDefault(_typeof2);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        exports.default = function(self, call) {
          if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }

          return call &&
            ((typeof call === 'undefined' ? 'undefined' : (0, _typeof3.default)(call)) ===
              'object' ||
              typeof call === 'function')
            ? call
            : self;
        };

        /***/
      },

    /***/ './node_modules/babel-runtime/helpers/typeof.js':
      /*!******************************************************!*\
  !*** ./node_modules/babel-runtime/helpers/typeof.js ***!
  \******************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';

        exports.__esModule = true;

        var _iterator = __webpack_require__(
          /*! ../core-js/symbol/iterator */ './node_modules/babel-runtime/core-js/symbol/iterator.js',
        );

        var _iterator2 = _interopRequireDefault(_iterator);

        var _symbol = __webpack_require__(
          /*! ../core-js/symbol */ './node_modules/babel-runtime/core-js/symbol.js',
        );

        var _symbol2 = _interopRequireDefault(_symbol);

        var _typeof =
          typeof _symbol2.default === 'function' && typeof _iterator2.default === 'symbol'
            ? function(obj) {
                return typeof obj;
              }
            : function(obj) {
                return obj &&
                  typeof _symbol2.default === 'function' &&
                  obj.constructor === _symbol2.default &&
                  obj !== _symbol2.default.prototype
                  ? 'symbol'
                  : typeof obj;
              };

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        exports.default =
          typeof _symbol2.default === 'function' && _typeof(_iterator2.default) === 'symbol'
            ? function(obj) {
                return typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
              }
            : function(obj) {
                return obj &&
                  typeof _symbol2.default === 'function' &&
                  obj.constructor === _symbol2.default &&
                  obj !== _symbol2.default.prototype
                  ? 'symbol'
                  : typeof obj === 'undefined'
                  ? 'undefined'
                  : _typeof(obj);
              };

        /***/
      },

    /***/ './node_modules/classnames/index.js':
      /*!******************************************!*\
  !*** ./node_modules/classnames/index.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__,
          __WEBPACK_AMD_DEFINE_RESULT__; /*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
        /* global define */

        (function() {
          'use strict';

          var hasOwn = {}.hasOwnProperty;

          function classNames() {
            var classes = [];

            for (var i = 0; i < arguments.length; i++) {
              var arg = arguments[i];
              if (!arg) continue;

              var argType = typeof arg;

              if (argType === 'string' || argType === 'number') {
                classes.push(arg);
              } else if (Array.isArray(arg) && arg.length) {
                var inner = classNames.apply(null, arg);
                if (inner) {
                  classes.push(inner);
                }
              } else if (argType === 'object') {
                for (var key in arg) {
                  if (hasOwn.call(arg, key) && arg[key]) {
                    classes.push(key);
                  }
                }
              }
            }

            return classes.join(' ');
          }

          if (true && module.exports) {
            classNames.default = classNames;
            module.exports = classNames;
          } else if (true) {
            // register as 'classnames', consistent with npm package name
            !((__WEBPACK_AMD_DEFINE_ARRAY__ = []),
            (__WEBPACK_AMD_DEFINE_RESULT__ = function() {
              return classNames;
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)),
            __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
              (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
          } else {
          }
        })();

        /***/
      },

    /***/ './node_modules/component-classes/index.js':
      /*!*************************************************!*\
  !*** ./node_modules/component-classes/index.js ***!
  \*************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        /**
         * Module dependencies.
         */

        try {
          var index = __webpack_require__(
            /*! indexof */ './node_modules/component-indexof/index.js',
          );
        } catch (err) {
          var index = __webpack_require__(
            /*! component-indexof */ './node_modules/component-indexof/index.js',
          );
        }

        /**
         * Whitespace regexp.
         */

        var re = /\s+/;

        /**
         * toString reference.
         */

        var toString = Object.prototype.toString;

        /**
         * Wrap `el` in a `ClassList`.
         *
         * @param {Element} el
         * @return {ClassList}
         * @api public
         */

        module.exports = function(el) {
          return new ClassList(el);
        };

        /**
         * Initialize a new ClassList for `el`.
         *
         * @param {Element} el
         * @api private
         */

        function ClassList(el) {
          if (!el || !el.nodeType) {
            throw new Error('A DOM element reference is required');
          }
          this.el = el;
          this.list = el.classList;
        }

        /**
         * Add class `name` if not already present.
         *
         * @param {String} name
         * @return {ClassList}
         * @api public
         */

        ClassList.prototype.add = function(name) {
          // classList
          if (this.list) {
            this.list.add(name);
            return this;
          }

          // fallback
          var arr = this.array();
          var i = index(arr, name);
          if (!~i) arr.push(name);
          this.el.className = arr.join(' ');
          return this;
        };

        /**
         * Remove class `name` when present, or
         * pass a regular expression to remove
         * any which match.
         *
         * @param {String|RegExp} name
         * @return {ClassList}
         * @api public
         */

        ClassList.prototype.remove = function(name) {
          if ('[object RegExp]' == toString.call(name)) {
            return this.removeMatching(name);
          }

          // classList
          if (this.list) {
            this.list.remove(name);
            return this;
          }

          // fallback
          var arr = this.array();
          var i = index(arr, name);
          if (~i) arr.splice(i, 1);
          this.el.className = arr.join(' ');
          return this;
        };

        /**
         * Remove all classes matching `re`.
         *
         * @param {RegExp} re
         * @return {ClassList}
         * @api private
         */

        ClassList.prototype.removeMatching = function(re) {
          var arr = this.array();
          for (var i = 0; i < arr.length; i++) {
            if (re.test(arr[i])) {
              this.remove(arr[i]);
            }
          }
          return this;
        };

        /**
         * Toggle class `name`, can force state via `force`.
         *
         * For browsers that support classList, but do not support `force` yet,
         * the mistake will be detected and corrected.
         *
         * @param {String} name
         * @param {Boolean} force
         * @return {ClassList}
         * @api public
         */

        ClassList.prototype.toggle = function(name, force) {
          // classList
          if (this.list) {
            if ('undefined' !== typeof force) {
              if (force !== this.list.toggle(name, force)) {
                this.list.toggle(name); // toggle again to correct
              }
            } else {
              this.list.toggle(name);
            }
            return this;
          }

          // fallback
          if ('undefined' !== typeof force) {
            if (!force) {
              this.remove(name);
            } else {
              this.add(name);
            }
          } else {
            if (this.has(name)) {
              this.remove(name);
            } else {
              this.add(name);
            }
          }

          return this;
        };

        /**
         * Return an array of classes.
         *
         * @return {Array}
         * @api public
         */

        ClassList.prototype.array = function() {
          var className = this.el.getAttribute('class') || '';
          var str = className.replace(/^\s+|\s+$/g, '');
          var arr = str.split(re);
          if ('' === arr[0]) arr.shift();
          return arr;
        };

        /**
         * Check if class `name` is present.
         *
         * @param {String} name
         * @return {ClassList}
         * @api public
         */

        ClassList.prototype.has = ClassList.prototype.contains = function(name) {
          return this.list ? this.list.contains(name) : !!~index(this.array(), name);
        };

        /***/
      },

    /***/ './node_modules/component-indexof/index.js':
      /*!*************************************************!*\
  !*** ./node_modules/component-indexof/index.js ***!
  \*************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = function(arr, obj) {
          if (arr.indexOf) return arr.indexOf(obj);
          for (var i = 0; i < arr.length; ++i) {
            if (arr[i] === obj) return i;
          }
          return -1;
        };

        /***/
      },

    /***/ './node_modules/core-js/library/fn/object/assign.js':
      /*!**********************************************************!*\
  !*** ./node_modules/core-js/library/fn/object/assign.js ***!
  \**********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        __webpack_require__(
          /*! ../../modules/es6.object.assign */ './node_modules/core-js/library/modules/es6.object.assign.js',
        );
        module.exports = __webpack_require__(
          /*! ../../modules/_core */ './node_modules/core-js/library/modules/_core.js',
        ).Object.assign;

        /***/
      },

    /***/ './node_modules/core-js/library/fn/object/create.js':
      /*!**********************************************************!*\
  !*** ./node_modules/core-js/library/fn/object/create.js ***!
  \**********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        __webpack_require__(
          /*! ../../modules/es6.object.create */ './node_modules/core-js/library/modules/es6.object.create.js',
        );
        var $Object = __webpack_require__(
          /*! ../../modules/_core */ './node_modules/core-js/library/modules/_core.js',
        ).Object;
        module.exports = function create(P, D) {
          return $Object.create(P, D);
        };

        /***/
      },

    /***/ './node_modules/core-js/library/fn/object/define-property.js':
      /*!*******************************************************************!*\
  !*** ./node_modules/core-js/library/fn/object/define-property.js ***!
  \*******************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        __webpack_require__(
          /*! ../../modules/es6.object.define-property */ './node_modules/core-js/library/modules/es6.object.define-property.js',
        );
        var $Object = __webpack_require__(
          /*! ../../modules/_core */ './node_modules/core-js/library/modules/_core.js',
        ).Object;
        module.exports = function defineProperty(it, key, desc) {
          return $Object.defineProperty(it, key, desc);
        };

        /***/
      },

    /***/ './node_modules/core-js/library/fn/object/set-prototype-of.js':
      /*!********************************************************************!*\
  !*** ./node_modules/core-js/library/fn/object/set-prototype-of.js ***!
  \********************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        __webpack_require__(
          /*! ../../modules/es6.object.set-prototype-of */ './node_modules/core-js/library/modules/es6.object.set-prototype-of.js',
        );
        module.exports = __webpack_require__(
          /*! ../../modules/_core */ './node_modules/core-js/library/modules/_core.js',
        ).Object.setPrototypeOf;

        /***/
      },

    /***/ './node_modules/core-js/library/fn/symbol/index.js':
      /*!*********************************************************!*\
  !*** ./node_modules/core-js/library/fn/symbol/index.js ***!
  \*********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        __webpack_require__(
          /*! ../../modules/es6.symbol */ './node_modules/core-js/library/modules/es6.symbol.js',
        );
        __webpack_require__(
          /*! ../../modules/es6.object.to-string */ './node_modules/core-js/library/modules/es6.object.to-string.js',
        );
        __webpack_require__(
          /*! ../../modules/es7.symbol.async-iterator */ './node_modules/core-js/library/modules/es7.symbol.async-iterator.js',
        );
        __webpack_require__(
          /*! ../../modules/es7.symbol.observable */ './node_modules/core-js/library/modules/es7.symbol.observable.js',
        );
        module.exports = __webpack_require__(
          /*! ../../modules/_core */ './node_modules/core-js/library/modules/_core.js',
        ).Symbol;

        /***/
      },

    /***/ './node_modules/core-js/library/fn/symbol/iterator.js':
      /*!************************************************************!*\
  !*** ./node_modules/core-js/library/fn/symbol/iterator.js ***!
  \************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        __webpack_require__(
          /*! ../../modules/es6.string.iterator */ './node_modules/core-js/library/modules/es6.string.iterator.js',
        );
        __webpack_require__(
          /*! ../../modules/web.dom.iterable */ './node_modules/core-js/library/modules/web.dom.iterable.js',
        );
        module.exports = __webpack_require__(
          /*! ../../modules/_wks-ext */ './node_modules/core-js/library/modules/_wks-ext.js',
        ).f('iterator');

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_a-function.js':
      /*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_a-function.js ***!
  \*************************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = function(it) {
          if (typeof it != 'function') throw TypeError(it + ' is not a function!');
          return it;
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_add-to-unscopables.js':
      /*!*********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_add-to-unscopables.js ***!
  \*********************************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = function() {
          /* empty */
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_an-object.js':
      /*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_an-object.js ***!
  \************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var isObject = __webpack_require__(
          /*! ./_is-object */ './node_modules/core-js/library/modules/_is-object.js',
        );
        module.exports = function(it) {
          if (!isObject(it)) throw TypeError(it + ' is not an object!');
          return it;
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_array-includes.js':
      /*!*****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_array-includes.js ***!
  \*****************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        // false -> Array#indexOf
        // true  -> Array#includes
        var toIObject = __webpack_require__(
          /*! ./_to-iobject */ './node_modules/core-js/library/modules/_to-iobject.js',
        );
        var toLength = __webpack_require__(
          /*! ./_to-length */ './node_modules/core-js/library/modules/_to-length.js',
        );
        var toAbsoluteIndex = __webpack_require__(
          /*! ./_to-absolute-index */ './node_modules/core-js/library/modules/_to-absolute-index.js',
        );
        module.exports = function(IS_INCLUDES) {
          return function($this, el, fromIndex) {
            var O = toIObject($this);
            var length = toLength(O.length);
            var index = toAbsoluteIndex(fromIndex, length);
            var value;
            // Array#includes uses SameValueZero equality algorithm
            // eslint-disable-next-line no-self-compare
            if (IS_INCLUDES && el != el)
              while (length > index) {
                value = O[index++];
                // eslint-disable-next-line no-self-compare
                if (value != value) return true;
                // Array#indexOf ignores holes, Array#includes - not
              }
            else
              for (; length > index; index++)
                if (IS_INCLUDES || index in O) {
                  if (O[index] === el) return IS_INCLUDES || index || 0;
                }
            return !IS_INCLUDES && -1;
          };
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_cof.js':
      /*!******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_cof.js ***!
  \******************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        var toString = {}.toString;

        module.exports = function(it) {
          return toString.call(it).slice(8, -1);
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_core.js':
      /*!*******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_core.js ***!
  \*******************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        var core = (module.exports = { version: '2.6.9' });
        if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_ctx.js':
      /*!******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_ctx.js ***!
  \******************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        // optional / simple context binding
        var aFunction = __webpack_require__(
          /*! ./_a-function */ './node_modules/core-js/library/modules/_a-function.js',
        );
        module.exports = function(fn, that, length) {
          aFunction(fn);
          if (that === undefined) return fn;
          switch (length) {
            case 1:
              return function(a) {
                return fn.call(that, a);
              };
            case 2:
              return function(a, b) {
                return fn.call(that, a, b);
              };
            case 3:
              return function(a, b, c) {
                return fn.call(that, a, b, c);
              };
          }
          return function(/* ...args */) {
            return fn.apply(that, arguments);
          };
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_defined.js':
      /*!**********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_defined.js ***!
  \**********************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        // 7.2.1 RequireObjectCoercible(argument)
        module.exports = function(it) {
          if (it == undefined) throw TypeError("Can't call method on  " + it);
          return it;
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_descriptors.js':
      /*!**************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_descriptors.js ***!
  \**************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        // Thank's IE8 for his funny defineProperty
        module.exports = !__webpack_require__(
          /*! ./_fails */ './node_modules/core-js/library/modules/_fails.js',
        )(function() {
          return (
            Object.defineProperty({}, 'a', {
              get: function() {
                return 7;
              },
            }).a != 7
          );
        });

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_dom-create.js':
      /*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_dom-create.js ***!
  \*************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var isObject = __webpack_require__(
          /*! ./_is-object */ './node_modules/core-js/library/modules/_is-object.js',
        );
        var document = __webpack_require__(
          /*! ./_global */ './node_modules/core-js/library/modules/_global.js',
        ).document;
        // typeof document.createElement is 'object' in old IE
        var is = isObject(document) && isObject(document.createElement);
        module.exports = function(it) {
          return is ? document.createElement(it) : {};
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_enum-bug-keys.js':
      /*!****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_enum-bug-keys.js ***!
  \****************************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        // IE 8- don't enum bug keys
        module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(
          ',',
        );

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_enum-keys.js':
      /*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_enum-keys.js ***!
  \************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        // all enumerable object keys, includes symbols
        var getKeys = __webpack_require__(
          /*! ./_object-keys */ './node_modules/core-js/library/modules/_object-keys.js',
        );
        var gOPS = __webpack_require__(
          /*! ./_object-gops */ './node_modules/core-js/library/modules/_object-gops.js',
        );
        var pIE = __webpack_require__(
          /*! ./_object-pie */ './node_modules/core-js/library/modules/_object-pie.js',
        );
        module.exports = function(it) {
          var result = getKeys(it);
          var getSymbols = gOPS.f;
          if (getSymbols) {
            var symbols = getSymbols(it);
            var isEnum = pIE.f;
            var i = 0;
            var key;
            while (symbols.length > i) if (isEnum.call(it, (key = symbols[i++]))) result.push(key);
          }
          return result;
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_export.js':
      /*!*********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_export.js ***!
  \*********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var global = __webpack_require__(
          /*! ./_global */ './node_modules/core-js/library/modules/_global.js',
        );
        var core = __webpack_require__(
          /*! ./_core */ './node_modules/core-js/library/modules/_core.js',
        );
        var ctx = __webpack_require__(
          /*! ./_ctx */ './node_modules/core-js/library/modules/_ctx.js',
        );
        var hide = __webpack_require__(
          /*! ./_hide */ './node_modules/core-js/library/modules/_hide.js',
        );
        var has = __webpack_require__(
          /*! ./_has */ './node_modules/core-js/library/modules/_has.js',
        );
        var PROTOTYPE = 'prototype';

        var $export = function(type, name, source) {
          var IS_FORCED = type & $export.F;
          var IS_GLOBAL = type & $export.G;
          var IS_STATIC = type & $export.S;
          var IS_PROTO = type & $export.P;
          var IS_BIND = type & $export.B;
          var IS_WRAP = type & $export.W;
          var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
          var expProto = exports[PROTOTYPE];
          var target = IS_GLOBAL
            ? global
            : IS_STATIC
            ? global[name]
            : (global[name] || {})[PROTOTYPE];
          var key, own, out;
          if (IS_GLOBAL) source = name;
          for (key in source) {
            // contains in native
            own = !IS_FORCED && target && target[key] !== undefined;
            if (own && has(exports, key)) continue;
            // export native or passed
            out = own ? target[key] : source[key];
            // prevent global pollution for namespaces
            exports[key] =
              IS_GLOBAL && typeof target[key] != 'function'
                ? source[key]
                : // bind timers to global for call from export context
                IS_BIND && own
                ? ctx(out, global)
                : // wrap global constructors for prevent change them in library
                IS_WRAP && target[key] == out
                ? (function(C) {
                    var F = function(a, b, c) {
                      if (this instanceof C) {
                        switch (arguments.length) {
                          case 0:
                            return new C();
                          case 1:
                            return new C(a);
                          case 2:
                            return new C(a, b);
                        }
                        return new C(a, b, c);
                      }
                      return C.apply(this, arguments);
                    };
                    F[PROTOTYPE] = C[PROTOTYPE];
                    return F;
                    // make static versions for prototype methods
                  })(out)
                : IS_PROTO && typeof out == 'function'
                ? ctx(Function.call, out)
                : out;
            // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
            if (IS_PROTO) {
              (exports.virtual || (exports.virtual = {}))[key] = out;
              // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
              if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
            }
          }
        };
        // type bitmap
        $export.F = 1; // forced
        $export.G = 2; // global
        $export.S = 4; // static
        $export.P = 8; // proto
        $export.B = 16; // bind
        $export.W = 32; // wrap
        $export.U = 64; // safe
        $export.R = 128; // real proto method for `library`
        module.exports = $export;

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_fails.js':
      /*!********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_fails.js ***!
  \********************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = function(exec) {
          try {
            return !!exec();
          } catch (e) {
            return true;
          }
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_global.js':
      /*!*********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_global.js ***!
  \*********************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
        var global = (module.exports =
          typeof window != 'undefined' && window.Math == Math
            ? window
            : typeof self != 'undefined' && self.Math == Math
            ? self
            : // eslint-disable-next-line no-new-func
              Function('return this')());
        if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_has.js':
      /*!******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_has.js ***!
  \******************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        var hasOwnProperty = {}.hasOwnProperty;
        module.exports = function(it, key) {
          return hasOwnProperty.call(it, key);
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_hide.js':
      /*!*******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_hide.js ***!
  \*******************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var dP = __webpack_require__(
          /*! ./_object-dp */ './node_modules/core-js/library/modules/_object-dp.js',
        );
        var createDesc = __webpack_require__(
          /*! ./_property-desc */ './node_modules/core-js/library/modules/_property-desc.js',
        );
        module.exports = __webpack_require__(
          /*! ./_descriptors */ './node_modules/core-js/library/modules/_descriptors.js',
        )
          ? function(object, key, value) {
              return dP.f(object, key, createDesc(1, value));
            }
          : function(object, key, value) {
              object[key] = value;
              return object;
            };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_html.js':
      /*!*******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_html.js ***!
  \*******************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var document = __webpack_require__(
          /*! ./_global */ './node_modules/core-js/library/modules/_global.js',
        ).document;
        module.exports = document && document.documentElement;

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_ie8-dom-define.js':
      /*!*****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_ie8-dom-define.js ***!
  \*****************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        module.exports =
          !__webpack_require__(
            /*! ./_descriptors */ './node_modules/core-js/library/modules/_descriptors.js',
          ) &&
          !__webpack_require__(/*! ./_fails */ './node_modules/core-js/library/modules/_fails.js')(
            function() {
              return (
                Object.defineProperty(
                  __webpack_require__(
                    /*! ./_dom-create */ './node_modules/core-js/library/modules/_dom-create.js',
                  )('div'),
                  'a',
                  {
                    get: function() {
                      return 7;
                    },
                  },
                ).a != 7
              );
            },
          );

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_iobject.js':
      /*!**********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_iobject.js ***!
  \**********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        // fallback for non-array-like ES3 and non-enumerable old V8 strings
        var cof = __webpack_require__(
          /*! ./_cof */ './node_modules/core-js/library/modules/_cof.js',
        );
        // eslint-disable-next-line no-prototype-builtins
        module.exports = Object('z').propertyIsEnumerable(0)
          ? Object
          : function(it) {
              return cof(it) == 'String' ? it.split('') : Object(it);
            };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_is-array.js':
      /*!***********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_is-array.js ***!
  \***********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        // 7.2.2 IsArray(argument)
        var cof = __webpack_require__(
          /*! ./_cof */ './node_modules/core-js/library/modules/_cof.js',
        );
        module.exports =
          Array.isArray ||
          function isArray(arg) {
            return cof(arg) == 'Array';
          };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_is-object.js':
      /*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_is-object.js ***!
  \************************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = function(it) {
          return typeof it === 'object' ? it !== null : typeof it === 'function';
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_iter-create.js':
      /*!**************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_iter-create.js ***!
  \**************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';

        var create = __webpack_require__(
          /*! ./_object-create */ './node_modules/core-js/library/modules/_object-create.js',
        );
        var descriptor = __webpack_require__(
          /*! ./_property-desc */ './node_modules/core-js/library/modules/_property-desc.js',
        );
        var setToStringTag = __webpack_require__(
          /*! ./_set-to-string-tag */ './node_modules/core-js/library/modules/_set-to-string-tag.js',
        );
        var IteratorPrototype = {};

        // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
        __webpack_require__(/*! ./_hide */ './node_modules/core-js/library/modules/_hide.js')(
          IteratorPrototype,
          __webpack_require__(/*! ./_wks */ './node_modules/core-js/library/modules/_wks.js')(
            'iterator',
          ),
          function() {
            return this;
          },
        );

        module.exports = function(Constructor, NAME, next) {
          Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
          setToStringTag(Constructor, NAME + ' Iterator');
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_iter-define.js':
      /*!**************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_iter-define.js ***!
  \**************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';

        var LIBRARY = __webpack_require__(
          /*! ./_library */ './node_modules/core-js/library/modules/_library.js',
        );
        var $export = __webpack_require__(
          /*! ./_export */ './node_modules/core-js/library/modules/_export.js',
        );
        var redefine = __webpack_require__(
          /*! ./_redefine */ './node_modules/core-js/library/modules/_redefine.js',
        );
        var hide = __webpack_require__(
          /*! ./_hide */ './node_modules/core-js/library/modules/_hide.js',
        );
        var Iterators = __webpack_require__(
          /*! ./_iterators */ './node_modules/core-js/library/modules/_iterators.js',
        );
        var $iterCreate = __webpack_require__(
          /*! ./_iter-create */ './node_modules/core-js/library/modules/_iter-create.js',
        );
        var setToStringTag = __webpack_require__(
          /*! ./_set-to-string-tag */ './node_modules/core-js/library/modules/_set-to-string-tag.js',
        );
        var getPrototypeOf = __webpack_require__(
          /*! ./_object-gpo */ './node_modules/core-js/library/modules/_object-gpo.js',
        );
        var ITERATOR = __webpack_require__(
          /*! ./_wks */ './node_modules/core-js/library/modules/_wks.js',
        )('iterator');
        var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
        var FF_ITERATOR = '@@iterator';
        var KEYS = 'keys';
        var VALUES = 'values';

        var returnThis = function() {
          return this;
        };

        module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
          $iterCreate(Constructor, NAME, next);
          var getMethod = function(kind) {
            if (!BUGGY && kind in proto) return proto[kind];
            switch (kind) {
              case KEYS:
                return function keys() {
                  return new Constructor(this, kind);
                };
              case VALUES:
                return function values() {
                  return new Constructor(this, kind);
                };
            }
            return function entries() {
              return new Constructor(this, kind);
            };
          };
          var TAG = NAME + ' Iterator';
          var DEF_VALUES = DEFAULT == VALUES;
          var VALUES_BUG = false;
          var proto = Base.prototype;
          var $native = proto[ITERATOR] || proto[FF_ITERATOR] || (DEFAULT && proto[DEFAULT]);
          var $default = $native || getMethod(DEFAULT);
          var $entries = DEFAULT ? (!DEF_VALUES ? $default : getMethod('entries')) : undefined;
          var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
          var methods, key, IteratorPrototype;
          // Fix native
          if ($anyNative) {
            IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
            if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
              // Set @@toStringTag to native iterators
              setToStringTag(IteratorPrototype, TAG, true);
              // fix for some old engines
              if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function')
                hide(IteratorPrototype, ITERATOR, returnThis);
            }
          }
          // fix Array#{values, @@iterator}.name in V8 / FF
          if (DEF_VALUES && $native && $native.name !== VALUES) {
            VALUES_BUG = true;
            $default = function values() {
              return $native.call(this);
            };
          }
          // Define iterator
          if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
            hide(proto, ITERATOR, $default);
          }
          // Plug for library
          Iterators[NAME] = $default;
          Iterators[TAG] = returnThis;
          if (DEFAULT) {
            methods = {
              values: DEF_VALUES ? $default : getMethod(VALUES),
              keys: IS_SET ? $default : getMethod(KEYS),
              entries: $entries,
            };
            if (FORCED)
              for (key in methods) {
                if (!(key in proto)) redefine(proto, key, methods[key]);
              }
            else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
          }
          return methods;
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_iter-step.js':
      /*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_iter-step.js ***!
  \************************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = function(done, value) {
          return { value: value, done: !!done };
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_iterators.js':
      /*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_iterators.js ***!
  \************************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = {};

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_library.js':
      /*!**********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_library.js ***!
  \**********************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = true;

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_meta.js':
      /*!*******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_meta.js ***!
  \*******************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var META = __webpack_require__(
          /*! ./_uid */ './node_modules/core-js/library/modules/_uid.js',
        )('meta');
        var isObject = __webpack_require__(
          /*! ./_is-object */ './node_modules/core-js/library/modules/_is-object.js',
        );
        var has = __webpack_require__(
          /*! ./_has */ './node_modules/core-js/library/modules/_has.js',
        );
        var setDesc = __webpack_require__(
          /*! ./_object-dp */ './node_modules/core-js/library/modules/_object-dp.js',
        ).f;
        var id = 0;
        var isExtensible =
          Object.isExtensible ||
          function() {
            return true;
          };
        var FREEZE = !__webpack_require__(
          /*! ./_fails */ './node_modules/core-js/library/modules/_fails.js',
        )(function() {
          return isExtensible(Object.preventExtensions({}));
        });
        var setMeta = function(it) {
          setDesc(it, META, {
            value: {
              i: 'O' + ++id, // object ID
              w: {}, // weak collections IDs
            },
          });
        };
        var fastKey = function(it, create) {
          // return primitive with prefix
          if (!isObject(it))
            return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
          if (!has(it, META)) {
            // can't set metadata to uncaught frozen object
            if (!isExtensible(it)) return 'F';
            // not necessary to add metadata
            if (!create) return 'E';
            // add missing metadata
            setMeta(it);
            // return object ID
          }
          return it[META].i;
        };
        var getWeak = function(it, create) {
          if (!has(it, META)) {
            // can't set metadata to uncaught frozen object
            if (!isExtensible(it)) return true;
            // not necessary to add metadata
            if (!create) return false;
            // add missing metadata
            setMeta(it);
            // return hash weak collections IDs
          }
          return it[META].w;
        };
        // add metadata on freeze-family methods calling
        var onFreeze = function(it) {
          if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
          return it;
        };
        var meta = (module.exports = {
          KEY: META,
          NEED: false,
          fastKey: fastKey,
          getWeak: getWeak,
          onFreeze: onFreeze,
        });

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_object-assign.js':
      /*!****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-assign.js ***!
  \****************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';

        // 19.1.2.1 Object.assign(target, source, ...)
        var DESCRIPTORS = __webpack_require__(
          /*! ./_descriptors */ './node_modules/core-js/library/modules/_descriptors.js',
        );
        var getKeys = __webpack_require__(
          /*! ./_object-keys */ './node_modules/core-js/library/modules/_object-keys.js',
        );
        var gOPS = __webpack_require__(
          /*! ./_object-gops */ './node_modules/core-js/library/modules/_object-gops.js',
        );
        var pIE = __webpack_require__(
          /*! ./_object-pie */ './node_modules/core-js/library/modules/_object-pie.js',
        );
        var toObject = __webpack_require__(
          /*! ./_to-object */ './node_modules/core-js/library/modules/_to-object.js',
        );
        var IObject = __webpack_require__(
          /*! ./_iobject */ './node_modules/core-js/library/modules/_iobject.js',
        );
        var $assign = Object.assign;

        // should work with symbols and should have deterministic property order (V8 bug)
        module.exports =
          !$assign ||
          __webpack_require__(/*! ./_fails */ './node_modules/core-js/library/modules/_fails.js')(
            function() {
              var A = {};
              var B = {};
              // eslint-disable-next-line no-undef
              var S = Symbol();
              var K = 'abcdefghijklmnopqrst';
              A[S] = 7;
              K.split('').forEach(function(k) {
                B[k] = k;
              });
              return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
            },
          )
            ? function assign(target, source) {
                // eslint-disable-line no-unused-vars
                var T = toObject(target);
                var aLen = arguments.length;
                var index = 1;
                var getSymbols = gOPS.f;
                var isEnum = pIE.f;
                while (aLen > index) {
                  var S = IObject(arguments[index++]);
                  var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
                  var length = keys.length;
                  var j = 0;
                  var key;
                  while (length > j) {
                    key = keys[j++];
                    if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
                  }
                }
                return T;
              }
            : $assign;

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_object-create.js':
      /*!****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-create.js ***!
  \****************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
        var anObject = __webpack_require__(
          /*! ./_an-object */ './node_modules/core-js/library/modules/_an-object.js',
        );
        var dPs = __webpack_require__(
          /*! ./_object-dps */ './node_modules/core-js/library/modules/_object-dps.js',
        );
        var enumBugKeys = __webpack_require__(
          /*! ./_enum-bug-keys */ './node_modules/core-js/library/modules/_enum-bug-keys.js',
        );
        var IE_PROTO = __webpack_require__(
          /*! ./_shared-key */ './node_modules/core-js/library/modules/_shared-key.js',
        )('IE_PROTO');
        var Empty = function() {
          /* empty */
        };
        var PROTOTYPE = 'prototype';

        // Create object with fake `null` prototype: use iframe Object with cleared prototype
        var createDict = function() {
          // Thrash, waste and sodomy: IE GC bug
          var iframe = __webpack_require__(
            /*! ./_dom-create */ './node_modules/core-js/library/modules/_dom-create.js',
          )('iframe');
          var i = enumBugKeys.length;
          var lt = '<';
          var gt = '>';
          var iframeDocument;
          iframe.style.display = 'none';
          __webpack_require__(
            /*! ./_html */ './node_modules/core-js/library/modules/_html.js',
          ).appendChild(iframe);
          iframe.src = 'javascript:'; // eslint-disable-line no-script-url
          // createDict = iframe.contentWindow.Object;
          // html.removeChild(iframe);
          iframeDocument = iframe.contentWindow.document;
          iframeDocument.open();
          iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
          iframeDocument.close();
          createDict = iframeDocument.F;
          while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
          return createDict();
        };

        module.exports =
          Object.create ||
          function create(O, Properties) {
            var result;
            if (O !== null) {
              Empty[PROTOTYPE] = anObject(O);
              result = new Empty();
              Empty[PROTOTYPE] = null;
              // add "__proto__" for Object.getPrototypeOf polyfill
              result[IE_PROTO] = O;
            } else result = createDict();
            return Properties === undefined ? result : dPs(result, Properties);
          };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_object-dp.js':
      /*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-dp.js ***!
  \************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var anObject = __webpack_require__(
          /*! ./_an-object */ './node_modules/core-js/library/modules/_an-object.js',
        );
        var IE8_DOM_DEFINE = __webpack_require__(
          /*! ./_ie8-dom-define */ './node_modules/core-js/library/modules/_ie8-dom-define.js',
        );
        var toPrimitive = __webpack_require__(
          /*! ./_to-primitive */ './node_modules/core-js/library/modules/_to-primitive.js',
        );
        var dP = Object.defineProperty;

        exports.f = __webpack_require__(
          /*! ./_descriptors */ './node_modules/core-js/library/modules/_descriptors.js',
        )
          ? Object.defineProperty
          : function defineProperty(O, P, Attributes) {
              anObject(O);
              P = toPrimitive(P, true);
              anObject(Attributes);
              if (IE8_DOM_DEFINE)
                try {
                  return dP(O, P, Attributes);
                } catch (e) {
                  /* empty */
                }
              if ('get' in Attributes || 'set' in Attributes)
                throw TypeError('Accessors not supported!');
              if ('value' in Attributes) O[P] = Attributes.value;
              return O;
            };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_object-dps.js':
      /*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-dps.js ***!
  \*************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var dP = __webpack_require__(
          /*! ./_object-dp */ './node_modules/core-js/library/modules/_object-dp.js',
        );
        var anObject = __webpack_require__(
          /*! ./_an-object */ './node_modules/core-js/library/modules/_an-object.js',
        );
        var getKeys = __webpack_require__(
          /*! ./_object-keys */ './node_modules/core-js/library/modules/_object-keys.js',
        );

        module.exports = __webpack_require__(
          /*! ./_descriptors */ './node_modules/core-js/library/modules/_descriptors.js',
        )
          ? Object.defineProperties
          : function defineProperties(O, Properties) {
              anObject(O);
              var keys = getKeys(Properties);
              var length = keys.length;
              var i = 0;
              var P;
              while (length > i) dP.f(O, (P = keys[i++]), Properties[P]);
              return O;
            };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_object-gopd.js':
      /*!**************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-gopd.js ***!
  \**************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var pIE = __webpack_require__(
          /*! ./_object-pie */ './node_modules/core-js/library/modules/_object-pie.js',
        );
        var createDesc = __webpack_require__(
          /*! ./_property-desc */ './node_modules/core-js/library/modules/_property-desc.js',
        );
        var toIObject = __webpack_require__(
          /*! ./_to-iobject */ './node_modules/core-js/library/modules/_to-iobject.js',
        );
        var toPrimitive = __webpack_require__(
          /*! ./_to-primitive */ './node_modules/core-js/library/modules/_to-primitive.js',
        );
        var has = __webpack_require__(
          /*! ./_has */ './node_modules/core-js/library/modules/_has.js',
        );
        var IE8_DOM_DEFINE = __webpack_require__(
          /*! ./_ie8-dom-define */ './node_modules/core-js/library/modules/_ie8-dom-define.js',
        );
        var gOPD = Object.getOwnPropertyDescriptor;

        exports.f = __webpack_require__(
          /*! ./_descriptors */ './node_modules/core-js/library/modules/_descriptors.js',
        )
          ? gOPD
          : function getOwnPropertyDescriptor(O, P) {
              O = toIObject(O);
              P = toPrimitive(P, true);
              if (IE8_DOM_DEFINE)
                try {
                  return gOPD(O, P);
                } catch (e) {
                  /* empty */
                }
              if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
            };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_object-gopn-ext.js':
      /*!******************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-gopn-ext.js ***!
  \******************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
        var toIObject = __webpack_require__(
          /*! ./_to-iobject */ './node_modules/core-js/library/modules/_to-iobject.js',
        );
        var gOPN = __webpack_require__(
          /*! ./_object-gopn */ './node_modules/core-js/library/modules/_object-gopn.js',
        ).f;
        var toString = {}.toString;

        var windowNames =
          typeof window == 'object' && window && Object.getOwnPropertyNames
            ? Object.getOwnPropertyNames(window)
            : [];

        var getWindowNames = function(it) {
          try {
            return gOPN(it);
          } catch (e) {
            return windowNames.slice();
          }
        };

        module.exports.f = function getOwnPropertyNames(it) {
          return windowNames && toString.call(it) == '[object Window]'
            ? getWindowNames(it)
            : gOPN(toIObject(it));
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_object-gopn.js':
      /*!**************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-gopn.js ***!
  \**************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
        var $keys = __webpack_require__(
          /*! ./_object-keys-internal */ './node_modules/core-js/library/modules/_object-keys-internal.js',
        );
        var hiddenKeys = __webpack_require__(
          /*! ./_enum-bug-keys */ './node_modules/core-js/library/modules/_enum-bug-keys.js',
        ).concat('length', 'prototype');

        exports.f =
          Object.getOwnPropertyNames ||
          function getOwnPropertyNames(O) {
            return $keys(O, hiddenKeys);
          };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_object-gops.js':
      /*!**************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-gops.js ***!
  \**************************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        exports.f = Object.getOwnPropertySymbols;

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_object-gpo.js':
      /*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-gpo.js ***!
  \*************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
        var has = __webpack_require__(
          /*! ./_has */ './node_modules/core-js/library/modules/_has.js',
        );
        var toObject = __webpack_require__(
          /*! ./_to-object */ './node_modules/core-js/library/modules/_to-object.js',
        );
        var IE_PROTO = __webpack_require__(
          /*! ./_shared-key */ './node_modules/core-js/library/modules/_shared-key.js',
        )('IE_PROTO');
        var ObjectProto = Object.prototype;

        module.exports =
          Object.getPrototypeOf ||
          function(O) {
            O = toObject(O);
            if (has(O, IE_PROTO)) return O[IE_PROTO];
            if (typeof O.constructor == 'function' && O instanceof O.constructor) {
              return O.constructor.prototype;
            }
            return O instanceof Object ? ObjectProto : null;
          };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_object-keys-internal.js':
      /*!***********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-keys-internal.js ***!
  \***********************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var has = __webpack_require__(
          /*! ./_has */ './node_modules/core-js/library/modules/_has.js',
        );
        var toIObject = __webpack_require__(
          /*! ./_to-iobject */ './node_modules/core-js/library/modules/_to-iobject.js',
        );
        var arrayIndexOf = __webpack_require__(
          /*! ./_array-includes */ './node_modules/core-js/library/modules/_array-includes.js',
        )(false);
        var IE_PROTO = __webpack_require__(
          /*! ./_shared-key */ './node_modules/core-js/library/modules/_shared-key.js',
        )('IE_PROTO');

        module.exports = function(object, names) {
          var O = toIObject(object);
          var i = 0;
          var result = [];
          var key;
          for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
          // Don't enum bug & hidden keys
          while (names.length > i)
            if (has(O, (key = names[i++]))) {
              ~arrayIndexOf(result, key) || result.push(key);
            }
          return result;
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_object-keys.js':
      /*!**************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-keys.js ***!
  \**************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        // 19.1.2.14 / 15.2.3.14 Object.keys(O)
        var $keys = __webpack_require__(
          /*! ./_object-keys-internal */ './node_modules/core-js/library/modules/_object-keys-internal.js',
        );
        var enumBugKeys = __webpack_require__(
          /*! ./_enum-bug-keys */ './node_modules/core-js/library/modules/_enum-bug-keys.js',
        );

        module.exports =
          Object.keys ||
          function keys(O) {
            return $keys(O, enumBugKeys);
          };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_object-pie.js':
      /*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-pie.js ***!
  \*************************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        exports.f = {}.propertyIsEnumerable;

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_property-desc.js':
      /*!****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_property-desc.js ***!
  \****************************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = function(bitmap, value) {
          return {
            enumerable: !(bitmap & 1),
            configurable: !(bitmap & 2),
            writable: !(bitmap & 4),
            value: value,
          };
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_redefine.js':
      /*!***********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_redefine.js ***!
  \***********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(
          /*! ./_hide */ './node_modules/core-js/library/modules/_hide.js',
        );

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_set-proto.js':
      /*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_set-proto.js ***!
  \************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        // Works with __proto__ only. Old v8 can't work with null proto objects.
        /* eslint-disable no-proto */
        var isObject = __webpack_require__(
          /*! ./_is-object */ './node_modules/core-js/library/modules/_is-object.js',
        );
        var anObject = __webpack_require__(
          /*! ./_an-object */ './node_modules/core-js/library/modules/_an-object.js',
        );
        var check = function(O, proto) {
          anObject(O);
          if (!isObject(proto) && proto !== null)
            throw TypeError(proto + ": can't set as prototype!");
        };
        module.exports = {
          set:
            Object.setPrototypeOf ||
            ('__proto__' in {} // eslint-disable-line
              ? (function(test, buggy, set) {
                  try {
                    set = __webpack_require__(
                      /*! ./_ctx */ './node_modules/core-js/library/modules/_ctx.js',
                    )(
                      Function.call,
                      __webpack_require__(
                        /*! ./_object-gopd */ './node_modules/core-js/library/modules/_object-gopd.js',
                      ).f(Object.prototype, '__proto__').set,
                      2,
                    );
                    set(test, []);
                    buggy = !(test instanceof Array);
                  } catch (e) {
                    buggy = true;
                  }
                  return function setPrototypeOf(O, proto) {
                    check(O, proto);
                    if (buggy) O.__proto__ = proto;
                    else set(O, proto);
                    return O;
                  };
                })({}, false)
              : undefined),
          check: check,
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_set-to-string-tag.js':
      /*!********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_set-to-string-tag.js ***!
  \********************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var def = __webpack_require__(
          /*! ./_object-dp */ './node_modules/core-js/library/modules/_object-dp.js',
        ).f;
        var has = __webpack_require__(
          /*! ./_has */ './node_modules/core-js/library/modules/_has.js',
        );
        var TAG = __webpack_require__(
          /*! ./_wks */ './node_modules/core-js/library/modules/_wks.js',
        )('toStringTag');

        module.exports = function(it, tag, stat) {
          if (it && !has((it = stat ? it : it.prototype), TAG))
            def(it, TAG, { configurable: true, value: tag });
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_shared-key.js':
      /*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_shared-key.js ***!
  \*************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var shared = __webpack_require__(
          /*! ./_shared */ './node_modules/core-js/library/modules/_shared.js',
        )('keys');
        var uid = __webpack_require__(
          /*! ./_uid */ './node_modules/core-js/library/modules/_uid.js',
        );
        module.exports = function(key) {
          return shared[key] || (shared[key] = uid(key));
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_shared.js':
      /*!*********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_shared.js ***!
  \*********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var core = __webpack_require__(
          /*! ./_core */ './node_modules/core-js/library/modules/_core.js',
        );
        var global = __webpack_require__(
          /*! ./_global */ './node_modules/core-js/library/modules/_global.js',
        );
        var SHARED = '__core-js_shared__';
        var store = global[SHARED] || (global[SHARED] = {});

        (module.exports = function(key, value) {
          return store[key] || (store[key] = value !== undefined ? value : {});
        })('versions', []).push({
          version: core.version,
          mode: __webpack_require__(
            /*! ./_library */ './node_modules/core-js/library/modules/_library.js',
          )
            ? 'pure'
            : 'global',
          copyright: '© 2019 Denis Pushkarev (zloirock.ru)',
        });

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_string-at.js':
      /*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_string-at.js ***!
  \************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var toInteger = __webpack_require__(
          /*! ./_to-integer */ './node_modules/core-js/library/modules/_to-integer.js',
        );
        var defined = __webpack_require__(
          /*! ./_defined */ './node_modules/core-js/library/modules/_defined.js',
        );
        // true  -> String#at
        // false -> String#codePointAt
        module.exports = function(TO_STRING) {
          return function(that, pos) {
            var s = String(defined(that));
            var i = toInteger(pos);
            var l = s.length;
            var a, b;
            if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
            a = s.charCodeAt(i);
            return a < 0xd800 ||
              a > 0xdbff ||
              i + 1 === l ||
              (b = s.charCodeAt(i + 1)) < 0xdc00 ||
              b > 0xdfff
              ? TO_STRING
                ? s.charAt(i)
                : a
              : TO_STRING
              ? s.slice(i, i + 2)
              : ((a - 0xd800) << 10) + (b - 0xdc00) + 0x10000;
          };
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_to-absolute-index.js':
      /*!********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_to-absolute-index.js ***!
  \********************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var toInteger = __webpack_require__(
          /*! ./_to-integer */ './node_modules/core-js/library/modules/_to-integer.js',
        );
        var max = Math.max;
        var min = Math.min;
        module.exports = function(index, length) {
          index = toInteger(index);
          return index < 0 ? max(index + length, 0) : min(index, length);
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_to-integer.js':
      /*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_to-integer.js ***!
  \*************************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        // 7.1.4 ToInteger
        var ceil = Math.ceil;
        var floor = Math.floor;
        module.exports = function(it) {
          return isNaN((it = +it)) ? 0 : (it > 0 ? floor : ceil)(it);
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_to-iobject.js':
      /*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_to-iobject.js ***!
  \*************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        // to indexed object, toObject with fallback for non-array-like ES3 strings
        var IObject = __webpack_require__(
          /*! ./_iobject */ './node_modules/core-js/library/modules/_iobject.js',
        );
        var defined = __webpack_require__(
          /*! ./_defined */ './node_modules/core-js/library/modules/_defined.js',
        );
        module.exports = function(it) {
          return IObject(defined(it));
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_to-length.js':
      /*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_to-length.js ***!
  \************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        // 7.1.15 ToLength
        var toInteger = __webpack_require__(
          /*! ./_to-integer */ './node_modules/core-js/library/modules/_to-integer.js',
        );
        var min = Math.min;
        module.exports = function(it) {
          return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_to-object.js':
      /*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_to-object.js ***!
  \************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        // 7.1.13 ToObject(argument)
        var defined = __webpack_require__(
          /*! ./_defined */ './node_modules/core-js/library/modules/_defined.js',
        );
        module.exports = function(it) {
          return Object(defined(it));
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_to-primitive.js':
      /*!***************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_to-primitive.js ***!
  \***************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        // 7.1.1 ToPrimitive(input [, PreferredType])
        var isObject = __webpack_require__(
          /*! ./_is-object */ './node_modules/core-js/library/modules/_is-object.js',
        );
        // instead of the ES6 spec version, we didn't implement @@toPrimitive case
        // and the second argument - flag - preferred type is a string
        module.exports = function(it, S) {
          if (!isObject(it)) return it;
          var fn, val;
          if (S && typeof (fn = it.toString) == 'function' && !isObject((val = fn.call(it))))
            return val;
          if (typeof (fn = it.valueOf) == 'function' && !isObject((val = fn.call(it)))) return val;
          if (!S && typeof (fn = it.toString) == 'function' && !isObject((val = fn.call(it))))
            return val;
          throw TypeError("Can't convert object to primitive value");
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_uid.js':
      /*!******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_uid.js ***!
  \******************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        var id = 0;
        var px = Math.random();
        module.exports = function(key) {
          return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_wks-define.js':
      /*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_wks-define.js ***!
  \*************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var global = __webpack_require__(
          /*! ./_global */ './node_modules/core-js/library/modules/_global.js',
        );
        var core = __webpack_require__(
          /*! ./_core */ './node_modules/core-js/library/modules/_core.js',
        );
        var LIBRARY = __webpack_require__(
          /*! ./_library */ './node_modules/core-js/library/modules/_library.js',
        );
        var wksExt = __webpack_require__(
          /*! ./_wks-ext */ './node_modules/core-js/library/modules/_wks-ext.js',
        );
        var defineProperty = __webpack_require__(
          /*! ./_object-dp */ './node_modules/core-js/library/modules/_object-dp.js',
        ).f;
        module.exports = function(name) {
          var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
          if (name.charAt(0) != '_' && !(name in $Symbol))
            defineProperty($Symbol, name, { value: wksExt.f(name) });
        };

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_wks-ext.js':
      /*!**********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_wks-ext.js ***!
  \**********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        exports.f = __webpack_require__(
          /*! ./_wks */ './node_modules/core-js/library/modules/_wks.js',
        );

        /***/
      },

    /***/ './node_modules/core-js/library/modules/_wks.js':
      /*!******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_wks.js ***!
  \******************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var store = __webpack_require__(
          /*! ./_shared */ './node_modules/core-js/library/modules/_shared.js',
        )('wks');
        var uid = __webpack_require__(
          /*! ./_uid */ './node_modules/core-js/library/modules/_uid.js',
        );
        var Symbol = __webpack_require__(
          /*! ./_global */ './node_modules/core-js/library/modules/_global.js',
        ).Symbol;
        var USE_SYMBOL = typeof Symbol == 'function';

        var $exports = (module.exports = function(name) {
          return (
            store[name] ||
            (store[name] =
              (USE_SYMBOL && Symbol[name]) || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name))
          );
        });

        $exports.store = store;

        /***/
      },

    /***/ './node_modules/core-js/library/modules/es6.array.iterator.js':
      /*!********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.array.iterator.js ***!
  \********************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';

        var addToUnscopables = __webpack_require__(
          /*! ./_add-to-unscopables */ './node_modules/core-js/library/modules/_add-to-unscopables.js',
        );
        var step = __webpack_require__(
          /*! ./_iter-step */ './node_modules/core-js/library/modules/_iter-step.js',
        );
        var Iterators = __webpack_require__(
          /*! ./_iterators */ './node_modules/core-js/library/modules/_iterators.js',
        );
        var toIObject = __webpack_require__(
          /*! ./_to-iobject */ './node_modules/core-js/library/modules/_to-iobject.js',
        );

        // 22.1.3.4 Array.prototype.entries()
        // 22.1.3.13 Array.prototype.keys()
        // 22.1.3.29 Array.prototype.values()
        // 22.1.3.30 Array.prototype[@@iterator]()
        module.exports = __webpack_require__(
          /*! ./_iter-define */ './node_modules/core-js/library/modules/_iter-define.js',
        )(
          Array,
          'Array',
          function(iterated, kind) {
            this._t = toIObject(iterated); // target
            this._i = 0; // next index
            this._k = kind; // kind
            // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
          },
          function() {
            var O = this._t;
            var kind = this._k;
            var index = this._i++;
            if (!O || index >= O.length) {
              this._t = undefined;
              return step(1);
            }
            if (kind == 'keys') return step(0, index);
            if (kind == 'values') return step(0, O[index]);
            return step(0, [index, O[index]]);
          },
          'values',
        );

        // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
        Iterators.Arguments = Iterators.Array;

        addToUnscopables('keys');
        addToUnscopables('values');
        addToUnscopables('entries');

        /***/
      },

    /***/ './node_modules/core-js/library/modules/es6.object.assign.js':
      /*!*******************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.object.assign.js ***!
  \*******************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        // 19.1.3.1 Object.assign(target, source)
        var $export = __webpack_require__(
          /*! ./_export */ './node_modules/core-js/library/modules/_export.js',
        );

        $export($export.S + $export.F, 'Object', {
          assign: __webpack_require__(
            /*! ./_object-assign */ './node_modules/core-js/library/modules/_object-assign.js',
          ),
        });

        /***/
      },

    /***/ './node_modules/core-js/library/modules/es6.object.create.js':
      /*!*******************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.object.create.js ***!
  \*******************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var $export = __webpack_require__(
          /*! ./_export */ './node_modules/core-js/library/modules/_export.js',
        );
        // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
        $export($export.S, 'Object', {
          create: __webpack_require__(
            /*! ./_object-create */ './node_modules/core-js/library/modules/_object-create.js',
          ),
        });

        /***/
      },

    /***/ './node_modules/core-js/library/modules/es6.object.define-property.js':
      /*!****************************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.object.define-property.js ***!
  \****************************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var $export = __webpack_require__(
          /*! ./_export */ './node_modules/core-js/library/modules/_export.js',
        );
        // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
        $export(
          $export.S +
            $export.F *
              !__webpack_require__(
                /*! ./_descriptors */ './node_modules/core-js/library/modules/_descriptors.js',
              ),
          'Object',
          {
            defineProperty: __webpack_require__(
              /*! ./_object-dp */ './node_modules/core-js/library/modules/_object-dp.js',
            ).f,
          },
        );

        /***/
      },

    /***/ './node_modules/core-js/library/modules/es6.object.set-prototype-of.js':
      /*!*****************************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.object.set-prototype-of.js ***!
  \*****************************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        // 19.1.3.19 Object.setPrototypeOf(O, proto)
        var $export = __webpack_require__(
          /*! ./_export */ './node_modules/core-js/library/modules/_export.js',
        );
        $export($export.S, 'Object', {
          setPrototypeOf: __webpack_require__(
            /*! ./_set-proto */ './node_modules/core-js/library/modules/_set-proto.js',
          ).set,
        });

        /***/
      },

    /***/ './node_modules/core-js/library/modules/es6.object.to-string.js':
      /*!**********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.object.to-string.js ***!
  \**********************************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        /***/
      },

    /***/ './node_modules/core-js/library/modules/es6.string.iterator.js':
      /*!*********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.string.iterator.js ***!
  \*********************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';

        var $at = __webpack_require__(
          /*! ./_string-at */ './node_modules/core-js/library/modules/_string-at.js',
        )(true);

        // 21.1.3.27 String.prototype[@@iterator]()
        __webpack_require__(
          /*! ./_iter-define */ './node_modules/core-js/library/modules/_iter-define.js',
        )(
          String,
          'String',
          function(iterated) {
            this._t = String(iterated); // target
            this._i = 0; // next index
            // 21.1.5.2.1 %StringIteratorPrototype%.next()
          },
          function() {
            var O = this._t;
            var index = this._i;
            var point;
            if (index >= O.length) return { value: undefined, done: true };
            point = $at(O, index);
            this._i += point.length;
            return { value: point, done: false };
          },
        );

        /***/
      },

    /***/ './node_modules/core-js/library/modules/es6.symbol.js':
      /*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.symbol.js ***!
  \************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';

        // ECMAScript 6 symbols shim
        var global = __webpack_require__(
          /*! ./_global */ './node_modules/core-js/library/modules/_global.js',
        );
        var has = __webpack_require__(
          /*! ./_has */ './node_modules/core-js/library/modules/_has.js',
        );
        var DESCRIPTORS = __webpack_require__(
          /*! ./_descriptors */ './node_modules/core-js/library/modules/_descriptors.js',
        );
        var $export = __webpack_require__(
          /*! ./_export */ './node_modules/core-js/library/modules/_export.js',
        );
        var redefine = __webpack_require__(
          /*! ./_redefine */ './node_modules/core-js/library/modules/_redefine.js',
        );
        var META = __webpack_require__(
          /*! ./_meta */ './node_modules/core-js/library/modules/_meta.js',
        ).KEY;
        var $fails = __webpack_require__(
          /*! ./_fails */ './node_modules/core-js/library/modules/_fails.js',
        );
        var shared = __webpack_require__(
          /*! ./_shared */ './node_modules/core-js/library/modules/_shared.js',
        );
        var setToStringTag = __webpack_require__(
          /*! ./_set-to-string-tag */ './node_modules/core-js/library/modules/_set-to-string-tag.js',
        );
        var uid = __webpack_require__(
          /*! ./_uid */ './node_modules/core-js/library/modules/_uid.js',
        );
        var wks = __webpack_require__(
          /*! ./_wks */ './node_modules/core-js/library/modules/_wks.js',
        );
        var wksExt = __webpack_require__(
          /*! ./_wks-ext */ './node_modules/core-js/library/modules/_wks-ext.js',
        );
        var wksDefine = __webpack_require__(
          /*! ./_wks-define */ './node_modules/core-js/library/modules/_wks-define.js',
        );
        var enumKeys = __webpack_require__(
          /*! ./_enum-keys */ './node_modules/core-js/library/modules/_enum-keys.js',
        );
        var isArray = __webpack_require__(
          /*! ./_is-array */ './node_modules/core-js/library/modules/_is-array.js',
        );
        var anObject = __webpack_require__(
          /*! ./_an-object */ './node_modules/core-js/library/modules/_an-object.js',
        );
        var isObject = __webpack_require__(
          /*! ./_is-object */ './node_modules/core-js/library/modules/_is-object.js',
        );
        var toObject = __webpack_require__(
          /*! ./_to-object */ './node_modules/core-js/library/modules/_to-object.js',
        );
        var toIObject = __webpack_require__(
          /*! ./_to-iobject */ './node_modules/core-js/library/modules/_to-iobject.js',
        );
        var toPrimitive = __webpack_require__(
          /*! ./_to-primitive */ './node_modules/core-js/library/modules/_to-primitive.js',
        );
        var createDesc = __webpack_require__(
          /*! ./_property-desc */ './node_modules/core-js/library/modules/_property-desc.js',
        );
        var _create = __webpack_require__(
          /*! ./_object-create */ './node_modules/core-js/library/modules/_object-create.js',
        );
        var gOPNExt = __webpack_require__(
          /*! ./_object-gopn-ext */ './node_modules/core-js/library/modules/_object-gopn-ext.js',
        );
        var $GOPD = __webpack_require__(
          /*! ./_object-gopd */ './node_modules/core-js/library/modules/_object-gopd.js',
        );
        var $GOPS = __webpack_require__(
          /*! ./_object-gops */ './node_modules/core-js/library/modules/_object-gops.js',
        );
        var $DP = __webpack_require__(
          /*! ./_object-dp */ './node_modules/core-js/library/modules/_object-dp.js',
        );
        var $keys = __webpack_require__(
          /*! ./_object-keys */ './node_modules/core-js/library/modules/_object-keys.js',
        );
        var gOPD = $GOPD.f;
        var dP = $DP.f;
        var gOPN = gOPNExt.f;
        var $Symbol = global.Symbol;
        var $JSON = global.JSON;
        var _stringify = $JSON && $JSON.stringify;
        var PROTOTYPE = 'prototype';
        var HIDDEN = wks('_hidden');
        var TO_PRIMITIVE = wks('toPrimitive');
        var isEnum = {}.propertyIsEnumerable;
        var SymbolRegistry = shared('symbol-registry');
        var AllSymbols = shared('symbols');
        var OPSymbols = shared('op-symbols');
        var ObjectProto = Object[PROTOTYPE];
        var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
        var QObject = global.QObject;
        // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
        var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

        // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
        var setSymbolDesc =
          DESCRIPTORS &&
          $fails(function() {
            return (
              _create(
                dP({}, 'a', {
                  get: function() {
                    return dP(this, 'a', { value: 7 }).a;
                  },
                }),
              ).a != 7
            );
          })
            ? function(it, key, D) {
                var protoDesc = gOPD(ObjectProto, key);
                if (protoDesc) delete ObjectProto[key];
                dP(it, key, D);
                if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
              }
            : dP;

        var wrap = function(tag) {
          var sym = (AllSymbols[tag] = _create($Symbol[PROTOTYPE]));
          sym._k = tag;
          return sym;
        };

        var isSymbol =
          USE_NATIVE && typeof $Symbol.iterator == 'symbol'
            ? function(it) {
                return typeof it == 'symbol';
              }
            : function(it) {
                return it instanceof $Symbol;
              };

        var $defineProperty = function defineProperty(it, key, D) {
          if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
          anObject(it);
          key = toPrimitive(key, true);
          anObject(D);
          if (has(AllSymbols, key)) {
            if (!D.enumerable) {
              if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
              it[HIDDEN][key] = true;
            } else {
              if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
              D = _create(D, { enumerable: createDesc(0, false) });
            }
            return setSymbolDesc(it, key, D);
          }
          return dP(it, key, D);
        };
        var $defineProperties = function defineProperties(it, P) {
          anObject(it);
          var keys = enumKeys((P = toIObject(P)));
          var i = 0;
          var l = keys.length;
          var key;
          while (l > i) $defineProperty(it, (key = keys[i++]), P[key]);
          return it;
        };
        var $create = function create(it, P) {
          return P === undefined ? _create(it) : $defineProperties(_create(it), P);
        };
        var $propertyIsEnumerable = function propertyIsEnumerable(key) {
          var E = isEnum.call(this, (key = toPrimitive(key, true)));
          if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
          return E ||
            !has(this, key) ||
            !has(AllSymbols, key) ||
            (has(this, HIDDEN) && this[HIDDEN][key])
            ? E
            : true;
        };
        var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
          it = toIObject(it);
          key = toPrimitive(key, true);
          if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
          var D = gOPD(it, key);
          if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))
            D.enumerable = true;
          return D;
        };
        var $getOwnPropertyNames = function getOwnPropertyNames(it) {
          var names = gOPN(toIObject(it));
          var result = [];
          var i = 0;
          var key;
          while (names.length > i) {
            if (!has(AllSymbols, (key = names[i++])) && key != HIDDEN && key != META)
              result.push(key);
          }
          return result;
        };
        var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
          var IS_OP = it === ObjectProto;
          var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
          var result = [];
          var i = 0;
          var key;
          while (names.length > i) {
            if (has(AllSymbols, (key = names[i++])) && (IS_OP ? has(ObjectProto, key) : true))
              result.push(AllSymbols[key]);
          }
          return result;
        };

        // 19.4.1.1 Symbol([description])
        if (!USE_NATIVE) {
          $Symbol = function Symbol() {
            if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
            var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
            var $set = function(value) {
              if (this === ObjectProto) $set.call(OPSymbols, value);
              if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
              setSymbolDesc(this, tag, createDesc(1, value));
            };
            if (DESCRIPTORS && setter)
              setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
            return wrap(tag);
          };
          redefine($Symbol[PROTOTYPE], 'toString', function toString() {
            return this._k;
          });

          $GOPD.f = $getOwnPropertyDescriptor;
          $DP.f = $defineProperty;
          __webpack_require__(
            /*! ./_object-gopn */ './node_modules/core-js/library/modules/_object-gopn.js',
          ).f = gOPNExt.f = $getOwnPropertyNames;
          __webpack_require__(
            /*! ./_object-pie */ './node_modules/core-js/library/modules/_object-pie.js',
          ).f = $propertyIsEnumerable;
          $GOPS.f = $getOwnPropertySymbols;

          if (
            DESCRIPTORS &&
            !__webpack_require__(
              /*! ./_library */ './node_modules/core-js/library/modules/_library.js',
            )
          ) {
            redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
          }

          wksExt.f = function(name) {
            return wrap(wks(name));
          };
        }

        $export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

        for (
          var es6Symbols = // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
            'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(
              ',',
            ),
            j = 0;
          es6Symbols.length > j;

        )
          wks(es6Symbols[j++]);

        for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k; )
          wksDefine(wellKnownSymbols[k++]);

        $export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
          // 19.4.2.1 Symbol.for(key)
          for: function(key) {
            return has(SymbolRegistry, (key += ''))
              ? SymbolRegistry[key]
              : (SymbolRegistry[key] = $Symbol(key));
          },
          // 19.4.2.5 Symbol.keyFor(sym)
          keyFor: function keyFor(sym) {
            if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
            for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
          },
          useSetter: function() {
            setter = true;
          },
          useSimple: function() {
            setter = false;
          },
        });

        $export($export.S + $export.F * !USE_NATIVE, 'Object', {
          // 19.1.2.2 Object.create(O [, Properties])
          create: $create,
          // 19.1.2.4 Object.defineProperty(O, P, Attributes)
          defineProperty: $defineProperty,
          // 19.1.2.3 Object.defineProperties(O, Properties)
          defineProperties: $defineProperties,
          // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
          getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
          // 19.1.2.7 Object.getOwnPropertyNames(O)
          getOwnPropertyNames: $getOwnPropertyNames,
          // 19.1.2.8 Object.getOwnPropertySymbols(O)
          getOwnPropertySymbols: $getOwnPropertySymbols,
        });

        // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
        // https://bugs.chromium.org/p/v8/issues/detail?id=3443
        var FAILS_ON_PRIMITIVES = $fails(function() {
          $GOPS.f(1);
        });

        $export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
          getOwnPropertySymbols: function getOwnPropertySymbols(it) {
            return $GOPS.f(toObject(it));
          },
        });

        // 24.3.2 JSON.stringify(value [, replacer [, space]])
        $JSON &&
          $export(
            $export.S +
              $export.F *
                (!USE_NATIVE ||
                  $fails(function() {
                    var S = $Symbol();
                    // MS Edge converts symbol values to JSON as {}
                    // WebKit converts symbol values to JSON as null
                    // V8 throws on boxed symbols
                    return (
                      _stringify([S]) != '[null]' ||
                      _stringify({ a: S }) != '{}' ||
                      _stringify(Object(S)) != '{}'
                    );
                  })),
            'JSON',
            {
              stringify: function stringify(it) {
                var args = [it];
                var i = 1;
                var replacer, $replacer;
                while (arguments.length > i) args.push(arguments[i++]);
                $replacer = replacer = args[1];
                if ((!isObject(replacer) && it === undefined) || isSymbol(it)) return; // IE8 returns string on undefined
                if (!isArray(replacer))
                  replacer = function(key, value) {
                    if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
                    if (!isSymbol(value)) return value;
                  };
                args[1] = replacer;
                return _stringify.apply($JSON, args);
              },
            },
          );

        // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
        $Symbol[PROTOTYPE][TO_PRIMITIVE] ||
          __webpack_require__(/*! ./_hide */ './node_modules/core-js/library/modules/_hide.js')(
            $Symbol[PROTOTYPE],
            TO_PRIMITIVE,
            $Symbol[PROTOTYPE].valueOf,
          );
        // 19.4.3.5 Symbol.prototype[@@toStringTag]
        setToStringTag($Symbol, 'Symbol');
        // 20.2.1.9 Math[@@toStringTag]
        setToStringTag(Math, 'Math', true);
        // 24.3.3 JSON[@@toStringTag]
        setToStringTag(global.JSON, 'JSON', true);

        /***/
      },

    /***/ './node_modules/core-js/library/modules/es7.symbol.async-iterator.js':
      /*!***************************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es7.symbol.async-iterator.js ***!
  \***************************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        __webpack_require__(
          /*! ./_wks-define */ './node_modules/core-js/library/modules/_wks-define.js',
        )('asyncIterator');

        /***/
      },

    /***/ './node_modules/core-js/library/modules/es7.symbol.observable.js':
      /*!***********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es7.symbol.observable.js ***!
  \***********************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        __webpack_require__(
          /*! ./_wks-define */ './node_modules/core-js/library/modules/_wks-define.js',
        )('observable');

        /***/
      },

    /***/ './node_modules/core-js/library/modules/web.dom.iterable.js':
      /*!******************************************************************!*\
  !*** ./node_modules/core-js/library/modules/web.dom.iterable.js ***!
  \******************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        __webpack_require__(
          /*! ./es6.array.iterator */ './node_modules/core-js/library/modules/es6.array.iterator.js',
        );
        var global = __webpack_require__(
          /*! ./_global */ './node_modules/core-js/library/modules/_global.js',
        );
        var hide = __webpack_require__(
          /*! ./_hide */ './node_modules/core-js/library/modules/_hide.js',
        );
        var Iterators = __webpack_require__(
          /*! ./_iterators */ './node_modules/core-js/library/modules/_iterators.js',
        );
        var TO_STRING_TAG = __webpack_require__(
          /*! ./_wks */ './node_modules/core-js/library/modules/_wks.js',
        )('toStringTag');

        var DOMIterables = (
          'CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
          'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
          'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
          'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
          'TextTrackList,TouchList'
        ).split(',');

        for (var i = 0; i < DOMIterables.length; i++) {
          var NAME = DOMIterables[i];
          var Collection = global[NAME];
          var proto = Collection && Collection.prototype;
          if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
          Iterators[NAME] = Iterators.Array;
        }

        /***/
      },

    /***/ './node_modules/css-animation/es/Event.js':
      /*!************************************************!*\
  !*** ./node_modules/css-animation/es/Event.js ***!
  \************************************************/
      /*! exports provided: default */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        var START_EVENT_NAME_MAP = {
          transitionstart: {
            transition: 'transitionstart',
            WebkitTransition: 'webkitTransitionStart',
            MozTransition: 'mozTransitionStart',
            OTransition: 'oTransitionStart',
            msTransition: 'MSTransitionStart',
          },

          animationstart: {
            animation: 'animationstart',
            WebkitAnimation: 'webkitAnimationStart',
            MozAnimation: 'mozAnimationStart',
            OAnimation: 'oAnimationStart',
            msAnimation: 'MSAnimationStart',
          },
        };

        var END_EVENT_NAME_MAP = {
          transitionend: {
            transition: 'transitionend',
            WebkitTransition: 'webkitTransitionEnd',
            MozTransition: 'mozTransitionEnd',
            OTransition: 'oTransitionEnd',
            msTransition: 'MSTransitionEnd',
          },

          animationend: {
            animation: 'animationend',
            WebkitAnimation: 'webkitAnimationEnd',
            MozAnimation: 'mozAnimationEnd',
            OAnimation: 'oAnimationEnd',
            msAnimation: 'MSAnimationEnd',
          },
        };

        var startEvents = [];
        var endEvents = [];

        function detectEvents() {
          var testEl = document.createElement('div');
          var style = testEl.style;

          if (!('AnimationEvent' in window)) {
            delete START_EVENT_NAME_MAP.animationstart.animation;
            delete END_EVENT_NAME_MAP.animationend.animation;
          }

          if (!('TransitionEvent' in window)) {
            delete START_EVENT_NAME_MAP.transitionstart.transition;
            delete END_EVENT_NAME_MAP.transitionend.transition;
          }

          function process(EVENT_NAME_MAP, events) {
            for (var baseEventName in EVENT_NAME_MAP) {
              if (EVENT_NAME_MAP.hasOwnProperty(baseEventName)) {
                var baseEvents = EVENT_NAME_MAP[baseEventName];
                for (var styleName in baseEvents) {
                  if (styleName in style) {
                    events.push(baseEvents[styleName]);
                    break;
                  }
                }
              }
            }
          }

          process(START_EVENT_NAME_MAP, startEvents);
          process(END_EVENT_NAME_MAP, endEvents);
        }

        if (typeof window !== 'undefined' && typeof document !== 'undefined') {
          detectEvents();
        }

        function addEventListener(node, eventName, eventListener) {
          node.addEventListener(eventName, eventListener, false);
        }

        function removeEventListener(node, eventName, eventListener) {
          node.removeEventListener(eventName, eventListener, false);
        }

        var TransitionEvents = {
          // Start events
          startEvents: startEvents,

          addStartEventListener: function addStartEventListener(node, eventListener) {
            if (startEvents.length === 0) {
              window.setTimeout(eventListener, 0);
              return;
            }
            startEvents.forEach(function(startEvent) {
              addEventListener(node, startEvent, eventListener);
            });
          },
          removeStartEventListener: function removeStartEventListener(node, eventListener) {
            if (startEvents.length === 0) {
              return;
            }
            startEvents.forEach(function(startEvent) {
              removeEventListener(node, startEvent, eventListener);
            });
          },

          // End events
          endEvents: endEvents,

          addEndEventListener: function addEndEventListener(node, eventListener) {
            if (endEvents.length === 0) {
              window.setTimeout(eventListener, 0);
              return;
            }
            endEvents.forEach(function(endEvent) {
              addEventListener(node, endEvent, eventListener);
            });
          },
          removeEndEventListener: function removeEndEventListener(node, eventListener) {
            if (endEvents.length === 0) {
              return;
            }
            endEvents.forEach(function(endEvent) {
              removeEventListener(node, endEvent, eventListener);
            });
          },
        };

        /* harmony default export */ __webpack_exports__['default'] = TransitionEvents;

        /***/
      },

    /***/ './node_modules/css-animation/es/index.js':
      /*!************************************************!*\
  !*** ./node_modules/css-animation/es/index.js ***!
  \************************************************/
      /*! exports provided: isCssAnimationSupported, default */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          'isCssAnimationSupported',
          function() {
            return isCssAnimationSupported;
          },
        );
        /* harmony import */ var babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! babel-runtime/helpers/typeof */ './node_modules/babel-runtime/helpers/typeof.js',
        );
        /* harmony import */ var babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__,
        );
        /* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          /*! ./Event */ './node_modules/css-animation/es/Event.js',
        );
        /* harmony import */ var component_classes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          /*! component-classes */ './node_modules/component-classes/index.js',
        );
        /* harmony import */ var component_classes__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __webpack_require__.n(
          component_classes__WEBPACK_IMPORTED_MODULE_2__,
        );

        var isCssAnimationSupported =
          _Event__WEBPACK_IMPORTED_MODULE_1__['default'].endEvents.length !== 0;
        var capitalPrefixes = [
          'Webkit',
          'Moz',
          'O',
          // ms is special .... !
          'ms',
        ];
        var prefixes = ['-webkit-', '-moz-', '-o-', 'ms-', ''];

        function getStyleProperty(node, name) {
          // old ff need null, https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle
          var style = window.getComputedStyle(node, null);
          var ret = '';
          for (var i = 0; i < prefixes.length; i++) {
            ret = style.getPropertyValue(prefixes[i] + name);
            if (ret) {
              break;
            }
          }
          return ret;
        }

        function fixBrowserByTimeout(node) {
          if (isCssAnimationSupported) {
            var transitionDelay = parseFloat(getStyleProperty(node, 'transition-delay')) || 0;
            var transitionDuration = parseFloat(getStyleProperty(node, 'transition-duration')) || 0;
            var animationDelay = parseFloat(getStyleProperty(node, 'animation-delay')) || 0;
            var animationDuration = parseFloat(getStyleProperty(node, 'animation-duration')) || 0;
            var time = Math.max(
              transitionDuration + transitionDelay,
              animationDuration + animationDelay,
            );
            // sometimes, browser bug
            node.rcEndAnimTimeout = setTimeout(function() {
              node.rcEndAnimTimeout = null;
              if (node.rcEndListener) {
                node.rcEndListener();
              }
            }, time * 1000 + 200);
          }
        }

        function clearBrowserBugTimeout(node) {
          if (node.rcEndAnimTimeout) {
            clearTimeout(node.rcEndAnimTimeout);
            node.rcEndAnimTimeout = null;
          }
        }

        var cssAnimation = function cssAnimation(node, transitionName, endCallback) {
          var nameIsObj =
            (typeof transitionName === 'undefined'
              ? 'undefined'
              : babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(
                  transitionName,
                )) === 'object';
          var className = nameIsObj ? transitionName.name : transitionName;
          var activeClassName = nameIsObj ? transitionName.active : transitionName + '-active';
          var end = endCallback;
          var start = void 0;
          var active = void 0;
          var nodeClasses = component_classes__WEBPACK_IMPORTED_MODULE_2___default()(node);

          if (endCallback && Object.prototype.toString.call(endCallback) === '[object Object]') {
            end = endCallback.end;
            start = endCallback.start;
            active = endCallback.active;
          }

          if (node.rcEndListener) {
            node.rcEndListener();
          }

          node.rcEndListener = function(e) {
            if (e && e.target !== node) {
              return;
            }

            if (node.rcAnimTimeout) {
              clearTimeout(node.rcAnimTimeout);
              node.rcAnimTimeout = null;
            }

            clearBrowserBugTimeout(node);

            nodeClasses.remove(className);
            nodeClasses.remove(activeClassName);

            _Event__WEBPACK_IMPORTED_MODULE_1__['default'].removeEndEventListener(
              node,
              node.rcEndListener,
            );
            node.rcEndListener = null;

            // Usually this optional end is used for informing an owner of
            // a leave animation and telling it to remove the child.
            if (end) {
              end();
            }
          };

          _Event__WEBPACK_IMPORTED_MODULE_1__['default'].addEndEventListener(
            node,
            node.rcEndListener,
          );

          if (start) {
            start();
          }
          nodeClasses.add(className);

          node.rcAnimTimeout = setTimeout(function() {
            node.rcAnimTimeout = null;
            nodeClasses.add(activeClassName);
            if (active) {
              setTimeout(active, 0);
            }
            fixBrowserByTimeout(node);
            // 30ms for firefox
          }, 30);

          return {
            stop: function stop() {
              if (node.rcEndListener) {
                node.rcEndListener();
              }
            },
          };
        };

        cssAnimation.style = function(node, style, callback) {
          if (node.rcEndListener) {
            node.rcEndListener();
          }

          node.rcEndListener = function(e) {
            if (e && e.target !== node) {
              return;
            }

            if (node.rcAnimTimeout) {
              clearTimeout(node.rcAnimTimeout);
              node.rcAnimTimeout = null;
            }

            clearBrowserBugTimeout(node);

            _Event__WEBPACK_IMPORTED_MODULE_1__['default'].removeEndEventListener(
              node,
              node.rcEndListener,
            );
            node.rcEndListener = null;

            // Usually this optional callback is used for informing an owner of
            // a leave animation and telling it to remove the child.
            if (callback) {
              callback();
            }
          };

          _Event__WEBPACK_IMPORTED_MODULE_1__['default'].addEndEventListener(
            node,
            node.rcEndListener,
          );

          node.rcAnimTimeout = setTimeout(function() {
            for (var s in style) {
              if (style.hasOwnProperty(s)) {
                node.style[s] = style[s];
              }
            }
            node.rcAnimTimeout = null;
            fixBrowserByTimeout(node);
          }, 0);
        };

        cssAnimation.setTransition = function(node, p, value) {
          var property = p;
          var v = value;
          if (value === undefined) {
            v = property;
            property = '';
          }
          property = property || '';
          capitalPrefixes.forEach(function(prefix) {
            node.style[prefix + 'Transition' + property] = v;
          });
        };

        cssAnimation.isCssAnimationSupported = isCssAnimationSupported;

        /* harmony default export */ __webpack_exports__['default'] = cssAnimation;

        /***/
      },

    /***/ './node_modules/dom-align/dist-web/index.js':
      /*!**************************************************!*\
  !*** ./node_modules/dom-align/dist-web/index.js ***!
  \**************************************************/
      /*! exports provided: default, alignElement, alignPoint */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          'alignElement',
          function() {
            return alignElement;
          },
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          'alignPoint',
          function() {
            return alignPoint;
          },
        );
        function _typeof(obj) {
          if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
            _typeof = function(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            };
          }

          return _typeof(obj);
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          } else {
            obj[key] = value;
          }

          return obj;
        }

        function ownKeys(object, enumerableOnly) {
          var keys = Object.keys(object);

          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly)
              symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              });
            keys.push.apply(keys, symbols);
          }

          return keys;
        }

        function _objectSpread2(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};

            if (i % 2) {
              ownKeys(source, true).forEach(function(key) {
                _defineProperty(target, key, source[key]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
            } else {
              ownKeys(source).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
              });
            }
          }

          return target;
        }

        var vendorPrefix;
        var jsCssMap = {
          Webkit: '-webkit-',
          Moz: '-moz-',
          // IE did it wrong again ...
          ms: '-ms-',
          O: '-o-',
        };

        function getVendorPrefix() {
          if (vendorPrefix !== undefined) {
            return vendorPrefix;
          }

          vendorPrefix = '';
          var style = document.createElement('p').style;
          var testProp = 'Transform';

          for (var key in jsCssMap) {
            if (key + testProp in style) {
              vendorPrefix = key;
            }
          }

          return vendorPrefix;
        }

        function getTransitionName() {
          return getVendorPrefix()
            ? ''.concat(getVendorPrefix(), 'TransitionProperty')
            : 'transitionProperty';
        }

        function getTransformName() {
          return getVendorPrefix() ? ''.concat(getVendorPrefix(), 'Transform') : 'transform';
        }
        function setTransitionProperty(node, value) {
          var name = getTransitionName();

          if (name) {
            node.style[name] = value;

            if (name !== 'transitionProperty') {
              node.style.transitionProperty = value;
            }
          }
        }

        function setTransform(node, value) {
          var name = getTransformName();

          if (name) {
            node.style[name] = value;

            if (name !== 'transform') {
              node.style.transform = value;
            }
          }
        }

        function getTransitionProperty(node) {
          return node.style.transitionProperty || node.style[getTransitionName()];
        }
        function getTransformXY(node) {
          var style = window.getComputedStyle(node, null);
          var transform =
            style.getPropertyValue('transform') || style.getPropertyValue(getTransformName());

          if (transform && transform !== 'none') {
            var matrix = transform.replace(/[^0-9\-.,]/g, '').split(',');
            return {
              x: parseFloat(matrix[12] || matrix[4], 0),
              y: parseFloat(matrix[13] || matrix[5], 0),
            };
          }

          return {
            x: 0,
            y: 0,
          };
        }
        var matrix2d = /matrix\((.*)\)/;
        var matrix3d = /matrix3d\((.*)\)/;
        function setTransformXY(node, xy) {
          var style = window.getComputedStyle(node, null);
          var transform =
            style.getPropertyValue('transform') || style.getPropertyValue(getTransformName());

          if (transform && transform !== 'none') {
            var arr;
            var match2d = transform.match(matrix2d);

            if (match2d) {
              match2d = match2d[1];
              arr = match2d.split(',').map(function(item) {
                return parseFloat(item, 10);
              });
              arr[4] = xy.x;
              arr[5] = xy.y;
              setTransform(node, 'matrix('.concat(arr.join(','), ')'));
            } else {
              var match3d = transform.match(matrix3d)[1];
              arr = match3d.split(',').map(function(item) {
                return parseFloat(item, 10);
              });
              arr[12] = xy.x;
              arr[13] = xy.y;
              setTransform(node, 'matrix3d('.concat(arr.join(','), ')'));
            }
          } else {
            setTransform(
              node,
              'translateX('.concat(xy.x, 'px) translateY(').concat(xy.y, 'px) translateZ(0)'),
            );
          }
        }

        var RE_NUM = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source;
        var getComputedStyleX; // https://stackoverflow.com/a/3485654/3040605

        function forceRelayout(elem) {
          var originalStyle = elem.style.display;
          elem.style.display = 'none';
          elem.offsetHeight; // eslint-disable-line

          elem.style.display = originalStyle;
        }

        function css(el, name, v) {
          var value = v;

          if (_typeof(name) === 'object') {
            for (var i in name) {
              if (name.hasOwnProperty(i)) {
                css(el, i, name[i]);
              }
            }

            return undefined;
          }

          if (typeof value !== 'undefined') {
            if (typeof value === 'number') {
              value = ''.concat(value, 'px');
            }

            el.style[name] = value;
            return undefined;
          }

          return getComputedStyleX(el, name);
        }

        function getClientPosition(elem) {
          var box;
          var x;
          var y;
          var doc = elem.ownerDocument;
          var body = doc.body;
          var docElem = doc && doc.documentElement; // 根据 GBS 最新数据，A-Grade Browsers 都已支持 getBoundingClientRect 方法，不用再考虑传统的实现方式

          box = elem.getBoundingClientRect(); // 注：jQuery 还考虑减去 docElem.clientLeft/clientTop
          // 但测试发现，这样反而会导致当 html 和 body 有边距/边框样式时，获取的值不正确
          // 此外，ie6 会忽略 html 的 margin 值，幸运地是没有谁会去设置 html 的 margin

          x = box.left;
          y = box.top; // In IE, most of the time, 2 extra pixels are added to the top and left
          // due to the implicit 2-pixel inset border.  In IE6/7 quirks mode and
          // IE6 standards mode, this border can be overridden by setting the
          // document element's border to zero -- thus, we cannot rely on the
          // offset always being 2 pixels.
          // In quirks mode, the offset can be determined by querying the body's
          // clientLeft/clientTop, but in standards mode, it is found by querying
          // the document element's clientLeft/clientTop.  Since we already called
          // getClientBoundingRect we have already forced a reflow, so it is not
          // too expensive just to query them all.
          // ie 下应该减去窗口的边框吧，毕竟默认 absolute 都是相对窗口定位的
          // 窗口边框标准是设 documentElement ,quirks 时设置 body
          // 最好禁止在 body 和 html 上边框 ，但 ie < 9 html 默认有 2px ，减去
          // 但是非 ie 不可能设置窗口边框，body html 也不是窗口 ,ie 可以通过 html,body 设置
          // 标准 ie 下 docElem.clientTop 就是 border-top
          // ie7 html 即窗口边框改变不了。永远为 2
          // 但标准 firefox/chrome/ie9 下 docElem.clientTop 是窗口边框，即使设了 border-top 也为 0

          x -= docElem.clientLeft || body.clientLeft || 0;
          y -= docElem.clientTop || body.clientTop || 0;
          return {
            left: x,
            top: y,
          };
        }

        function getScroll(w, top) {
          var ret = w['page'.concat(top ? 'Y' : 'X', 'Offset')];
          var method = 'scroll'.concat(top ? 'Top' : 'Left');

          if (typeof ret !== 'number') {
            var d = w.document; // ie6,7,8 standard mode

            ret = d.documentElement[method];

            if (typeof ret !== 'number') {
              // quirks mode
              ret = d.body[method];
            }
          }

          return ret;
        }

        function getScrollLeft(w) {
          return getScroll(w);
        }

        function getScrollTop(w) {
          return getScroll(w, true);
        }

        function getOffset(el) {
          var pos = getClientPosition(el);
          var doc = el.ownerDocument;
          var w = doc.defaultView || doc.parentWindow;
          pos.left += getScrollLeft(w);
          pos.top += getScrollTop(w);
          return pos;
        }
        /**
         * A crude way of determining if an object is a window
         * @member util
         */

        function isWindow(obj) {
          // must use == for ie8

          /* eslint eqeqeq:0 */
          return obj !== null && obj !== undefined && obj == obj.window;
        }

        function getDocument(node) {
          if (isWindow(node)) {
            return node.document;
          }

          if (node.nodeType === 9) {
            return node;
          }

          return node.ownerDocument;
        }

        function _getComputedStyle(elem, name, cs) {
          var computedStyle = cs;
          var val = '';
          var d = getDocument(elem);
          computedStyle = computedStyle || d.defaultView.getComputedStyle(elem, null); // https://github.com/kissyteam/kissy/issues/61

          if (computedStyle) {
            val = computedStyle.getPropertyValue(name) || computedStyle[name];
          }

          return val;
        }

        var _RE_NUM_NO_PX = new RegExp('^('.concat(RE_NUM, ')(?!px)[a-z%]+$'), 'i');

        var RE_POS = /^(top|right|bottom|left)$/;
        var CURRENT_STYLE = 'currentStyle';
        var RUNTIME_STYLE = 'runtimeStyle';
        var LEFT = 'left';
        var PX = 'px';

        function _getComputedStyleIE(elem, name) {
          // currentStyle maybe null
          // http://msdn.microsoft.com/en-us/library/ms535231.aspx
          var ret = elem[CURRENT_STYLE] && elem[CURRENT_STYLE][name]; // 当 width/height 设置为百分比时，通过 pixelLeft 方式转换的 width/height 值
          // 一开始就处理了! CUSTOM_STYLE.height,CUSTOM_STYLE.width ,cssHook 解决@2011-08-19
          // 在 ie 下不对，需要直接用 offset 方式
          // borderWidth 等值也有问题，但考虑到 borderWidth 设为百分比的概率很小，这里就不考虑了
          // From the awesome hack by Dean Edwards
          // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
          // If we're not dealing with a regular pixel number
          // but a number that has a weird ending, we need to convert it to pixels
          // exclude left right for relativity

          if (_RE_NUM_NO_PX.test(ret) && !RE_POS.test(name)) {
            // Remember the original values
            var style = elem.style;
            var left = style[LEFT];
            var rsLeft = elem[RUNTIME_STYLE][LEFT]; // prevent flashing of content

            elem[RUNTIME_STYLE][LEFT] = elem[CURRENT_STYLE][LEFT]; // Put in the new values to get a computed value out

            style[LEFT] = name === 'fontSize' ? '1em' : ret || 0;
            ret = style.pixelLeft + PX; // Revert the changed values

            style[LEFT] = left;
            elem[RUNTIME_STYLE][LEFT] = rsLeft;
          }

          return ret === '' ? 'auto' : ret;
        }

        if (typeof window !== 'undefined') {
          getComputedStyleX = window.getComputedStyle ? _getComputedStyle : _getComputedStyleIE;
        }

        function getOffsetDirection(dir, option) {
          if (dir === 'left') {
            return option.useCssRight ? 'right' : dir;
          }

          return option.useCssBottom ? 'bottom' : dir;
        }

        function oppositeOffsetDirection(dir) {
          if (dir === 'left') {
            return 'right';
          } else if (dir === 'right') {
            return 'left';
          } else if (dir === 'top') {
            return 'bottom';
          } else if (dir === 'bottom') {
            return 'top';
          }
        } // 设置 elem 相对 elem.ownerDocument 的坐标

        function setLeftTop(elem, offset, option) {
          // set position first, in-case top/left are set even on static elem
          if (css(elem, 'position') === 'static') {
            elem.style.position = 'relative';
          }

          var presetH = -999;
          var presetV = -999;
          var horizontalProperty = getOffsetDirection('left', option);
          var verticalProperty = getOffsetDirection('top', option);
          var oppositeHorizontalProperty = oppositeOffsetDirection(horizontalProperty);
          var oppositeVerticalProperty = oppositeOffsetDirection(verticalProperty);

          if (horizontalProperty !== 'left') {
            presetH = 999;
          }

          if (verticalProperty !== 'top') {
            presetV = 999;
          }

          var originalTransition = '';
          var originalOffset = getOffset(elem);

          if ('left' in offset || 'top' in offset) {
            originalTransition = getTransitionProperty(elem) || '';
            setTransitionProperty(elem, 'none');
          }

          if ('left' in offset) {
            elem.style[oppositeHorizontalProperty] = '';
            elem.style[horizontalProperty] = ''.concat(presetH, 'px');
          }

          if ('top' in offset) {
            elem.style[oppositeVerticalProperty] = '';
            elem.style[verticalProperty] = ''.concat(presetV, 'px');
          } // force relayout

          forceRelayout(elem);
          var old = getOffset(elem);
          var originalStyle = {};

          for (var key in offset) {
            if (offset.hasOwnProperty(key)) {
              var dir = getOffsetDirection(key, option);
              var preset = key === 'left' ? presetH : presetV;
              var off = originalOffset[key] - old[key];

              if (dir === key) {
                originalStyle[dir] = preset + off;
              } else {
                originalStyle[dir] = preset - off;
              }
            }
          }

          css(elem, originalStyle); // force relayout

          forceRelayout(elem);

          if ('left' in offset || 'top' in offset) {
            setTransitionProperty(elem, originalTransition);
          }

          var ret = {};

          for (var _key in offset) {
            if (offset.hasOwnProperty(_key)) {
              var _dir = getOffsetDirection(_key, option);

              var _off = offset[_key] - originalOffset[_key];

              if (_key === _dir) {
                ret[_dir] = originalStyle[_dir] + _off;
              } else {
                ret[_dir] = originalStyle[_dir] - _off;
              }
            }
          }

          css(elem, ret);
        }

        function setTransform$1(elem, offset) {
          var originalOffset = getOffset(elem);
          var originalXY = getTransformXY(elem);
          var resultXY = {
            x: originalXY.x,
            y: originalXY.y,
          };

          if ('left' in offset) {
            resultXY.x = originalXY.x + offset.left - originalOffset.left;
          }

          if ('top' in offset) {
            resultXY.y = originalXY.y + offset.top - originalOffset.top;
          }

          setTransformXY(elem, resultXY);
        }

        function setOffset(elem, offset, option) {
          if (option.ignoreShake) {
            var oriOffset = getOffset(elem);
            var oLeft = oriOffset.left.toFixed(0);
            var oTop = oriOffset.top.toFixed(0);
            var tLeft = offset.left.toFixed(0);
            var tTop = offset.top.toFixed(0);

            if (oLeft === tLeft && oTop === tTop) {
              return;
            }
          }

          if (option.useCssRight || option.useCssBottom) {
            setLeftTop(elem, offset, option);
          } else if (option.useCssTransform && getTransformName() in document.body.style) {
            setTransform$1(elem, offset);
          } else {
            setLeftTop(elem, offset, option);
          }
        }

        function each(arr, fn) {
          for (var i = 0; i < arr.length; i++) {
            fn(arr[i]);
          }
        }

        function isBorderBoxFn(elem) {
          return getComputedStyleX(elem, 'boxSizing') === 'border-box';
        }

        var BOX_MODELS = ['margin', 'border', 'padding'];
        var CONTENT_INDEX = -1;
        var PADDING_INDEX = 2;
        var BORDER_INDEX = 1;
        var MARGIN_INDEX = 0;

        function swap(elem, options, callback) {
          var old = {};
          var style = elem.style;
          var name; // Remember the old values, and insert the new ones

          for (name in options) {
            if (options.hasOwnProperty(name)) {
              old[name] = style[name];
              style[name] = options[name];
            }
          }

          callback.call(elem); // Revert the old values

          for (name in options) {
            if (options.hasOwnProperty(name)) {
              style[name] = old[name];
            }
          }
        }

        function getPBMWidth(elem, props, which) {
          var value = 0;
          var prop;
          var j;
          var i;

          for (j = 0; j < props.length; j++) {
            prop = props[j];

            if (prop) {
              for (i = 0; i < which.length; i++) {
                var cssProp = void 0;

                if (prop === 'border') {
                  cssProp = ''.concat(prop).concat(which[i], 'Width');
                } else {
                  cssProp = prop + which[i];
                }

                value += parseFloat(getComputedStyleX(elem, cssProp)) || 0;
              }
            }
          }

          return value;
        }

        var domUtils = {
          getParent: function getParent(element) {
            var parent = element;

            do {
              if (parent.nodeType === 11 && parent.host) {
                parent = parent.host;
              } else {
                parent = parent.parentNode;
              }
            } while (parent && parent.nodeType !== 1 && parent.nodeType !== 9);

            return parent;
          },
        };
        each(['Width', 'Height'], function(name) {
          domUtils['doc'.concat(name)] = function(refWin) {
            var d = refWin.document;
            return Math.max(
              // firefox chrome documentElement.scrollHeight< body.scrollHeight
              // ie standard mode : documentElement.scrollHeight> body.scrollHeight
              d.documentElement['scroll'.concat(name)], // quirks : documentElement.scrollHeight 最大等于可视窗口多一点？
              d.body['scroll'.concat(name)],
              domUtils['viewport'.concat(name)](d),
            );
          };

          domUtils['viewport'.concat(name)] = function(win) {
            // pc browser includes scrollbar in window.innerWidth
            var prop = 'client'.concat(name);
            var doc = win.document;
            var body = doc.body;
            var documentElement = doc.documentElement;
            var documentElementProp = documentElement[prop]; // 标准模式取 documentElement
            // backcompat 取 body

            return (
              (doc.compatMode === 'CSS1Compat' && documentElementProp) ||
              (body && body[prop]) ||
              documentElementProp
            );
          };
        });
        /*
 得到元素的大小信息
 @param elem
 @param name
 @param {String} [extra]  'padding' : (css width) + padding
 'border' : (css width) + padding + border
 'margin' : (css width) + padding + border + margin
 */

        function getWH(elem, name, ex) {
          var extra = ex;

          if (isWindow(elem)) {
            return name === 'width' ? domUtils.viewportWidth(elem) : domUtils.viewportHeight(elem);
          } else if (elem.nodeType === 9) {
            return name === 'width' ? domUtils.docWidth(elem) : domUtils.docHeight(elem);
          }

          var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];
          var borderBoxValue =
            name === 'width'
              ? elem.getBoundingClientRect().width
              : elem.getBoundingClientRect().height;
          var computedStyle = getComputedStyleX(elem);
          var isBorderBox = isBorderBoxFn(elem);
          var cssBoxValue = 0;

          if (borderBoxValue === null || borderBoxValue === undefined || borderBoxValue <= 0) {
            borderBoxValue = undefined; // Fall back to computed then un computed css if necessary

            cssBoxValue = getComputedStyleX(elem, name);

            if (cssBoxValue === null || cssBoxValue === undefined || Number(cssBoxValue) < 0) {
              cssBoxValue = elem.style[name] || 0;
            } // Normalize '', auto, and prepare for extra

            cssBoxValue = parseFloat(cssBoxValue) || 0;
          }

          if (extra === undefined) {
            extra = isBorderBox ? BORDER_INDEX : CONTENT_INDEX;
          }

          var borderBoxValueOrIsBorderBox = borderBoxValue !== undefined || isBorderBox;
          var val = borderBoxValue || cssBoxValue;

          if (extra === CONTENT_INDEX) {
            if (borderBoxValueOrIsBorderBox) {
              return val - getPBMWidth(elem, ['border', 'padding'], which);
            }

            return cssBoxValue;
          } else if (borderBoxValueOrIsBorderBox) {
            if (extra === BORDER_INDEX) {
              return val;
            }

            return (
              val +
              (extra === PADDING_INDEX
                ? -getPBMWidth(elem, ['border'], which)
                : getPBMWidth(elem, ['margin'], which))
            );
          }

          return cssBoxValue + getPBMWidth(elem, BOX_MODELS.slice(extra), which);
        }

        var cssShow = {
          position: 'absolute',
          visibility: 'hidden',
          display: 'block',
        }; // fix #119 : https://github.com/kissyteam/kissy/issues/119

        function getWHIgnoreDisplay() {
          for (
            var _len = arguments.length, args = new Array(_len), _key2 = 0;
            _key2 < _len;
            _key2++
          ) {
            args[_key2] = arguments[_key2];
          }

          var val;
          var elem = args[0]; // in case elem is window
          // elem.offsetWidth === undefined

          if (elem.offsetWidth !== 0) {
            val = getWH.apply(undefined, args);
          } else {
            swap(elem, cssShow, function() {
              val = getWH.apply(undefined, args);
            });
          }

          return val;
        }

        each(['width', 'height'], function(name) {
          var first = name.charAt(0).toUpperCase() + name.slice(1);

          domUtils['outer'.concat(first)] = function(el, includeMargin) {
            return el && getWHIgnoreDisplay(el, name, includeMargin ? MARGIN_INDEX : BORDER_INDEX);
          };

          var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];

          domUtils[name] = function(elem, v) {
            var val = v;

            if (val !== undefined) {
              if (elem) {
                var computedStyle = getComputedStyleX(elem);
                var isBorderBox = isBorderBoxFn(elem);

                if (isBorderBox) {
                  val += getPBMWidth(elem, ['padding', 'border'], which);
                }

                return css(elem, name, val);
              }

              return undefined;
            }

            return elem && getWHIgnoreDisplay(elem, name, CONTENT_INDEX);
          };
        });

        function mix(to, from) {
          for (var i in from) {
            if (from.hasOwnProperty(i)) {
              to[i] = from[i];
            }
          }

          return to;
        }

        var utils = {
          getWindow: function getWindow(node) {
            if (node && node.document && node.setTimeout) {
              return node;
            }

            var doc = node.ownerDocument || node;
            return doc.defaultView || doc.parentWindow;
          },
          getDocument: getDocument,
          offset: function offset(el, value, option) {
            if (typeof value !== 'undefined') {
              setOffset(el, value, option || {});
            } else {
              return getOffset(el);
            }
          },
          isWindow: isWindow,
          each: each,
          css: css,
          clone: function clone(obj) {
            var i;
            var ret = {};

            for (i in obj) {
              if (obj.hasOwnProperty(i)) {
                ret[i] = obj[i];
              }
            }

            var overflow = obj.overflow;

            if (overflow) {
              for (i in obj) {
                if (obj.hasOwnProperty(i)) {
                  ret.overflow[i] = obj.overflow[i];
                }
              }
            }

            return ret;
          },
          mix: mix,
          getWindowScrollLeft: function getWindowScrollLeft(w) {
            return getScrollLeft(w);
          },
          getWindowScrollTop: function getWindowScrollTop(w) {
            return getScrollTop(w);
          },
          merge: function merge() {
            var ret = {};

            for (var i = 0; i < arguments.length; i++) {
              utils.mix(ret, i < 0 || arguments.length <= i ? undefined : arguments[i]);
            }

            return ret;
          },
          viewportWidth: 0,
          viewportHeight: 0,
        };
        mix(utils, domUtils);

        /**
         * 得到会导致元素显示不全的祖先元素
         */

        var getParent = utils.getParent;

        function getOffsetParent(element) {
          if (utils.isWindow(element) || element.nodeType === 9) {
            return null;
          } // ie 这个也不是完全可行

          /*
   <div style="width: 50px;height: 100px;overflow: hidden">
   <div style="width: 50px;height: 100px;position: relative;" id="d6">
   元素 6 高 100px 宽 50px<br/>
   </div>
   </div>
   */
          // element.offsetParent does the right thing in ie7 and below. Return parent with layout!
          //  In other browsers it only includes elements with position absolute, relative or
          // fixed, not elements with overflow set to auto or scroll.
          //        if (UA.ie && ieMode < 8) {
          //            return element.offsetParent;
          //        }
          // 统一的 offsetParent 方法

          var doc = utils.getDocument(element);
          var body = doc.body;
          var parent;
          var positionStyle = utils.css(element, 'position');
          var skipStatic = positionStyle === 'fixed' || positionStyle === 'absolute';

          if (!skipStatic) {
            return element.nodeName.toLowerCase() === 'html' ? null : getParent(element);
          }

          for (parent = getParent(element); parent && parent !== body; parent = getParent(parent)) {
            positionStyle = utils.css(parent, 'position');

            if (positionStyle !== 'static') {
              return parent;
            }
          }

          return null;
        }

        var getParent$1 = utils.getParent;
        function isAncestorFixed(element) {
          if (utils.isWindow(element) || element.nodeType === 9) {
            return false;
          }

          var doc = utils.getDocument(element);
          var body = doc.body;
          var parent = null;

          for (
            parent = getParent$1(element);
            parent && parent !== body;
            parent = getParent$1(parent)
          ) {
            var positionStyle = utils.css(parent, 'position');

            if (positionStyle === 'fixed') {
              return true;
            }
          }

          return false;
        }

        /**
         * 获得元素的显示部分的区域
         */

        function getVisibleRectForElement(element) {
          var visibleRect = {
            left: 0,
            right: Infinity,
            top: 0,
            bottom: Infinity,
          };
          var el = getOffsetParent(element);
          var doc = utils.getDocument(element);
          var win = doc.defaultView || doc.parentWindow;
          var body = doc.body;
          var documentElement = doc.documentElement; // Determine the size of the visible rect by climbing the dom accounting for
          // all scrollable containers.

          while (el) {
            // clientWidth is zero for inline block elements in ie.
            if (
              (navigator.userAgent.indexOf('MSIE') === -1 || el.clientWidth !== 0) && // body may have overflow set on it, yet we still get the entire
              // viewport. In some browsers, el.offsetParent may be
              // document.documentElement, so check for that too.
              el !== body &&
              el !== documentElement &&
              utils.css(el, 'overflow') !== 'visible'
            ) {
              var pos = utils.offset(el); // add border

              pos.left += el.clientLeft;
              pos.top += el.clientTop;
              visibleRect.top = Math.max(visibleRect.top, pos.top);
              visibleRect.right = Math.min(
                visibleRect.right, // consider area without scrollBar
                pos.left + el.clientWidth,
              );
              visibleRect.bottom = Math.min(visibleRect.bottom, pos.top + el.clientHeight);
              visibleRect.left = Math.max(visibleRect.left, pos.left);
            } else if (el === body || el === documentElement) {
              break;
            }

            el = getOffsetParent(el);
          } // Set element position to fixed
          // make sure absolute element itself don't affect it's visible area
          // https://github.com/ant-design/ant-design/issues/7601

          var originalPosition = null;

          if (!utils.isWindow(element) && element.nodeType !== 9) {
            originalPosition = element.style.position;
            var position = utils.css(element, 'position');

            if (position === 'absolute') {
              element.style.position = 'fixed';
            }
          }

          var scrollX = utils.getWindowScrollLeft(win);
          var scrollY = utils.getWindowScrollTop(win);
          var viewportWidth = utils.viewportWidth(win);
          var viewportHeight = utils.viewportHeight(win);
          var documentWidth = documentElement.scrollWidth;
          var documentHeight = documentElement.scrollHeight; // scrollXXX on html is sync with body which means overflow: hidden on body gets wrong scrollXXX.
          // We should cut this ourself.

          var bodyStyle = window.getComputedStyle(body);

          if (bodyStyle.overflowX === 'hidden') {
            documentWidth = win.innerWidth;
          }

          if (bodyStyle.overflowY === 'hidden') {
            documentHeight = win.innerHeight;
          } // Reset element position after calculate the visible area

          if (element.style) {
            element.style.position = originalPosition;
          }

          if (isAncestorFixed(element)) {
            // Clip by viewport's size.
            visibleRect.left = Math.max(visibleRect.left, scrollX);
            visibleRect.top = Math.max(visibleRect.top, scrollY);
            visibleRect.right = Math.min(visibleRect.right, scrollX + viewportWidth);
            visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + viewportHeight);
          } else {
            // Clip by document's size.
            var maxVisibleWidth = Math.max(documentWidth, scrollX + viewportWidth);
            visibleRect.right = Math.min(visibleRect.right, maxVisibleWidth);
            var maxVisibleHeight = Math.max(documentHeight, scrollY + viewportHeight);
            visibleRect.bottom = Math.min(visibleRect.bottom, maxVisibleHeight);
          }

          return visibleRect.top >= 0 &&
            visibleRect.left >= 0 &&
            visibleRect.bottom > visibleRect.top &&
            visibleRect.right > visibleRect.left
            ? visibleRect
            : null;
        }

        function adjustForViewport(elFuturePos, elRegion, visibleRect, overflow) {
          var pos = utils.clone(elFuturePos);
          var size = {
            width: elRegion.width,
            height: elRegion.height,
          };

          if (overflow.adjustX && pos.left < visibleRect.left) {
            pos.left = visibleRect.left;
          } // Left edge inside and right edge outside viewport, try to resize it.

          if (
            overflow.resizeWidth &&
            pos.left >= visibleRect.left &&
            pos.left + size.width > visibleRect.right
          ) {
            size.width -= pos.left + size.width - visibleRect.right;
          } // Right edge outside viewport, try to move it.

          if (overflow.adjustX && pos.left + size.width > visibleRect.right) {
            // 保证左边界和可视区域左边界对齐
            pos.left = Math.max(visibleRect.right - size.width, visibleRect.left);
          } // Top edge outside viewport, try to move it.

          if (overflow.adjustY && pos.top < visibleRect.top) {
            pos.top = visibleRect.top;
          } // Top edge inside and bottom edge outside viewport, try to resize it.

          if (
            overflow.resizeHeight &&
            pos.top >= visibleRect.top &&
            pos.top + size.height > visibleRect.bottom
          ) {
            size.height -= pos.top + size.height - visibleRect.bottom;
          } // Bottom edge outside viewport, try to move it.

          if (overflow.adjustY && pos.top + size.height > visibleRect.bottom) {
            // 保证上边界和可视区域上边界对齐
            pos.top = Math.max(visibleRect.bottom - size.height, visibleRect.top);
          }

          return utils.mix(pos, size);
        }

        function getRegion(node) {
          var offset;
          var w;
          var h;

          if (!utils.isWindow(node) && node.nodeType !== 9) {
            offset = utils.offset(node);
            w = utils.outerWidth(node);
            h = utils.outerHeight(node);
          } else {
            var win = utils.getWindow(node);
            offset = {
              left: utils.getWindowScrollLeft(win),
              top: utils.getWindowScrollTop(win),
            };
            w = utils.viewportWidth(win);
            h = utils.viewportHeight(win);
          }

          offset.width = w;
          offset.height = h;
          return offset;
        }

        /**
         * 获取 node 上的 align 对齐点 相对于页面的坐标
         */
        function getAlignOffset(region, align) {
          var V = align.charAt(0);
          var H = align.charAt(1);
          var w = region.width;
          var h = region.height;
          var x = region.left;
          var y = region.top;

          if (V === 'c') {
            y += h / 2;
          } else if (V === 'b') {
            y += h;
          }

          if (H === 'c') {
            x += w / 2;
          } else if (H === 'r') {
            x += w;
          }

          return {
            left: x,
            top: y,
          };
        }

        function getElFuturePos(elRegion, refNodeRegion, points, offset, targetOffset) {
          var p1 = getAlignOffset(refNodeRegion, points[1]);
          var p2 = getAlignOffset(elRegion, points[0]);
          var diff = [p2.left - p1.left, p2.top - p1.top];
          return {
            left: Math.round(elRegion.left - diff[0] + offset[0] - targetOffset[0]),
            top: Math.round(elRegion.top - diff[1] + offset[1] - targetOffset[1]),
          };
        }

        /**
         * align dom node flexibly
         * @author yiminghe@gmail.com
         */

        function isFailX(elFuturePos, elRegion, visibleRect) {
          return (
            elFuturePos.left < visibleRect.left ||
            elFuturePos.left + elRegion.width > visibleRect.right
          );
        }

        function isFailY(elFuturePos, elRegion, visibleRect) {
          return (
            elFuturePos.top < visibleRect.top ||
            elFuturePos.top + elRegion.height > visibleRect.bottom
          );
        }

        function isCompleteFailX(elFuturePos, elRegion, visibleRect) {
          return (
            elFuturePos.left > visibleRect.right ||
            elFuturePos.left + elRegion.width < visibleRect.left
          );
        }

        function isCompleteFailY(elFuturePos, elRegion, visibleRect) {
          return (
            elFuturePos.top > visibleRect.bottom ||
            elFuturePos.top + elRegion.height < visibleRect.top
          );
        }

        function flip(points, reg, map) {
          var ret = [];
          utils.each(points, function(p) {
            ret.push(
              p.replace(reg, function(m) {
                return map[m];
              }),
            );
          });
          return ret;
        }

        function flipOffset(offset, index) {
          offset[index] = -offset[index];
          return offset;
        }

        function convertOffset(str, offsetLen) {
          var n;

          if (/%$/.test(str)) {
            n = (parseInt(str.substring(0, str.length - 1), 10) / 100) * offsetLen;
          } else {
            n = parseInt(str, 10);
          }

          return n || 0;
        }

        function normalizeOffset(offset, el) {
          offset[0] = convertOffset(offset[0], el.width);
          offset[1] = convertOffset(offset[1], el.height);
        }
        /**
         * @param el
         * @param tgtRegion 参照节点所占的区域: { left, top, width, height }
         * @param align
         */

        function doAlign(el, tgtRegion, align, isTgtRegionVisible) {
          var points = align.points;
          var offset = align.offset || [0, 0];
          var targetOffset = align.targetOffset || [0, 0];
          var overflow = align.overflow;
          var source = align.source || el;
          offset = [].concat(offset);
          targetOffset = [].concat(targetOffset);
          overflow = overflow || {};
          var newOverflowCfg = {};
          var fail = 0; // 当前节点可以被放置的显示区域

          var visibleRect = getVisibleRectForElement(source); // 当前节点所占的区域, left/top/width/height

          var elRegion = getRegion(source); // 将 offset 转换成数值，支持百分比

          normalizeOffset(offset, elRegion);
          normalizeOffset(targetOffset, tgtRegion); // 当前节点将要被放置的位置

          var elFuturePos = getElFuturePos(elRegion, tgtRegion, points, offset, targetOffset); // 当前节点将要所处的区域

          var newElRegion = utils.merge(elRegion, elFuturePos); // 如果可视区域不能完全放置当前节点时允许调整

          if (visibleRect && (overflow.adjustX || overflow.adjustY) && isTgtRegionVisible) {
            if (overflow.adjustX) {
              // 如果横向不能放下
              if (isFailX(elFuturePos, elRegion, visibleRect)) {
                // 对齐位置反下
                var newPoints = flip(points, /[lr]/gi, {
                  l: 'r',
                  r: 'l',
                }); // 偏移量也反下

                var newOffset = flipOffset(offset, 0);
                var newTargetOffset = flipOffset(targetOffset, 0);
                var newElFuturePos = getElFuturePos(
                  elRegion,
                  tgtRegion,
                  newPoints,
                  newOffset,
                  newTargetOffset,
                );

                if (!isCompleteFailX(newElFuturePos, elRegion, visibleRect)) {
                  fail = 1;
                  points = newPoints;
                  offset = newOffset;
                  targetOffset = newTargetOffset;
                }
              }
            }

            if (overflow.adjustY) {
              // 如果纵向不能放下
              if (isFailY(elFuturePos, elRegion, visibleRect)) {
                // 对齐位置反下
                var _newPoints = flip(points, /[tb]/gi, {
                  t: 'b',
                  b: 't',
                }); // 偏移量也反下

                var _newOffset = flipOffset(offset, 1);

                var _newTargetOffset = flipOffset(targetOffset, 1);

                var _newElFuturePos = getElFuturePos(
                  elRegion,
                  tgtRegion,
                  _newPoints,
                  _newOffset,
                  _newTargetOffset,
                );

                if (!isCompleteFailY(_newElFuturePos, elRegion, visibleRect)) {
                  fail = 1;
                  points = _newPoints;
                  offset = _newOffset;
                  targetOffset = _newTargetOffset;
                }
              }
            } // 如果失败，重新计算当前节点将要被放置的位置

            if (fail) {
              elFuturePos = getElFuturePos(elRegion, tgtRegion, points, offset, targetOffset);
              utils.mix(newElRegion, elFuturePos);
            }

            var isStillFailX = isFailX(elFuturePos, elRegion, visibleRect);
            var isStillFailY = isFailY(elFuturePos, elRegion, visibleRect); // 检查反下后的位置是否可以放下了，如果仍然放不下：
            // 1. 复原修改过的定位参数

            if (isStillFailX || isStillFailY) {
              points = align.points;
              offset = align.offset || [0, 0];
              targetOffset = align.targetOffset || [0, 0];
            } // 2. 只有指定了可以调整当前方向才调整

            newOverflowCfg.adjustX = overflow.adjustX && isStillFailX;
            newOverflowCfg.adjustY = overflow.adjustY && isStillFailY; // 确实要调整，甚至可能会调整高度宽度

            if (newOverflowCfg.adjustX || newOverflowCfg.adjustY) {
              newElRegion = adjustForViewport(elFuturePos, elRegion, visibleRect, newOverflowCfg);
            }
          } // need judge to in case set fixed with in css on height auto element

          if (newElRegion.width !== elRegion.width) {
            utils.css(source, 'width', utils.width(source) + newElRegion.width - elRegion.width);
          }

          if (newElRegion.height !== elRegion.height) {
            utils.css(
              source,
              'height',
              utils.height(source) + newElRegion.height - elRegion.height,
            );
          } // https://github.com/kissyteam/kissy/issues/190
          // 相对于屏幕位置没变，而 left/top 变了
          // 例如 <div 'relative'><el absolute></div>

          utils.offset(
            source,
            {
              left: newElRegion.left,
              top: newElRegion.top,
            },
            {
              useCssRight: align.useCssRight,
              useCssBottom: align.useCssBottom,
              useCssTransform: align.useCssTransform,
              ignoreShake: align.ignoreShake,
            },
          );
          return {
            points: points,
            offset: offset,
            targetOffset: targetOffset,
            overflow: newOverflowCfg,
          };
        }
        /**
         *  2012-04-26 yiminghe@gmail.com
         *   - 优化智能对齐算法
         *   - 慎用 resizeXX
         *
         *  2011-07-13 yiminghe@gmail.com note:
         *   - 增加智能对齐，以及大小调整选项
         **/

        function isOutOfVisibleRect(target) {
          var visibleRect = getVisibleRectForElement(target);
          var targetRegion = getRegion(target);
          return (
            !visibleRect ||
            targetRegion.left + targetRegion.width <= visibleRect.left ||
            targetRegion.top + targetRegion.height <= visibleRect.top ||
            targetRegion.left >= visibleRect.right ||
            targetRegion.top >= visibleRect.bottom
          );
        }

        function alignElement(el, refNode, align) {
          var target = align.target || refNode;
          var refNodeRegion = getRegion(target);
          var isTargetNotOutOfVisible = !isOutOfVisibleRect(target);
          return doAlign(el, refNodeRegion, align, isTargetNotOutOfVisible);
        }

        alignElement.__getOffsetParent = getOffsetParent;
        alignElement.__getVisibleRectForElement = getVisibleRectForElement;

        /**
         * `tgtPoint`: { pageX, pageY } or { clientX, clientY }.
         * If client position provided, will internal convert to page position.
         */

        function alignPoint(el, tgtPoint, align) {
          var pageX;
          var pageY;
          var doc = utils.getDocument(el);
          var win = doc.defaultView || doc.parentWindow;
          var scrollX = utils.getWindowScrollLeft(win);
          var scrollY = utils.getWindowScrollTop(win);
          var viewportWidth = utils.viewportWidth(win);
          var viewportHeight = utils.viewportHeight(win);

          if ('pageX' in tgtPoint) {
            pageX = tgtPoint.pageX;
          } else {
            pageX = scrollX + tgtPoint.clientX;
          }

          if ('pageY' in tgtPoint) {
            pageY = tgtPoint.pageY;
          } else {
            pageY = scrollY + tgtPoint.clientY;
          }

          var tgtRegion = {
            left: pageX,
            top: pageY,
            width: 0,
            height: 0,
          };
          var pointInView =
            pageX >= 0 &&
            pageX <= scrollX + viewportWidth &&
            pageY >= 0 &&
            pageY <= scrollY + viewportHeight; // Provide default target point

          var points = [align.points[0], 'cc'];
          return doAlign(
            el,
            tgtRegion,
            _objectSpread2({}, align, {
              points: points,
            }),
            pointInView,
          );
        }

        /* harmony default export */ __webpack_exports__['default'] = alignElement;

        //# sourceMappingURL=index.js.map

        /***/
      },

    /***/ './node_modules/moment/moment.js':
      /*!***************************************!*\
  !*** ./node_modules/moment/moment.js ***!
  \***************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        //! moment.js

        (function(global, factory) {
          typeof exports === 'object' && typeof module !== 'undefined'
            ? (module.exports = factory())
            : typeof define === 'function' && define.amd
            ? define(factory)
            : (global.moment = factory());
        })(this, function() {
          'use strict';

          var hookCallback;

          function hooks() {
            return hookCallback.apply(null, arguments);
          }

          // This is done to register the method called with moment()
          // without creating circular dependencies.
          function setHookCallback(callback) {
            hookCallback = callback;
          }

          function isArray(input) {
            return (
              input instanceof Array || Object.prototype.toString.call(input) === '[object Array]'
            );
          }

          function isObject(input) {
            // IE8 will treat undefined and null as object if it wasn't for
            // input != null
            return input != null && Object.prototype.toString.call(input) === '[object Object]';
          }

          function isObjectEmpty(obj) {
            if (Object.getOwnPropertyNames) {
              return Object.getOwnPropertyNames(obj).length === 0;
            } else {
              var k;
              for (k in obj) {
                if (obj.hasOwnProperty(k)) {
                  return false;
                }
              }
              return true;
            }
          }

          function isUndefined(input) {
            return input === void 0;
          }

          function isNumber(input) {
            return (
              typeof input === 'number' ||
              Object.prototype.toString.call(input) === '[object Number]'
            );
          }

          function isDate(input) {
            return (
              input instanceof Date || Object.prototype.toString.call(input) === '[object Date]'
            );
          }

          function map(arr, fn) {
            var res = [],
              i;
            for (i = 0; i < arr.length; ++i) {
              res.push(fn(arr[i], i));
            }
            return res;
          }

          function hasOwnProp(a, b) {
            return Object.prototype.hasOwnProperty.call(a, b);
          }

          function extend(a, b) {
            for (var i in b) {
              if (hasOwnProp(b, i)) {
                a[i] = b[i];
              }
            }

            if (hasOwnProp(b, 'toString')) {
              a.toString = b.toString;
            }

            if (hasOwnProp(b, 'valueOf')) {
              a.valueOf = b.valueOf;
            }

            return a;
          }

          function createUTC(input, format, locale, strict) {
            return createLocalOrUTC(input, format, locale, strict, true).utc();
          }

          function defaultParsingFlags() {
            // We need to deep clone this object.
            return {
              empty: false,
              unusedTokens: [],
              unusedInput: [],
              overflow: -2,
              charsLeftOver: 0,
              nullInput: false,
              invalidMonth: null,
              invalidFormat: false,
              userInvalidated: false,
              iso: false,
              parsedDateParts: [],
              meridiem: null,
              rfc2822: false,
              weekdayMismatch: false,
            };
          }

          function getParsingFlags(m) {
            if (m._pf == null) {
              m._pf = defaultParsingFlags();
            }
            return m._pf;
          }

          var some;
          if (Array.prototype.some) {
            some = Array.prototype.some;
          } else {
            some = function(fun) {
              var t = Object(this);
              var len = t.length >>> 0;

              for (var i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                  return true;
                }
              }

              return false;
            };
          }

          function isValid(m) {
            if (m._isValid == null) {
              var flags = getParsingFlags(m);
              var parsedParts = some.call(flags.parsedDateParts, function(i) {
                return i != null;
              });
              var isNowValid =
                !isNaN(m._d.getTime()) &&
                flags.overflow < 0 &&
                !flags.empty &&
                !flags.invalidMonth &&
                !flags.invalidWeekday &&
                !flags.weekdayMismatch &&
                !flags.nullInput &&
                !flags.invalidFormat &&
                !flags.userInvalidated &&
                (!flags.meridiem || (flags.meridiem && parsedParts));

              if (m._strict) {
                isNowValid =
                  isNowValid &&
                  flags.charsLeftOver === 0 &&
                  flags.unusedTokens.length === 0 &&
                  flags.bigHour === undefined;
              }

              if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
              } else {
                return isNowValid;
              }
            }
            return m._isValid;
          }

          function createInvalid(flags) {
            var m = createUTC(NaN);
            if (flags != null) {
              extend(getParsingFlags(m), flags);
            } else {
              getParsingFlags(m).userInvalidated = true;
            }

            return m;
          }

          // Plugins that add properties should also add the key here (null value),
          // so we can properly clone ourselves.
          var momentProperties = (hooks.momentProperties = []);

          function copyConfig(to, from) {
            var i, prop, val;

            if (!isUndefined(from._isAMomentObject)) {
              to._isAMomentObject = from._isAMomentObject;
            }
            if (!isUndefined(from._i)) {
              to._i = from._i;
            }
            if (!isUndefined(from._f)) {
              to._f = from._f;
            }
            if (!isUndefined(from._l)) {
              to._l = from._l;
            }
            if (!isUndefined(from._strict)) {
              to._strict = from._strict;
            }
            if (!isUndefined(from._tzm)) {
              to._tzm = from._tzm;
            }
            if (!isUndefined(from._isUTC)) {
              to._isUTC = from._isUTC;
            }
            if (!isUndefined(from._offset)) {
              to._offset = from._offset;
            }
            if (!isUndefined(from._pf)) {
              to._pf = getParsingFlags(from);
            }
            if (!isUndefined(from._locale)) {
              to._locale = from._locale;
            }

            if (momentProperties.length > 0) {
              for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                  to[prop] = val;
                }
              }
            }

            return to;
          }

          var updateInProgress = false;

          // Moment prototype object
          function Moment(config) {
            copyConfig(this, config);
            this._d = new Date(config._d != null ? config._d.getTime() : NaN);
            if (!this.isValid()) {
              this._d = new Date(NaN);
            }
            // Prevent infinite loop in case updateOffset creates new moment
            // objects.
            if (updateInProgress === false) {
              updateInProgress = true;
              hooks.updateOffset(this);
              updateInProgress = false;
            }
          }

          function isMoment(obj) {
            return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
          }

          function absFloor(number) {
            if (number < 0) {
              // -0 -> 0
              return Math.ceil(number) || 0;
            } else {
              return Math.floor(number);
            }
          }

          function toInt(argumentForCoercion) {
            var coercedNumber = +argumentForCoercion,
              value = 0;

            if (coercedNumber !== 0 && isFinite(coercedNumber)) {
              value = absFloor(coercedNumber);
            }

            return value;
          }

          // compare two arrays, return the number of differences
          function compareArrays(array1, array2, dontConvert) {
            var len = Math.min(array1.length, array2.length),
              lengthDiff = Math.abs(array1.length - array2.length),
              diffs = 0,
              i;
            for (i = 0; i < len; i++) {
              if (
                (dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
              ) {
                diffs++;
              }
            }
            return diffs + lengthDiff;
          }

          function warn(msg) {
            if (
              hooks.suppressDeprecationWarnings === false &&
              typeof console !== 'undefined' &&
              console.warn
            ) {
              console.warn('Deprecation warning: ' + msg);
            }
          }

          function deprecate(msg, fn) {
            var firstTime = true;

            return extend(function() {
              if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
              }
              if (firstTime) {
                var args = [];
                var arg;
                for (var i = 0; i < arguments.length; i++) {
                  arg = '';
                  if (typeof arguments[i] === 'object') {
                    arg += '\n[' + i + '] ';
                    for (var key in arguments[0]) {
                      arg += key + ': ' + arguments[0][key] + ', ';
                    }
                    arg = arg.slice(0, -2); // Remove trailing comma and space
                  } else {
                    arg = arguments[i];
                  }
                  args.push(arg);
                }
                warn(
                  msg +
                    '\nArguments: ' +
                    Array.prototype.slice.call(args).join('') +
                    '\n' +
                    new Error().stack,
                );
                firstTime = false;
              }
              return fn.apply(this, arguments);
            }, fn);
          }

          var deprecations = {};

          function deprecateSimple(name, msg) {
            if (hooks.deprecationHandler != null) {
              hooks.deprecationHandler(name, msg);
            }
            if (!deprecations[name]) {
              warn(msg);
              deprecations[name] = true;
            }
          }

          hooks.suppressDeprecationWarnings = false;
          hooks.deprecationHandler = null;

          function isFunction(input) {
            return (
              input instanceof Function ||
              Object.prototype.toString.call(input) === '[object Function]'
            );
          }

          function set(config) {
            var prop, i;
            for (i in config) {
              prop = config[i];
              if (isFunction(prop)) {
                this[i] = prop;
              } else {
                this['_' + i] = prop;
              }
            }
            this._config = config;
            // Lenient ordinal parsing accepts just a number in addition to
            // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
            // TODO: Remove "ordinalParse" fallback in next major release.
            this._dayOfMonthOrdinalParseLenient = new RegExp(
              (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' +
                /\d{1,2}/.source,
            );
          }

          function mergeConfigs(parentConfig, childConfig) {
            var res = extend({}, parentConfig),
              prop;
            for (prop in childConfig) {
              if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                  res[prop] = {};
                  extend(res[prop], parentConfig[prop]);
                  extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                  res[prop] = childConfig[prop];
                } else {
                  delete res[prop];
                }
              }
            }
            for (prop in parentConfig) {
              if (
                hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])
              ) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
              }
            }
            return res;
          }

          function Locale(config) {
            if (config != null) {
              this.set(config);
            }
          }

          var keys;

          if (Object.keys) {
            keys = Object.keys;
          } else {
            keys = function(obj) {
              var i,
                res = [];
              for (i in obj) {
                if (hasOwnProp(obj, i)) {
                  res.push(i);
                }
              }
              return res;
            };
          }

          var defaultCalendar = {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
          };

          function calendar(key, mom, now) {
            var output = this._calendar[key] || this._calendar['sameElse'];
            return isFunction(output) ? output.call(mom, now) : output;
          }

          var defaultLongDateFormat = {
            LTS: 'h:mm:ss A',
            LT: 'h:mm A',
            L: 'MM/DD/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY h:mm A',
            LLLL: 'dddd, MMMM D, YYYY h:mm A',
          };

          function longDateFormat(key) {
            var format = this._longDateFormat[key],
              formatUpper = this._longDateFormat[key.toUpperCase()];

            if (format || !formatUpper) {
              return format;
            }

            this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function(val) {
              return val.slice(1);
            });

            return this._longDateFormat[key];
          }

          var defaultInvalidDate = 'Invalid date';

          function invalidDate() {
            return this._invalidDate;
          }

          var defaultOrdinal = '%d';
          var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

          function ordinal(number) {
            return this._ordinal.replace('%d', number);
          }

          var defaultRelativeTime = {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
          };

          function relativeTime(number, withoutSuffix, string, isFuture) {
            var output = this._relativeTime[string];
            return isFunction(output)
              ? output(number, withoutSuffix, string, isFuture)
              : output.replace(/%d/i, number);
          }

          function pastFuture(diff, output) {
            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
            return isFunction(format) ? format(output) : format.replace(/%s/i, output);
          }

          var aliases = {};

          function addUnitAlias(unit, shorthand) {
            var lowerCase = unit.toLowerCase();
            aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
          }

          function normalizeUnits(units) {
            return typeof units === 'string'
              ? aliases[units] || aliases[units.toLowerCase()]
              : undefined;
          }

          function normalizeObjectUnits(inputObject) {
            var normalizedInput = {},
              normalizedProp,
              prop;

            for (prop in inputObject) {
              if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                  normalizedInput[normalizedProp] = inputObject[prop];
                }
              }
            }

            return normalizedInput;
          }

          var priorities = {};

          function addUnitPriority(unit, priority) {
            priorities[unit] = priority;
          }

          function getPrioritizedUnits(unitsObj) {
            var units = [];
            for (var u in unitsObj) {
              units.push({ unit: u, priority: priorities[u] });
            }
            units.sort(function(a, b) {
              return a.priority - b.priority;
            });
            return units;
          }

          function zeroFill(number, targetLength, forceSign) {
            var absNumber = '' + Math.abs(number),
              zerosToFill = targetLength - absNumber.length,
              sign = number >= 0;
            return (
              (sign ? (forceSign ? '+' : '') : '-') +
              Math.pow(10, Math.max(0, zerosToFill))
                .toString()
                .substr(1) +
              absNumber
            );
          }

          var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

          var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

          var formatFunctions = {};

          var formatTokenFunctions = {};

          // token:    'M'
          // padded:   ['MM', 2]
          // ordinal:  'Mo'
          // callback: function () { this.month() + 1 }
          function addFormatToken(token, padded, ordinal, callback) {
            var func = callback;
            if (typeof callback === 'string') {
              func = function() {
                return this[callback]();
              };
            }
            if (token) {
              formatTokenFunctions[token] = func;
            }
            if (padded) {
              formatTokenFunctions[padded[0]] = function() {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
              };
            }
            if (ordinal) {
              formatTokenFunctions[ordinal] = function() {
                return this.localeData().ordinal(func.apply(this, arguments), token);
              };
            }
          }

          function removeFormattingTokens(input) {
            if (input.match(/\[[\s\S]/)) {
              return input.replace(/^\[|\]$/g, '');
            }
            return input.replace(/\\/g, '');
          }

          function makeFormatFunction(format) {
            var array = format.match(formattingTokens),
              i,
              length;

            for (i = 0, length = array.length; i < length; i++) {
              if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
              } else {
                array[i] = removeFormattingTokens(array[i]);
              }
            }

            return function(mom) {
              var output = '',
                i;
              for (i = 0; i < length; i++) {
                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
              }
              return output;
            };
          }

          // format date using native date object
          function formatMoment(m, format) {
            if (!m.isValid()) {
              return m.localeData().invalidDate();
            }

            format = expandFormat(format, m.localeData());
            formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

            return formatFunctions[format](m);
          }

          function expandFormat(format, locale) {
            var i = 5;

            function replaceLongDateFormatTokens(input) {
              return locale.longDateFormat(input) || input;
            }

            localFormattingTokens.lastIndex = 0;
            while (i >= 0 && localFormattingTokens.test(format)) {
              format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
              localFormattingTokens.lastIndex = 0;
              i -= 1;
            }

            return format;
          }

          var match1 = /\d/; //       0 - 9
          var match2 = /\d\d/; //      00 - 99
          var match3 = /\d{3}/; //     000 - 999
          var match4 = /\d{4}/; //    0000 - 9999
          var match6 = /[+-]?\d{6}/; // -999999 - 999999
          var match1to2 = /\d\d?/; //       0 - 99
          var match3to4 = /\d\d\d\d?/; //     999 - 9999
          var match5to6 = /\d\d\d\d\d\d?/; //   99999 - 999999
          var match1to3 = /\d{1,3}/; //       0 - 999
          var match1to4 = /\d{1,4}/; //       0 - 9999
          var match1to6 = /[+-]?\d{1,6}/; // -999999 - 999999

          var matchUnsigned = /\d+/; //       0 - inf
          var matchSigned = /[+-]?\d+/; //    -inf - inf

          var matchOffset = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
          var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

          var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

          // any word (or two) characters or numbers including two/three word month in arabic.
          // includes scottish gaelic two word and hyphenated months
          var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;

          var regexes = {};

          function addRegexToken(token, regex, strictRegex) {
            regexes[token] = isFunction(regex)
              ? regex
              : function(isStrict, localeData) {
                  return isStrict && strictRegex ? strictRegex : regex;
                };
          }

          function getParseRegexForToken(token, config) {
            if (!hasOwnProp(regexes, token)) {
              return new RegExp(unescapeFormat(token));
            }

            return regexes[token](config._strict, config._locale);
          }

          // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
          function unescapeFormat(s) {
            return regexEscape(
              s
                .replace('\\', '')
                .replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
                  return p1 || p2 || p3 || p4;
                }),
            );
          }

          function regexEscape(s) {
            return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
          }

          var tokens = {};

          function addParseToken(token, callback) {
            var i,
              func = callback;
            if (typeof token === 'string') {
              token = [token];
            }
            if (isNumber(callback)) {
              func = function(input, array) {
                array[callback] = toInt(input);
              };
            }
            for (i = 0; i < token.length; i++) {
              tokens[token[i]] = func;
            }
          }

          function addWeekParseToken(token, callback) {
            addParseToken(token, function(input, array, config, token) {
              config._w = config._w || {};
              callback(input, config._w, config, token);
            });
          }

          function addTimeToArrayFromToken(token, input, config) {
            if (input != null && hasOwnProp(tokens, token)) {
              tokens[token](input, config._a, config, token);
            }
          }

          var YEAR = 0;
          var MONTH = 1;
          var DATE = 2;
          var HOUR = 3;
          var MINUTE = 4;
          var SECOND = 5;
          var MILLISECOND = 6;
          var WEEK = 7;
          var WEEKDAY = 8;

          // FORMATTING

          addFormatToken('Y', 0, 0, function() {
            var y = this.year();
            return y <= 9999 ? '' + y : '+' + y;
          });

          addFormatToken(0, ['YY', 2], 0, function() {
            return this.year() % 100;
          });

          addFormatToken(0, ['YYYY', 4], 0, 'year');
          addFormatToken(0, ['YYYYY', 5], 0, 'year');
          addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

          // ALIASES

          addUnitAlias('year', 'y');

          // PRIORITIES

          addUnitPriority('year', 1);

          // PARSING

          addRegexToken('Y', matchSigned);
          addRegexToken('YY', match1to2, match2);
          addRegexToken('YYYY', match1to4, match4);
          addRegexToken('YYYYY', match1to6, match6);
          addRegexToken('YYYYYY', match1to6, match6);

          addParseToken(['YYYYY', 'YYYYYY'], YEAR);
          addParseToken('YYYY', function(input, array) {
            array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
          });
          addParseToken('YY', function(input, array) {
            array[YEAR] = hooks.parseTwoDigitYear(input);
          });
          addParseToken('Y', function(input, array) {
            array[YEAR] = parseInt(input, 10);
          });

          // HELPERS

          function daysInYear(year) {
            return isLeapYear(year) ? 366 : 365;
          }

          function isLeapYear(year) {
            return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
          }

          // HOOKS

          hooks.parseTwoDigitYear = function(input) {
            return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
          };

          // MOMENTS

          var getSetYear = makeGetSet('FullYear', true);

          function getIsLeapYear() {
            return isLeapYear(this.year());
          }

          function makeGetSet(unit, keepTime) {
            return function(value) {
              if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
              } else {
                return get(this, unit);
              }
            };
          }

          function get(mom, unit) {
            return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
          }

          function set$1(mom, unit, value) {
            if (mom.isValid() && !isNaN(value)) {
              if (
                unit === 'FullYear' &&
                isLeapYear(mom.year()) &&
                mom.month() === 1 &&
                mom.date() === 29
              ) {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
                  value,
                  mom.month(),
                  daysInMonth(value, mom.month()),
                );
              } else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
              }
            }
          }

          // MOMENTS

          function stringGet(units) {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
              return this[units]();
            }
            return this;
          }

          function stringSet(units, value) {
            if (typeof units === 'object') {
              units = normalizeObjectUnits(units);
              var prioritized = getPrioritizedUnits(units);
              for (var i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
              }
            } else {
              units = normalizeUnits(units);
              if (isFunction(this[units])) {
                return this[units](value);
              }
            }
            return this;
          }

          function mod(n, x) {
            return ((n % x) + x) % x;
          }

          var indexOf;

          if (Array.prototype.indexOf) {
            indexOf = Array.prototype.indexOf;
          } else {
            indexOf = function(o) {
              // I know
              var i;
              for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                  return i;
                }
              }
              return -1;
            };
          }

          function daysInMonth(year, month) {
            if (isNaN(year) || isNaN(month)) {
              return NaN;
            }
            var modMonth = mod(month, 12);
            year += (month - modMonth) / 12;
            return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : 31 - ((modMonth % 7) % 2);
          }

          // FORMATTING

          addFormatToken('M', ['MM', 2], 'Mo', function() {
            return this.month() + 1;
          });

          addFormatToken('MMM', 0, 0, function(format) {
            return this.localeData().monthsShort(this, format);
          });

          addFormatToken('MMMM', 0, 0, function(format) {
            return this.localeData().months(this, format);
          });

          // ALIASES

          addUnitAlias('month', 'M');

          // PRIORITY

          addUnitPriority('month', 8);

          // PARSING

          addRegexToken('M', match1to2);
          addRegexToken('MM', match1to2, match2);
          addRegexToken('MMM', function(isStrict, locale) {
            return locale.monthsShortRegex(isStrict);
          });
          addRegexToken('MMMM', function(isStrict, locale) {
            return locale.monthsRegex(isStrict);
          });

          addParseToken(['M', 'MM'], function(input, array) {
            array[MONTH] = toInt(input) - 1;
          });

          addParseToken(['MMM', 'MMMM'], function(input, array, config, token) {
            var month = config._locale.monthsParse(input, token, config._strict);
            // if we didn't find a month name, mark the date as invalid.
            if (month != null) {
              array[MONTH] = month;
            } else {
              getParsingFlags(config).invalidMonth = input;
            }
          });

          // LOCALES

          var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
          var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_',
          );
          function localeMonths(m, format) {
            if (!m) {
              return isArray(this._months) ? this._months : this._months['standalone'];
            }
            return isArray(this._months)
              ? this._months[m.month()]
              : this._months[
                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'
                ][m.month()];
          }

          var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split(
            '_',
          );
          function localeMonthsShort(m, format) {
            if (!m) {
              return isArray(this._monthsShort)
                ? this._monthsShort
                : this._monthsShort['standalone'];
            }
            return isArray(this._monthsShort)
              ? this._monthsShort[m.month()]
              : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][
                  m.month()
                ];
          }

          function handleStrictParse(monthName, format, strict) {
            var i,
              ii,
              mom,
              llc = monthName.toLocaleLowerCase();
            if (!this._monthsParse) {
              // this is not used
              this._monthsParse = [];
              this._longMonthsParse = [];
              this._shortMonthsParse = [];
              for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
              }
            }

            if (strict) {
              if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
              } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
              }
            } else {
              if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
              } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
              }
            }
          }

          function localeMonthsParse(monthName, format, strict) {
            var i, mom, regex;

            if (this._monthsParseExact) {
              return handleStrictParse.call(this, monthName, format, strict);
            }

            if (!this._monthsParse) {
              this._monthsParse = [];
              this._longMonthsParse = [];
              this._shortMonthsParse = [];
            }

            // TODO: add sorting
            // Sorting makes sure if one month (or abbr) is a prefix of another
            // see sorting in computeMonthsParse
            for (i = 0; i < 12; i++) {
              // make the regex if we don't have it already
              mom = createUTC([2000, i]);
              if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp(
                  '^' + this.months(mom, '').replace('.', '') + '$',
                  'i',
                );
                this._shortMonthsParse[i] = new RegExp(
                  '^' + this.monthsShort(mom, '').replace('.', '') + '$',
                  'i',
                );
              }
              if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
              }
              // test the regex
              if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
              } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
              } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
              }
            }
          }

          // MOMENTS

          function setMonth(mom, value) {
            var dayOfMonth;

            if (!mom.isValid()) {
              // No op
              return mom;
            }

            if (typeof value === 'string') {
              if (/^\d+$/.test(value)) {
                value = toInt(value);
              } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                  return mom;
                }
              }
            }

            dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
            return mom;
          }

          function getSetMonth(value) {
            if (value != null) {
              setMonth(this, value);
              hooks.updateOffset(this, true);
              return this;
            } else {
              return get(this, 'Month');
            }
          }

          function getDaysInMonth() {
            return daysInMonth(this.year(), this.month());
          }

          var defaultMonthsShortRegex = matchWord;
          function monthsShortRegex(isStrict) {
            if (this._monthsParseExact) {
              if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
              }
              if (isStrict) {
                return this._monthsShortStrictRegex;
              } else {
                return this._monthsShortRegex;
              }
            } else {
              if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
              }
              return this._monthsShortStrictRegex && isStrict
                ? this._monthsShortStrictRegex
                : this._monthsShortRegex;
            }
          }

          var defaultMonthsRegex = matchWord;
          function monthsRegex(isStrict) {
            if (this._monthsParseExact) {
              if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
              }
              if (isStrict) {
                return this._monthsStrictRegex;
              } else {
                return this._monthsRegex;
              }
            } else {
              if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
              }
              return this._monthsStrictRegex && isStrict
                ? this._monthsStrictRegex
                : this._monthsRegex;
            }
          }

          function computeMonthsParse() {
            function cmpLenRev(a, b) {
              return b.length - a.length;
            }

            var shortPieces = [],
              longPieces = [],
              mixedPieces = [],
              i,
              mom;
            for (i = 0; i < 12; i++) {
              // make the regex if we don't have it already
              mom = createUTC([2000, i]);
              shortPieces.push(this.monthsShort(mom, ''));
              longPieces.push(this.months(mom, ''));
              mixedPieces.push(this.months(mom, ''));
              mixedPieces.push(this.monthsShort(mom, ''));
            }
            // Sorting makes sure if one month (or abbr) is a prefix of another it
            // will match the longer piece.
            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);
            for (i = 0; i < 12; i++) {
              shortPieces[i] = regexEscape(shortPieces[i]);
              longPieces[i] = regexEscape(longPieces[i]);
            }
            for (i = 0; i < 24; i++) {
              mixedPieces[i] = regexEscape(mixedPieces[i]);
            }

            this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._monthsShortRegex = this._monthsRegex;
            this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
            this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
          }

          function createDate(y, m, d, h, M, s, ms) {
            // can't just apply() to create a date:
            // https://stackoverflow.com/q/181348
            var date;
            // the date constructor remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
              // preserve leap years using a full 400 year cycle, then reset
              date = new Date(y + 400, m, d, h, M, s, ms);
              if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
              }
            } else {
              date = new Date(y, m, d, h, M, s, ms);
            }

            return date;
          }

          function createUTCDate(y) {
            var date;
            // the Date.UTC function remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
              var args = Array.prototype.slice.call(arguments);
              // preserve leap years using a full 400 year cycle, then reset
              args[0] = y + 400;
              date = new Date(Date.UTC.apply(null, args));
              if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
              }
            } else {
              date = new Date(Date.UTC.apply(null, arguments));
            }

            return date;
          }

          // start-of-first-week - start-of-year
          function firstWeekOffset(year, dow, doy) {
            var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
              fwd = 7 + dow - doy,
              // first-week day local weekday -- which local weekday is fwd
              fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

            return -fwdlw + fwd - 1;
          }

          // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
          function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
            var localWeekday = (7 + weekday - dow) % 7,
              weekOffset = firstWeekOffset(year, dow, doy),
              dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
              resYear,
              resDayOfYear;

            if (dayOfYear <= 0) {
              resYear = year - 1;
              resDayOfYear = daysInYear(resYear) + dayOfYear;
            } else if (dayOfYear > daysInYear(year)) {
              resYear = year + 1;
              resDayOfYear = dayOfYear - daysInYear(year);
            } else {
              resYear = year;
              resDayOfYear = dayOfYear;
            }

            return {
              year: resYear,
              dayOfYear: resDayOfYear,
            };
          }

          function weekOfYear(mom, dow, doy) {
            var weekOffset = firstWeekOffset(mom.year(), dow, doy),
              week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
              resWeek,
              resYear;

            if (week < 1) {
              resYear = mom.year() - 1;
              resWeek = week + weeksInYear(resYear, dow, doy);
            } else if (week > weeksInYear(mom.year(), dow, doy)) {
              resWeek = week - weeksInYear(mom.year(), dow, doy);
              resYear = mom.year() + 1;
            } else {
              resYear = mom.year();
              resWeek = week;
            }

            return {
              week: resWeek,
              year: resYear,
            };
          }

          function weeksInYear(year, dow, doy) {
            var weekOffset = firstWeekOffset(year, dow, doy),
              weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
            return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
          }

          // FORMATTING

          addFormatToken('w', ['ww', 2], 'wo', 'week');
          addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

          // ALIASES

          addUnitAlias('week', 'w');
          addUnitAlias('isoWeek', 'W');

          // PRIORITIES

          addUnitPriority('week', 5);
          addUnitPriority('isoWeek', 5);

          // PARSING

          addRegexToken('w', match1to2);
          addRegexToken('ww', match1to2, match2);
          addRegexToken('W', match1to2);
          addRegexToken('WW', match1to2, match2);

          addWeekParseToken(['w', 'ww', 'W', 'WW'], function(input, week, config, token) {
            week[token.substr(0, 1)] = toInt(input);
          });

          // HELPERS

          // LOCALES

          function localeWeek(mom) {
            return weekOfYear(mom, this._week.dow, this._week.doy).week;
          }

          var defaultLocaleWeek = {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
          };

          function localeFirstDayOfWeek() {
            return this._week.dow;
          }

          function localeFirstDayOfYear() {
            return this._week.doy;
          }

          // MOMENTS

          function getSetWeek(input) {
            var week = this.localeData().week(this);
            return input == null ? week : this.add((input - week) * 7, 'd');
          }

          function getSetISOWeek(input) {
            var week = weekOfYear(this, 1, 4).week;
            return input == null ? week : this.add((input - week) * 7, 'd');
          }

          // FORMATTING

          addFormatToken('d', 0, 'do', 'day');

          addFormatToken('dd', 0, 0, function(format) {
            return this.localeData().weekdaysMin(this, format);
          });

          addFormatToken('ddd', 0, 0, function(format) {
            return this.localeData().weekdaysShort(this, format);
          });

          addFormatToken('dddd', 0, 0, function(format) {
            return this.localeData().weekdays(this, format);
          });

          addFormatToken('e', 0, 0, 'weekday');
          addFormatToken('E', 0, 0, 'isoWeekday');

          // ALIASES

          addUnitAlias('day', 'd');
          addUnitAlias('weekday', 'e');
          addUnitAlias('isoWeekday', 'E');

          // PRIORITY
          addUnitPriority('day', 11);
          addUnitPriority('weekday', 11);
          addUnitPriority('isoWeekday', 11);

          // PARSING

          addRegexToken('d', match1to2);
          addRegexToken('e', match1to2);
          addRegexToken('E', match1to2);
          addRegexToken('dd', function(isStrict, locale) {
            return locale.weekdaysMinRegex(isStrict);
          });
          addRegexToken('ddd', function(isStrict, locale) {
            return locale.weekdaysShortRegex(isStrict);
          });
          addRegexToken('dddd', function(isStrict, locale) {
            return locale.weekdaysRegex(isStrict);
          });

          addWeekParseToken(['dd', 'ddd', 'dddd'], function(input, week, config, token) {
            var weekday = config._locale.weekdaysParse(input, token, config._strict);
            // if we didn't get a weekday name, mark the date as invalid
            if (weekday != null) {
              week.d = weekday;
            } else {
              getParsingFlags(config).invalidWeekday = input;
            }
          });

          addWeekParseToken(['d', 'e', 'E'], function(input, week, config, token) {
            week[token] = toInt(input);
          });

          // HELPERS

          function parseWeekday(input, locale) {
            if (typeof input !== 'string') {
              return input;
            }

            if (!isNaN(input)) {
              return parseInt(input, 10);
            }

            input = locale.weekdaysParse(input);
            if (typeof input === 'number') {
              return input;
            }

            return null;
          }

          function parseIsoWeekday(input, locale) {
            if (typeof input === 'string') {
              return locale.weekdaysParse(input) % 7 || 7;
            }
            return isNaN(input) ? null : input;
          }

          // LOCALES
          function shiftWeekdays(ws, n) {
            return ws.slice(n, 7).concat(ws.slice(0, n));
          }

          var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_',
          );
          function localeWeekdays(m, format) {
            var weekdays = isArray(this._weekdays)
              ? this._weekdays
              : this._weekdays[
                  m && m !== true && this._weekdays.isFormat.test(format) ? 'format' : 'standalone'
                ];
            return m === true
              ? shiftWeekdays(weekdays, this._week.dow)
              : m
              ? weekdays[m.day()]
              : weekdays;
          }

          var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
          function localeWeekdaysShort(m) {
            return m === true
              ? shiftWeekdays(this._weekdaysShort, this._week.dow)
              : m
              ? this._weekdaysShort[m.day()]
              : this._weekdaysShort;
          }

          var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
          function localeWeekdaysMin(m) {
            return m === true
              ? shiftWeekdays(this._weekdaysMin, this._week.dow)
              : m
              ? this._weekdaysMin[m.day()]
              : this._weekdaysMin;
          }

          function handleStrictParse$1(weekdayName, format, strict) {
            var i,
              ii,
              mom,
              llc = weekdayName.toLocaleLowerCase();
            if (!this._weekdaysParse) {
              this._weekdaysParse = [];
              this._shortWeekdaysParse = [];
              this._minWeekdaysParse = [];

              for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
              }
            }

            if (strict) {
              if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
              } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              }
            } else {
              if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              }
            }
          }

          function localeWeekdaysParse(weekdayName, format, strict) {
            var i, mom, regex;

            if (this._weekdaysParseExact) {
              return handleStrictParse$1.call(this, weekdayName, format, strict);
            }

            if (!this._weekdaysParse) {
              this._weekdaysParse = [];
              this._minWeekdaysParse = [];
              this._shortWeekdaysParse = [];
              this._fullWeekdaysParse = [];
            }

            for (i = 0; i < 7; i++) {
              // make the regex if we don't have it already

              mom = createUTC([2000, 1]).day(i);
              if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp(
                  '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
                  'i',
                );
                this._shortWeekdaysParse[i] = new RegExp(
                  '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
                  'i',
                );
                this._minWeekdaysParse[i] = new RegExp(
                  '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
                  'i',
                );
              }
              if (!this._weekdaysParse[i]) {
                regex =
                  '^' +
                  this.weekdays(mom, '') +
                  '|^' +
                  this.weekdaysShort(mom, '') +
                  '|^' +
                  this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
              }
              // test the regex
              if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
              } else if (
                strict &&
                format === 'ddd' &&
                this._shortWeekdaysParse[i].test(weekdayName)
              ) {
                return i;
              } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
              } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
              }
            }
          }

          // MOMENTS

          function getSetDayOfWeek(input) {
            if (!this.isValid()) {
              return input != null ? this : NaN;
            }
            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
            if (input != null) {
              input = parseWeekday(input, this.localeData());
              return this.add(input - day, 'd');
            } else {
              return day;
            }
          }

          function getSetLocaleDayOfWeek(input) {
            if (!this.isValid()) {
              return input != null ? this : NaN;
            }
            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
            return input == null ? weekday : this.add(input - weekday, 'd');
          }

          function getSetISODayOfWeek(input) {
            if (!this.isValid()) {
              return input != null ? this : NaN;
            }

            // behaves the same as moment#day except
            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
            // as a setter, sunday should belong to the previous week.

            if (input != null) {
              var weekday = parseIsoWeekday(input, this.localeData());
              return this.day(this.day() % 7 ? weekday : weekday - 7);
            } else {
              return this.day() || 7;
            }
          }

          var defaultWeekdaysRegex = matchWord;
          function weekdaysRegex(isStrict) {
            if (this._weekdaysParseExact) {
              if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
              }
              if (isStrict) {
                return this._weekdaysStrictRegex;
              } else {
                return this._weekdaysRegex;
              }
            } else {
              if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
              }
              return this._weekdaysStrictRegex && isStrict
                ? this._weekdaysStrictRegex
                : this._weekdaysRegex;
            }
          }

          var defaultWeekdaysShortRegex = matchWord;
          function weekdaysShortRegex(isStrict) {
            if (this._weekdaysParseExact) {
              if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
              }
              if (isStrict) {
                return this._weekdaysShortStrictRegex;
              } else {
                return this._weekdaysShortRegex;
              }
            } else {
              if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
              }
              return this._weekdaysShortStrictRegex && isStrict
                ? this._weekdaysShortStrictRegex
                : this._weekdaysShortRegex;
            }
          }

          var defaultWeekdaysMinRegex = matchWord;
          function weekdaysMinRegex(isStrict) {
            if (this._weekdaysParseExact) {
              if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
              }
              if (isStrict) {
                return this._weekdaysMinStrictRegex;
              } else {
                return this._weekdaysMinRegex;
              }
            } else {
              if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
              }
              return this._weekdaysMinStrictRegex && isStrict
                ? this._weekdaysMinStrictRegex
                : this._weekdaysMinRegex;
            }
          }

          function computeWeekdaysParse() {
            function cmpLenRev(a, b) {
              return b.length - a.length;
            }

            var minPieces = [],
              shortPieces = [],
              longPieces = [],
              mixedPieces = [],
              i,
              mom,
              minp,
              shortp,
              longp;
            for (i = 0; i < 7; i++) {
              // make the regex if we don't have it already
              mom = createUTC([2000, 1]).day(i);
              minp = this.weekdaysMin(mom, '');
              shortp = this.weekdaysShort(mom, '');
              longp = this.weekdays(mom, '');
              minPieces.push(minp);
              shortPieces.push(shortp);
              longPieces.push(longp);
              mixedPieces.push(minp);
              mixedPieces.push(shortp);
              mixedPieces.push(longp);
            }
            // Sorting makes sure if one weekday (or abbr) is a prefix of another it
            // will match the longer piece.
            minPieces.sort(cmpLenRev);
            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);
            for (i = 0; i < 7; i++) {
              shortPieces[i] = regexEscape(shortPieces[i]);
              longPieces[i] = regexEscape(longPieces[i]);
              mixedPieces[i] = regexEscape(mixedPieces[i]);
            }

            this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._weekdaysShortRegex = this._weekdaysRegex;
            this._weekdaysMinRegex = this._weekdaysRegex;

            this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
            this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
            this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
          }

          // FORMATTING

          function hFormat() {
            return this.hours() % 12 || 12;
          }

          function kFormat() {
            return this.hours() || 24;
          }

          addFormatToken('H', ['HH', 2], 0, 'hour');
          addFormatToken('h', ['hh', 2], 0, hFormat);
          addFormatToken('k', ['kk', 2], 0, kFormat);

          addFormatToken('hmm', 0, 0, function() {
            return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
          });

          addFormatToken('hmmss', 0, 0, function() {
            return (
              '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2)
            );
          });

          addFormatToken('Hmm', 0, 0, function() {
            return '' + this.hours() + zeroFill(this.minutes(), 2);
          });

          addFormatToken('Hmmss', 0, 0, function() {
            return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
          });

          function meridiem(token, lowercase) {
            addFormatToken(token, 0, 0, function() {
              return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
            });
          }

          meridiem('a', true);
          meridiem('A', false);

          // ALIASES

          addUnitAlias('hour', 'h');

          // PRIORITY
          addUnitPriority('hour', 13);

          // PARSING

          function matchMeridiem(isStrict, locale) {
            return locale._meridiemParse;
          }

          addRegexToken('a', matchMeridiem);
          addRegexToken('A', matchMeridiem);
          addRegexToken('H', match1to2);
          addRegexToken('h', match1to2);
          addRegexToken('k', match1to2);
          addRegexToken('HH', match1to2, match2);
          addRegexToken('hh', match1to2, match2);
          addRegexToken('kk', match1to2, match2);

          addRegexToken('hmm', match3to4);
          addRegexToken('hmmss', match5to6);
          addRegexToken('Hmm', match3to4);
          addRegexToken('Hmmss', match5to6);

          addParseToken(['H', 'HH'], HOUR);
          addParseToken(['k', 'kk'], function(input, array, config) {
            var kInput = toInt(input);
            array[HOUR] = kInput === 24 ? 0 : kInput;
          });
          addParseToken(['a', 'A'], function(input, array, config) {
            config._isPm = config._locale.isPM(input);
            config._meridiem = input;
          });
          addParseToken(['h', 'hh'], function(input, array, config) {
            array[HOUR] = toInt(input);
            getParsingFlags(config).bigHour = true;
          });
          addParseToken('hmm', function(input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
            getParsingFlags(config).bigHour = true;
          });
          addParseToken('hmmss', function(input, array, config) {
            var pos1 = input.length - 4;
            var pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
            getParsingFlags(config).bigHour = true;
          });
          addParseToken('Hmm', function(input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
          });
          addParseToken('Hmmss', function(input, array, config) {
            var pos1 = input.length - 4;
            var pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
          });

          // LOCALES

          function localeIsPM(input) {
            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
            // Using charAt should be more compatible.
            return (input + '').toLowerCase().charAt(0) === 'p';
          }

          var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
          function localeMeridiem(hours, minutes, isLower) {
            if (hours > 11) {
              return isLower ? 'pm' : 'PM';
            } else {
              return isLower ? 'am' : 'AM';
            }
          }

          // MOMENTS

          // Setting the hour should keep the time, because the user explicitly
          // specified which hour they want. So trying to maintain the same hour (in
          // a new timezone) makes sense. Adding/subtracting hours does not follow
          // this rule.
          var getSetHour = makeGetSet('Hours', true);

          var baseConfig = {
            calendar: defaultCalendar,
            longDateFormat: defaultLongDateFormat,
            invalidDate: defaultInvalidDate,
            ordinal: defaultOrdinal,
            dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
            relativeTime: defaultRelativeTime,

            months: defaultLocaleMonths,
            monthsShort: defaultLocaleMonthsShort,

            week: defaultLocaleWeek,

            weekdays: defaultLocaleWeekdays,
            weekdaysMin: defaultLocaleWeekdaysMin,
            weekdaysShort: defaultLocaleWeekdaysShort,

            meridiemParse: defaultLocaleMeridiemParse,
          };

          // internal storage for locale config files
          var locales = {};
          var localeFamilies = {};
          var globalLocale;

          function normalizeLocale(key) {
            return key ? key.toLowerCase().replace('_', '-') : key;
          }

          // pick the locale from the array
          // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
          // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
          function chooseLocale(names) {
            var i = 0,
              j,
              next,
              locale,
              split;

            while (i < names.length) {
              split = normalizeLocale(names[i]).split('-');
              j = split.length;
              next = normalizeLocale(names[i + 1]);
              next = next ? next.split('-') : null;
              while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                  return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                  //the next array item is better than a shallower substring of this one
                  break;
                }
                j--;
              }
              i++;
            }
            return globalLocale;
          }

          function loadLocale(name) {
            var oldLocale = null;
            // TODO: Find a better way to register and load all the locales in Node
            if (!locales[name] && typeof module !== 'undefined' && module && module.exports) {
              try {
                oldLocale = globalLocale._abbr;
                var aliasedRequire = require;
                aliasedRequire('./locale/' + name);
                getSetGlobalLocale(oldLocale);
              } catch (e) {}
            }
            return locales[name];
          }

          // This function will load locale and then set the global locale.  If
          // no arguments are passed in, it will simply return the current global
          // locale key.
          function getSetGlobalLocale(key, values) {
            var data;
            if (key) {
              if (isUndefined(values)) {
                data = getLocale(key);
              } else {
                data = defineLocale(key, values);
              }

              if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
              } else {
                if (typeof console !== 'undefined' && console.warn) {
                  //warn user if arguments are passed but the locale could not be set
                  console.warn('Locale ' + key + ' not found. Did you forget to load it?');
                }
              }
            }

            return globalLocale._abbr;
          }

          function defineLocale(name, config) {
            if (config !== null) {
              var locale,
                parentConfig = baseConfig;
              config.abbr = name;
              if (locales[name] != null) {
                deprecateSimple(
                  'defineLocaleOverride',
                  'use moment.updateLocale(localeName, config) to change ' +
                    'an existing locale. moment.defineLocale(localeName, ' +
                    'config) should only be used for creating a new locale ' +
                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.',
                );
                parentConfig = locales[name]._config;
              } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                  parentConfig = locales[config.parentLocale]._config;
                } else {
                  locale = loadLocale(config.parentLocale);
                  if (locale != null) {
                    parentConfig = locale._config;
                  } else {
                    if (!localeFamilies[config.parentLocale]) {
                      localeFamilies[config.parentLocale] = [];
                    }
                    localeFamilies[config.parentLocale].push({
                      name: name,
                      config: config,
                    });
                    return null;
                  }
                }
              }
              locales[name] = new Locale(mergeConfigs(parentConfig, config));

              if (localeFamilies[name]) {
                localeFamilies[name].forEach(function(x) {
                  defineLocale(x.name, x.config);
                });
              }

              // backwards compat for now: also set the locale
              // make sure we set the locale AFTER all child locales have been
              // created, so we won't end up with the child locale set.
              getSetGlobalLocale(name);

              return locales[name];
            } else {
              // useful for testing
              delete locales[name];
              return null;
            }
          }

          function updateLocale(name, config) {
            if (config != null) {
              var locale,
                tmpLocale,
                parentConfig = baseConfig;
              // MERGE
              tmpLocale = loadLocale(name);
              if (tmpLocale != null) {
                parentConfig = tmpLocale._config;
              }
              config = mergeConfigs(parentConfig, config);
              locale = new Locale(config);
              locale.parentLocale = locales[name];
              locales[name] = locale;

              // backwards compat for now: also set the locale
              getSetGlobalLocale(name);
            } else {
              // pass null for config to unupdate, useful for tests
              if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                  locales[name] = locales[name].parentLocale;
                } else if (locales[name] != null) {
                  delete locales[name];
                }
              }
            }
            return locales[name];
          }

          // returns locale data
          function getLocale(key) {
            var locale;

            if (key && key._locale && key._locale._abbr) {
              key = key._locale._abbr;
            }

            if (!key) {
              return globalLocale;
            }

            if (!isArray(key)) {
              //short-circuit everything else
              locale = loadLocale(key);
              if (locale) {
                return locale;
              }
              key = [key];
            }

            return chooseLocale(key);
          }

          function listLocales() {
            return keys(locales);
          }

          function checkOverflow(m) {
            var overflow;
            var a = m._a;

            if (a && getParsingFlags(m).overflow === -2) {
              overflow =
                a[MONTH] < 0 || a[MONTH] > 11
                  ? MONTH
                  : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
                  ? DATE
                  : a[HOUR] < 0 ||
                    a[HOUR] > 24 ||
                    (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0))
                  ? HOUR
                  : a[MINUTE] < 0 || a[MINUTE] > 59
                  ? MINUTE
                  : a[SECOND] < 0 || a[SECOND] > 59
                  ? SECOND
                  : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
                  ? MILLISECOND
                  : -1;

              if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
              }
              if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
              }
              if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
              }

              getParsingFlags(m).overflow = overflow;
            }

            return m;
          }

          // Pick the first defined of two or three arguments.
          function defaults(a, b, c) {
            if (a != null) {
              return a;
            }
            if (b != null) {
              return b;
            }
            return c;
          }

          function currentDateArray(config) {
            // hooks is actually the exported moment object
            var nowValue = new Date(hooks.now());
            if (config._useUTC) {
              return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
            }
            return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
          }

          // convert an array to a date.
          // the array should mirror the parameters below
          // note: all values past the year are optional and will default to the lowest possible value.
          // [year, month, day , hour, minute, second, millisecond]
          function configFromArray(config) {
            var i,
              date,
              input = [],
              currentDate,
              expectedWeekday,
              yearToUse;

            if (config._d) {
              return;
            }

            currentDate = currentDateArray(config);

            //compute day of the year from weeks and weekdays
            if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
              dayOfYearFromWeekInfo(config);
            }

            //if the day of the year is set, figure out what it is
            if (config._dayOfYear != null) {
              yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

              if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                getParsingFlags(config)._overflowDayOfYear = true;
              }

              date = createUTCDate(yearToUse, 0, config._dayOfYear);
              config._a[MONTH] = date.getUTCMonth();
              config._a[DATE] = date.getUTCDate();
            }

            // Default to current date.
            // * if no year, month, day of month are given, default to today
            // * if day of month is given, default month and year
            // * if month is given, default only year
            // * if year is given, don't default anything
            for (i = 0; i < 3 && config._a[i] == null; ++i) {
              config._a[i] = input[i] = currentDate[i];
            }

            // Zero out whatever was not defaulted, including time
            for (; i < 7; i++) {
              config._a[i] = input[i] = config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
            }

            // Check for 24:00:00.000
            if (
              config._a[HOUR] === 24 &&
              config._a[MINUTE] === 0 &&
              config._a[SECOND] === 0 &&
              config._a[MILLISECOND] === 0
            ) {
              config._nextDay = true;
              config._a[HOUR] = 0;
            }

            config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
            expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

            // Apply timezone offset from input. The actual utcOffset can be changed
            // with parseZone.
            if (config._tzm != null) {
              config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
            }

            if (config._nextDay) {
              config._a[HOUR] = 24;
            }

            // check for mismatching day of week
            if (
              config._w &&
              typeof config._w.d !== 'undefined' &&
              config._w.d !== expectedWeekday
            ) {
              getParsingFlags(config).weekdayMismatch = true;
            }
          }

          function dayOfYearFromWeekInfo(config) {
            var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

            w = config._w;
            if (w.GG != null || w.W != null || w.E != null) {
              dow = 1;
              doy = 4;

              // TODO: We need to take the current isoWeekYear, but that depends on
              // how we interpret now (local, utc, fixed offset). So create
              // a now version of current config (take local/utc/offset flags, and
              // create now).
              weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
              week = defaults(w.W, 1);
              weekday = defaults(w.E, 1);
              if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
              }
            } else {
              dow = config._locale._week.dow;
              doy = config._locale._week.doy;

              var curWeek = weekOfYear(createLocal(), dow, doy);

              weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

              // Default to current week.
              week = defaults(w.w, curWeek.week);

              if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                  weekdayOverflow = true;
                }
              } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                  weekdayOverflow = true;
                }
              } else {
                // default to beginning of week
                weekday = dow;
              }
            }
            if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
              getParsingFlags(config)._overflowWeeks = true;
            } else if (weekdayOverflow != null) {
              getParsingFlags(config)._overflowWeekday = true;
            } else {
              temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
              config._a[YEAR] = temp.year;
              config._dayOfYear = temp.dayOfYear;
            }
          }

          // iso 8601 regex
          // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
          var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
          var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

          var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

          var isoDates = [
            ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
            ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
            ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
            ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
            ['YYYY-DDD', /\d{4}-\d{3}/],
            ['YYYY-MM', /\d{4}-\d\d/, false],
            ['YYYYYYMMDD', /[+-]\d{10}/],
            ['YYYYMMDD', /\d{8}/],
            // YYYYMM is NOT allowed by the standard
            ['GGGG[W]WWE', /\d{4}W\d{3}/],
            ['GGGG[W]WW', /\d{4}W\d{2}/, false],
            ['YYYYDDD', /\d{7}/],
          ];

          // iso time formats and regexes
          var isoTimes = [
            ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
            ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
            ['HH:mm:ss', /\d\d:\d\d:\d\d/],
            ['HH:mm', /\d\d:\d\d/],
            ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
            ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
            ['HHmmss', /\d\d\d\d\d\d/],
            ['HHmm', /\d\d\d\d/],
            ['HH', /\d\d/],
          ];

          var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

          // date from iso format
          function configFromISO(config) {
            var i,
              l,
              string = config._i,
              match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
              allowTime,
              dateFormat,
              timeFormat,
              tzFormat;

            if (match) {
              getParsingFlags(config).iso = true;

              for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                  dateFormat = isoDates[i][0];
                  allowTime = isoDates[i][2] !== false;
                  break;
                }
              }
              if (dateFormat == null) {
                config._isValid = false;
                return;
              }
              if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                  if (isoTimes[i][1].exec(match[3])) {
                    // match[2] should be 'T' or space
                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
                    break;
                  }
                }
                if (timeFormat == null) {
                  config._isValid = false;
                  return;
                }
              }
              if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
              }
              if (match[4]) {
                if (tzRegex.exec(match[4])) {
                  tzFormat = 'Z';
                } else {
                  config._isValid = false;
                  return;
                }
              }
              config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
              configFromStringAndFormat(config);
            } else {
              config._isValid = false;
            }
          }

          // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
          var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

          function extractFromRFC2822Strings(
            yearStr,
            monthStr,
            dayStr,
            hourStr,
            minuteStr,
            secondStr,
          ) {
            var result = [
              untruncateYear(yearStr),
              defaultLocaleMonthsShort.indexOf(monthStr),
              parseInt(dayStr, 10),
              parseInt(hourStr, 10),
              parseInt(minuteStr, 10),
            ];

            if (secondStr) {
              result.push(parseInt(secondStr, 10));
            }

            return result;
          }

          function untruncateYear(yearStr) {
            var year = parseInt(yearStr, 10);
            if (year <= 49) {
              return 2000 + year;
            } else if (year <= 999) {
              return 1900 + year;
            }
            return year;
          }

          function preprocessRFC2822(s) {
            // Remove comments and folding whitespace and replace multiple-spaces with a single space
            return s
              .replace(/\([^)]*\)|[\n\t]/g, ' ')
              .replace(/(\s\s+)/g, ' ')
              .replace(/^\s\s*/, '')
              .replace(/\s\s*$/, '');
          }

          function checkWeekday(weekdayStr, parsedInput, config) {
            if (weekdayStr) {
              // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
              var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
              if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
              }
            }
            return true;
          }

          var obsOffsets = {
            UT: 0,
            GMT: 0,
            EDT: -4 * 60,
            EST: -5 * 60,
            CDT: -5 * 60,
            CST: -6 * 60,
            MDT: -6 * 60,
            MST: -7 * 60,
            PDT: -7 * 60,
            PST: -8 * 60,
          };

          function calculateOffset(obsOffset, militaryOffset, numOffset) {
            if (obsOffset) {
              return obsOffsets[obsOffset];
            } else if (militaryOffset) {
              // the only allowed military tz is Z
              return 0;
            } else {
              var hm = parseInt(numOffset, 10);
              var m = hm % 100,
                h = (hm - m) / 100;
              return h * 60 + m;
            }
          }

          // date and time from ref 2822 format
          function configFromRFC2822(config) {
            var match = rfc2822.exec(preprocessRFC2822(config._i));
            if (match) {
              var parsedArray = extractFromRFC2822Strings(
                match[4],
                match[3],
                match[2],
                match[5],
                match[6],
                match[7],
              );
              if (!checkWeekday(match[1], parsedArray, config)) {
                return;
              }

              config._a = parsedArray;
              config._tzm = calculateOffset(match[8], match[9], match[10]);

              config._d = createUTCDate.apply(null, config._a);
              config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

              getParsingFlags(config).rfc2822 = true;
            } else {
              config._isValid = false;
            }
          }

          // date from iso format or fallback
          function configFromString(config) {
            var matched = aspNetJsonRegex.exec(config._i);

            if (matched !== null) {
              config._d = new Date(+matched[1]);
              return;
            }

            configFromISO(config);
            if (config._isValid === false) {
              delete config._isValid;
            } else {
              return;
            }

            configFromRFC2822(config);
            if (config._isValid === false) {
              delete config._isValid;
            } else {
              return;
            }

            // Final attempt, use Input Fallback
            hooks.createFromInputFallback(config);
          }

          hooks.createFromInputFallback = deprecate(
            'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
              'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
              'discouraged and will be removed in an upcoming major release. Please refer to ' +
              'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
            function(config) {
              config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
            },
          );

          // constant that refers to the ISO standard
          hooks.ISO_8601 = function() {};

          // constant that refers to the RFC 2822 form
          hooks.RFC_2822 = function() {};

          // date from string and format string
          function configFromStringAndFormat(config) {
            // TODO: Move this to another part of the creation flow to prevent circular deps
            if (config._f === hooks.ISO_8601) {
              configFromISO(config);
              return;
            }
            if (config._f === hooks.RFC_2822) {
              configFromRFC2822(config);
              return;
            }
            config._a = [];
            getParsingFlags(config).empty = true;

            // This array is used to make a Date, either with `new Date` or `Date.UTC`
            var string = '' + config._i,
              i,
              parsedInput,
              tokens,
              token,
              skipped,
              stringLength = string.length,
              totalParsedInputLength = 0;

            tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

            for (i = 0; i < tokens.length; i++) {
              token = tokens[i];
              parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
              // console.log('token', token, 'parsedInput', parsedInput,
              //         'regex', getParseRegexForToken(token, config));
              if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                  getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
              }
              // don't parse if it's not a known token
              if (formatTokenFunctions[token]) {
                if (parsedInput) {
                  getParsingFlags(config).empty = false;
                } else {
                  getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
              } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
              }
            }

            // add remaining unparsed input length to the string
            getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
            if (string.length > 0) {
              getParsingFlags(config).unusedInput.push(string);
            }

            // clear _12h flag if hour is <= 12
            if (
              config._a[HOUR] <= 12 &&
              getParsingFlags(config).bigHour === true &&
              config._a[HOUR] > 0
            ) {
              getParsingFlags(config).bigHour = undefined;
            }

            getParsingFlags(config).parsedDateParts = config._a.slice(0);
            getParsingFlags(config).meridiem = config._meridiem;
            // handle meridiem
            config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

            configFromArray(config);
            checkOverflow(config);
          }

          function meridiemFixWrap(locale, hour, meridiem) {
            var isPm;

            if (meridiem == null) {
              // nothing to do
              return hour;
            }
            if (locale.meridiemHour != null) {
              return locale.meridiemHour(hour, meridiem);
            } else if (locale.isPM != null) {
              // Fallback
              isPm = locale.isPM(meridiem);
              if (isPm && hour < 12) {
                hour += 12;
              }
              if (!isPm && hour === 12) {
                hour = 0;
              }
              return hour;
            } else {
              // this is not supposed to happen
              return hour;
            }
          }

          // date from string and array of format strings
          function configFromStringAndArray(config) {
            var tempConfig, bestMoment, scoreToBeat, i, currentScore;

            if (config._f.length === 0) {
              getParsingFlags(config).invalidFormat = true;
              config._d = new Date(NaN);
              return;
            }

            for (i = 0; i < config._f.length; i++) {
              currentScore = 0;
              tempConfig = copyConfig({}, config);
              if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
              }
              tempConfig._f = config._f[i];
              configFromStringAndFormat(tempConfig);

              if (!isValid(tempConfig)) {
                continue;
              }

              // if there is any input that was not parsed add a penalty for that format
              currentScore += getParsingFlags(tempConfig).charsLeftOver;

              //or tokens
              currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

              getParsingFlags(tempConfig).score = currentScore;

              if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
              }
            }

            extend(config, bestMoment || tempConfig);
          }

          function configFromObject(config) {
            if (config._d) {
              return;
            }

            var i = normalizeObjectUnits(config._i);
            config._a = map(
              [i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond],
              function(obj) {
                return obj && parseInt(obj, 10);
              },
            );

            configFromArray(config);
          }

          function createFromConfig(config) {
            var res = new Moment(checkOverflow(prepareConfig(config)));
            if (res._nextDay) {
              // Adding is smart enough around DST
              res.add(1, 'd');
              res._nextDay = undefined;
            }

            return res;
          }

          function prepareConfig(config) {
            var input = config._i,
              format = config._f;

            config._locale = config._locale || getLocale(config._l);

            if (input === null || (format === undefined && input === '')) {
              return createInvalid({ nullInput: true });
            }

            if (typeof input === 'string') {
              config._i = input = config._locale.preparse(input);
            }

            if (isMoment(input)) {
              return new Moment(checkOverflow(input));
            } else if (isDate(input)) {
              config._d = input;
            } else if (isArray(format)) {
              configFromStringAndArray(config);
            } else if (format) {
              configFromStringAndFormat(config);
            } else {
              configFromInput(config);
            }

            if (!isValid(config)) {
              config._d = null;
            }

            return config;
          }

          function configFromInput(config) {
            var input = config._i;
            if (isUndefined(input)) {
              config._d = new Date(hooks.now());
            } else if (isDate(input)) {
              config._d = new Date(input.valueOf());
            } else if (typeof input === 'string') {
              configFromString(config);
            } else if (isArray(input)) {
              config._a = map(input.slice(0), function(obj) {
                return parseInt(obj, 10);
              });
              configFromArray(config);
            } else if (isObject(input)) {
              configFromObject(config);
            } else if (isNumber(input)) {
              // from milliseconds
              config._d = new Date(input);
            } else {
              hooks.createFromInputFallback(config);
            }
          }

          function createLocalOrUTC(input, format, locale, strict, isUTC) {
            var c = {};

            if (locale === true || locale === false) {
              strict = locale;
              locale = undefined;
            }

            if (
              (isObject(input) && isObjectEmpty(input)) ||
              (isArray(input) && input.length === 0)
            ) {
              input = undefined;
            }
            // object construction must be done this way.
            // https://github.com/moment/moment/issues/1423
            c._isAMomentObject = true;
            c._useUTC = c._isUTC = isUTC;
            c._l = locale;
            c._i = input;
            c._f = format;
            c._strict = strict;

            return createFromConfig(c);
          }

          function createLocal(input, format, locale, strict) {
            return createLocalOrUTC(input, format, locale, strict, false);
          }

          var prototypeMin = deprecate(
            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
            function() {
              var other = createLocal.apply(null, arguments);
              if (this.isValid() && other.isValid()) {
                return other < this ? this : other;
              } else {
                return createInvalid();
              }
            },
          );

          var prototypeMax = deprecate(
            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
            function() {
              var other = createLocal.apply(null, arguments);
              if (this.isValid() && other.isValid()) {
                return other > this ? this : other;
              } else {
                return createInvalid();
              }
            },
          );

          // Pick a moment m from moments so that m[fn](other) is true for all
          // other. This relies on the function fn to be transitive.
          //
          // moments should either be an array of moment objects or an array, whose
          // first element is an array of moment objects.
          function pickBy(fn, moments) {
            var res, i;
            if (moments.length === 1 && isArray(moments[0])) {
              moments = moments[0];
            }
            if (!moments.length) {
              return createLocal();
            }
            res = moments[0];
            for (i = 1; i < moments.length; ++i) {
              if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
              }
            }
            return res;
          }

          // TODO: Use [].sort instead?
          function min() {
            var args = [].slice.call(arguments, 0);

            return pickBy('isBefore', args);
          }

          function max() {
            var args = [].slice.call(arguments, 0);

            return pickBy('isAfter', args);
          }

          var now = function() {
            return Date.now ? Date.now() : +new Date();
          };

          var ordering = [
            'year',
            'quarter',
            'month',
            'week',
            'day',
            'hour',
            'minute',
            'second',
            'millisecond',
          ];

          function isDurationValid(m) {
            for (var key in m) {
              if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                return false;
              }
            }

            var unitHasDecimal = false;
            for (var i = 0; i < ordering.length; ++i) {
              if (m[ordering[i]]) {
                if (unitHasDecimal) {
                  return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                  unitHasDecimal = true;
                }
              }
            }

            return true;
          }

          function isValid$1() {
            return this._isValid;
          }

          function createInvalid$1() {
            return createDuration(NaN);
          }

          function Duration(duration) {
            var normalizedInput = normalizeObjectUnits(duration),
              years = normalizedInput.year || 0,
              quarters = normalizedInput.quarter || 0,
              months = normalizedInput.month || 0,
              weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
              days = normalizedInput.day || 0,
              hours = normalizedInput.hour || 0,
              minutes = normalizedInput.minute || 0,
              seconds = normalizedInput.second || 0,
              milliseconds = normalizedInput.millisecond || 0;

            this._isValid = isDurationValid(normalizedInput);

            // representation for dateAddRemove
            this._milliseconds =
              +milliseconds +
              seconds * 1e3 + // 1000
              minutes * 6e4 + // 1000 * 60
              hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
            // Because of dateAddRemove treats 24 hours as different from a
            // day when working around DST, we need to store them separately
            this._days = +days + weeks * 7;
            // It is impossible to translate months into days without knowing
            // which months you are are talking about, so we have to store
            // it separately.
            this._months = +months + quarters * 3 + years * 12;

            this._data = {};

            this._locale = getLocale();

            this._bubble();
          }

          function isDuration(obj) {
            return obj instanceof Duration;
          }

          function absRound(number) {
            if (number < 0) {
              return Math.round(-1 * number) * -1;
            } else {
              return Math.round(number);
            }
          }

          // FORMATTING

          function offset(token, separator) {
            addFormatToken(token, 0, 0, function() {
              var offset = this.utcOffset();
              var sign = '+';
              if (offset < 0) {
                offset = -offset;
                sign = '-';
              }
              return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
            });
          }

          offset('Z', ':');
          offset('ZZ', '');

          // PARSING

          addRegexToken('Z', matchShortOffset);
          addRegexToken('ZZ', matchShortOffset);
          addParseToken(['Z', 'ZZ'], function(input, array, config) {
            config._useUTC = true;
            config._tzm = offsetFromString(matchShortOffset, input);
          });

          // HELPERS

          // timezone chunker
          // '+10:00' > ['10',  '00']
          // '-1530'  > ['-15', '30']
          var chunkOffset = /([\+\-]|\d\d)/gi;

          function offsetFromString(matcher, string) {
            var matches = (string || '').match(matcher);

            if (matches === null) {
              return null;
            }

            var chunk = matches[matches.length - 1] || [];
            var parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
            var minutes = +(parts[1] * 60) + toInt(parts[2]);

            return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
          }

          // Return a moment from input, that is local/utc/zone equivalent to model.
          function cloneWithOffset(input, model) {
            var res, diff;
            if (model._isUTC) {
              res = model.clone();
              diff =
                (isMoment(input) || isDate(input)
                  ? input.valueOf()
                  : createLocal(input).valueOf()) - res.valueOf();
              // Use low-level api, because this fn is low-level api.
              res._d.setTime(res._d.valueOf() + diff);
              hooks.updateOffset(res, false);
              return res;
            } else {
              return createLocal(input).local();
            }
          }

          function getDateOffset(m) {
            // On Firefox.24 Date#getTimezoneOffset returns a floating point.
            // https://github.com/moment/moment/pull/1871
            return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
          }

          // HOOKS

          // This function will be called whenever a moment is mutated.
          // It is intended to keep the offset in sync with the timezone.
          hooks.updateOffset = function() {};

          // MOMENTS

          // keepLocalTime = true means only change the timezone, without
          // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
          // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
          // +0200, so we adjust the time as needed, to be valid.
          //
          // Keeping the time actually adds/subtracts (one hour)
          // from the actual represented time. That is why we call updateOffset
          // a second time. In case it wants us to change the offset again
          // _changeInProgress == true case, then we have to adjust, because
          // there is no such time in the given timezone.
          function getSetOffset(input, keepLocalTime, keepMinutes) {
            var offset = this._offset || 0,
              localAdjust;
            if (!this.isValid()) {
              return input != null ? this : NaN;
            }
            if (input != null) {
              if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                  return this;
                }
              } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
              }
              if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
              }
              this._offset = input;
              this._isUTC = true;
              if (localAdjust != null) {
                this.add(localAdjust, 'm');
              }
              if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                  addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                  this._changeInProgress = true;
                  hooks.updateOffset(this, true);
                  this._changeInProgress = null;
                }
              }
              return this;
            } else {
              return this._isUTC ? offset : getDateOffset(this);
            }
          }

          function getSetZone(input, keepLocalTime) {
            if (input != null) {
              if (typeof input !== 'string') {
                input = -input;
              }

              this.utcOffset(input, keepLocalTime);

              return this;
            } else {
              return -this.utcOffset();
            }
          }

          function setOffsetToUTC(keepLocalTime) {
            return this.utcOffset(0, keepLocalTime);
          }

          function setOffsetToLocal(keepLocalTime) {
            if (this._isUTC) {
              this.utcOffset(0, keepLocalTime);
              this._isUTC = false;

              if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
              }
            }
            return this;
          }

          function setOffsetToParsedOffset() {
            if (this._tzm != null) {
              this.utcOffset(this._tzm, false, true);
            } else if (typeof this._i === 'string') {
              var tZone = offsetFromString(matchOffset, this._i);
              if (tZone != null) {
                this.utcOffset(tZone);
              } else {
                this.utcOffset(0, true);
              }
            }
            return this;
          }

          function hasAlignedHourOffset(input) {
            if (!this.isValid()) {
              return false;
            }
            input = input ? createLocal(input).utcOffset() : 0;

            return (this.utcOffset() - input) % 60 === 0;
          }

          function isDaylightSavingTime() {
            return (
              this.utcOffset() >
                this.clone()
                  .month(0)
                  .utcOffset() ||
              this.utcOffset() >
                this.clone()
                  .month(5)
                  .utcOffset()
            );
          }

          function isDaylightSavingTimeShifted() {
            if (!isUndefined(this._isDSTShifted)) {
              return this._isDSTShifted;
            }

            var c = {};

            copyConfig(c, this);
            c = prepareConfig(c);

            if (c._a) {
              var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
              this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
            } else {
              this._isDSTShifted = false;
            }

            return this._isDSTShifted;
          }

          function isLocal() {
            return this.isValid() ? !this._isUTC : false;
          }

          function isUtcOffset() {
            return this.isValid() ? this._isUTC : false;
          }

          function isUtc() {
            return this.isValid() ? this._isUTC && this._offset === 0 : false;
          }

          // ASP.NET json date format regex
          var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

          // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
          // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
          // and further modified to allow for strings containing both week and day
          var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

          function createDuration(input, key) {
            var duration = input,
              // matching against regexp is expensive, do it on demand
              match = null,
              sign,
              ret,
              diffRes;

            if (isDuration(input)) {
              duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months,
              };
            } else if (isNumber(input)) {
              duration = {};
              if (key) {
                duration[key] = input;
              } else {
                duration.milliseconds = input;
              }
            } else if (!!(match = aspNetRegex.exec(input))) {
              sign = match[1] === '-' ? -1 : 1;
              duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
              };
            } else if (!!(match = isoRegex.exec(input))) {
              sign = match[1] === '-' ? -1 : 1;
              duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign),
              };
            } else if (duration == null) {
              // checks for null or undefined
              duration = {};
            } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
              diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

              duration = {};
              duration.ms = diffRes.milliseconds;
              duration.M = diffRes.months;
            }

            ret = new Duration(duration);

            if (isDuration(input) && hasOwnProp(input, '_locale')) {
              ret._locale = input._locale;
            }

            return ret;
          }

          createDuration.fn = Duration.prototype;
          createDuration.invalid = createInvalid$1;

          function parseIso(inp, sign) {
            // We'd normally use ~~inp for this, but unfortunately it also
            // converts floats to ints.
            // inp may be undefined, so careful calling replace on it.
            var res = inp && parseFloat(inp.replace(',', '.'));
            // apply sign while we're at it
            return (isNaN(res) ? 0 : res) * sign;
          }

          function positiveMomentsDifference(base, other) {
            var res = {};

            res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
            if (
              base
                .clone()
                .add(res.months, 'M')
                .isAfter(other)
            ) {
              --res.months;
            }

            res.milliseconds = +other - +base.clone().add(res.months, 'M');

            return res;
          }

          function momentsDifference(base, other) {
            var res;
            if (!(base.isValid() && other.isValid())) {
              return { milliseconds: 0, months: 0 };
            }

            other = cloneWithOffset(other, base);
            if (base.isBefore(other)) {
              res = positiveMomentsDifference(base, other);
            } else {
              res = positiveMomentsDifference(other, base);
              res.milliseconds = -res.milliseconds;
              res.months = -res.months;
            }

            return res;
          }

          // TODO: remove 'name' arg after deprecation is removed
          function createAdder(direction, name) {
            return function(val, period) {
              var dur, tmp;
              //invert the arguments, but complain about it
              if (period !== null && !isNaN(+period)) {
                deprecateSimple(
                  name,
                  'moment().' +
                    name +
                    '(period, number) is deprecated. Please use moment().' +
                    name +
                    '(number, period). ' +
                    'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.',
                );
                tmp = val;
                val = period;
                period = tmp;
              }

              val = typeof val === 'string' ? +val : val;
              dur = createDuration(val, period);
              addSubtract(this, dur, direction);
              return this;
            };
          }

          function addSubtract(mom, duration, isAdding, updateOffset) {
            var milliseconds = duration._milliseconds,
              days = absRound(duration._days),
              months = absRound(duration._months);

            if (!mom.isValid()) {
              // No op
              return;
            }

            updateOffset = updateOffset == null ? true : updateOffset;

            if (months) {
              setMonth(mom, get(mom, 'Month') + months * isAdding);
            }
            if (days) {
              set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
            }
            if (milliseconds) {
              mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
            }
            if (updateOffset) {
              hooks.updateOffset(mom, days || months);
            }
          }

          var add = createAdder(1, 'add');
          var subtract = createAdder(-1, 'subtract');

          function getCalendarFormat(myMoment, now) {
            var diff = myMoment.diff(now, 'days', true);
            return diff < -6
              ? 'sameElse'
              : diff < -1
              ? 'lastWeek'
              : diff < 0
              ? 'lastDay'
              : diff < 1
              ? 'sameDay'
              : diff < 2
              ? 'nextDay'
              : diff < 7
              ? 'nextWeek'
              : 'sameElse';
          }

          function calendar$1(time, formats) {
            // We want to compare the start of today, vs this.
            // Getting start-of-today depends on whether we're local/utc/offset or not.
            var now = time || createLocal(),
              sod = cloneWithOffset(now, this).startOf('day'),
              format = hooks.calendarFormat(this, sod) || 'sameElse';

            var output =
              formats &&
              (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

            return this.format(
              output || this.localeData().calendar(format, this, createLocal(now)),
            );
          }

          function clone() {
            return new Moment(this);
          }

          function isAfter(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);
            if (!(this.isValid() && localInput.isValid())) {
              return false;
            }
            units = normalizeUnits(units) || 'millisecond';
            if (units === 'millisecond') {
              return this.valueOf() > localInput.valueOf();
            } else {
              return (
                localInput.valueOf() <
                this.clone()
                  .startOf(units)
                  .valueOf()
              );
            }
          }

          function isBefore(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);
            if (!(this.isValid() && localInput.isValid())) {
              return false;
            }
            units = normalizeUnits(units) || 'millisecond';
            if (units === 'millisecond') {
              return this.valueOf() < localInput.valueOf();
            } else {
              return (
                this.clone()
                  .endOf(units)
                  .valueOf() < localInput.valueOf()
              );
            }
          }

          function isBetween(from, to, units, inclusivity) {
            var localFrom = isMoment(from) ? from : createLocal(from),
              localTo = isMoment(to) ? to : createLocal(to);
            if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
              return false;
            }
            inclusivity = inclusivity || '()';
            return (
              (inclusivity[0] === '('
                ? this.isAfter(localFrom, units)
                : !this.isBefore(localFrom, units)) &&
              (inclusivity[1] === ')'
                ? this.isBefore(localTo, units)
                : !this.isAfter(localTo, units))
            );
          }

          function isSame(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input),
              inputMs;
            if (!(this.isValid() && localInput.isValid())) {
              return false;
            }
            units = normalizeUnits(units) || 'millisecond';
            if (units === 'millisecond') {
              return this.valueOf() === localInput.valueOf();
            } else {
              inputMs = localInput.valueOf();
              return (
                this.clone()
                  .startOf(units)
                  .valueOf() <= inputMs &&
                inputMs <=
                  this.clone()
                    .endOf(units)
                    .valueOf()
              );
            }
          }

          function isSameOrAfter(input, units) {
            return this.isSame(input, units) || this.isAfter(input, units);
          }

          function isSameOrBefore(input, units) {
            return this.isSame(input, units) || this.isBefore(input, units);
          }

          function diff(input, units, asFloat) {
            var that, zoneDelta, output;

            if (!this.isValid()) {
              return NaN;
            }

            that = cloneWithOffset(input, this);

            if (!that.isValid()) {
              return NaN;
            }

            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

            units = normalizeUnits(units);

            switch (units) {
              case 'year':
                output = monthDiff(this, that) / 12;
                break;
              case 'month':
                output = monthDiff(this, that);
                break;
              case 'quarter':
                output = monthDiff(this, that) / 3;
                break;
              case 'second':
                output = (this - that) / 1e3;
                break; // 1000
              case 'minute':
                output = (this - that) / 6e4;
                break; // 1000 * 60
              case 'hour':
                output = (this - that) / 36e5;
                break; // 1000 * 60 * 60
              case 'day':
                output = (this - that - zoneDelta) / 864e5;
                break; // 1000 * 60 * 60 * 24, negate dst
              case 'week':
                output = (this - that - zoneDelta) / 6048e5;
                break; // 1000 * 60 * 60 * 24 * 7, negate dst
              default:
                output = this - that;
            }

            return asFloat ? output : absFloor(output);
          }

          function monthDiff(a, b) {
            // difference in months
            var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
              // b is in (anchor - 1 month, anchor + 1 month)
              anchor = a.clone().add(wholeMonthDiff, 'months'),
              anchor2,
              adjust;

            if (b - anchor < 0) {
              anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
              // linear across the month
              adjust = (b - anchor) / (anchor - anchor2);
            } else {
              anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
              // linear across the month
              adjust = (b - anchor) / (anchor2 - anchor);
            }

            //check for negative zero, return zero if negative zero
            return -(wholeMonthDiff + adjust) || 0;
          }

          hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
          hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

          function toString() {
            return this.clone()
              .locale('en')
              .format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
          }

          function toISOString(keepOffset) {
            if (!this.isValid()) {
              return null;
            }
            var utc = keepOffset !== true;
            var m = utc ? this.clone().utc() : this;
            if (m.year() < 0 || m.year() > 9999) {
              return formatMoment(
                m,
                utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ',
              );
            }
            if (isFunction(Date.prototype.toISOString)) {
              // native implementation is ~50x faster, use it when we can
              if (utc) {
                return this.toDate().toISOString();
              } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
                  .toISOString()
                  .replace('Z', formatMoment(m, 'Z'));
              }
            }
            return formatMoment(
              m,
              utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ',
            );
          }

          /**
           * Return a human readable representation of a moment that can
           * also be evaluated to get a new moment which is the same
           *
           * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
           */
          function inspect() {
            if (!this.isValid()) {
              return 'moment.invalid(/* ' + this._i + ' */)';
            }
            var func = 'moment';
            var zone = '';
            if (!this.isLocal()) {
              func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
              zone = 'Z';
            }
            var prefix = '[' + func + '("]';
            var year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
            var datetime = '-MM-DD[T]HH:mm:ss.SSS';
            var suffix = zone + '[")]';

            return this.format(prefix + year + datetime + suffix);
          }

          function format(inputString) {
            if (!inputString) {
              inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
            }
            var output = formatMoment(this, inputString);
            return this.localeData().postformat(output);
          }

          function from(time, withoutSuffix) {
            if (
              this.isValid() &&
              ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
            ) {
              return createDuration({ to: this, from: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
            } else {
              return this.localeData().invalidDate();
            }
          }

          function fromNow(withoutSuffix) {
            return this.from(createLocal(), withoutSuffix);
          }

          function to(time, withoutSuffix) {
            if (
              this.isValid() &&
              ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
            ) {
              return createDuration({ from: this, to: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
            } else {
              return this.localeData().invalidDate();
            }
          }

          function toNow(withoutSuffix) {
            return this.to(createLocal(), withoutSuffix);
          }

          // If passed a locale key, it will set the locale for this
          // instance.  Otherwise, it will return the locale configuration
          // variables for this instance.
          function locale(key) {
            var newLocaleData;

            if (key === undefined) {
              return this._locale._abbr;
            } else {
              newLocaleData = getLocale(key);
              if (newLocaleData != null) {
                this._locale = newLocaleData;
              }
              return this;
            }
          }

          var lang = deprecate(
            'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
            function(key) {
              if (key === undefined) {
                return this.localeData();
              } else {
                return this.locale(key);
              }
            },
          );

          function localeData() {
            return this._locale;
          }

          var MS_PER_SECOND = 1000;
          var MS_PER_MINUTE = 60 * MS_PER_SECOND;
          var MS_PER_HOUR = 60 * MS_PER_MINUTE;
          var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

          // actual modulo - handles negative numbers (for dates before 1970):
          function mod$1(dividend, divisor) {
            return ((dividend % divisor) + divisor) % divisor;
          }

          function localStartOfDate(y, m, d) {
            // the date constructor remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
              // preserve leap years using a full 400 year cycle, then reset
              return new Date(y + 400, m, d) - MS_PER_400_YEARS;
            } else {
              return new Date(y, m, d).valueOf();
            }
          }

          function utcStartOfDate(y, m, d) {
            // Date.UTC remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
              // preserve leap years using a full 400 year cycle, then reset
              return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
            } else {
              return Date.UTC(y, m, d);
            }
          }

          function startOf(units) {
            var time;
            units = normalizeUnits(units);
            if (units === undefined || units === 'millisecond' || !this.isValid()) {
              return this;
            }

            var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

            switch (units) {
              case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
              case 'quarter':
                time = startOfDate(this.year(), this.month() - (this.month() % 3), 1);
                break;
              case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
              case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
                break;
              case 'isoWeek':
                time = startOfDate(
                  this.year(),
                  this.month(),
                  this.date() - (this.isoWeekday() - 1),
                );
                break;
              case 'day':
              case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
              case 'hour':
                time = this._d.valueOf();
                time -= mod$1(
                  time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                  MS_PER_HOUR,
                );
                break;
              case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
              case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
            }

            this._d.setTime(time);
            hooks.updateOffset(this, true);
            return this;
          }

          function endOf(units) {
            var time;
            units = normalizeUnits(units);
            if (units === undefined || units === 'millisecond' || !this.isValid()) {
              return this;
            }

            var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

            switch (units) {
              case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
              case 'quarter':
                time = startOfDate(this.year(), this.month() - (this.month() % 3) + 3, 1) - 1;
                break;
              case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
              case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
                break;
              case 'isoWeek':
                time =
                  startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - (this.isoWeekday() - 1) + 7,
                  ) - 1;
                break;
              case 'day':
              case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
              case 'hour':
                time = this._d.valueOf();
                time +=
                  MS_PER_HOUR -
                  mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) -
                  1;
                break;
              case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
              case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
            }

            this._d.setTime(time);
            hooks.updateOffset(this, true);
            return this;
          }

          function valueOf() {
            return this._d.valueOf() - (this._offset || 0) * 60000;
          }

          function unix() {
            return Math.floor(this.valueOf() / 1000);
          }

          function toDate() {
            return new Date(this.valueOf());
          }

          function toArray() {
            var m = this;
            return [
              m.year(),
              m.month(),
              m.date(),
              m.hour(),
              m.minute(),
              m.second(),
              m.millisecond(),
            ];
          }

          function toObject() {
            var m = this;
            return {
              years: m.year(),
              months: m.month(),
              date: m.date(),
              hours: m.hours(),
              minutes: m.minutes(),
              seconds: m.seconds(),
              milliseconds: m.milliseconds(),
            };
          }

          function toJSON() {
            // new Date(NaN).toJSON() === null
            return this.isValid() ? this.toISOString() : null;
          }

          function isValid$2() {
            return isValid(this);
          }

          function parsingFlags() {
            return extend({}, getParsingFlags(this));
          }

          function invalidAt() {
            return getParsingFlags(this).overflow;
          }

          function creationData() {
            return {
              input: this._i,
              format: this._f,
              locale: this._locale,
              isUTC: this._isUTC,
              strict: this._strict,
            };
          }

          // FORMATTING

          addFormatToken(0, ['gg', 2], 0, function() {
            return this.weekYear() % 100;
          });

          addFormatToken(0, ['GG', 2], 0, function() {
            return this.isoWeekYear() % 100;
          });

          function addWeekYearFormatToken(token, getter) {
            addFormatToken(0, [token, token.length], 0, getter);
          }

          addWeekYearFormatToken('gggg', 'weekYear');
          addWeekYearFormatToken('ggggg', 'weekYear');
          addWeekYearFormatToken('GGGG', 'isoWeekYear');
          addWeekYearFormatToken('GGGGG', 'isoWeekYear');

          // ALIASES

          addUnitAlias('weekYear', 'gg');
          addUnitAlias('isoWeekYear', 'GG');

          // PRIORITY

          addUnitPriority('weekYear', 1);
          addUnitPriority('isoWeekYear', 1);

          // PARSING

          addRegexToken('G', matchSigned);
          addRegexToken('g', matchSigned);
          addRegexToken('GG', match1to2, match2);
          addRegexToken('gg', match1to2, match2);
          addRegexToken('GGGG', match1to4, match4);
          addRegexToken('gggg', match1to4, match4);
          addRegexToken('GGGGG', match1to6, match6);
          addRegexToken('ggggg', match1to6, match6);

          addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function(
            input,
            week,
            config,
            token,
          ) {
            week[token.substr(0, 2)] = toInt(input);
          });

          addWeekParseToken(['gg', 'GG'], function(input, week, config, token) {
            week[token] = hooks.parseTwoDigitYear(input);
          });

          // MOMENTS

          function getSetWeekYear(input) {
            return getSetWeekYearHelper.call(
              this,
              input,
              this.week(),
              this.weekday(),
              this.localeData()._week.dow,
              this.localeData()._week.doy,
            );
          }

          function getSetISOWeekYear(input) {
            return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
          }

          function getISOWeeksInYear() {
            return weeksInYear(this.year(), 1, 4);
          }

          function getWeeksInYear() {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
          }

          function getSetWeekYearHelper(input, week, weekday, dow, doy) {
            var weeksTarget;
            if (input == null) {
              return weekOfYear(this, dow, doy).year;
            } else {
              weeksTarget = weeksInYear(input, dow, doy);
              if (week > weeksTarget) {
                week = weeksTarget;
              }
              return setWeekAll.call(this, input, week, weekday, dow, doy);
            }
          }

          function setWeekAll(weekYear, week, weekday, dow, doy) {
            var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
              date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

            this.year(date.getUTCFullYear());
            this.month(date.getUTCMonth());
            this.date(date.getUTCDate());
            return this;
          }

          // FORMATTING

          addFormatToken('Q', 0, 'Qo', 'quarter');

          // ALIASES

          addUnitAlias('quarter', 'Q');

          // PRIORITY

          addUnitPriority('quarter', 7);

          // PARSING

          addRegexToken('Q', match1);
          addParseToken('Q', function(input, array) {
            array[MONTH] = (toInt(input) - 1) * 3;
          });

          // MOMENTS

          function getSetQuarter(input) {
            return input == null
              ? Math.ceil((this.month() + 1) / 3)
              : this.month((input - 1) * 3 + (this.month() % 3));
          }

          // FORMATTING

          addFormatToken('D', ['DD', 2], 'Do', 'date');

          // ALIASES

          addUnitAlias('date', 'D');

          // PRIORITY
          addUnitPriority('date', 9);

          // PARSING

          addRegexToken('D', match1to2);
          addRegexToken('DD', match1to2, match2);
          addRegexToken('Do', function(isStrict, locale) {
            // TODO: Remove "ordinalParse" fallback in next major release.
            return isStrict
              ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
              : locale._dayOfMonthOrdinalParseLenient;
          });

          addParseToken(['D', 'DD'], DATE);
          addParseToken('Do', function(input, array) {
            array[DATE] = toInt(input.match(match1to2)[0]);
          });

          // MOMENTS

          var getSetDayOfMonth = makeGetSet('Date', true);

          // FORMATTING

          addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

          // ALIASES

          addUnitAlias('dayOfYear', 'DDD');

          // PRIORITY
          addUnitPriority('dayOfYear', 4);

          // PARSING

          addRegexToken('DDD', match1to3);
          addRegexToken('DDDD', match3);
          addParseToken(['DDD', 'DDDD'], function(input, array, config) {
            config._dayOfYear = toInt(input);
          });

          // HELPERS

          // MOMENTS

          function getSetDayOfYear(input) {
            var dayOfYear =
              Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
            return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
          }

          // FORMATTING

          addFormatToken('m', ['mm', 2], 0, 'minute');

          // ALIASES

          addUnitAlias('minute', 'm');

          // PRIORITY

          addUnitPriority('minute', 14);

          // PARSING

          addRegexToken('m', match1to2);
          addRegexToken('mm', match1to2, match2);
          addParseToken(['m', 'mm'], MINUTE);

          // MOMENTS

          var getSetMinute = makeGetSet('Minutes', false);

          // FORMATTING

          addFormatToken('s', ['ss', 2], 0, 'second');

          // ALIASES

          addUnitAlias('second', 's');

          // PRIORITY

          addUnitPriority('second', 15);

          // PARSING

          addRegexToken('s', match1to2);
          addRegexToken('ss', match1to2, match2);
          addParseToken(['s', 'ss'], SECOND);

          // MOMENTS

          var getSetSecond = makeGetSet('Seconds', false);

          // FORMATTING

          addFormatToken('S', 0, 0, function() {
            return ~~(this.millisecond() / 100);
          });

          addFormatToken(0, ['SS', 2], 0, function() {
            return ~~(this.millisecond() / 10);
          });

          addFormatToken(0, ['SSS', 3], 0, 'millisecond');
          addFormatToken(0, ['SSSS', 4], 0, function() {
            return this.millisecond() * 10;
          });
          addFormatToken(0, ['SSSSS', 5], 0, function() {
            return this.millisecond() * 100;
          });
          addFormatToken(0, ['SSSSSS', 6], 0, function() {
            return this.millisecond() * 1000;
          });
          addFormatToken(0, ['SSSSSSS', 7], 0, function() {
            return this.millisecond() * 10000;
          });
          addFormatToken(0, ['SSSSSSSS', 8], 0, function() {
            return this.millisecond() * 100000;
          });
          addFormatToken(0, ['SSSSSSSSS', 9], 0, function() {
            return this.millisecond() * 1000000;
          });

          // ALIASES

          addUnitAlias('millisecond', 'ms');

          // PRIORITY

          addUnitPriority('millisecond', 16);

          // PARSING

          addRegexToken('S', match1to3, match1);
          addRegexToken('SS', match1to3, match2);
          addRegexToken('SSS', match1to3, match3);

          var token;
          for (token = 'SSSS'; token.length <= 9; token += 'S') {
            addRegexToken(token, matchUnsigned);
          }

          function parseMs(input, array) {
            array[MILLISECOND] = toInt(('0.' + input) * 1000);
          }

          for (token = 'S'; token.length <= 9; token += 'S') {
            addParseToken(token, parseMs);
          }
          // MOMENTS

          var getSetMillisecond = makeGetSet('Milliseconds', false);

          // FORMATTING

          addFormatToken('z', 0, 0, 'zoneAbbr');
          addFormatToken('zz', 0, 0, 'zoneName');

          // MOMENTS

          function getZoneAbbr() {
            return this._isUTC ? 'UTC' : '';
          }

          function getZoneName() {
            return this._isUTC ? 'Coordinated Universal Time' : '';
          }

          var proto = Moment.prototype;

          proto.add = add;
          proto.calendar = calendar$1;
          proto.clone = clone;
          proto.diff = diff;
          proto.endOf = endOf;
          proto.format = format;
          proto.from = from;
          proto.fromNow = fromNow;
          proto.to = to;
          proto.toNow = toNow;
          proto.get = stringGet;
          proto.invalidAt = invalidAt;
          proto.isAfter = isAfter;
          proto.isBefore = isBefore;
          proto.isBetween = isBetween;
          proto.isSame = isSame;
          proto.isSameOrAfter = isSameOrAfter;
          proto.isSameOrBefore = isSameOrBefore;
          proto.isValid = isValid$2;
          proto.lang = lang;
          proto.locale = locale;
          proto.localeData = localeData;
          proto.max = prototypeMax;
          proto.min = prototypeMin;
          proto.parsingFlags = parsingFlags;
          proto.set = stringSet;
          proto.startOf = startOf;
          proto.subtract = subtract;
          proto.toArray = toArray;
          proto.toObject = toObject;
          proto.toDate = toDate;
          proto.toISOString = toISOString;
          proto.inspect = inspect;
          proto.toJSON = toJSON;
          proto.toString = toString;
          proto.unix = unix;
          proto.valueOf = valueOf;
          proto.creationData = creationData;
          proto.year = getSetYear;
          proto.isLeapYear = getIsLeapYear;
          proto.weekYear = getSetWeekYear;
          proto.isoWeekYear = getSetISOWeekYear;
          proto.quarter = proto.quarters = getSetQuarter;
          proto.month = getSetMonth;
          proto.daysInMonth = getDaysInMonth;
          proto.week = proto.weeks = getSetWeek;
          proto.isoWeek = proto.isoWeeks = getSetISOWeek;
          proto.weeksInYear = getWeeksInYear;
          proto.isoWeeksInYear = getISOWeeksInYear;
          proto.date = getSetDayOfMonth;
          proto.day = proto.days = getSetDayOfWeek;
          proto.weekday = getSetLocaleDayOfWeek;
          proto.isoWeekday = getSetISODayOfWeek;
          proto.dayOfYear = getSetDayOfYear;
          proto.hour = proto.hours = getSetHour;
          proto.minute = proto.minutes = getSetMinute;
          proto.second = proto.seconds = getSetSecond;
          proto.millisecond = proto.milliseconds = getSetMillisecond;
          proto.utcOffset = getSetOffset;
          proto.utc = setOffsetToUTC;
          proto.local = setOffsetToLocal;
          proto.parseZone = setOffsetToParsedOffset;
          proto.hasAlignedHourOffset = hasAlignedHourOffset;
          proto.isDST = isDaylightSavingTime;
          proto.isLocal = isLocal;
          proto.isUtcOffset = isUtcOffset;
          proto.isUtc = isUtc;
          proto.isUTC = isUtc;
          proto.zoneAbbr = getZoneAbbr;
          proto.zoneName = getZoneName;
          proto.dates = deprecate(
            'dates accessor is deprecated. Use date instead.',
            getSetDayOfMonth,
          );
          proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
          proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
          proto.zone = deprecate(
            'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
            getSetZone,
          );
          proto.isDSTShifted = deprecate(
            'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
            isDaylightSavingTimeShifted,
          );

          function createUnix(input) {
            return createLocal(input * 1000);
          }

          function createInZone() {
            return createLocal.apply(null, arguments).parseZone();
          }

          function preParsePostFormat(string) {
            return string;
          }

          var proto$1 = Locale.prototype;

          proto$1.calendar = calendar;
          proto$1.longDateFormat = longDateFormat;
          proto$1.invalidDate = invalidDate;
          proto$1.ordinal = ordinal;
          proto$1.preparse = preParsePostFormat;
          proto$1.postformat = preParsePostFormat;
          proto$1.relativeTime = relativeTime;
          proto$1.pastFuture = pastFuture;
          proto$1.set = set;

          proto$1.months = localeMonths;
          proto$1.monthsShort = localeMonthsShort;
          proto$1.monthsParse = localeMonthsParse;
          proto$1.monthsRegex = monthsRegex;
          proto$1.monthsShortRegex = monthsShortRegex;
          proto$1.week = localeWeek;
          proto$1.firstDayOfYear = localeFirstDayOfYear;
          proto$1.firstDayOfWeek = localeFirstDayOfWeek;

          proto$1.weekdays = localeWeekdays;
          proto$1.weekdaysMin = localeWeekdaysMin;
          proto$1.weekdaysShort = localeWeekdaysShort;
          proto$1.weekdaysParse = localeWeekdaysParse;

          proto$1.weekdaysRegex = weekdaysRegex;
          proto$1.weekdaysShortRegex = weekdaysShortRegex;
          proto$1.weekdaysMinRegex = weekdaysMinRegex;

          proto$1.isPM = localeIsPM;
          proto$1.meridiem = localeMeridiem;

          function get$1(format, index, field, setter) {
            var locale = getLocale();
            var utc = createUTC().set(setter, index);
            return locale[field](utc, format);
          }

          function listMonthsImpl(format, index, field) {
            if (isNumber(format)) {
              index = format;
              format = undefined;
            }

            format = format || '';

            if (index != null) {
              return get$1(format, index, field, 'month');
            }

            var i;
            var out = [];
            for (i = 0; i < 12; i++) {
              out[i] = get$1(format, i, field, 'month');
            }
            return out;
          }

          // ()
          // (5)
          // (fmt, 5)
          // (fmt)
          // (true)
          // (true, 5)
          // (true, fmt, 5)
          // (true, fmt)
          function listWeekdaysImpl(localeSorted, format, index, field) {
            if (typeof localeSorted === 'boolean') {
              if (isNumber(format)) {
                index = format;
                format = undefined;
              }

              format = format || '';
            } else {
              format = localeSorted;
              index = format;
              localeSorted = false;

              if (isNumber(format)) {
                index = format;
                format = undefined;
              }

              format = format || '';
            }

            var locale = getLocale(),
              shift = localeSorted ? locale._week.dow : 0;

            if (index != null) {
              return get$1(format, (index + shift) % 7, field, 'day');
            }

            var i;
            var out = [];
            for (i = 0; i < 7; i++) {
              out[i] = get$1(format, (i + shift) % 7, field, 'day');
            }
            return out;
          }

          function listMonths(format, index) {
            return listMonthsImpl(format, index, 'months');
          }

          function listMonthsShort(format, index) {
            return listMonthsImpl(format, index, 'monthsShort');
          }

          function listWeekdays(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
          }

          function listWeekdaysShort(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
          }

          function listWeekdaysMin(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
          }

          getSetGlobalLocale('en', {
            dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
            ordinal: function(number) {
              var b = number % 10,
                output =
                  toInt((number % 100) / 10) === 1
                    ? 'th'
                    : b === 1
                    ? 'st'
                    : b === 2
                    ? 'nd'
                    : b === 3
                    ? 'rd'
                    : 'th';
              return number + output;
            },
          });

          // Side effect imports

          hooks.lang = deprecate(
            'moment.lang is deprecated. Use moment.locale instead.',
            getSetGlobalLocale,
          );
          hooks.langData = deprecate(
            'moment.langData is deprecated. Use moment.localeData instead.',
            getLocale,
          );

          var mathAbs = Math.abs;

          function abs() {
            var data = this._data;

            this._milliseconds = mathAbs(this._milliseconds);
            this._days = mathAbs(this._days);
            this._months = mathAbs(this._months);

            data.milliseconds = mathAbs(data.milliseconds);
            data.seconds = mathAbs(data.seconds);
            data.minutes = mathAbs(data.minutes);
            data.hours = mathAbs(data.hours);
            data.months = mathAbs(data.months);
            data.years = mathAbs(data.years);

            return this;
          }

          function addSubtract$1(duration, input, value, direction) {
            var other = createDuration(input, value);

            duration._milliseconds += direction * other._milliseconds;
            duration._days += direction * other._days;
            duration._months += direction * other._months;

            return duration._bubble();
          }

          // supports only 2.0-style add(1, 's') or add(duration)
          function add$1(input, value) {
            return addSubtract$1(this, input, value, 1);
          }

          // supports only 2.0-style subtract(1, 's') or subtract(duration)
          function subtract$1(input, value) {
            return addSubtract$1(this, input, value, -1);
          }

          function absCeil(number) {
            if (number < 0) {
              return Math.floor(number);
            } else {
              return Math.ceil(number);
            }
          }

          function bubble() {
            var milliseconds = this._milliseconds;
            var days = this._days;
            var months = this._months;
            var data = this._data;
            var seconds, minutes, hours, years, monthsFromDays;

            // if we have a mix of positive and negative values, bubble down first
            // check: https://github.com/moment/moment/issues/2166
            if (
              !(
                (milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0)
              )
            ) {
              milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
              days = 0;
              months = 0;
            }

            // The following code bubbles up values, see the tests for
            // examples of what that means.
            data.milliseconds = milliseconds % 1000;

            seconds = absFloor(milliseconds / 1000);
            data.seconds = seconds % 60;

            minutes = absFloor(seconds / 60);
            data.minutes = minutes % 60;

            hours = absFloor(minutes / 60);
            data.hours = hours % 24;

            days += absFloor(hours / 24);

            // convert days to months
            monthsFromDays = absFloor(daysToMonths(days));
            months += monthsFromDays;
            days -= absCeil(monthsToDays(monthsFromDays));

            // 12 months -> 1 year
            years = absFloor(months / 12);
            months %= 12;

            data.days = days;
            data.months = months;
            data.years = years;

            return this;
          }

          function daysToMonths(days) {
            // 400 years have 146097 days (taking into account leap year rules)
            // 400 years have 12 months === 4800
            return (days * 4800) / 146097;
          }

          function monthsToDays(months) {
            // the reverse of daysToMonths
            return (months * 146097) / 4800;
          }

          function as(units) {
            if (!this.isValid()) {
              return NaN;
            }
            var days;
            var months;
            var milliseconds = this._milliseconds;

            units = normalizeUnits(units);

            if (units === 'month' || units === 'quarter' || units === 'year') {
              days = this._days + milliseconds / 864e5;
              months = this._months + daysToMonths(days);
              switch (units) {
                case 'month':
                  return months;
                case 'quarter':
                  return months / 3;
                case 'year':
                  return months / 12;
              }
            } else {
              // handle milliseconds separately because of floating point math errors (issue #1867)
              days = this._days + Math.round(monthsToDays(this._months));
              switch (units) {
                case 'week':
                  return days / 7 + milliseconds / 6048e5;
                case 'day':
                  return days + milliseconds / 864e5;
                case 'hour':
                  return days * 24 + milliseconds / 36e5;
                case 'minute':
                  return days * 1440 + milliseconds / 6e4;
                case 'second':
                  return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond':
                  return Math.floor(days * 864e5) + milliseconds;
                default:
                  throw new Error('Unknown unit ' + units);
              }
            }
          }

          // TODO: Use this.as('ms')?
          function valueOf$1() {
            if (!this.isValid()) {
              return NaN;
            }
            return (
              this._milliseconds +
              this._days * 864e5 +
              (this._months % 12) * 2592e6 +
              toInt(this._months / 12) * 31536e6
            );
          }

          function makeAs(alias) {
            return function() {
              return this.as(alias);
            };
          }

          var asMilliseconds = makeAs('ms');
          var asSeconds = makeAs('s');
          var asMinutes = makeAs('m');
          var asHours = makeAs('h');
          var asDays = makeAs('d');
          var asWeeks = makeAs('w');
          var asMonths = makeAs('M');
          var asQuarters = makeAs('Q');
          var asYears = makeAs('y');

          function clone$1() {
            return createDuration(this);
          }

          function get$2(units) {
            units = normalizeUnits(units);
            return this.isValid() ? this[units + 's']() : NaN;
          }

          function makeGetter(name) {
            return function() {
              return this.isValid() ? this._data[name] : NaN;
            };
          }

          var milliseconds = makeGetter('milliseconds');
          var seconds = makeGetter('seconds');
          var minutes = makeGetter('minutes');
          var hours = makeGetter('hours');
          var days = makeGetter('days');
          var months = makeGetter('months');
          var years = makeGetter('years');

          function weeks() {
            return absFloor(this.days() / 7);
          }

          var round = Math.round;
          var thresholds = {
            ss: 44, // a few seconds to seconds
            s: 45, // seconds to minute
            m: 45, // minutes to hour
            h: 22, // hours to day
            d: 26, // days to month
            M: 11, // months to year
          };

          // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
          function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
            return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
          }

          function relativeTime$1(posNegDuration, withoutSuffix, locale) {
            var duration = createDuration(posNegDuration).abs();
            var seconds = round(duration.as('s'));
            var minutes = round(duration.as('m'));
            var hours = round(duration.as('h'));
            var days = round(duration.as('d'));
            var months = round(duration.as('M'));
            var years = round(duration.as('y'));

            var a = (seconds <= thresholds.ss && ['s', seconds]) ||
              (seconds < thresholds.s && ['ss', seconds]) ||
              (minutes <= 1 && ['m']) ||
              (minutes < thresholds.m && ['mm', minutes]) ||
              (hours <= 1 && ['h']) ||
              (hours < thresholds.h && ['hh', hours]) ||
              (days <= 1 && ['d']) ||
              (days < thresholds.d && ['dd', days]) ||
              (months <= 1 && ['M']) ||
              (months < thresholds.M && ['MM', months]) ||
              (years <= 1 && ['y']) || ['yy', years];

            a[2] = withoutSuffix;
            a[3] = +posNegDuration > 0;
            a[4] = locale;
            return substituteTimeAgo.apply(null, a);
          }

          // This function allows you to set the rounding function for relative time strings
          function getSetRelativeTimeRounding(roundingFunction) {
            if (roundingFunction === undefined) {
              return round;
            }
            if (typeof roundingFunction === 'function') {
              round = roundingFunction;
              return true;
            }
            return false;
          }

          // This function allows you to set a threshold for relative time strings
          function getSetRelativeTimeThreshold(threshold, limit) {
            if (thresholds[threshold] === undefined) {
              return false;
            }
            if (limit === undefined) {
              return thresholds[threshold];
            }
            thresholds[threshold] = limit;
            if (threshold === 's') {
              thresholds.ss = limit - 1;
            }
            return true;
          }

          function humanize(withSuffix) {
            if (!this.isValid()) {
              return this.localeData().invalidDate();
            }

            var locale = this.localeData();
            var output = relativeTime$1(this, !withSuffix, locale);

            if (withSuffix) {
              output = locale.pastFuture(+this, output);
            }

            return locale.postformat(output);
          }

          var abs$1 = Math.abs;

          function sign(x) {
            return (x > 0) - (x < 0) || +x;
          }

          function toISOString$1() {
            // for ISO strings we do not use the normal bubbling rules:
            //  * milliseconds bubble up until they become hours
            //  * days do not bubble at all
            //  * months bubble up until they become years
            // This is because there is no context-free conversion between hours and days
            // (think of clock changes)
            // and also not between days and months (28-31 days per month)
            if (!this.isValid()) {
              return this.localeData().invalidDate();
            }

            var seconds = abs$1(this._milliseconds) / 1000;
            var days = abs$1(this._days);
            var months = abs$1(this._months);
            var minutes, hours, years;

            // 3600 seconds -> 60 minutes -> 1 hour
            minutes = absFloor(seconds / 60);
            hours = absFloor(minutes / 60);
            seconds %= 60;
            minutes %= 60;

            // 12 months -> 1 year
            years = absFloor(months / 12);
            months %= 12;

            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
            var Y = years;
            var M = months;
            var D = days;
            var h = hours;
            var m = minutes;
            var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
            var total = this.asSeconds();

            if (!total) {
              // this is the same as C#'s (Noda) and python (isodate)...
              // but not other JS (goog.date)
              return 'P0D';
            }

            var totalSign = total < 0 ? '-' : '';
            var ymSign = sign(this._months) !== sign(total) ? '-' : '';
            var daysSign = sign(this._days) !== sign(total) ? '-' : '';
            var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

            return (
              totalSign +
              'P' +
              (Y ? ymSign + Y + 'Y' : '') +
              (M ? ymSign + M + 'M' : '') +
              (D ? daysSign + D + 'D' : '') +
              (h || m || s ? 'T' : '') +
              (h ? hmsSign + h + 'H' : '') +
              (m ? hmsSign + m + 'M' : '') +
              (s ? hmsSign + s + 'S' : '')
            );
          }

          var proto$2 = Duration.prototype;

          proto$2.isValid = isValid$1;
          proto$2.abs = abs;
          proto$2.add = add$1;
          proto$2.subtract = subtract$1;
          proto$2.as = as;
          proto$2.asMilliseconds = asMilliseconds;
          proto$2.asSeconds = asSeconds;
          proto$2.asMinutes = asMinutes;
          proto$2.asHours = asHours;
          proto$2.asDays = asDays;
          proto$2.asWeeks = asWeeks;
          proto$2.asMonths = asMonths;
          proto$2.asQuarters = asQuarters;
          proto$2.asYears = asYears;
          proto$2.valueOf = valueOf$1;
          proto$2._bubble = bubble;
          proto$2.clone = clone$1;
          proto$2.get = get$2;
          proto$2.milliseconds = milliseconds;
          proto$2.seconds = seconds;
          proto$2.minutes = minutes;
          proto$2.hours = hours;
          proto$2.days = days;
          proto$2.weeks = weeks;
          proto$2.months = months;
          proto$2.years = years;
          proto$2.humanize = humanize;
          proto$2.toISOString = toISOString$1;
          proto$2.toString = toISOString$1;
          proto$2.toJSON = toISOString$1;
          proto$2.locale = locale;
          proto$2.localeData = localeData;

          proto$2.toIsoString = deprecate(
            'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
            toISOString$1,
          );
          proto$2.lang = lang;

          // Side effect imports

          // FORMATTING

          addFormatToken('X', 0, 0, 'unix');
          addFormatToken('x', 0, 0, 'valueOf');

          // PARSING

          addRegexToken('x', matchSigned);
          addRegexToken('X', matchTimestamp);
          addParseToken('X', function(input, array, config) {
            config._d = new Date(parseFloat(input, 10) * 1000);
          });
          addParseToken('x', function(input, array, config) {
            config._d = new Date(toInt(input));
          });

          // Side effect imports

          hooks.version = '2.24.0';

          setHookCallback(createLocal);

          hooks.fn = proto;
          hooks.min = min;
          hooks.max = max;
          hooks.now = now;
          hooks.utc = createUTC;
          hooks.unix = createUnix;
          hooks.months = listMonths;
          hooks.isDate = isDate;
          hooks.locale = getSetGlobalLocale;
          hooks.invalid = createInvalid;
          hooks.duration = createDuration;
          hooks.isMoment = isMoment;
          hooks.weekdays = listWeekdays;
          hooks.parseZone = createInZone;
          hooks.localeData = getLocale;
          hooks.isDuration = isDuration;
          hooks.monthsShort = listMonthsShort;
          hooks.weekdaysMin = listWeekdaysMin;
          hooks.defineLocale = defineLocale;
          hooks.updateLocale = updateLocale;
          hooks.locales = listLocales;
          hooks.weekdaysShort = listWeekdaysShort;
          hooks.normalizeUnits = normalizeUnits;
          hooks.relativeTimeRounding = getSetRelativeTimeRounding;
          hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
          hooks.calendarFormat = getCalendarFormat;
          hooks.prototype = proto;

          // currently HTML5 input type only supports 24-hour formats
          hooks.HTML5_FMT = {
            DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
            DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
            DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
            DATE: 'YYYY-MM-DD', // <input type="date" />
            TIME: 'HH:mm', // <input type="time" />
            TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
            TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
            WEEK: 'GGGG-[W]WW', // <input type="week" />
            MONTH: 'YYYY-MM', // <input type="month" />
          };

          return hooks;
        });

        /***/
      },

    /***/ './node_modules/object-assign/index.js':
      /*!*********************************************!*\
  !*** ./node_modules/object-assign/index.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';
        /*
object-assign
(c) Sindre Sorhus
@license MIT
*/

        /* eslint-disable no-unused-vars */
        var getOwnPropertySymbols = Object.getOwnPropertySymbols;
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var propIsEnumerable = Object.prototype.propertyIsEnumerable;

        function toObject(val) {
          if (val === null || val === undefined) {
            throw new TypeError('Object.assign cannot be called with null or undefined');
          }

          return Object(val);
        }

        function shouldUseNative() {
          try {
            if (!Object.assign) {
              return false;
            }

            // Detect buggy property enumeration order in older V8 versions.

            // https://bugs.chromium.org/p/v8/issues/detail?id=4118
            var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
            test1[5] = 'de';
            if (Object.getOwnPropertyNames(test1)[0] === '5') {
              return false;
            }

            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test2 = {};
            for (var i = 0; i < 10; i++) {
              test2['_' + String.fromCharCode(i)] = i;
            }
            var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
              return test2[n];
            });
            if (order2.join('') !== '0123456789') {
              return false;
            }

            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test3 = {};
            'abcdefghijklmnopqrst'.split('').forEach(function(letter) {
              test3[letter] = letter;
            });
            if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
              return false;
            }

            return true;
          } catch (err) {
            // We don't expect any of the above to throw, but better to be safe.
            return false;
          }
        }

        module.exports = shouldUseNative()
          ? Object.assign
          : function(target, source) {
              var from;
              var to = toObject(target);
              var symbols;

              for (var s = 1; s < arguments.length; s++) {
                from = Object(arguments[s]);

                for (var key in from) {
                  if (hasOwnProperty.call(from, key)) {
                    to[key] = from[key];
                  }
                }

                if (getOwnPropertySymbols) {
                  symbols = getOwnPropertySymbols(from);
                  for (var i = 0; i < symbols.length; i++) {
                    if (propIsEnumerable.call(from, symbols[i])) {
                      to[symbols[i]] = from[symbols[i]];
                    }
                  }
                }
              }

              return to;
            };

        /***/
      },

    /***/ './node_modules/performance-now/lib/performance-now.js':
      /*!*************************************************************!*\
  !*** ./node_modules/performance-now/lib/performance-now.js ***!
  \*************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(process) {
          // Generated by CoffeeScript 1.12.2
          (function() {
            var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

            if (typeof performance !== 'undefined' && performance !== null && performance.now) {
              module.exports = function() {
                return performance.now();
              };
            } else if (typeof process !== 'undefined' && process !== null && process.hrtime) {
              module.exports = function() {
                return (getNanoSeconds() - nodeLoadTime) / 1e6;
              };
              hrtime = process.hrtime;
              getNanoSeconds = function() {
                var hr;
                hr = hrtime();
                return hr[0] * 1e9 + hr[1];
              };
              moduleLoadTime = getNanoSeconds();
              upTime = process.uptime() * 1e9;
              nodeLoadTime = moduleLoadTime - upTime;
            } else if (Date.now) {
              module.exports = function() {
                return Date.now() - loadTime;
              };
              loadTime = Date.now();
            } else {
              module.exports = function() {
                return new Date().getTime() - loadTime;
              };
              loadTime = new Date().getTime();
            }
          }.call(this));

          //# sourceMappingURL=performance-now.js.map

          /* WEBPACK VAR INJECTION */
        }.call(
          this,
          __webpack_require__(
            /*! ./../../process/browser.js */ './node_modules/process/browser.js',
          ),
        ));

        /***/
      },

    /***/ './node_modules/process/browser.js':
      /*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        // shim for using process in browser
        var process = (module.exports = {});

        // cached from whatever global is present so that test runners that stub it
        // don't break things.  But we need to wrap it in a try catch in case it is
        // wrapped in strict mode code which doesn't define any globals.  It's inside a
        // function because try/catches deoptimize in certain engines.

        var cachedSetTimeout;
        var cachedClearTimeout;

        function defaultSetTimout() {
          throw new Error('setTimeout has not been defined');
        }
        function defaultClearTimeout() {
          throw new Error('clearTimeout has not been defined');
        }
        (function() {
          try {
            if (typeof setTimeout === 'function') {
              cachedSetTimeout = setTimeout;
            } else {
              cachedSetTimeout = defaultSetTimout;
            }
          } catch (e) {
            cachedSetTimeout = defaultSetTimout;
          }
          try {
            if (typeof clearTimeout === 'function') {
              cachedClearTimeout = clearTimeout;
            } else {
              cachedClearTimeout = defaultClearTimeout;
            }
          } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
          }
        })();
        function runTimeout(fun) {
          if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
          }
          // if setTimeout wasn't available but was latter defined
          if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
          }
          try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
          } catch (e) {
            try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
            } catch (e) {
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
            }
          }
        }
        function runClearTimeout(marker) {
          if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
          }
          // if clearTimeout wasn't available but was latter defined
          if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
          }
          try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
          } catch (e) {
            try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
            } catch (e) {
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
            }
          }
        }
        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;

        function cleanUpNextTick() {
          if (!draining || !currentQueue) {
            return;
          }
          draining = false;
          if (currentQueue.length) {
            queue = currentQueue.concat(queue);
          } else {
            queueIndex = -1;
          }
          if (queue.length) {
            drainQueue();
          }
        }

        function drainQueue() {
          if (draining) {
            return;
          }
          var timeout = runTimeout(cleanUpNextTick);
          draining = true;

          var len = queue.length;
          while (len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
              if (currentQueue) {
                currentQueue[queueIndex].run();
              }
            }
            queueIndex = -1;
            len = queue.length;
          }
          currentQueue = null;
          draining = false;
          runClearTimeout(timeout);
        }

        process.nextTick = function(fun) {
          var args = new Array(arguments.length - 1);
          if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
            }
          }
          queue.push(new Item(fun, args));
          if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
          }
        };

        // v8 likes predictible objects
        function Item(fun, array) {
          this.fun = fun;
          this.array = array;
        }
        Item.prototype.run = function() {
          this.fun.apply(null, this.array);
        };
        process.title = 'browser';
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = ''; // empty string to avoid regexp issues
        process.versions = {};

        function noop() {}

        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.prependListener = noop;
        process.prependOnceListener = noop;

        process.listeners = function(name) {
          return [];
        };

        process.binding = function(name) {
          throw new Error('process.binding is not supported');
        };

        process.cwd = function() {
          return '/';
        };
        process.chdir = function(dir) {
          throw new Error('process.chdir is not supported');
        };
        process.umask = function() {
          return 0;
        };

        /***/
      },

    /***/ './node_modules/prop-types/checkPropTypes.js':
      /*!***************************************************!*\
  !*** ./node_modules/prop-types/checkPropTypes.js ***!
  \***************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */

        var printWarning = function() {};

        if (true) {
          var ReactPropTypesSecret = __webpack_require__(
            /*! ./lib/ReactPropTypesSecret */ './node_modules/prop-types/lib/ReactPropTypesSecret.js',
          );
          var loggedTypeFailures = {};
          var has = Function.call.bind(Object.prototype.hasOwnProperty);

          printWarning = function(text) {
            var message = 'Warning: ' + text;
            if (typeof console !== 'undefined') {
              console.error(message);
            }
            try {
              // --- Welcome to debugging React ---
              // This error was thrown as a convenience so that you can use this stack
              // to find the callsite that caused this warning to fire.
              throw new Error(message);
            } catch (x) {}
          };
        }

        /**
         * Assert that the values match with the type specs.
         * Error messages are memorized and will only be shown once.
         *
         * @param {object} typeSpecs Map of name to a ReactPropType
         * @param {object} values Runtime values that need to be type-checked
         * @param {string} location e.g. "prop", "context", "child context"
         * @param {string} componentName Name of the component for error messages.
         * @param {?Function} getStack Returns the component stack.
         * @private
         */
        function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
          if (true) {
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error;
                // Prop type validation may throw. In case they do, we don't want to
                // fail the render phase where it didn't fail before. So we log it.
                // After these have been cleaned up, we'll let them throw.
                try {
                  // This is intentionally an invariant that gets caught. It's the same
                  // behavior as without this statement except with a better message.
                  if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error(
                      (componentName || 'React class') +
                        ': ' +
                        location +
                        ' type `' +
                        typeSpecName +
                        '` is invalid; ' +
                        'it must be a function, usually from the `prop-types` package, but received `' +
                        typeof typeSpecs[typeSpecName] +
                        '`.',
                    );
                    err.name = 'Invariant Violation';
                    throw err;
                  }
                  error = typeSpecs[typeSpecName](
                    values,
                    typeSpecName,
                    componentName,
                    location,
                    null,
                    ReactPropTypesSecret,
                  );
                } catch (ex) {
                  error = ex;
                }
                if (error && !(error instanceof Error)) {
                  printWarning(
                    (componentName || 'React class') +
                      ': type specification of ' +
                      location +
                      ' `' +
                      typeSpecName +
                      '` is invalid; the type checker ' +
                      'function must return `null` or an `Error` but returned a ' +
                      typeof error +
                      '. ' +
                      'You may have forgotten to pass an argument to the type checker ' +
                      'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
                      'shape all require an argument).',
                  );
                }
                if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                  // Only monitor this failure once because there tends to be a lot of the
                  // same error.
                  loggedTypeFailures[error.message] = true;

                  var stack = getStack ? getStack() : '';

                  printWarning(
                    'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''),
                  );
                }
              }
            }
          }
        }

        /**
         * Resets warning cache when testing.
         *
         * @private
         */
        checkPropTypes.resetWarningCache = function() {
          if (true) {
            loggedTypeFailures = {};
          }
        };

        module.exports = checkPropTypes;

        /***/
      },

    /***/ './node_modules/prop-types/factoryWithTypeCheckers.js':
      /*!************************************************************!*\
  !*** ./node_modules/prop-types/factoryWithTypeCheckers.js ***!
  \************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */

        var ReactIs = __webpack_require__(/*! react-is */ './node_modules/react-is/index.js');
        var assign = __webpack_require__(
          /*! object-assign */ './node_modules/object-assign/index.js',
        );

        var ReactPropTypesSecret = __webpack_require__(
          /*! ./lib/ReactPropTypesSecret */ './node_modules/prop-types/lib/ReactPropTypesSecret.js',
        );
        var checkPropTypes = __webpack_require__(
          /*! ./checkPropTypes */ './node_modules/prop-types/checkPropTypes.js',
        );

        var has = Function.call.bind(Object.prototype.hasOwnProperty);
        var printWarning = function() {};

        if (true) {
          printWarning = function(text) {
            var message = 'Warning: ' + text;
            if (typeof console !== 'undefined') {
              console.error(message);
            }
            try {
              // --- Welcome to debugging React ---
              // This error was thrown as a convenience so that you can use this stack
              // to find the callsite that caused this warning to fire.
              throw new Error(message);
            } catch (x) {}
          };
        }

        function emptyFunctionThatReturnsNull() {
          return null;
        }

        module.exports = function(isValidElement, throwOnDirectAccess) {
          /* global Symbol */
          var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

          /**
           * Returns the iterator method function contained on the iterable object.
           *
           * Be sure to invoke the function with the iterable as context:
           *
           *     var iteratorFn = getIteratorFn(myIterable);
           *     if (iteratorFn) {
           *       var iterator = iteratorFn.call(myIterable);
           *       ...
           *     }
           *
           * @param {?object} maybeIterable
           * @return {?function}
           */
          function getIteratorFn(maybeIterable) {
            var iteratorFn =
              maybeIterable &&
              ((ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL]) ||
                maybeIterable[FAUX_ITERATOR_SYMBOL]);
            if (typeof iteratorFn === 'function') {
              return iteratorFn;
            }
          }

          /**
           * Collection of methods that allow declaration and validation of props that are
           * supplied to React components. Example usage:
           *
           *   var Props = require('ReactPropTypes');
           *   var MyArticle = React.createClass({
           *     propTypes: {
           *       // An optional string prop named "description".
           *       description: Props.string,
           *
           *       // A required enum prop named "category".
           *       category: Props.oneOf(['News','Photos']).isRequired,
           *
           *       // A prop named "dialog" that requires an instance of Dialog.
           *       dialog: Props.instanceOf(Dialog).isRequired
           *     },
           *     render: function() { ... }
           *   });
           *
           * A more formal specification of how these methods are used:
           *
           *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
           *   decl := ReactPropTypes.{type}(.isRequired)?
           *
           * Each and every declaration produces a function with the same signature. This
           * allows the creation of custom validation functions. For example:
           *
           *  var MyLink = React.createClass({
           *    propTypes: {
           *      // An optional string or URI prop named "href".
           *      href: function(props, propName, componentName) {
           *        var propValue = props[propName];
           *        if (propValue != null && typeof propValue !== 'string' &&
           *            !(propValue instanceof URI)) {
           *          return new Error(
           *            'Expected a string or an URI for ' + propName + ' in ' +
           *            componentName
           *          );
           *        }
           *      }
           *    },
           *    render: function() {...}
           *  });
           *
           * @internal
           */

          var ANONYMOUS = '<<anonymous>>';

          // Important!
          // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
          var ReactPropTypes = {
            array: createPrimitiveTypeChecker('array'),
            bool: createPrimitiveTypeChecker('boolean'),
            func: createPrimitiveTypeChecker('function'),
            number: createPrimitiveTypeChecker('number'),
            object: createPrimitiveTypeChecker('object'),
            string: createPrimitiveTypeChecker('string'),
            symbol: createPrimitiveTypeChecker('symbol'),

            any: createAnyTypeChecker(),
            arrayOf: createArrayOfTypeChecker,
            element: createElementTypeChecker(),
            elementType: createElementTypeTypeChecker(),
            instanceOf: createInstanceTypeChecker,
            node: createNodeChecker(),
            objectOf: createObjectOfTypeChecker,
            oneOf: createEnumTypeChecker,
            oneOfType: createUnionTypeChecker,
            shape: createShapeTypeChecker,
            exact: createStrictShapeTypeChecker,
          };

          /**
           * inlined Object.is polyfill to avoid requiring consumers ship their own
           * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
           */
          /*eslint-disable no-self-compare*/
          function is(x, y) {
            // SameValue algorithm
            if (x === y) {
              // Steps 1-5, 7-10
              // Steps 6.b-6.e: +0 != -0
              return x !== 0 || 1 / x === 1 / y;
            } else {
              // Step 6.a: NaN == NaN
              return x !== x && y !== y;
            }
          }
          /*eslint-enable no-self-compare*/

          /**
           * We use an Error-like object for backward compatibility as people may call
           * PropTypes directly and inspect their output. However, we don't use real
           * Errors anymore. We don't inspect their stack anyway, and creating them
           * is prohibitively expensive if they are created too often, such as what
           * happens in oneOfType() for any type before the one that matched.
           */
          function PropTypeError(message) {
            this.message = message;
            this.stack = '';
          }
          // Make `instanceof Error` still work for returned errors.
          PropTypeError.prototype = Error.prototype;

          function createChainableTypeChecker(validate) {
            if (true) {
              var manualPropTypeCallCache = {};
              var manualPropTypeWarningCount = 0;
            }
            function checkType(
              isRequired,
              props,
              propName,
              componentName,
              location,
              propFullName,
              secret,
            ) {
              componentName = componentName || ANONYMOUS;
              propFullName = propFullName || propName;

              if (secret !== ReactPropTypesSecret) {
                if (throwOnDirectAccess) {
                  // New behavior only for users of `prop-types` package
                  var err = new Error(
                    'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
                      'Use `PropTypes.checkPropTypes()` to call them. ' +
                      'Read more at http://fb.me/use-check-prop-types',
                  );
                  err.name = 'Invariant Violation';
                  throw err;
                } else if (true && typeof console !== 'undefined') {
                  // Old behavior for people using React.PropTypes
                  var cacheKey = componentName + ':' + propName;
                  if (
                    !manualPropTypeCallCache[cacheKey] &&
                    // Avoid spamming the console because they are often not actionable except for lib authors
                    manualPropTypeWarningCount < 3
                  ) {
                    printWarning(
                      'You are manually calling a React.PropTypes validation ' +
                        'function for the `' +
                        propFullName +
                        '` prop on `' +
                        componentName +
                        '`. This is deprecated ' +
                        'and will throw in the standalone `prop-types` package. ' +
                        'You may be seeing this warning due to a third-party PropTypes ' +
                        'library. See https://fb.me/react-warning-dont-call-proptypes ' +
                        'for details.',
                    );
                    manualPropTypeCallCache[cacheKey] = true;
                    manualPropTypeWarningCount++;
                  }
                }
              }
              if (props[propName] == null) {
                if (isRequired) {
                  if (props[propName] === null) {
                    return new PropTypeError(
                      'The ' +
                        location +
                        ' `' +
                        propFullName +
                        '` is marked as required ' +
                        ('in `' + componentName + '`, but its value is `null`.'),
                    );
                  }
                  return new PropTypeError(
                    'The ' +
                      location +
                      ' `' +
                      propFullName +
                      '` is marked as required in ' +
                      ('`' + componentName + '`, but its value is `undefined`.'),
                  );
                }
                return null;
              } else {
                return validate(props, propName, componentName, location, propFullName);
              }
            }

            var chainedCheckType = checkType.bind(null, false);
            chainedCheckType.isRequired = checkType.bind(null, true);

            return chainedCheckType;
          }

          function createPrimitiveTypeChecker(expectedType) {
            function validate(props, propName, componentName, location, propFullName, secret) {
              var propValue = props[propName];
              var propType = getPropType(propValue);
              if (propType !== expectedType) {
                // `propValue` being instance of, say, date/regexp, pass the 'object'
                // check, but we can offer a more precise error message here rather than
                // 'of type `object`'.
                var preciseType = getPreciseType(propValue);

                return new PropTypeError(
                  'Invalid ' +
                    location +
                    ' `' +
                    propFullName +
                    '` of type ' +
                    ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') +
                    ('`' + expectedType + '`.'),
                );
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }

          function createAnyTypeChecker() {
            return createChainableTypeChecker(emptyFunctionThatReturnsNull);
          }

          function createArrayOfTypeChecker(typeChecker) {
            function validate(props, propName, componentName, location, propFullName) {
              if (typeof typeChecker !== 'function') {
                return new PropTypeError(
                  'Property `' +
                    propFullName +
                    '` of component `' +
                    componentName +
                    '` has invalid PropType notation inside arrayOf.',
                );
              }
              var propValue = props[propName];
              if (!Array.isArray(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError(
                  'Invalid ' +
                    location +
                    ' `' +
                    propFullName +
                    '` of type ' +
                    ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'),
                );
              }
              for (var i = 0; i < propValue.length; i++) {
                var error = typeChecker(
                  propValue,
                  i,
                  componentName,
                  location,
                  propFullName + '[' + i + ']',
                  ReactPropTypesSecret,
                );
                if (error instanceof Error) {
                  return error;
                }
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }

          function createElementTypeChecker() {
            function validate(props, propName, componentName, location, propFullName) {
              var propValue = props[propName];
              if (!isValidElement(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError(
                  'Invalid ' +
                    location +
                    ' `' +
                    propFullName +
                    '` of type ' +
                    ('`' +
                      propType +
                      '` supplied to `' +
                      componentName +
                      '`, expected a single ReactElement.'),
                );
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }

          function createElementTypeTypeChecker() {
            function validate(props, propName, componentName, location, propFullName) {
              var propValue = props[propName];
              if (!ReactIs.isValidElementType(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError(
                  'Invalid ' +
                    location +
                    ' `' +
                    propFullName +
                    '` of type ' +
                    ('`' +
                      propType +
                      '` supplied to `' +
                      componentName +
                      '`, expected a single ReactElement type.'),
                );
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }

          function createInstanceTypeChecker(expectedClass) {
            function validate(props, propName, componentName, location, propFullName) {
              if (!(props[propName] instanceof expectedClass)) {
                var expectedClassName = expectedClass.name || ANONYMOUS;
                var actualClassName = getClassName(props[propName]);
                return new PropTypeError(
                  'Invalid ' +
                    location +
                    ' `' +
                    propFullName +
                    '` of type ' +
                    ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') +
                    ('instance of `' + expectedClassName + '`.'),
                );
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }

          function createEnumTypeChecker(expectedValues) {
            if (!Array.isArray(expectedValues)) {
              if (true) {
                if (arguments.length > 1) {
                  printWarning(
                    'Invalid arguments supplied to oneOf, expected an array, got ' +
                      arguments.length +
                      ' arguments. ' +
                      'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).',
                  );
                } else {
                  printWarning('Invalid argument supplied to oneOf, expected an array.');
                }
              }
              return emptyFunctionThatReturnsNull;
            }

            function validate(props, propName, componentName, location, propFullName) {
              var propValue = props[propName];
              for (var i = 0; i < expectedValues.length; i++) {
                if (is(propValue, expectedValues[i])) {
                  return null;
                }
              }

              var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
                var type = getPreciseType(value);
                if (type === 'symbol') {
                  return String(value);
                }
                return value;
              });
              return new PropTypeError(
                'Invalid ' +
                  location +
                  ' `' +
                  propFullName +
                  '` of value `' +
                  String(propValue) +
                  '` ' +
                  ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'),
              );
            }
            return createChainableTypeChecker(validate);
          }

          function createObjectOfTypeChecker(typeChecker) {
            function validate(props, propName, componentName, location, propFullName) {
              if (typeof typeChecker !== 'function') {
                return new PropTypeError(
                  'Property `' +
                    propFullName +
                    '` of component `' +
                    componentName +
                    '` has invalid PropType notation inside objectOf.',
                );
              }
              var propValue = props[propName];
              var propType = getPropType(propValue);
              if (propType !== 'object') {
                return new PropTypeError(
                  'Invalid ' +
                    location +
                    ' `' +
                    propFullName +
                    '` of type ' +
                    ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'),
                );
              }
              for (var key in propValue) {
                if (has(propValue, key)) {
                  var error = typeChecker(
                    propValue,
                    key,
                    componentName,
                    location,
                    propFullName + '.' + key,
                    ReactPropTypesSecret,
                  );
                  if (error instanceof Error) {
                    return error;
                  }
                }
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }

          function createUnionTypeChecker(arrayOfTypeCheckers) {
            if (!Array.isArray(arrayOfTypeCheckers)) {
              true
                ? printWarning(
                    'Invalid argument supplied to oneOfType, expected an instance of array.',
                  )
                : undefined;
              return emptyFunctionThatReturnsNull;
            }

            for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
              var checker = arrayOfTypeCheckers[i];
              if (typeof checker !== 'function') {
                printWarning(
                  'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
                    'received ' +
                    getPostfixForTypeWarning(checker) +
                    ' at index ' +
                    i +
                    '.',
                );
                return emptyFunctionThatReturnsNull;
              }
            }

            function validate(props, propName, componentName, location, propFullName) {
              for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                var checker = arrayOfTypeCheckers[i];
                if (
                  checker(
                    props,
                    propName,
                    componentName,
                    location,
                    propFullName,
                    ReactPropTypesSecret,
                  ) == null
                ) {
                  return null;
                }
              }

              return new PropTypeError(
                'Invalid ' +
                  location +
                  ' `' +
                  propFullName +
                  '` supplied to ' +
                  ('`' + componentName + '`.'),
              );
            }
            return createChainableTypeChecker(validate);
          }

          function createNodeChecker() {
            function validate(props, propName, componentName, location, propFullName) {
              if (!isNode(props[propName])) {
                return new PropTypeError(
                  'Invalid ' +
                    location +
                    ' `' +
                    propFullName +
                    '` supplied to ' +
                    ('`' + componentName + '`, expected a ReactNode.'),
                );
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }

          function createShapeTypeChecker(shapeTypes) {
            function validate(props, propName, componentName, location, propFullName) {
              var propValue = props[propName];
              var propType = getPropType(propValue);
              if (propType !== 'object') {
                return new PropTypeError(
                  'Invalid ' +
                    location +
                    ' `' +
                    propFullName +
                    '` of type `' +
                    propType +
                    '` ' +
                    ('supplied to `' + componentName + '`, expected `object`.'),
                );
              }
              for (var key in shapeTypes) {
                var checker = shapeTypes[key];
                if (!checker) {
                  continue;
                }
                var error = checker(
                  propValue,
                  key,
                  componentName,
                  location,
                  propFullName + '.' + key,
                  ReactPropTypesSecret,
                );
                if (error) {
                  return error;
                }
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }

          function createStrictShapeTypeChecker(shapeTypes) {
            function validate(props, propName, componentName, location, propFullName) {
              var propValue = props[propName];
              var propType = getPropType(propValue);
              if (propType !== 'object') {
                return new PropTypeError(
                  'Invalid ' +
                    location +
                    ' `' +
                    propFullName +
                    '` of type `' +
                    propType +
                    '` ' +
                    ('supplied to `' + componentName + '`, expected `object`.'),
                );
              }
              // We need to check all keys in case some are required but missing from
              // props.
              var allKeys = assign({}, props[propName], shapeTypes);
              for (var key in allKeys) {
                var checker = shapeTypes[key];
                if (!checker) {
                  return new PropTypeError(
                    'Invalid ' +
                      location +
                      ' `' +
                      propFullName +
                      '` key `' +
                      key +
                      '` supplied to `' +
                      componentName +
                      '`.' +
                      '\nBad object: ' +
                      JSON.stringify(props[propName], null, '  ') +
                      '\nValid keys: ' +
                      JSON.stringify(Object.keys(shapeTypes), null, '  '),
                  );
                }
                var error = checker(
                  propValue,
                  key,
                  componentName,
                  location,
                  propFullName + '.' + key,
                  ReactPropTypesSecret,
                );
                if (error) {
                  return error;
                }
              }
              return null;
            }

            return createChainableTypeChecker(validate);
          }

          function isNode(propValue) {
            switch (typeof propValue) {
              case 'number':
              case 'string':
              case 'undefined':
                return true;
              case 'boolean':
                return !propValue;
              case 'object':
                if (Array.isArray(propValue)) {
                  return propValue.every(isNode);
                }
                if (propValue === null || isValidElement(propValue)) {
                  return true;
                }

                var iteratorFn = getIteratorFn(propValue);
                if (iteratorFn) {
                  var iterator = iteratorFn.call(propValue);
                  var step;
                  if (iteratorFn !== propValue.entries) {
                    while (!(step = iterator.next()).done) {
                      if (!isNode(step.value)) {
                        return false;
                      }
                    }
                  } else {
                    // Iterator will provide entry [k,v] tuples rather than values.
                    while (!(step = iterator.next()).done) {
                      var entry = step.value;
                      if (entry) {
                        if (!isNode(entry[1])) {
                          return false;
                        }
                      }
                    }
                  }
                } else {
                  return false;
                }

                return true;
              default:
                return false;
            }
          }

          function isSymbol(propType, propValue) {
            // Native Symbol.
            if (propType === 'symbol') {
              return true;
            }

            // falsy value can't be a Symbol
            if (!propValue) {
              return false;
            }

            // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
            if (propValue['@@toStringTag'] === 'Symbol') {
              return true;
            }

            // Fallback for non-spec compliant Symbols which are polyfilled.
            if (typeof Symbol === 'function' && propValue instanceof Symbol) {
              return true;
            }

            return false;
          }

          // Equivalent of `typeof` but with special handling for array and regexp.
          function getPropType(propValue) {
            var propType = typeof propValue;
            if (Array.isArray(propValue)) {
              return 'array';
            }
            if (propValue instanceof RegExp) {
              // Old webkits (at least until Android 4.0) return 'function' rather than
              // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
              // passes PropTypes.object.
              return 'object';
            }
            if (isSymbol(propType, propValue)) {
              return 'symbol';
            }
            return propType;
          }

          // This handles more types than `getPropType`. Only used for error messages.
          // See `createPrimitiveTypeChecker`.
          function getPreciseType(propValue) {
            if (typeof propValue === 'undefined' || propValue === null) {
              return '' + propValue;
            }
            var propType = getPropType(propValue);
            if (propType === 'object') {
              if (propValue instanceof Date) {
                return 'date';
              } else if (propValue instanceof RegExp) {
                return 'regexp';
              }
            }
            return propType;
          }

          // Returns a string that is postfixed to a warning about an invalid type.
          // For example, "undefined" or "of type array"
          function getPostfixForTypeWarning(value) {
            var type = getPreciseType(value);
            switch (type) {
              case 'array':
              case 'object':
                return 'an ' + type;
              case 'boolean':
              case 'date':
              case 'regexp':
                return 'a ' + type;
              default:
                return type;
            }
          }

          // Returns class name of the object, if any.
          function getClassName(propValue) {
            if (!propValue.constructor || !propValue.constructor.name) {
              return ANONYMOUS;
            }
            return propValue.constructor.name;
          }

          ReactPropTypes.checkPropTypes = checkPropTypes;
          ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
          ReactPropTypes.PropTypes = ReactPropTypes;

          return ReactPropTypes;
        };

        /***/
      },

    /***/ './node_modules/prop-types/index.js':
      /*!******************************************!*\
  !*** ./node_modules/prop-types/index.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */

        if (true) {
          var ReactIs = __webpack_require__(/*! react-is */ './node_modules/react-is/index.js');

          // By explicitly using `prop-types` you are opting into new development behavior.
          // http://fb.me/prop-types-in-prod
          var throwOnDirectAccess = true;
          module.exports = __webpack_require__(
            /*! ./factoryWithTypeCheckers */ './node_modules/prop-types/factoryWithTypeCheckers.js',
          )(ReactIs.isElement, throwOnDirectAccess);
        } else {
        }

        /***/
      },

    /***/ './node_modules/prop-types/lib/ReactPropTypesSecret.js':
      /*!*************************************************************!*\
  !*** ./node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \*************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */

        var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

        module.exports = ReactPropTypesSecret;

        /***/
      },

    /***/ './node_modules/raf/index.js':
      /*!***********************************!*\
  !*** ./node_modules/raf/index.js ***!
  \***********************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(global) {
          var now = __webpack_require__(
              /*! performance-now */ './node_modules/performance-now/lib/performance-now.js',
            ),
            root = typeof window === 'undefined' ? global : window,
            vendors = ['moz', 'webkit'],
            suffix = 'AnimationFrame',
            raf = root['request' + suffix],
            caf = root['cancel' + suffix] || root['cancelRequest' + suffix];

          for (var i = 0; !raf && i < vendors.length; i++) {
            raf = root[vendors[i] + 'Request' + suffix];
            caf =
              root[vendors[i] + 'Cancel' + suffix] || root[vendors[i] + 'CancelRequest' + suffix];
          }

          // Some versions of FF have rAF but not cAF
          if (!raf || !caf) {
            var last = 0,
              id = 0,
              queue = [],
              frameDuration = 1000 / 60;

            raf = function(callback) {
              if (queue.length === 0) {
                var _now = now(),
                  next = Math.max(0, frameDuration - (_now - last));
                last = next + _now;
                setTimeout(function() {
                  var cp = queue.slice(0);
                  // Clear queue here to prevent
                  // callbacks from appending listeners
                  // to the current frame's queue
                  queue.length = 0;
                  for (var i = 0; i < cp.length; i++) {
                    if (!cp[i].cancelled) {
                      try {
                        cp[i].callback(last);
                      } catch (e) {
                        setTimeout(function() {
                          throw e;
                        }, 0);
                      }
                    }
                  }
                }, Math.round(next));
              }
              queue.push({
                handle: ++id,
                callback: callback,
                cancelled: false,
              });
              return id;
            };

            caf = function(handle) {
              for (var i = 0; i < queue.length; i++) {
                if (queue[i].handle === handle) {
                  queue[i].cancelled = true;
                }
              }
            };
          }

          module.exports = function(fn) {
            // Wrap in a new function to prevent
            // `cancel` potentially being assigned
            // to the native rAF function
            return raf.call(root, fn);
          };
          module.exports.cancel = function() {
            caf.apply(root, arguments);
          };
          module.exports.polyfill = function(object) {
            if (!object) {
              object = root;
            }
            object.requestAnimationFrame = raf;
            object.cancelAnimationFrame = caf;
          };

          /* WEBPACK VAR INJECTION */
        }.call(
          this,
          __webpack_require__(
            /*! ./../webpack/buildin/global.js */ './node_modules/webpack/buildin/global.js',
          ),
        ));

        /***/
      },

    /***/ './node_modules/rc-align/es/Align.js':
      /*!*******************************************!*\
  !*** ./node_modules/rc-align/es/Align.js ***!
  \*******************************************/
      /*! exports provided: default */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! babel-runtime/helpers/classCallCheck */ './node_modules/babel-runtime/helpers/classCallCheck.js',
        );
        /* harmony import */ var babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__,
        );
        /* harmony import */ var babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          /*! babel-runtime/helpers/createClass */ './node_modules/babel-runtime/helpers/createClass.js',
        );
        /* harmony import */ var babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__,
        );
        /* harmony import */ var babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          /*! babel-runtime/helpers/possibleConstructorReturn */ './node_modules/babel-runtime/helpers/possibleConstructorReturn.js',
        );
        /* harmony import */ var babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__,
        );
        /* harmony import */ var babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
          /*! babel-runtime/helpers/inherits */ './node_modules/babel-runtime/helpers/inherits.js',
        );
        /* harmony import */ var babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__,
        );
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
          /*! react */ './node_modules/react/index.js',
        );
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/ __webpack_require__.n(
          react__WEBPACK_IMPORTED_MODULE_4__,
        );
        /* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
          /*! prop-types */ './node_modules/prop-types/index.js',
        );
        /* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/ __webpack_require__.n(
          prop_types__WEBPACK_IMPORTED_MODULE_5__,
        );
        /* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
          /*! react-dom */ './node_modules/react-dom/index.js',
        );
        /* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/ __webpack_require__.n(
          react_dom__WEBPACK_IMPORTED_MODULE_6__,
        );
        /* harmony import */ var dom_align__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
          /*! dom-align */ './node_modules/dom-align/dist-web/index.js',
        );
        /* harmony import */ var rc_util_es_Dom_addEventListener__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
          /*! rc-util/es/Dom/addEventListener */ './node_modules/rc-util/es/Dom/addEventListener.js',
        );
        /* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
          /*! ./util */ './node_modules/rc-align/es/util.js',
        );

        function getElement(func) {
          if (typeof func !== 'function' || !func) return null;
          return func();
        }

        function getPoint(point) {
          if (typeof point !== 'object' || !point) return null;
          return point;
        }

        var Align = (function(_Component) {
          babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(Align, _Component);

          function Align() {
            var _ref;

            var _temp, _this, _ret;

            babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(
              this,
              Align,
            );

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            return (
              (_ret =
                ((_temp =
                  ((_this = babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default()(
                    this,
                    (_ref = Align.__proto__ || Object.getPrototypeOf(Align)).call.apply(
                      _ref,
                      [this].concat(args),
                    ),
                  )),
                  _this)),
                (_this.forceAlign = function() {
                  var _this$props = _this.props,
                    disabled = _this$props.disabled,
                    target = _this$props.target,
                    align = _this$props.align,
                    onAlign = _this$props.onAlign;

                  if (!disabled && target) {
                    var source = react_dom__WEBPACK_IMPORTED_MODULE_6___default.a.findDOMNode(
                      _this,
                    );

                    var result = void 0;
                    var element = getElement(target);
                    var point = getPoint(target);

                    // IE lose focus after element realign
                    // We should record activeElement and restore later
                    var activeElement = document.activeElement;

                    if (element) {
                      result = Object(dom_align__WEBPACK_IMPORTED_MODULE_7__['alignElement'])(
                        source,
                        element,
                        align,
                      );
                    } else if (point) {
                      result = Object(dom_align__WEBPACK_IMPORTED_MODULE_7__['alignPoint'])(
                        source,
                        point,
                        align,
                      );
                    }

                    Object(_util__WEBPACK_IMPORTED_MODULE_9__['restoreFocus'])(
                      activeElement,
                      source,
                    );

                    if (onAlign) {
                      onAlign(source, result);
                    }
                  }
                }),
                _temp)),
              babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default()(
                _this,
                _ret,
              )
            );
          }

          babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Align, [
            {
              key: 'componentDidMount',
              value: function componentDidMount() {
                var props = this.props;
                // if parent ref not attached .... use document.getElementById
                this.forceAlign();
                if (!props.disabled && props.monitorWindowResize) {
                  this.startMonitorWindowResize();
                }
              },
            },
            {
              key: 'componentDidUpdate',
              value: function componentDidUpdate(prevProps) {
                var reAlign = false;
                var props = this.props;

                if (!props.disabled) {
                  var source = react_dom__WEBPACK_IMPORTED_MODULE_6___default.a.findDOMNode(this);
                  var sourceRect = source ? source.getBoundingClientRect() : null;

                  if (prevProps.disabled) {
                    reAlign = true;
                  } else {
                    var lastElement = getElement(prevProps.target);
                    var currentElement = getElement(props.target);
                    var lastPoint = getPoint(prevProps.target);
                    var currentPoint = getPoint(props.target);

                    if (
                      Object(_util__WEBPACK_IMPORTED_MODULE_9__['isWindow'])(lastElement) &&
                      Object(_util__WEBPACK_IMPORTED_MODULE_9__['isWindow'])(currentElement)
                    ) {
                      // Skip if is window
                      reAlign = false;
                    } else if (
                      lastElement !== currentElement || // Element change
                      (lastElement && !currentElement && currentPoint) || // Change from element to point
                      (lastPoint && currentPoint && currentElement) || // Change from point to element
                      (currentPoint &&
                        !Object(_util__WEBPACK_IMPORTED_MODULE_9__['isSamePoint'])(
                          lastPoint,
                          currentPoint,
                        ))
                    ) {
                      reAlign = true;
                    }

                    // If source element size changed
                    var preRect = this.sourceRect || {};
                    if (
                      !reAlign &&
                      source &&
                      (!Object(_util__WEBPACK_IMPORTED_MODULE_9__['isSimilarValue'])(
                        preRect.width,
                        sourceRect.width,
                      ) ||
                        !Object(_util__WEBPACK_IMPORTED_MODULE_9__['isSimilarValue'])(
                          preRect.height,
                          sourceRect.height,
                        ))
                    ) {
                      reAlign = true;
                    }
                  }

                  this.sourceRect = sourceRect;
                }

                if (reAlign) {
                  this.forceAlign();
                }

                if (props.monitorWindowResize && !props.disabled) {
                  this.startMonitorWindowResize();
                } else {
                  this.stopMonitorWindowResize();
                }
              },
            },
            {
              key: 'componentWillUnmount',
              value: function componentWillUnmount() {
                this.stopMonitorWindowResize();
              },
            },
            {
              key: 'startMonitorWindowResize',
              value: function startMonitorWindowResize() {
                if (!this.resizeHandler) {
                  this.bufferMonitor = Object(_util__WEBPACK_IMPORTED_MODULE_9__['buffer'])(
                    this.forceAlign,
                    this.props.monitorBufferTime,
                  );
                  this.resizeHandler = Object(
                    rc_util_es_Dom_addEventListener__WEBPACK_IMPORTED_MODULE_8__['default'],
                  )(window, 'resize', this.bufferMonitor);
                }
              },
            },
            {
              key: 'stopMonitorWindowResize',
              value: function stopMonitorWindowResize() {
                if (this.resizeHandler) {
                  this.bufferMonitor.clear();
                  this.resizeHandler.remove();
                  this.resizeHandler = null;
                }
              },
            },
            {
              key: 'render',
              value: function render() {
                var _this2 = this;

                var _props = this.props,
                  childrenProps = _props.childrenProps,
                  children = _props.children;

                var child = react__WEBPACK_IMPORTED_MODULE_4___default.a.Children.only(children);
                if (childrenProps) {
                  var newProps = {};
                  var propList = Object.keys(childrenProps);
                  propList.forEach(function(prop) {
                    newProps[prop] = _this2.props[childrenProps[prop]];
                  });

                  return react__WEBPACK_IMPORTED_MODULE_4___default.a.cloneElement(child, newProps);
                }
                return child;
              },
            },
          ]);

          return Align;
        })(react__WEBPACK_IMPORTED_MODULE_4__['Component']);

        Align.propTypes = {
          childrenProps: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.object,
          align: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.object.isRequired,
          target: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.oneOfType([
            prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.func,
            prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.shape({
              clientX: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.number,
              clientY: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.number,
              pageX: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.number,
              pageY: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.number,
            }),
          ]),
          onAlign: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.func,
          monitorBufferTime: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.number,
          monitorWindowResize: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.bool,
          disabled: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.bool,
          children: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.any,
        };
        Align.defaultProps = {
          target: function target() {
            return window;
          },
          monitorBufferTime: 50,
          monitorWindowResize: false,
          disabled: false,
        };

        /* harmony default export */ __webpack_exports__['default'] = Align;

        /***/
      },

    /***/ './node_modules/rc-align/es/index.js':
      /*!*******************************************!*\
  !*** ./node_modules/rc-align/es/index.js ***!
  \*******************************************/
      /*! exports provided: default */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var _Align__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! ./Align */ './node_modules/rc-align/es/Align.js',
        );
        // export this package's api

        /* harmony default export */ __webpack_exports__['default'] =
          _Align__WEBPACK_IMPORTED_MODULE_0__['default'];

        /***/
      },

    /***/ './node_modules/rc-align/es/util.js':
      /*!******************************************!*\
  !*** ./node_modules/rc-align/es/util.js ***!
  \******************************************/
      /*! exports provided: buffer, isSamePoint, isWindow, isSimilarValue, restoreFocus */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          'buffer',
          function() {
            return buffer;
          },
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          'isSamePoint',
          function() {
            return isSamePoint;
          },
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          'isWindow',
          function() {
            return isWindow;
          },
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          'isSimilarValue',
          function() {
            return isSimilarValue;
          },
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          'restoreFocus',
          function() {
            return restoreFocus;
          },
        );
        /* harmony import */ var rc_util_es_Dom_contains__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! rc-util/es/Dom/contains */ './node_modules/rc-util/es/Dom/contains.js',
        );

        function buffer(fn, ms) {
          var timer = void 0;

          function clear() {
            if (timer) {
              clearTimeout(timer);
              timer = null;
            }
          }

          function bufferFn() {
            clear();
            timer = setTimeout(fn, ms);
          }

          bufferFn.clear = clear;

          return bufferFn;
        }

        function isSamePoint(prev, next) {
          if (prev === next) return true;
          if (!prev || !next) return false;

          if ('pageX' in next && 'pageY' in next) {
            return prev.pageX === next.pageX && prev.pageY === next.pageY;
          }

          if ('clientX' in next && 'clientY' in next) {
            return prev.clientX === next.clientX && prev.clientY === next.clientY;
          }

          return false;
        }

        function isWindow(obj) {
          return obj && typeof obj === 'object' && obj.window === obj;
        }

        function isSimilarValue(val1, val2) {
          var int1 = Math.floor(val1);
          var int2 = Math.floor(val2);
          return Math.abs(int1 - int2) <= 1;
        }

        function restoreFocus(activeElement, container) {
          // Focus back if is in the container
          if (
            activeElement !== document.activeElement &&
            Object(rc_util_es_Dom_contains__WEBPACK_IMPORTED_MODULE_0__['default'])(
              container,
              activeElement,
            )
          ) {
            activeElement.focus();
          }
        }

        /***/
      },

    /***/ './node_modules/rc-animate/es/Animate.js':
      /*!***********************************************!*\
  !*** ./node_modules/rc-animate/es/Animate.js ***!
  \***********************************************/
      /*! exports provided: default */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! babel-runtime/helpers/extends */ './node_modules/babel-runtime/helpers/extends.js',
        );
        /* harmony import */ var babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__,
        );
        /* harmony import */ var babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          /*! babel-runtime/helpers/defineProperty */ './node_modules/babel-runtime/helpers/defineProperty.js',
        );
        /* harmony import */ var babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__,
        );
        /* harmony import */ var babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          /*! babel-runtime/helpers/classCallCheck */ './node_modules/babel-runtime/helpers/classCallCheck.js',
        );
        /* harmony import */ var babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__,
        );
        /* harmony import */ var babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
          /*! babel-runtime/helpers/createClass */ './node_modules/babel-runtime/helpers/createClass.js',
        );
        /* harmony import */ var babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__,
        );
        /* harmony import */ var babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
          /*! babel-runtime/helpers/possibleConstructorReturn */ './node_modules/babel-runtime/helpers/possibleConstructorReturn.js',
        );
        /* harmony import */ var babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__,
        );
        /* harmony import */ var babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
          /*! babel-runtime/helpers/inherits */ './node_modules/babel-runtime/helpers/inherits.js',
        );
        /* harmony import */ var babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5__,
        );
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
          /*! react */ './node_modules/react/index.js',
        );
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/ __webpack_require__.n(
          react__WEBPACK_IMPORTED_MODULE_6__,
        );
        /* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
          /*! prop-types */ './node_modules/prop-types/index.js',
        );
        /* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/ __webpack_require__.n(
          prop_types__WEBPACK_IMPORTED_MODULE_7__,
        );
        /* harmony import */ var _ChildrenUtils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
          /*! ./ChildrenUtils */ './node_modules/rc-animate/es/ChildrenUtils.js',
        );
        /* harmony import */ var _AnimateChild__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
          /*! ./AnimateChild */ './node_modules/rc-animate/es/AnimateChild.js',
        );
        /* harmony import */ var _util_animate__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
          /*! ./util/animate */ './node_modules/rc-animate/es/util/animate.js',
        );

        var defaultKey = 'rc_animate_' + Date.now();

        function getChildrenFromProps(props) {
          var children = props.children;
          if (react__WEBPACK_IMPORTED_MODULE_6___default.a.isValidElement(children)) {
            if (!children.key) {
              return react__WEBPACK_IMPORTED_MODULE_6___default.a.cloneElement(children, {
                key: defaultKey,
              });
            }
          }
          return children;
        }

        function noop() {}

        var Animate = (function(_React$Component) {
          babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(
            Animate,
            _React$Component,
          );

          // eslint-disable-line

          function Animate(props) {
            babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(
              this,
              Animate,
            );

            var _this = babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(
              this,
              (Animate.__proto__ || Object.getPrototypeOf(Animate)).call(this, props),
            );

            _initialiseProps.call(_this);

            _this.currentlyAnimatingKeys = {};
            _this.keysToEnter = [];
            _this.keysToLeave = [];

            _this.state = {
              children: Object(_ChildrenUtils__WEBPACK_IMPORTED_MODULE_8__['toArrayChildren'])(
                getChildrenFromProps(props),
              ),
            };

            _this.childrenRefs = {};
            return _this;
          }

          babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(Animate, [
            {
              key: 'componentDidMount',
              value: function componentDidMount() {
                var _this2 = this;

                var showProp = this.props.showProp;
                var children = this.state.children;
                if (showProp) {
                  children = children.filter(function(child) {
                    return !!child.props[showProp];
                  });
                }
                children.forEach(function(child) {
                  if (child) {
                    _this2.performAppear(child.key);
                  }
                });
              },
            },
            {
              key: 'componentWillReceiveProps',
              value: function componentWillReceiveProps(nextProps) {
                var _this3 = this;

                this.nextProps = nextProps;
                var nextChildren = Object(
                  _ChildrenUtils__WEBPACK_IMPORTED_MODULE_8__['toArrayChildren'],
                )(getChildrenFromProps(nextProps));
                var props = this.props;
                // exclusive needs immediate response
                if (props.exclusive) {
                  Object.keys(this.currentlyAnimatingKeys).forEach(function(key) {
                    _this3.stop(key);
                  });
                }
                var showProp = props.showProp;
                var currentlyAnimatingKeys = this.currentlyAnimatingKeys;
                // last props children if exclusive
                var currentChildren = props.exclusive
                  ? Object(_ChildrenUtils__WEBPACK_IMPORTED_MODULE_8__['toArrayChildren'])(
                      getChildrenFromProps(props),
                    )
                  : this.state.children;
                // in case destroy in showProp mode
                var newChildren = [];
                if (showProp) {
                  currentChildren.forEach(function(currentChild) {
                    var nextChild =
                      currentChild &&
                      Object(
                        _ChildrenUtils__WEBPACK_IMPORTED_MODULE_8__['findChildInChildrenByKey'],
                      )(nextChildren, currentChild.key);
                    var newChild = void 0;
                    if (
                      (!nextChild || !nextChild.props[showProp]) &&
                      currentChild.props[showProp]
                    ) {
                      newChild = react__WEBPACK_IMPORTED_MODULE_6___default.a.cloneElement(
                        nextChild || currentChild,
                        babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(
                          {},
                          showProp,
                          true,
                        ),
                      );
                    } else {
                      newChild = nextChild;
                    }
                    if (newChild) {
                      newChildren.push(newChild);
                    }
                  });
                  nextChildren.forEach(function(nextChild) {
                    if (
                      !nextChild ||
                      !Object(
                        _ChildrenUtils__WEBPACK_IMPORTED_MODULE_8__['findChildInChildrenByKey'],
                      )(currentChildren, nextChild.key)
                    ) {
                      newChildren.push(nextChild);
                    }
                  });
                } else {
                  newChildren = Object(
                    _ChildrenUtils__WEBPACK_IMPORTED_MODULE_8__['mergeChildren'],
                  )(currentChildren, nextChildren);
                }

                // need render to avoid update
                this.setState({
                  children: newChildren,
                });

                nextChildren.forEach(function(child) {
                  var key = child && child.key;
                  if (child && currentlyAnimatingKeys[key]) {
                    return;
                  }
                  var hasPrev =
                    child &&
                    Object(_ChildrenUtils__WEBPACK_IMPORTED_MODULE_8__['findChildInChildrenByKey'])(
                      currentChildren,
                      key,
                    );
                  if (showProp) {
                    var showInNext = child.props[showProp];
                    if (hasPrev) {
                      var showInNow = Object(
                        _ChildrenUtils__WEBPACK_IMPORTED_MODULE_8__[
                          'findShownChildInChildrenByKey'
                        ],
                      )(currentChildren, key, showProp);
                      if (!showInNow && showInNext) {
                        _this3.keysToEnter.push(key);
                      }
                    } else if (showInNext) {
                      _this3.keysToEnter.push(key);
                    }
                  } else if (!hasPrev) {
                    _this3.keysToEnter.push(key);
                  }
                });

                currentChildren.forEach(function(child) {
                  var key = child && child.key;
                  if (child && currentlyAnimatingKeys[key]) {
                    return;
                  }
                  var hasNext =
                    child &&
                    Object(_ChildrenUtils__WEBPACK_IMPORTED_MODULE_8__['findChildInChildrenByKey'])(
                      nextChildren,
                      key,
                    );
                  if (showProp) {
                    var showInNow = child.props[showProp];
                    if (hasNext) {
                      var showInNext = Object(
                        _ChildrenUtils__WEBPACK_IMPORTED_MODULE_8__[
                          'findShownChildInChildrenByKey'
                        ],
                      )(nextChildren, key, showProp);
                      if (!showInNext && showInNow) {
                        _this3.keysToLeave.push(key);
                      }
                    } else if (showInNow) {
                      _this3.keysToLeave.push(key);
                    }
                  } else if (!hasNext) {
                    _this3.keysToLeave.push(key);
                  }
                });
              },
            },
            {
              key: 'componentDidUpdate',
              value: function componentDidUpdate() {
                var keysToEnter = this.keysToEnter;
                this.keysToEnter = [];
                keysToEnter.forEach(this.performEnter);
                var keysToLeave = this.keysToLeave;
                this.keysToLeave = [];
                keysToLeave.forEach(this.performLeave);
              },
            },
            {
              key: 'isValidChildByKey',
              value: function isValidChildByKey(currentChildren, key) {
                var showProp = this.props.showProp;
                if (showProp) {
                  return Object(
                    _ChildrenUtils__WEBPACK_IMPORTED_MODULE_8__['findShownChildInChildrenByKey'],
                  )(currentChildren, key, showProp);
                }
                return Object(
                  _ChildrenUtils__WEBPACK_IMPORTED_MODULE_8__['findChildInChildrenByKey'],
                )(currentChildren, key);
              },
            },
            {
              key: 'stop',
              value: function stop(key) {
                delete this.currentlyAnimatingKeys[key];
                var component = this.childrenRefs[key];
                if (component) {
                  component.stop();
                }
              },
            },
            {
              key: 'render',
              value: function render() {
                var _this4 = this;

                var props = this.props;
                this.nextProps = props;
                var stateChildren = this.state.children;
                var children = null;
                if (stateChildren) {
                  children = stateChildren.map(function(child) {
                    if (child === null || child === undefined) {
                      return child;
                    }
                    if (!child.key) {
                      throw new Error('must set key for <rc-animate> children');
                    }
                    return react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(
                      _AnimateChild__WEBPACK_IMPORTED_MODULE_9__['default'],
                      {
                        key: child.key,
                        ref: function ref(node) {
                          _this4.childrenRefs[child.key] = node;
                        },
                        animation: props.animation,
                        transitionName: props.transitionName,
                        transitionEnter: props.transitionEnter,
                        transitionAppear: props.transitionAppear,
                        transitionLeave: props.transitionLeave,
                      },
                      child,
                    );
                  });
                }
                var Component = props.component;
                if (Component) {
                  var passedProps = props;
                  if (typeof Component === 'string') {
                    passedProps = babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0___default()(
                      {
                        className: props.className,
                        style: props.style,
                      },
                      props.componentProps,
                    );
                  }
                  return react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(
                    Component,
                    passedProps,
                    children,
                  );
                }
                return children[0] || null;
              },
            },
          ]);

          return Animate;
        })(react__WEBPACK_IMPORTED_MODULE_6___default.a.Component);

        Animate.isAnimate = true;
        Animate.propTypes = {
          className: prop_types__WEBPACK_IMPORTED_MODULE_7___default.a.string,
          style: prop_types__WEBPACK_IMPORTED_MODULE_7___default.a.object,
          component: prop_types__WEBPACK_IMPORTED_MODULE_7___default.a.any,
          componentProps: prop_types__WEBPACK_IMPORTED_MODULE_7___default.a.object,
          animation: prop_types__WEBPACK_IMPORTED_MODULE_7___default.a.object,
          transitionName: prop_types__WEBPACK_IMPORTED_MODULE_7___default.a.oneOfType([
            prop_types__WEBPACK_IMPORTED_MODULE_7___default.a.string,
            prop_types__WEBPACK_IMPORTED_MODULE_7___default.a.object,
          ]),
          transitionEnter: prop_types__WEBPACK_IMPORTED_MODULE_7___default.a.bool,
          transitionAppear: prop_types__WEBPACK_IMPORTED_MODULE_7___default.a.bool,
          exclusive: prop_types__WEBPACK_IMPORTED_MODULE_7___default.a.bool,
          transitionLeave: prop_types__WEBPACK_IMPORTED_MODULE_7___default.a.bool,
          onEnd: prop_types__WEBPACK_IMPORTED_MODULE_7___default.a.func,
          onEnter: prop_types__WEBPACK_IMPORTED_MODULE_7___default.a.func,
          onLeave: prop_types__WEBPACK_IMPORTED_MODULE_7___default.a.func,
          onAppear: prop_types__WEBPACK_IMPORTED_MODULE_7___default.a.func,
          showProp: prop_types__WEBPACK_IMPORTED_MODULE_7___default.a.string,
          children: prop_types__WEBPACK_IMPORTED_MODULE_7___default.a.node,
        };
        Animate.defaultProps = {
          animation: {},
          component: 'span',
          componentProps: {},
          transitionEnter: true,
          transitionLeave: true,
          transitionAppear: false,
          onEnd: noop,
          onEnter: noop,
          onLeave: noop,
          onAppear: noop,
        };

        var _initialiseProps = function _initialiseProps() {
          var _this5 = this;

          this.performEnter = function(key) {
            // may already remove by exclusive
            if (_this5.childrenRefs[key]) {
              _this5.currentlyAnimatingKeys[key] = true;
              _this5.childrenRefs[key].componentWillEnter(
                _this5.handleDoneAdding.bind(_this5, key, 'enter'),
              );
            }
          };

          this.performAppear = function(key) {
            if (_this5.childrenRefs[key]) {
              _this5.currentlyAnimatingKeys[key] = true;
              _this5.childrenRefs[key].componentWillAppear(
                _this5.handleDoneAdding.bind(_this5, key, 'appear'),
              );
            }
          };

          this.handleDoneAdding = function(key, type) {
            var props = _this5.props;
            delete _this5.currentlyAnimatingKeys[key];
            // if update on exclusive mode, skip check
            if (props.exclusive && props !== _this5.nextProps) {
              return;
            }
            var currentChildren = Object(
              _ChildrenUtils__WEBPACK_IMPORTED_MODULE_8__['toArrayChildren'],
            )(getChildrenFromProps(props));
            if (!_this5.isValidChildByKey(currentChildren, key)) {
              // exclusive will not need this
              _this5.performLeave(key);
            } else if (type === 'appear') {
              if (
                _util_animate__WEBPACK_IMPORTED_MODULE_10__['default'].allowAppearCallback(props)
              ) {
                props.onAppear(key);
                props.onEnd(key, true);
              }
            } else if (
              _util_animate__WEBPACK_IMPORTED_MODULE_10__['default'].allowEnterCallback(props)
            ) {
              props.onEnter(key);
              props.onEnd(key, true);
            }
          };

          this.performLeave = function(key) {
            // may already remove by exclusive
            if (_this5.childrenRefs[key]) {
              _this5.currentlyAnimatingKeys[key] = true;
              _this5.childrenRefs[key].componentWillLeave(
                _this5.handleDoneLeaving.bind(_this5, key),
              );
            }
          };

          this.handleDoneLeaving = function(key) {
            var props = _this5.props;
            delete _this5.currentlyAnimatingKeys[key];
            // if update on exclusive mode, skip check
            if (props.exclusive && props !== _this5.nextProps) {
              return;
            }
            var currentChildren = Object(
              _ChildrenUtils__WEBPACK_IMPORTED_MODULE_8__['toArrayChildren'],
            )(getChildrenFromProps(props));
            // in case state change is too fast
            if (_this5.isValidChildByKey(currentChildren, key)) {
              _this5.performEnter(key);
            } else {
              var end = function end() {
                if (
                  _util_animate__WEBPACK_IMPORTED_MODULE_10__['default'].allowLeaveCallback(props)
                ) {
                  props.onLeave(key);
                  props.onEnd(key, false);
                }
              };
              if (
                !Object(_ChildrenUtils__WEBPACK_IMPORTED_MODULE_8__['isSameChildren'])(
                  _this5.state.children,
                  currentChildren,
                  props.showProp,
                )
              ) {
                _this5.setState(
                  {
                    children: currentChildren,
                  },
                  end,
                );
              } else {
                end();
              }
            }
          };
        };

        /* harmony default export */ __webpack_exports__['default'] = Animate;

        /***/
      },

    /***/ './node_modules/rc-animate/es/AnimateChild.js':
      /*!****************************************************!*\
  !*** ./node_modules/rc-animate/es/AnimateChild.js ***!
  \****************************************************/
      /*! exports provided: default */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! babel-runtime/helpers/classCallCheck */ './node_modules/babel-runtime/helpers/classCallCheck.js',
        );
        /* harmony import */ var babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__,
        );
        /* harmony import */ var babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          /*! babel-runtime/helpers/createClass */ './node_modules/babel-runtime/helpers/createClass.js',
        );
        /* harmony import */ var babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__,
        );
        /* harmony import */ var babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          /*! babel-runtime/helpers/possibleConstructorReturn */ './node_modules/babel-runtime/helpers/possibleConstructorReturn.js',
        );
        /* harmony import */ var babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__,
        );
        /* harmony import */ var babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
          /*! babel-runtime/helpers/inherits */ './node_modules/babel-runtime/helpers/inherits.js',
        );
        /* harmony import */ var babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__,
        );
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
          /*! react */ './node_modules/react/index.js',
        );
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/ __webpack_require__.n(
          react__WEBPACK_IMPORTED_MODULE_4__,
        );
        /* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
          /*! react-dom */ './node_modules/react-dom/index.js',
        );
        /* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/ __webpack_require__.n(
          react_dom__WEBPACK_IMPORTED_MODULE_5__,
        );
        /* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
          /*! prop-types */ './node_modules/prop-types/index.js',
        );
        /* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/ __webpack_require__.n(
          prop_types__WEBPACK_IMPORTED_MODULE_6__,
        );
        /* harmony import */ var css_animation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
          /*! css-animation */ './node_modules/css-animation/es/index.js',
        );
        /* harmony import */ var _util_animate__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
          /*! ./util/animate */ './node_modules/rc-animate/es/util/animate.js',
        );

        var transitionMap = {
          enter: 'transitionEnter',
          appear: 'transitionAppear',
          leave: 'transitionLeave',
        };

        var AnimateChild = (function(_React$Component) {
          babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(
            AnimateChild,
            _React$Component,
          );

          function AnimateChild() {
            babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(
              this,
              AnimateChild,
            );

            return babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default()(
              this,
              (AnimateChild.__proto__ || Object.getPrototypeOf(AnimateChild)).apply(
                this,
                arguments,
              ),
            );
          }

          babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(AnimateChild, [
            {
              key: 'componentWillUnmount',
              value: function componentWillUnmount() {
                this.stop();
              },
            },
            {
              key: 'componentWillEnter',
              value: function componentWillEnter(done) {
                if (
                  _util_animate__WEBPACK_IMPORTED_MODULE_8__['default'].isEnterSupported(this.props)
                ) {
                  this.transition('enter', done);
                } else {
                  done();
                }
              },
            },
            {
              key: 'componentWillAppear',
              value: function componentWillAppear(done) {
                if (
                  _util_animate__WEBPACK_IMPORTED_MODULE_8__['default'].isAppearSupported(
                    this.props,
                  )
                ) {
                  this.transition('appear', done);
                } else {
                  done();
                }
              },
            },
            {
              key: 'componentWillLeave',
              value: function componentWillLeave(done) {
                if (
                  _util_animate__WEBPACK_IMPORTED_MODULE_8__['default'].isLeaveSupported(this.props)
                ) {
                  this.transition('leave', done);
                } else {
                  // always sync, do not interupt with react component life cycle
                  // update hidden -> animate hidden ->
                  // didUpdate -> animate leave -> unmount (if animate is none)
                  done();
                }
              },
            },
            {
              key: 'transition',
              value: function transition(animationType, finishCallback) {
                var _this2 = this;

                var node = react_dom__WEBPACK_IMPORTED_MODULE_5___default.a.findDOMNode(this);
                var props = this.props;
                var transitionName = props.transitionName;
                var nameIsObj = typeof transitionName === 'object';
                this.stop();
                var end = function end() {
                  _this2.stopper = null;
                  finishCallback();
                };
                if (
                  (css_animation__WEBPACK_IMPORTED_MODULE_7__['isCssAnimationSupported'] ||
                    !props.animation[animationType]) &&
                  transitionName &&
                  props[transitionMap[animationType]]
                ) {
                  var name = nameIsObj
                    ? transitionName[animationType]
                    : transitionName + '-' + animationType;
                  var activeName = name + '-active';
                  if (nameIsObj && transitionName[animationType + 'Active']) {
                    activeName = transitionName[animationType + 'Active'];
                  }
                  this.stopper = Object(css_animation__WEBPACK_IMPORTED_MODULE_7__['default'])(
                    node,
                    {
                      name: name,
                      active: activeName,
                    },
                    end,
                  );
                } else {
                  this.stopper = props.animation[animationType](node, end);
                }
              },
            },
            {
              key: 'stop',
              value: function stop() {
                var stopper = this.stopper;
                if (stopper) {
                  this.stopper = null;
                  stopper.stop();
                }
              },
            },
            {
              key: 'render',
              value: function render() {
                return this.props.children;
              },
            },
          ]);

          return AnimateChild;
        })(react__WEBPACK_IMPORTED_MODULE_4___default.a.Component);

        AnimateChild.propTypes = {
          children: prop_types__WEBPACK_IMPORTED_MODULE_6___default.a.any,
          animation: prop_types__WEBPACK_IMPORTED_MODULE_6___default.a.any,
          transitionName: prop_types__WEBPACK_IMPORTED_MODULE_6___default.a.any,
        };
        /* harmony default export */ __webpack_exports__['default'] = AnimateChild;

        /***/
      },

    /***/ './node_modules/rc-animate/es/ChildrenUtils.js':
      /*!*****************************************************!*\
  !*** ./node_modules/rc-animate/es/ChildrenUtils.js ***!
  \*****************************************************/
      /*! exports provided: toArrayChildren, findChildInChildrenByKey, findShownChildInChildrenByKey, findHiddenChildInChildrenByKey, isSameChildren, mergeChildren */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          'toArrayChildren',
          function() {
            return toArrayChildren;
          },
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          'findChildInChildrenByKey',
          function() {
            return findChildInChildrenByKey;
          },
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          'findShownChildInChildrenByKey',
          function() {
            return findShownChildInChildrenByKey;
          },
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          'findHiddenChildInChildrenByKey',
          function() {
            return findHiddenChildInChildrenByKey;
          },
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          'isSameChildren',
          function() {
            return isSameChildren;
          },
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          'mergeChildren',
          function() {
            return mergeChildren;
          },
        );
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! react */ './node_modules/react/index.js',
        );
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(
          react__WEBPACK_IMPORTED_MODULE_0__,
        );

        function toArrayChildren(children) {
          var ret = [];
          react__WEBPACK_IMPORTED_MODULE_0___default.a.Children.forEach(children, function(child) {
            ret.push(child);
          });
          return ret;
        }

        function findChildInChildrenByKey(children, key) {
          var ret = null;
          if (children) {
            children.forEach(function(child) {
              if (ret) {
                return;
              }
              if (child && child.key === key) {
                ret = child;
              }
            });
          }
          return ret;
        }

        function findShownChildInChildrenByKey(children, key, showProp) {
          var ret = null;
          if (children) {
            children.forEach(function(child) {
              if (child && child.key === key && child.props[showProp]) {
                if (ret) {
                  throw new Error('two child with same key for <rc-animate> children');
                }
                ret = child;
              }
            });
          }
          return ret;
        }

        function findHiddenChildInChildrenByKey(children, key, showProp) {
          var found = 0;
          if (children) {
            children.forEach(function(child) {
              if (found) {
                return;
              }
              found = child && child.key === key && !child.props[showProp];
            });
          }
          return found;
        }

        function isSameChildren(c1, c2, showProp) {
          var same = c1.length === c2.length;
          if (same) {
            c1.forEach(function(child, index) {
              var child2 = c2[index];
              if (child && child2) {
                if ((child && !child2) || (!child && child2)) {
                  same = false;
                } else if (child.key !== child2.key) {
                  same = false;
                } else if (showProp && child.props[showProp] !== child2.props[showProp]) {
                  same = false;
                }
              }
            });
          }
          return same;
        }

        function mergeChildren(prev, next) {
          var ret = [];

          // For each key of `next`, the list of keys to insert before that key in
          // the combined list
          var nextChildrenPending = {};
          var pendingChildren = [];
          prev.forEach(function(child) {
            if (child && findChildInChildrenByKey(next, child.key)) {
              if (pendingChildren.length) {
                nextChildrenPending[child.key] = pendingChildren;
                pendingChildren = [];
              }
            } else {
              pendingChildren.push(child);
            }
          });

          next.forEach(function(child) {
            if (child && Object.prototype.hasOwnProperty.call(nextChildrenPending, child.key)) {
              ret = ret.concat(nextChildrenPending[child.key]);
            }
            ret.push(child);
          });

          ret = ret.concat(pendingChildren);

          return ret;
        }

        /***/
      },

    /***/ './node_modules/rc-animate/es/util/animate.js':
      /*!****************************************************!*\
  !*** ./node_modules/rc-animate/es/util/animate.js ***!
  \****************************************************/
      /*! exports provided: default */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        var util = {
          isAppearSupported: function isAppearSupported(props) {
            return (props.transitionName && props.transitionAppear) || props.animation.appear;
          },
          isEnterSupported: function isEnterSupported(props) {
            return (props.transitionName && props.transitionEnter) || props.animation.enter;
          },
          isLeaveSupported: function isLeaveSupported(props) {
            return (props.transitionName && props.transitionLeave) || props.animation.leave;
          },
          allowAppearCallback: function allowAppearCallback(props) {
            return props.transitionAppear || props.animation.appear;
          },
          allowEnterCallback: function allowEnterCallback(props) {
            return props.transitionEnter || props.animation.enter;
          },
          allowLeaveCallback: function allowLeaveCallback(props) {
            return props.transitionLeave || props.animation.leave;
          },
        };
        /* harmony default export */ __webpack_exports__['default'] = util;

        /***/
      },

    /***/ './node_modules/rc-trigger/es/LazyRenderBox.js':
      /*!*****************************************************!*\
  !*** ./node_modules/rc-trigger/es/LazyRenderBox.js ***!
  \*****************************************************/
      /*! exports provided: default */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! babel-runtime/helpers/objectWithoutProperties */ './node_modules/babel-runtime/helpers/objectWithoutProperties.js',
        );
        /* harmony import */ var babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__,
        );
        /* harmony import */ var babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          /*! babel-runtime/helpers/classCallCheck */ './node_modules/babel-runtime/helpers/classCallCheck.js',
        );
        /* harmony import */ var babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__,
        );
        /* harmony import */ var babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          /*! babel-runtime/helpers/possibleConstructorReturn */ './node_modules/babel-runtime/helpers/possibleConstructorReturn.js',
        );
        /* harmony import */ var babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__,
        );
        /* harmony import */ var babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
          /*! babel-runtime/helpers/inherits */ './node_modules/babel-runtime/helpers/inherits.js',
        );
        /* harmony import */ var babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__,
        );
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
          /*! react */ './node_modules/react/index.js',
        );
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/ __webpack_require__.n(
          react__WEBPACK_IMPORTED_MODULE_4__,
        );
        /* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
          /*! prop-types */ './node_modules/prop-types/index.js',
        );
        /* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/ __webpack_require__.n(
          prop_types__WEBPACK_IMPORTED_MODULE_5__,
        );

        var LazyRenderBox = (function(_Component) {
          babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(
            LazyRenderBox,
            _Component,
          );

          function LazyRenderBox() {
            babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(
              this,
              LazyRenderBox,
            );

            return babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default()(
              this,
              _Component.apply(this, arguments),
            );
          }

          LazyRenderBox.prototype.shouldComponentUpdate = function shouldComponentUpdate(
            nextProps,
          ) {
            return nextProps.hiddenClassName || nextProps.visible;
          };

          LazyRenderBox.prototype.render = function render() {
            var _props = this.props,
              hiddenClassName = _props.hiddenClassName,
              visible = _props.visible,
              props = babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0___default()(
                _props,
                ['hiddenClassName', 'visible'],
              );

            if (
              hiddenClassName ||
              react__WEBPACK_IMPORTED_MODULE_4___default.a.Children.count(props.children) > 1
            ) {
              if (!visible && hiddenClassName) {
                props.className += ' ' + hiddenClassName;
              }
              return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement('div', props);
            }

            return react__WEBPACK_IMPORTED_MODULE_4___default.a.Children.only(props.children);
          };

          return LazyRenderBox;
        })(react__WEBPACK_IMPORTED_MODULE_4__['Component']);

        LazyRenderBox.propTypes = {
          children: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.any,
          className: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.string,
          visible: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.bool,
          hiddenClassName: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.string,
        };

        /* harmony default export */ __webpack_exports__['default'] = LazyRenderBox;

        /***/
      },

    /***/ './node_modules/rc-trigger/es/Popup.js':
      /*!*********************************************!*\
  !*** ./node_modules/rc-trigger/es/Popup.js ***!
  \*********************************************/
      /*! exports provided: default */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! babel-runtime/helpers/extends */ './node_modules/babel-runtime/helpers/extends.js',
        );
        /* harmony import */ var babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__,
        );
        /* harmony import */ var babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          /*! babel-runtime/helpers/classCallCheck */ './node_modules/babel-runtime/helpers/classCallCheck.js',
        );
        /* harmony import */ var babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__,
        );
        /* harmony import */ var babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          /*! babel-runtime/helpers/possibleConstructorReturn */ './node_modules/babel-runtime/helpers/possibleConstructorReturn.js',
        );
        /* harmony import */ var babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__,
        );
        /* harmony import */ var babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
          /*! babel-runtime/helpers/inherits */ './node_modules/babel-runtime/helpers/inherits.js',
        );
        /* harmony import */ var babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__,
        );
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
          /*! react */ './node_modules/react/index.js',
        );
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/ __webpack_require__.n(
          react__WEBPACK_IMPORTED_MODULE_4__,
        );
        /* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
          /*! prop-types */ './node_modules/prop-types/index.js',
        );
        /* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/ __webpack_require__.n(
          prop_types__WEBPACK_IMPORTED_MODULE_5__,
        );
        /* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
          /*! react-dom */ './node_modules/react-dom/index.js',
        );
        /* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/ __webpack_require__.n(
          react_dom__WEBPACK_IMPORTED_MODULE_6__,
        );
        /* harmony import */ var rc_align__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
          /*! rc-align */ './node_modules/rc-align/es/index.js',
        );
        /* harmony import */ var rc_animate__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
          /*! rc-animate */ './node_modules/rc-animate/es/Animate.js',
        );
        /* harmony import */ var _PopupInner__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
          /*! ./PopupInner */ './node_modules/rc-trigger/es/PopupInner.js',
        );
        /* harmony import */ var _LazyRenderBox__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
          /*! ./LazyRenderBox */ './node_modules/rc-trigger/es/LazyRenderBox.js',
        );
        /* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
          /*! ./utils */ './node_modules/rc-trigger/es/utils.js',
        );

        var Popup = (function(_Component) {
          babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(Popup, _Component);

          function Popup(props) {
            babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(
              this,
              Popup,
            );

            var _this = babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default()(
              this,
              _Component.call(this, props),
            );

            _initialiseProps.call(_this);

            _this.state = {
              // Used for stretch
              stretchChecked: false,
              targetWidth: undefined,
              targetHeight: undefined,
            };

            _this.savePopupRef = _utils__WEBPACK_IMPORTED_MODULE_11__['saveRef'].bind(
              _this,
              'popupInstance',
            );
            _this.saveAlignRef = _utils__WEBPACK_IMPORTED_MODULE_11__['saveRef'].bind(
              _this,
              'alignInstance',
            );
            return _this;
          }

          Popup.prototype.componentDidMount = function componentDidMount() {
            this.rootNode = this.getPopupDomNode();
            this.setStretchSize();
          };

          Popup.prototype.componentDidUpdate = function componentDidUpdate() {
            this.setStretchSize();
          };

          // Record size if stretch needed

          Popup.prototype.getPopupDomNode = function getPopupDomNode() {
            return react_dom__WEBPACK_IMPORTED_MODULE_6___default.a.findDOMNode(this.popupInstance);
          };

          // `target` on `rc-align` can accept as a function to get the bind element or a point.
          // ref: https://www.npmjs.com/package/rc-align

          Popup.prototype.getMaskTransitionName = function getMaskTransitionName() {
            var props = this.props;
            var transitionName = props.maskTransitionName;
            var animation = props.maskAnimation;
            if (!transitionName && animation) {
              transitionName = props.prefixCls + '-' + animation;
            }
            return transitionName;
          };

          Popup.prototype.getTransitionName = function getTransitionName() {
            var props = this.props;
            var transitionName = props.transitionName;
            if (!transitionName && props.animation) {
              transitionName = props.prefixCls + '-' + props.animation;
            }
            return transitionName;
          };

          Popup.prototype.getClassName = function getClassName(currentAlignClassName) {
            return this.props.prefixCls + ' ' + this.props.className + ' ' + currentAlignClassName;
          };

          Popup.prototype.getPopupElement = function getPopupElement() {
            var _this2 = this;

            var savePopupRef = this.savePopupRef;
            var _state = this.state,
              stretchChecked = _state.stretchChecked,
              targetHeight = _state.targetHeight,
              targetWidth = _state.targetWidth;
            var _props = this.props,
              align = _props.align,
              visible = _props.visible,
              prefixCls = _props.prefixCls,
              style = _props.style,
              getClassNameFromAlign = _props.getClassNameFromAlign,
              destroyPopupOnHide = _props.destroyPopupOnHide,
              stretch = _props.stretch,
              children = _props.children,
              onMouseEnter = _props.onMouseEnter,
              onMouseLeave = _props.onMouseLeave,
              onMouseDown = _props.onMouseDown,
              onTouchStart = _props.onTouchStart;

            var className = this.getClassName(
              this.currentAlignClassName || getClassNameFromAlign(align),
            );
            var hiddenClassName = prefixCls + '-hidden';

            if (!visible) {
              this.currentAlignClassName = null;
            }

            var sizeStyle = {};
            if (stretch) {
              // Stretch with target
              if (stretch.indexOf('height') !== -1) {
                sizeStyle.height = targetHeight;
              } else if (stretch.indexOf('minHeight') !== -1) {
                sizeStyle.minHeight = targetHeight;
              }
              if (stretch.indexOf('width') !== -1) {
                sizeStyle.width = targetWidth;
              } else if (stretch.indexOf('minWidth') !== -1) {
                sizeStyle.minWidth = targetWidth;
              }

              // Delay force align to makes ui smooth
              if (!stretchChecked) {
                sizeStyle.visibility = 'hidden';
                setTimeout(function() {
                  if (_this2.alignInstance) {
                    _this2.alignInstance.forceAlign();
                  }
                }, 0);
              }
            }

            var newStyle = babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0___default()(
              {},
              sizeStyle,
              style,
              this.getZIndexStyle(),
            );

            var popupInnerProps = {
              className: className,
              prefixCls: prefixCls,
              ref: savePopupRef,
              onMouseEnter: onMouseEnter,
              onMouseLeave: onMouseLeave,
              onMouseDown: onMouseDown,
              onTouchStart: onTouchStart,
              style: newStyle,
            };
            if (destroyPopupOnHide) {
              return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(
                rc_animate__WEBPACK_IMPORTED_MODULE_8__['default'],
                {
                  component: '',
                  exclusive: true,
                  transitionAppear: true,
                  transitionName: this.getTransitionName(),
                },
                visible
                  ? react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(
                      rc_align__WEBPACK_IMPORTED_MODULE_7__['default'],
                      {
                        target: this.getAlignTarget(),
                        key: 'popup',
                        ref: this.saveAlignRef,
                        monitorWindowResize: true,
                        align: align,
                        onAlign: this.onAlign,
                      },
                      react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(
                        _PopupInner__WEBPACK_IMPORTED_MODULE_9__['default'],
                        babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0___default()(
                          {
                            visible: true,
                          },
                          popupInnerProps,
                        ),
                        children,
                      ),
                    )
                  : null,
              );
            }

            return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(
              rc_animate__WEBPACK_IMPORTED_MODULE_8__['default'],
              {
                component: '',
                exclusive: true,
                transitionAppear: true,
                transitionName: this.getTransitionName(),
                showProp: 'xVisible',
              },
              react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(
                rc_align__WEBPACK_IMPORTED_MODULE_7__['default'],
                {
                  target: this.getAlignTarget(),
                  key: 'popup',
                  ref: this.saveAlignRef,
                  monitorWindowResize: true,
                  xVisible: visible,
                  childrenProps: { visible: 'xVisible' },
                  disabled: !visible,
                  align: align,
                  onAlign: this.onAlign,
                },
                react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(
                  _PopupInner__WEBPACK_IMPORTED_MODULE_9__['default'],
                  babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0___default()(
                    {
                      hiddenClassName: hiddenClassName,
                    },
                    popupInnerProps,
                  ),
                  children,
                ),
              ),
            );
          };

          Popup.prototype.getZIndexStyle = function getZIndexStyle() {
            var style = {};
            var props = this.props;
            if (props.zIndex !== undefined) {
              style.zIndex = props.zIndex;
            }
            return style;
          };

          Popup.prototype.getMaskElement = function getMaskElement() {
            var props = this.props;
            var maskElement = void 0;
            if (props.mask) {
              var maskTransition = this.getMaskTransitionName();
              maskElement = react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(
                _LazyRenderBox__WEBPACK_IMPORTED_MODULE_10__['default'],
                {
                  style: this.getZIndexStyle(),
                  key: 'mask',
                  className: props.prefixCls + '-mask',
                  hiddenClassName: props.prefixCls + '-mask-hidden',
                  visible: props.visible,
                },
              );
              if (maskTransition) {
                maskElement = react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(
                  rc_animate__WEBPACK_IMPORTED_MODULE_8__['default'],
                  {
                    key: 'mask',
                    showProp: 'visible',
                    transitionAppear: true,
                    component: '',
                    transitionName: maskTransition,
                  },
                  maskElement,
                );
              }
            }
            return maskElement;
          };

          Popup.prototype.render = function render() {
            return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(
              'div',
              null,
              this.getMaskElement(),
              this.getPopupElement(),
            );
          };

          return Popup;
        })(react__WEBPACK_IMPORTED_MODULE_4__['Component']);

        Popup.propTypes = {
          visible: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.bool,
          style: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.object,
          getClassNameFromAlign: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.func,
          onAlign: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.func,
          getRootDomNode: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.func,
          align: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.any,
          destroyPopupOnHide: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.bool,
          className: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.string,
          prefixCls: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.string,
          onMouseEnter: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.func,
          onMouseLeave: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.func,
          onMouseDown: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.func,
          onTouchStart: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.func,
          stretch: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.string,
          children: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.node,
          point: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.shape({
            pageX: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.number,
            pageY: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.number,
          }),
        };

        var _initialiseProps = function _initialiseProps() {
          var _this3 = this;

          this.onAlign = function(popupDomNode, align) {
            var props = _this3.props;
            var currentAlignClassName = props.getClassNameFromAlign(align);
            // FIX: https://github.com/react-component/trigger/issues/56
            // FIX: https://github.com/react-component/tooltip/issues/79
            if (_this3.currentAlignClassName !== currentAlignClassName) {
              _this3.currentAlignClassName = currentAlignClassName;
              popupDomNode.className = _this3.getClassName(currentAlignClassName);
            }
            props.onAlign(popupDomNode, align);
          };

          this.setStretchSize = function() {
            var _props2 = _this3.props,
              stretch = _props2.stretch,
              getRootDomNode = _props2.getRootDomNode,
              visible = _props2.visible;
            var _state2 = _this3.state,
              stretchChecked = _state2.stretchChecked,
              targetHeight = _state2.targetHeight,
              targetWidth = _state2.targetWidth;

            if (!stretch || !visible) {
              if (stretchChecked) {
                _this3.setState({ stretchChecked: false });
              }
              return;
            }

            var $ele = getRootDomNode();
            if (!$ele) return;

            var height = $ele.offsetHeight;
            var width = $ele.offsetWidth;

            if (targetHeight !== height || targetWidth !== width || !stretchChecked) {
              _this3.setState({
                stretchChecked: true,
                targetHeight: height,
                targetWidth: width,
              });
            }
          };

          this.getTargetElement = function() {
            return _this3.props.getRootDomNode();
          };

          this.getAlignTarget = function() {
            var point = _this3.props.point;

            if (point) {
              return point;
            }
            return _this3.getTargetElement;
          };
        };

        /* harmony default export */ __webpack_exports__['default'] = Popup;

        /***/
      },

    /***/ './node_modules/rc-trigger/es/PopupInner.js':
      /*!**************************************************!*\
  !*** ./node_modules/rc-trigger/es/PopupInner.js ***!
  \**************************************************/
      /*! exports provided: default */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! babel-runtime/helpers/classCallCheck */ './node_modules/babel-runtime/helpers/classCallCheck.js',
        );
        /* harmony import */ var babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__,
        );
        /* harmony import */ var babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          /*! babel-runtime/helpers/possibleConstructorReturn */ './node_modules/babel-runtime/helpers/possibleConstructorReturn.js',
        );
        /* harmony import */ var babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__,
        );
        /* harmony import */ var babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          /*! babel-runtime/helpers/inherits */ './node_modules/babel-runtime/helpers/inherits.js',
        );
        /* harmony import */ var babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__,
        );
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
          /*! react */ './node_modules/react/index.js',
        );
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/ __webpack_require__.n(
          react__WEBPACK_IMPORTED_MODULE_3__,
        );
        /* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
          /*! prop-types */ './node_modules/prop-types/index.js',
        );
        /* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/ __webpack_require__.n(
          prop_types__WEBPACK_IMPORTED_MODULE_4__,
        );
        /* harmony import */ var _LazyRenderBox__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
          /*! ./LazyRenderBox */ './node_modules/rc-trigger/es/LazyRenderBox.js',
        );

        var PopupInner = (function(_Component) {
          babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(
            PopupInner,
            _Component,
          );

          function PopupInner() {
            babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(
              this,
              PopupInner,
            );

            return babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1___default()(
              this,
              _Component.apply(this, arguments),
            );
          }

          PopupInner.prototype.render = function render() {
            var props = this.props;
            var className = props.className;
            if (!props.visible) {
              className += ' ' + props.hiddenClassName;
            }
            return react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(
              'div',
              {
                className: className,
                onMouseEnter: props.onMouseEnter,
                onMouseLeave: props.onMouseLeave,
                onMouseDown: props.onMouseDown,
                onTouchStart: props.onTouchStart,
                style: props.style,
              },
              react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(
                _LazyRenderBox__WEBPACK_IMPORTED_MODULE_5__['default'],
                { className: props.prefixCls + '-content', visible: props.visible },
                props.children,
              ),
            );
          };

          return PopupInner;
        })(react__WEBPACK_IMPORTED_MODULE_3__['Component']);

        PopupInner.propTypes = {
          hiddenClassName: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.string,
          className: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.string,
          prefixCls: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.string,
          onMouseEnter: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.func,
          onMouseLeave: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.func,
          onMouseDown: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.func,
          onTouchStart: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.func,
          children: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.any,
        };

        /* harmony default export */ __webpack_exports__['default'] = PopupInner;

        /***/
      },

    /***/ './node_modules/rc-trigger/es/index.js':
      /*!*********************************************!*\
  !*** ./node_modules/rc-trigger/es/index.js ***!
  \*********************************************/
      /*! exports provided: default */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! babel-runtime/helpers/extends */ './node_modules/babel-runtime/helpers/extends.js',
        );
        /* harmony import */ var babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__,
        );
        /* harmony import */ var babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          /*! babel-runtime/helpers/classCallCheck */ './node_modules/babel-runtime/helpers/classCallCheck.js',
        );
        /* harmony import */ var babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__,
        );
        /* harmony import */ var babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          /*! babel-runtime/helpers/possibleConstructorReturn */ './node_modules/babel-runtime/helpers/possibleConstructorReturn.js',
        );
        /* harmony import */ var babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__,
        );
        /* harmony import */ var babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
          /*! babel-runtime/helpers/inherits */ './node_modules/babel-runtime/helpers/inherits.js',
        );
        /* harmony import */ var babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__,
        );
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
          /*! react */ './node_modules/react/index.js',
        );
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/ __webpack_require__.n(
          react__WEBPACK_IMPORTED_MODULE_4__,
        );
        /* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
          /*! prop-types */ './node_modules/prop-types/index.js',
        );
        /* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/ __webpack_require__.n(
          prop_types__WEBPACK_IMPORTED_MODULE_5__,
        );
        /* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
          /*! react-dom */ './node_modules/react-dom/index.js',
        );
        /* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/ __webpack_require__.n(
          react_dom__WEBPACK_IMPORTED_MODULE_6__,
        );
        /* harmony import */ var react_lifecycles_compat__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
          /*! react-lifecycles-compat */ './node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js',
        );
        /* harmony import */ var rc_util_es_Dom_contains__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
          /*! rc-util/es/Dom/contains */ './node_modules/rc-util/es/Dom/contains.js',
        );
        /* harmony import */ var rc_util_es_Dom_addEventListener__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
          /*! rc-util/es/Dom/addEventListener */ './node_modules/rc-util/es/Dom/addEventListener.js',
        );
        /* harmony import */ var rc_util_es_ContainerRender__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
          /*! rc-util/es/ContainerRender */ './node_modules/rc-util/es/ContainerRender.js',
        );
        /* harmony import */ var rc_util_es_Portal__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
          /*! rc-util/es/Portal */ './node_modules/rc-util/es/Portal.js',
        );
        /* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
          /*! classnames */ './node_modules/classnames/index.js',
        );
        /* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/ __webpack_require__.n(
          classnames__WEBPACK_IMPORTED_MODULE_12__,
        );
        /* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
          /*! ./utils */ './node_modules/rc-trigger/es/utils.js',
        );
        /* harmony import */ var _Popup__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
          /*! ./Popup */ './node_modules/rc-trigger/es/Popup.js',
        );

        function noop() {}

        function returnEmptyString() {
          return '';
        }

        function returnDocument() {
          return window.document;
        }

        var ALL_HANDLERS = [
          'onClick',
          'onMouseDown',
          'onTouchStart',
          'onMouseEnter',
          'onMouseLeave',
          'onFocus',
          'onBlur',
          'onContextMenu',
        ];

        var IS_REACT_16 = !!react_dom__WEBPACK_IMPORTED_MODULE_6__['createPortal'];

        var contextTypes = {
          rcTrigger: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.shape({
            onPopupMouseDown: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.func,
          }),
        };

        var Trigger = (function(_React$Component) {
          babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(
            Trigger,
            _React$Component,
          );

          function Trigger(props) {
            babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(
              this,
              Trigger,
            );

            var _this = babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default()(
              this,
              _React$Component.call(this, props),
            );

            _initialiseProps.call(_this);

            var popupVisible = void 0;
            if ('popupVisible' in props) {
              popupVisible = !!props.popupVisible;
            } else {
              popupVisible = !!props.defaultPopupVisible;
            }

            _this.state = {
              prevPopupVisible: popupVisible,
              popupVisible: popupVisible,
            };

            ALL_HANDLERS.forEach(function(h) {
              _this['fire' + h] = function(e) {
                _this.fireEvents(h, e);
              };
            });
            return _this;
          }

          Trigger.prototype.getChildContext = function getChildContext() {
            return {
              rcTrigger: {
                onPopupMouseDown: this.onPopupMouseDown,
              },
            };
          };

          Trigger.prototype.componentDidMount = function componentDidMount() {
            this.componentDidUpdate(
              {},
              {
                popupVisible: this.state.popupVisible,
              },
            );
          };

          Trigger.prototype.componentDidUpdate = function componentDidUpdate(_, prevState) {
            var props = this.props;
            var state = this.state;
            var triggerAfterPopupVisibleChange = function triggerAfterPopupVisibleChange() {
              if (prevState.popupVisible !== state.popupVisible) {
                props.afterPopupVisibleChange(state.popupVisible);
              }
            };
            if (!IS_REACT_16) {
              this.renderComponent(null, triggerAfterPopupVisibleChange);
            }

            // We must listen to `mousedown` or `touchstart`, edge case:
            // https://github.com/ant-design/ant-design/issues/5804
            // https://github.com/react-component/calendar/issues/250
            // https://github.com/react-component/trigger/issues/50
            if (state.popupVisible) {
              var currentDocument = void 0;
              if (
                !this.clickOutsideHandler &&
                (this.isClickToHide() || this.isContextMenuToShow())
              ) {
                currentDocument = props.getDocument();
                this.clickOutsideHandler = Object(
                  rc_util_es_Dom_addEventListener__WEBPACK_IMPORTED_MODULE_9__['default'],
                )(currentDocument, 'mousedown', this.onDocumentClick);
              }
              // always hide on mobile
              if (!this.touchOutsideHandler) {
                currentDocument = currentDocument || props.getDocument();
                this.touchOutsideHandler = Object(
                  rc_util_es_Dom_addEventListener__WEBPACK_IMPORTED_MODULE_9__['default'],
                )(currentDocument, 'touchstart', this.onDocumentClick);
              }
              // close popup when trigger type contains 'onContextMenu' and document is scrolling.
              if (!this.contextMenuOutsideHandler1 && this.isContextMenuToShow()) {
                currentDocument = currentDocument || props.getDocument();
                this.contextMenuOutsideHandler1 = Object(
                  rc_util_es_Dom_addEventListener__WEBPACK_IMPORTED_MODULE_9__['default'],
                )(currentDocument, 'scroll', this.onContextMenuClose);
              }
              // close popup when trigger type contains 'onContextMenu' and window is blur.
              if (!this.contextMenuOutsideHandler2 && this.isContextMenuToShow()) {
                this.contextMenuOutsideHandler2 = Object(
                  rc_util_es_Dom_addEventListener__WEBPACK_IMPORTED_MODULE_9__['default'],
                )(window, 'blur', this.onContextMenuClose);
              }
              return;
            }

            this.clearOutsideHandler();
          };

          Trigger.prototype.componentWillUnmount = function componentWillUnmount() {
            this.clearDelayTimer();
            this.clearOutsideHandler();
            clearTimeout(this.mouseDownTimeout);
          };

          Trigger.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
            var popupVisible = _ref.popupVisible;

            var newState = {};

            if (popupVisible !== undefined && prevState.popupVisible !== popupVisible) {
              newState.popupVisible = popupVisible;
              newState.prevPopupVisible = prevState.popupVisible;
            }

            return newState;
          };

          Trigger.prototype.getPopupDomNode = function getPopupDomNode() {
            // for test
            if (this._component && this._component.getPopupDomNode) {
              return this._component.getPopupDomNode();
            }
            return null;
          };

          Trigger.prototype.getPopupAlign = function getPopupAlign() {
            var props = this.props;
            var popupPlacement = props.popupPlacement,
              popupAlign = props.popupAlign,
              builtinPlacements = props.builtinPlacements;

            if (popupPlacement && builtinPlacements) {
              return Object(_utils__WEBPACK_IMPORTED_MODULE_13__['getAlignFromPlacement'])(
                builtinPlacements,
                popupPlacement,
                popupAlign,
              );
            }
            return popupAlign;
          };

          /**
           * @param popupVisible    Show or not the popup element
           * @param event           SyntheticEvent, used for `pointAlign`
           */
          Trigger.prototype.setPopupVisible = function setPopupVisible(popupVisible, event) {
            var alignPoint = this.props.alignPoint;
            var prevPopupVisible = this.state.popupVisible;

            this.clearDelayTimer();

            if (prevPopupVisible !== popupVisible) {
              if (!('popupVisible' in this.props)) {
                this.setState({ popupVisible: popupVisible, prevPopupVisible: prevPopupVisible });
              }
              this.props.onPopupVisibleChange(popupVisible);
            }

            // Always record the point position since mouseEnterDelay will delay the show
            if (alignPoint && event) {
              this.setPoint(event);
            }
          };

          Trigger.prototype.delaySetPopupVisible = function delaySetPopupVisible(
            visible,
            delayS,
            event,
          ) {
            var _this2 = this;

            var delay = delayS * 1000;
            this.clearDelayTimer();
            if (delay) {
              var point = event ? { pageX: event.pageX, pageY: event.pageY } : null;
              this.delayTimer = setTimeout(function() {
                _this2.setPopupVisible(visible, point);
                _this2.clearDelayTimer();
              }, delay);
            } else {
              this.setPopupVisible(visible, event);
            }
          };

          Trigger.prototype.clearDelayTimer = function clearDelayTimer() {
            if (this.delayTimer) {
              clearTimeout(this.delayTimer);
              this.delayTimer = null;
            }
          };

          Trigger.prototype.clearOutsideHandler = function clearOutsideHandler() {
            if (this.clickOutsideHandler) {
              this.clickOutsideHandler.remove();
              this.clickOutsideHandler = null;
            }

            if (this.contextMenuOutsideHandler1) {
              this.contextMenuOutsideHandler1.remove();
              this.contextMenuOutsideHandler1 = null;
            }

            if (this.contextMenuOutsideHandler2) {
              this.contextMenuOutsideHandler2.remove();
              this.contextMenuOutsideHandler2 = null;
            }

            if (this.touchOutsideHandler) {
              this.touchOutsideHandler.remove();
              this.touchOutsideHandler = null;
            }
          };

          Trigger.prototype.createTwoChains = function createTwoChains(event) {
            var childPros = this.props.children.props;
            var props = this.props;
            if (childPros[event] && props[event]) {
              return this['fire' + event];
            }
            return childPros[event] || props[event];
          };

          Trigger.prototype.isClickToShow = function isClickToShow() {
            var _props = this.props,
              action = _props.action,
              showAction = _props.showAction;

            return action.indexOf('click') !== -1 || showAction.indexOf('click') !== -1;
          };

          Trigger.prototype.isContextMenuToShow = function isContextMenuToShow() {
            var _props2 = this.props,
              action = _props2.action,
              showAction = _props2.showAction;

            return action.indexOf('contextMenu') !== -1 || showAction.indexOf('contextMenu') !== -1;
          };

          Trigger.prototype.isClickToHide = function isClickToHide() {
            var _props3 = this.props,
              action = _props3.action,
              hideAction = _props3.hideAction;

            return action.indexOf('click') !== -1 || hideAction.indexOf('click') !== -1;
          };

          Trigger.prototype.isMouseEnterToShow = function isMouseEnterToShow() {
            var _props4 = this.props,
              action = _props4.action,
              showAction = _props4.showAction;

            return action.indexOf('hover') !== -1 || showAction.indexOf('mouseEnter') !== -1;
          };

          Trigger.prototype.isMouseLeaveToHide = function isMouseLeaveToHide() {
            var _props5 = this.props,
              action = _props5.action,
              hideAction = _props5.hideAction;

            return action.indexOf('hover') !== -1 || hideAction.indexOf('mouseLeave') !== -1;
          };

          Trigger.prototype.isFocusToShow = function isFocusToShow() {
            var _props6 = this.props,
              action = _props6.action,
              showAction = _props6.showAction;

            return action.indexOf('focus') !== -1 || showAction.indexOf('focus') !== -1;
          };

          Trigger.prototype.isBlurToHide = function isBlurToHide() {
            var _props7 = this.props,
              action = _props7.action,
              hideAction = _props7.hideAction;

            return action.indexOf('focus') !== -1 || hideAction.indexOf('blur') !== -1;
          };

          Trigger.prototype.forcePopupAlign = function forcePopupAlign() {
            if (this.state.popupVisible && this._component && this._component.alignInstance) {
              this._component.alignInstance.forceAlign();
            }
          };

          Trigger.prototype.fireEvents = function fireEvents(type, e) {
            var childCallback = this.props.children.props[type];
            if (childCallback) {
              childCallback(e);
            }
            var callback = this.props[type];
            if (callback) {
              callback(e);
            }
          };

          Trigger.prototype.close = function close() {
            this.setPopupVisible(false);
          };

          Trigger.prototype.render = function render() {
            var _this3 = this;

            var popupVisible = this.state.popupVisible;
            var _props8 = this.props,
              children = _props8.children,
              forceRender = _props8.forceRender,
              alignPoint = _props8.alignPoint,
              className = _props8.className;

            var child = react__WEBPACK_IMPORTED_MODULE_4___default.a.Children.only(children);
            var newChildProps = { key: 'trigger' };

            if (this.isContextMenuToShow()) {
              newChildProps.onContextMenu = this.onContextMenu;
            } else {
              newChildProps.onContextMenu = this.createTwoChains('onContextMenu');
            }

            if (this.isClickToHide() || this.isClickToShow()) {
              newChildProps.onClick = this.onClick;
              newChildProps.onMouseDown = this.onMouseDown;
              newChildProps.onTouchStart = this.onTouchStart;
            } else {
              newChildProps.onClick = this.createTwoChains('onClick');
              newChildProps.onMouseDown = this.createTwoChains('onMouseDown');
              newChildProps.onTouchStart = this.createTwoChains('onTouchStart');
            }
            if (this.isMouseEnterToShow()) {
              newChildProps.onMouseEnter = this.onMouseEnter;
              if (alignPoint) {
                newChildProps.onMouseMove = this.onMouseMove;
              }
            } else {
              newChildProps.onMouseEnter = this.createTwoChains('onMouseEnter');
            }
            if (this.isMouseLeaveToHide()) {
              newChildProps.onMouseLeave = this.onMouseLeave;
            } else {
              newChildProps.onMouseLeave = this.createTwoChains('onMouseLeave');
            }
            if (this.isFocusToShow() || this.isBlurToHide()) {
              newChildProps.onFocus = this.onFocus;
              newChildProps.onBlur = this.onBlur;
            } else {
              newChildProps.onFocus = this.createTwoChains('onFocus');
              newChildProps.onBlur = this.createTwoChains('onBlur');
            }

            var childrenClassName = classnames__WEBPACK_IMPORTED_MODULE_12___default()(
              child && child.props && child.props.className,
              className,
            );
            if (childrenClassName) {
              newChildProps.className = childrenClassName;
            }
            var trigger = react__WEBPACK_IMPORTED_MODULE_4___default.a.cloneElement(
              child,
              newChildProps,
            );

            if (!IS_REACT_16) {
              return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(
                rc_util_es_ContainerRender__WEBPACK_IMPORTED_MODULE_10__['default'],
                {
                  parent: this,
                  visible: popupVisible,
                  autoMount: false,
                  forceRender: forceRender,
                  getComponent: this.getComponent,
                  getContainer: this.getContainer,
                },
                function(_ref2) {
                  var renderComponent = _ref2.renderComponent;

                  _this3.renderComponent = renderComponent;
                  return trigger;
                },
              );
            }

            var portal = void 0;
            // prevent unmounting after it's rendered
            if (popupVisible || this._component || forceRender) {
              portal = react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(
                rc_util_es_Portal__WEBPACK_IMPORTED_MODULE_11__['default'],
                {
                  key: 'portal',
                  getContainer: this.getContainer,
                  didUpdate: this.handlePortalUpdate,
                },
                this.getComponent(),
              );
            }

            return [trigger, portal];
          };

          return Trigger;
        })(react__WEBPACK_IMPORTED_MODULE_4___default.a.Component);

        Trigger.propTypes = {
          children: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.any,
          action: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.oneOfType([
            prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.string,
            prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.arrayOf(
              prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.string,
            ),
          ]),
          showAction: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.any,
          hideAction: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.any,
          getPopupClassNameFromAlign: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.any,
          onPopupVisibleChange: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.func,
          afterPopupVisibleChange: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.func,
          popup: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.oneOfType([
            prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.node,
            prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.func,
          ]).isRequired,
          popupStyle: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.object,
          prefixCls: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.string,
          popupClassName: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.string,
          className: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.string,
          popupPlacement: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.string,
          builtinPlacements: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.object,
          popupTransitionName: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.oneOfType([
            prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.string,
            prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.object,
          ]),
          popupAnimation: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.any,
          mouseEnterDelay: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.number,
          mouseLeaveDelay: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.number,
          zIndex: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.number,
          focusDelay: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.number,
          blurDelay: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.number,
          getPopupContainer: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.func,
          getDocument: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.func,
          forceRender: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.bool,
          destroyPopupOnHide: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.bool,
          mask: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.bool,
          maskClosable: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.bool,
          onPopupAlign: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.func,
          popupAlign: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.object,
          popupVisible: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.bool,
          defaultPopupVisible: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.bool,
          maskTransitionName: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.oneOfType([
            prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.string,
            prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.object,
          ]),
          maskAnimation: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.string,
          stretch: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.string,
          alignPoint: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.bool, // Maybe we can support user pass position in the future
        };
        Trigger.contextTypes = contextTypes;
        Trigger.childContextTypes = contextTypes;
        Trigger.defaultProps = {
          prefixCls: 'rc-trigger-popup',
          getPopupClassNameFromAlign: returnEmptyString,
          getDocument: returnDocument,
          onPopupVisibleChange: noop,
          afterPopupVisibleChange: noop,
          onPopupAlign: noop,
          popupClassName: '',
          mouseEnterDelay: 0,
          mouseLeaveDelay: 0.1,
          focusDelay: 0,
          blurDelay: 0.15,
          popupStyle: {},
          destroyPopupOnHide: false,
          popupAlign: {},
          defaultPopupVisible: false,
          mask: false,
          maskClosable: true,
          action: [],
          showAction: [],
          hideAction: [],
        };

        var _initialiseProps = function _initialiseProps() {
          var _this4 = this;

          this.onMouseEnter = function(e) {
            var mouseEnterDelay = _this4.props.mouseEnterDelay;

            _this4.fireEvents('onMouseEnter', e);
            _this4.delaySetPopupVisible(true, mouseEnterDelay, mouseEnterDelay ? null : e);
          };

          this.onMouseMove = function(e) {
            _this4.fireEvents('onMouseMove', e);
            _this4.setPoint(e);
          };

          this.onMouseLeave = function(e) {
            _this4.fireEvents('onMouseLeave', e);
            _this4.delaySetPopupVisible(false, _this4.props.mouseLeaveDelay);
          };

          this.onPopupMouseEnter = function() {
            _this4.clearDelayTimer();
          };

          this.onPopupMouseLeave = function(e) {
            // https://github.com/react-component/trigger/pull/13
            // react bug?
            if (
              e.relatedTarget &&
              !e.relatedTarget.setTimeout &&
              _this4._component &&
              _this4._component.getPopupDomNode &&
              Object(rc_util_es_Dom_contains__WEBPACK_IMPORTED_MODULE_8__['default'])(
                _this4._component.getPopupDomNode(),
                e.relatedTarget,
              )
            ) {
              return;
            }
            _this4.delaySetPopupVisible(false, _this4.props.mouseLeaveDelay);
          };

          this.onFocus = function(e) {
            _this4.fireEvents('onFocus', e);
            // incase focusin and focusout
            _this4.clearDelayTimer();
            if (_this4.isFocusToShow()) {
              _this4.focusTime = Date.now();
              _this4.delaySetPopupVisible(true, _this4.props.focusDelay);
            }
          };

          this.onMouseDown = function(e) {
            _this4.fireEvents('onMouseDown', e);
            _this4.preClickTime = Date.now();
          };

          this.onTouchStart = function(e) {
            _this4.fireEvents('onTouchStart', e);
            _this4.preTouchTime = Date.now();
          };

          this.onBlur = function(e) {
            _this4.fireEvents('onBlur', e);
            _this4.clearDelayTimer();
            if (_this4.isBlurToHide()) {
              _this4.delaySetPopupVisible(false, _this4.props.blurDelay);
            }
          };

          this.onContextMenu = function(e) {
            e.preventDefault();
            _this4.fireEvents('onContextMenu', e);
            _this4.setPopupVisible(true, e);
          };

          this.onContextMenuClose = function() {
            if (_this4.isContextMenuToShow()) {
              _this4.close();
            }
          };

          this.onClick = function(event) {
            _this4.fireEvents('onClick', event);
            // focus will trigger click
            if (_this4.focusTime) {
              var preTime = void 0;
              if (_this4.preClickTime && _this4.preTouchTime) {
                preTime = Math.min(_this4.preClickTime, _this4.preTouchTime);
              } else if (_this4.preClickTime) {
                preTime = _this4.preClickTime;
              } else if (_this4.preTouchTime) {
                preTime = _this4.preTouchTime;
              }
              if (Math.abs(preTime - _this4.focusTime) < 20) {
                return;
              }
              _this4.focusTime = 0;
            }
            _this4.preClickTime = 0;
            _this4.preTouchTime = 0;

            // Only prevent default when all the action is click.
            // https://github.com/ant-design/ant-design/issues/17043
            // https://github.com/ant-design/ant-design/issues/17291
            if (
              _this4.isClickToShow() &&
              (_this4.isClickToHide() || _this4.isBlurToHide()) &&
              event &&
              event.preventDefault
            ) {
              event.preventDefault();
            }
            var nextVisible = !_this4.state.popupVisible;
            if (
              (_this4.isClickToHide() && !nextVisible) ||
              (nextVisible && _this4.isClickToShow())
            ) {
              _this4.setPopupVisible(!_this4.state.popupVisible, event);
            }
          };

          this.onPopupMouseDown = function() {
            var _context$rcTrigger = _this4.context.rcTrigger,
              rcTrigger = _context$rcTrigger === undefined ? {} : _context$rcTrigger;

            _this4.hasPopupMouseDown = true;

            clearTimeout(_this4.mouseDownTimeout);
            _this4.mouseDownTimeout = setTimeout(function() {
              _this4.hasPopupMouseDown = false;
            }, 0);

            if (rcTrigger.onPopupMouseDown) {
              rcTrigger.onPopupMouseDown.apply(rcTrigger, arguments);
            }
          };

          this.onDocumentClick = function(event) {
            if (_this4.props.mask && !_this4.props.maskClosable) {
              return;
            }

            var target = event.target;
            var root = Object(react_dom__WEBPACK_IMPORTED_MODULE_6__['findDOMNode'])(_this4);
            if (
              !Object(rc_util_es_Dom_contains__WEBPACK_IMPORTED_MODULE_8__['default'])(
                root,
                target,
              ) &&
              !_this4.hasPopupMouseDown
            ) {
              _this4.close();
            }
          };

          this.getRootDomNode = function() {
            return Object(react_dom__WEBPACK_IMPORTED_MODULE_6__['findDOMNode'])(_this4);
          };

          this.getPopupClassNameFromAlign = function(align) {
            var className = [];
            var _props9 = _this4.props,
              popupPlacement = _props9.popupPlacement,
              builtinPlacements = _props9.builtinPlacements,
              prefixCls = _props9.prefixCls,
              alignPoint = _props9.alignPoint,
              getPopupClassNameFromAlign = _props9.getPopupClassNameFromAlign;

            if (popupPlacement && builtinPlacements) {
              className.push(
                Object(_utils__WEBPACK_IMPORTED_MODULE_13__['getAlignPopupClassName'])(
                  builtinPlacements,
                  prefixCls,
                  align,
                  alignPoint,
                ),
              );
            }
            if (getPopupClassNameFromAlign) {
              className.push(getPopupClassNameFromAlign(align));
            }
            return className.join(' ');
          };

          this.getComponent = function() {
            var _props10 = _this4.props,
              prefixCls = _props10.prefixCls,
              destroyPopupOnHide = _props10.destroyPopupOnHide,
              popupClassName = _props10.popupClassName,
              action = _props10.action,
              onPopupAlign = _props10.onPopupAlign,
              popupAnimation = _props10.popupAnimation,
              popupTransitionName = _props10.popupTransitionName,
              popupStyle = _props10.popupStyle,
              mask = _props10.mask,
              maskAnimation = _props10.maskAnimation,
              maskTransitionName = _props10.maskTransitionName,
              zIndex = _props10.zIndex,
              popup = _props10.popup,
              stretch = _props10.stretch,
              alignPoint = _props10.alignPoint;
            var _state = _this4.state,
              popupVisible = _state.popupVisible,
              point = _state.point;

            var align = _this4.getPopupAlign();

            var mouseProps = {};
            if (_this4.isMouseEnterToShow()) {
              mouseProps.onMouseEnter = _this4.onPopupMouseEnter;
            }
            if (_this4.isMouseLeaveToHide()) {
              mouseProps.onMouseLeave = _this4.onPopupMouseLeave;
            }

            mouseProps.onMouseDown = _this4.onPopupMouseDown;
            mouseProps.onTouchStart = _this4.onPopupMouseDown;

            return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(
              _Popup__WEBPACK_IMPORTED_MODULE_14__['default'],
              babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0___default()(
                {
                  prefixCls: prefixCls,
                  destroyPopupOnHide: destroyPopupOnHide,
                  visible: popupVisible,
                  point: alignPoint && point,
                  className: popupClassName,
                  action: action,
                  align: align,
                  onAlign: onPopupAlign,
                  animation: popupAnimation,
                  getClassNameFromAlign: _this4.getPopupClassNameFromAlign,
                },
                mouseProps,
                {
                  stretch: stretch,
                  getRootDomNode: _this4.getRootDomNode,
                  style: popupStyle,
                  mask: mask,
                  zIndex: zIndex,
                  transitionName: popupTransitionName,
                  maskAnimation: maskAnimation,
                  maskTransitionName: maskTransitionName,
                  ref: _this4.savePopup,
                },
              ),
              typeof popup === 'function' ? popup() : popup,
            );
          };

          this.getContainer = function() {
            var props = _this4.props;

            var popupContainer = document.createElement('div');
            // Make sure default popup container will never cause scrollbar appearing
            // https://github.com/react-component/trigger/issues/41
            popupContainer.style.position = 'absolute';
            popupContainer.style.top = '0';
            popupContainer.style.left = '0';
            popupContainer.style.width = '100%';
            var mountNode = props.getPopupContainer
              ? props.getPopupContainer(
                  Object(react_dom__WEBPACK_IMPORTED_MODULE_6__['findDOMNode'])(_this4),
                )
              : props.getDocument().body;
            mountNode.appendChild(popupContainer);
            return popupContainer;
          };

          this.setPoint = function(point) {
            var alignPoint = _this4.props.alignPoint;

            if (!alignPoint || !point) return;

            _this4.setState({
              point: {
                pageX: point.pageX,
                pageY: point.pageY,
              },
            });
          };

          this.handlePortalUpdate = function() {
            if (_this4.state.prevPopupVisible !== _this4.state.popupVisible) {
              _this4.props.afterPopupVisibleChange(_this4.state.popupVisible);
            }
          };

          this.savePopup = function(node) {
            _this4._component = node;
          };
        };

        Object(react_lifecycles_compat__WEBPACK_IMPORTED_MODULE_7__['polyfill'])(Trigger);

        /* harmony default export */ __webpack_exports__['default'] = Trigger;

        /***/
      },

    /***/ './node_modules/rc-trigger/es/utils.js':
      /*!*********************************************!*\
  !*** ./node_modules/rc-trigger/es/utils.js ***!
  \*********************************************/
      /*! exports provided: getAlignFromPlacement, getAlignPopupClassName, saveRef */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          'getAlignFromPlacement',
          function() {
            return getAlignFromPlacement;
          },
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          'getAlignPopupClassName',
          function() {
            return getAlignPopupClassName;
          },
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          'saveRef',
          function() {
            return saveRef;
          },
        );
        /* harmony import */ var babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! babel-runtime/helpers/extends */ './node_modules/babel-runtime/helpers/extends.js',
        );
        /* harmony import */ var babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(
          babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__,
        );

        function isPointsEq(a1, a2, isAlignPoint) {
          if (isAlignPoint) {
            return a1[0] === a2[0];
          }
          return a1[0] === a2[0] && a1[1] === a2[1];
        }

        function getAlignFromPlacement(builtinPlacements, placementStr, align) {
          var baseAlign = builtinPlacements[placementStr] || {};
          return babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0___default()(
            {},
            baseAlign,
            align,
          );
        }

        function getAlignPopupClassName(builtinPlacements, prefixCls, align, isAlignPoint) {
          var points = align.points;
          for (var placement in builtinPlacements) {
            if (builtinPlacements.hasOwnProperty(placement)) {
              if (isPointsEq(builtinPlacements[placement].points, points, isAlignPoint)) {
                return prefixCls + '-placement-' + placement;
              }
            }
          }
          return '';
        }

        function saveRef(name, component) {
          this[name] = component;
        }

        /***/
      },

    /***/ './node_modules/rc-util/es/ContainerRender.js':
      /*!****************************************************!*\
  !*** ./node_modules/rc-util/es/ContainerRender.js ***!
  \****************************************************/
      /*! exports provided: default */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          'default',
          function() {
            return ContainerRender;
          },
        );
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! react */ './node_modules/react/index.js',
        );
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(
          react__WEBPACK_IMPORTED_MODULE_0__,
        );
        /* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          /*! react-dom */ './node_modules/react-dom/index.js',
        );
        /* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(
          react_dom__WEBPACK_IMPORTED_MODULE_1__,
        );
        /* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          /*! prop-types */ './node_modules/prop-types/index.js',
        );
        /* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __webpack_require__.n(
          prop_types__WEBPACK_IMPORTED_MODULE_2__,
        );
        function _typeof(obj) {
          if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _possibleConstructorReturn(self, call) {
          if (call && (_typeof(call) === 'object' || typeof call === 'function')) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return self;
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError('Super expression must either be null or a function');
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: { value: subClass, writable: true, configurable: true },
          });
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        var ContainerRender =
          /*#__PURE__*/
          (function(_React$Component) {
            _inherits(ContainerRender, _React$Component);

            function ContainerRender() {
              var _getPrototypeOf2;

              var _this;

              _classCallCheck(this, ContainerRender);

              for (
                var _len = arguments.length, args = new Array(_len), _key = 0;
                _key < _len;
                _key++
              ) {
                args[_key] = arguments[_key];
              }

              _this = _possibleConstructorReturn(
                this,
                (_getPrototypeOf2 = _getPrototypeOf(ContainerRender)).call.apply(
                  _getPrototypeOf2,
                  [this].concat(args),
                ),
              );

              _this.removeContainer = function() {
                if (_this.container) {
                  react_dom__WEBPACK_IMPORTED_MODULE_1___default.a.unmountComponentAtNode(
                    _this.container,
                  );

                  _this.container.parentNode.removeChild(_this.container);

                  _this.container = null;
                }
              };

              _this.renderComponent = function(props, ready) {
                var _this$props = _this.props,
                  visible = _this$props.visible,
                  getComponent = _this$props.getComponent,
                  forceRender = _this$props.forceRender,
                  getContainer = _this$props.getContainer,
                  parent = _this$props.parent;

                if (visible || parent._component || forceRender) {
                  if (!_this.container) {
                    _this.container = getContainer();
                  }

                  react_dom__WEBPACK_IMPORTED_MODULE_1___default.a.unstable_renderSubtreeIntoContainer(
                    parent,
                    getComponent(props),
                    _this.container,
                    function callback() {
                      if (ready) {
                        ready.call(this);
                      }
                    },
                  );
                }
              };

              return _this;
            }

            _createClass(ContainerRender, [
              {
                key: 'componentDidMount',
                value: function componentDidMount() {
                  if (this.props.autoMount) {
                    this.renderComponent();
                  }
                },
              },
              {
                key: 'componentDidUpdate',
                value: function componentDidUpdate() {
                  if (this.props.autoMount) {
                    this.renderComponent();
                  }
                },
              },
              {
                key: 'componentWillUnmount',
                value: function componentWillUnmount() {
                  if (this.props.autoDestroy) {
                    this.removeContainer();
                  }
                },
              },
              {
                key: 'render',
                value: function render() {
                  return this.props.children({
                    renderComponent: this.renderComponent,
                    removeContainer: this.removeContainer,
                  });
                },
              },
            ]);

            return ContainerRender;
          })(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);

        ContainerRender.propTypes = {
          autoMount: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
          autoDestroy: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
          visible: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
          forceRender: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
          parent: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.any,
          getComponent: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func.isRequired,
          getContainer: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func.isRequired,
          children: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func.isRequired,
        };
        ContainerRender.defaultProps = {
          autoMount: true,
          autoDestroy: true,
          forceRender: false,
        };

        /***/
      },

    /***/ './node_modules/rc-util/es/Dom/addEventListener.js':
      /*!*********************************************************!*\
  !*** ./node_modules/rc-util/es/Dom/addEventListener.js ***!
  \*********************************************************/
      /*! exports provided: default */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          'default',
          function() {
            return addEventListenerWrap;
          },
        );
        /* harmony import */ var add_dom_event_listener__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! add-dom-event-listener */ './node_modules/add-dom-event-listener/lib/index.js',
        );
        /* harmony import */ var add_dom_event_listener__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(
          add_dom_event_listener__WEBPACK_IMPORTED_MODULE_0__,
        );
        /* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          /*! react-dom */ './node_modules/react-dom/index.js',
        );
        /* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(
          react_dom__WEBPACK_IMPORTED_MODULE_1__,
        );

        function addEventListenerWrap(target, eventType, cb, option) {
          /* eslint camelcase: 2 */
          var callback = react_dom__WEBPACK_IMPORTED_MODULE_1___default.a.unstable_batchedUpdates
            ? function run(e) {
                react_dom__WEBPACK_IMPORTED_MODULE_1___default.a.unstable_batchedUpdates(cb, e);
              }
            : cb;
          return add_dom_event_listener__WEBPACK_IMPORTED_MODULE_0___default()(
            target,
            eventType,
            callback,
            option,
          );
        }

        /***/
      },

    /***/ './node_modules/rc-util/es/Dom/contains.js':
      /*!*************************************************!*\
  !*** ./node_modules/rc-util/es/Dom/contains.js ***!
  \*************************************************/
      /*! exports provided: default */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          'default',
          function() {
            return contains;
          },
        );
        function contains(root, n) {
          var node = n;

          while (node) {
            if (node === root) {
              return true;
            }

            node = node.parentNode;
          }

          return false;
        }

        /***/
      },

    /***/ './node_modules/rc-util/es/Portal.js':
      /*!*******************************************!*\
  !*** ./node_modules/rc-util/es/Portal.js ***!
  \*******************************************/
      /*! exports provided: default */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          'default',
          function() {
            return Portal;
          },
        );
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! react */ './node_modules/react/index.js',
        );
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(
          react__WEBPACK_IMPORTED_MODULE_0__,
        );
        /* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          /*! react-dom */ './node_modules/react-dom/index.js',
        );
        /* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(
          react_dom__WEBPACK_IMPORTED_MODULE_1__,
        );
        /* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          /*! prop-types */ './node_modules/prop-types/index.js',
        );
        /* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __webpack_require__.n(
          prop_types__WEBPACK_IMPORTED_MODULE_2__,
        );
        function _typeof(obj) {
          if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _possibleConstructorReturn(self, call) {
          if (call && (_typeof(call) === 'object' || typeof call === 'function')) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return self;
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError('Super expression must either be null or a function');
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: { value: subClass, writable: true, configurable: true },
          });
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        var Portal =
          /*#__PURE__*/
          (function(_React$Component) {
            _inherits(Portal, _React$Component);

            function Portal() {
              _classCallCheck(this, Portal);

              return _possibleConstructorReturn(
                this,
                _getPrototypeOf(Portal).apply(this, arguments),
              );
            }

            _createClass(Portal, [
              {
                key: 'componentDidMount',
                value: function componentDidMount() {
                  this.createContainer();
                },
              },
              {
                key: 'componentDidUpdate',
                value: function componentDidUpdate(prevProps) {
                  var didUpdate = this.props.didUpdate;

                  if (didUpdate) {
                    didUpdate(prevProps);
                  }
                },
              },
              {
                key: 'componentWillUnmount',
                value: function componentWillUnmount() {
                  this.removeContainer();
                },
              },
              {
                key: 'createContainer',
                value: function createContainer() {
                  this._container = this.props.getContainer();
                  this.forceUpdate();
                },
              },
              {
                key: 'removeContainer',
                value: function removeContainer() {
                  if (this._container) {
                    this._container.parentNode.removeChild(this._container);
                  }
                },
              },
              {
                key: 'render',
                value: function render() {
                  if (this._container) {
                    return react_dom__WEBPACK_IMPORTED_MODULE_1___default.a.createPortal(
                      this.props.children,
                      this._container,
                    );
                  }

                  return null;
                },
              },
            ]);

            return Portal;
          })(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);

        Portal.propTypes = {
          getContainer: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func.isRequired,
          children: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.node.isRequired,
          didUpdate: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
        };

        /***/
      },

    /***/ './node_modules/react-dom/cjs/react-dom.development.js':
      /*!*************************************************************!*\
  !*** ./node_modules/react-dom/cjs/react-dom.development.js ***!
  \*************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';
        /** @license React v16.9.0
         * react-dom.development.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */

        if (true) {
          (function() {
            'use strict';

            var React = __webpack_require__(/*! react */ './node_modules/react/index.js');
            var _assign = __webpack_require__(
              /*! object-assign */ './node_modules/object-assign/index.js',
            );
            var checkPropTypes = __webpack_require__(
              /*! prop-types/checkPropTypes */ './node_modules/prop-types/checkPropTypes.js',
            );
            var Scheduler = __webpack_require__(
              /*! scheduler */ './node_modules/scheduler/index.js',
            );
            var tracing = __webpack_require__(
              /*! scheduler/tracing */ './node_modules/scheduler/tracing.js',
            );

            // Do not require this module directly! Use normal `invariant` calls with
            // template literal strings. The messages will be converted to ReactError during
            // build, and in production they will be minified.

            // Do not require this module directly! Use normal `invariant` calls with
            // template literal strings. The messages will be converted to ReactError during
            // build, and in production they will be minified.

            function ReactError(error) {
              error.name = 'Invariant Violation';
              return error;
            }

            /**
             * Use invariant() to assert state which your program assumes to be true.
             *
             * Provide sprintf-style format (only %s is supported) and arguments
             * to provide information about what broke and what you were
             * expecting.
             *
             * The invariant message will be stripped in production, but the invariant
             * will remain to ensure logic does not differ in production.
             */

            (function() {
              if (!React) {
                {
                  throw ReactError(
                    Error(
                      'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.',
                    ),
                  );
                }
              }
            })();

            /**
             * Injectable ordering of event plugins.
             */
            var eventPluginOrder = null;

            /**
             * Injectable mapping from names to event plugin modules.
             */
            var namesToPlugins = {};

            /**
             * Recomputes the plugin list using the injected plugins and plugin ordering.
             *
             * @private
             */
            function recomputePluginOrdering() {
              if (!eventPluginOrder) {
                // Wait until an `eventPluginOrder` is injected.
                return;
              }
              for (var pluginName in namesToPlugins) {
                var pluginModule = namesToPlugins[pluginName];
                var pluginIndex = eventPluginOrder.indexOf(pluginName);
                (function() {
                  if (!(pluginIndex > -1)) {
                    {
                      throw ReactError(
                        Error(
                          'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `' +
                            pluginName +
                            '`.',
                        ),
                      );
                    }
                  }
                })();
                if (plugins[pluginIndex]) {
                  continue;
                }
                (function() {
                  if (!pluginModule.extractEvents) {
                    {
                      throw ReactError(
                        Error(
                          'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `' +
                            pluginName +
                            '` does not.',
                        ),
                      );
                    }
                  }
                })();
                plugins[pluginIndex] = pluginModule;
                var publishedEvents = pluginModule.eventTypes;
                for (var eventName in publishedEvents) {
                  (function() {
                    if (
                      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)
                    ) {
                      {
                        throw ReactError(
                          Error(
                            'EventPluginRegistry: Failed to publish event `' +
                              eventName +
                              '` for plugin `' +
                              pluginName +
                              '`.',
                          ),
                        );
                      }
                    }
                  })();
                }
              }
            }

            /**
             * Publishes an event so that it can be dispatched by the supplied plugin.
             *
             * @param {object} dispatchConfig Dispatch configuration for the event.
             * @param {object} PluginModule Plugin publishing the event.
             * @return {boolean} True if the event was successfully published.
             * @private
             */
            function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
              (function() {
                if (!!eventNameDispatchConfigs.hasOwnProperty(eventName)) {
                  {
                    throw ReactError(
                      Error(
                        'EventPluginHub: More than one plugin attempted to publish the same event name, `' +
                          eventName +
                          '`.',
                      ),
                    );
                  }
                }
              })();
              eventNameDispatchConfigs[eventName] = dispatchConfig;

              var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
              if (phasedRegistrationNames) {
                for (var phaseName in phasedRegistrationNames) {
                  if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
                    var phasedRegistrationName = phasedRegistrationNames[phaseName];
                    publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
                  }
                }
                return true;
              } else if (dispatchConfig.registrationName) {
                publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
                return true;
              }
              return false;
            }

            /**
             * Publishes a registration name that is used to identify dispatched events.
             *
             * @param {string} registrationName Registration name to add.
             * @param {object} PluginModule Plugin publishing the event.
             * @private
             */
            function publishRegistrationName(registrationName, pluginModule, eventName) {
              (function() {
                if (!!registrationNameModules[registrationName]) {
                  {
                    throw ReactError(
                      Error(
                        'EventPluginHub: More than one plugin attempted to publish the same registration name, `' +
                          registrationName +
                          '`.',
                      ),
                    );
                  }
                }
              })();
              registrationNameModules[registrationName] = pluginModule;
              registrationNameDependencies[registrationName] =
                pluginModule.eventTypes[eventName].dependencies;

              {
                var lowerCasedName = registrationName.toLowerCase();
                possibleRegistrationNames[lowerCasedName] = registrationName;

                if (registrationName === 'onDoubleClick') {
                  possibleRegistrationNames.ondblclick = registrationName;
                }
              }
            }

            /**
             * Registers plugins so that they can extract and dispatch events.
             *
             * @see {EventPluginHub}
             */

            /**
             * Ordered list of injected plugins.
             */
            var plugins = [];

            /**
             * Mapping from event name to dispatch config
             */
            var eventNameDispatchConfigs = {};

            /**
             * Mapping from registration name to plugin module
             */
            var registrationNameModules = {};

            /**
             * Mapping from registration name to event name
             */
            var registrationNameDependencies = {};

            /**
             * Mapping from lowercase registration names to the properly cased version,
             * used to warn in the case of missing event handlers. Available
             * only in true.
             * @type {Object}
             */
            var possibleRegistrationNames = {};
            // Trust the developer to only use possibleRegistrationNames in true

            /**
             * Injects an ordering of plugins (by plugin name). This allows the ordering
             * to be decoupled from injection of the actual plugins so that ordering is
             * always deterministic regardless of packaging, on-the-fly injection, etc.
             *
             * @param {array} InjectedEventPluginOrder
             * @internal
             * @see {EventPluginHub.injection.injectEventPluginOrder}
             */
            function injectEventPluginOrder(injectedEventPluginOrder) {
              (function() {
                if (!!eventPluginOrder) {
                  {
                    throw ReactError(
                      Error(
                        'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.',
                      ),
                    );
                  }
                }
              })();
              // Clone the ordering so it cannot be dynamically mutated.
              eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
              recomputePluginOrdering();
            }

            /**
             * Injects plugins to be used by `EventPluginHub`. The plugin names must be
             * in the ordering injected by `injectEventPluginOrder`.
             *
             * Plugins can be injected as part of page initialization or on-the-fly.
             *
             * @param {object} injectedNamesToPlugins Map from names to plugin modules.
             * @internal
             * @see {EventPluginHub.injection.injectEventPluginsByName}
             */
            function injectEventPluginsByName(injectedNamesToPlugins) {
              var isOrderingDirty = false;
              for (var pluginName in injectedNamesToPlugins) {
                if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
                  continue;
                }
                var pluginModule = injectedNamesToPlugins[pluginName];
                if (
                  !namesToPlugins.hasOwnProperty(pluginName) ||
                  namesToPlugins[pluginName] !== pluginModule
                ) {
                  (function() {
                    if (!!namesToPlugins[pluginName]) {
                      {
                        throw ReactError(
                          Error(
                            'EventPluginRegistry: Cannot inject two different event plugins using the same name, `' +
                              pluginName +
                              '`.',
                          ),
                        );
                      }
                    }
                  })();
                  namesToPlugins[pluginName] = pluginModule;
                  isOrderingDirty = true;
                }
              }
              if (isOrderingDirty) {
                recomputePluginOrdering();
              }
            }

            var invokeGuardedCallbackImpl = function(name, func, context, a, b, c, d, e, f) {
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              try {
                func.apply(context, funcArgs);
              } catch (error) {
                this.onError(error);
              }
            };

            {
              // In DEV mode, we swap out invokeGuardedCallback for a special version
              // that plays more nicely with the browser's DevTools. The idea is to preserve
              // "Pause on exceptions" behavior. Because React wraps all user-provided
              // functions in invokeGuardedCallback, and the production version of
              // invokeGuardedCallback uses a try-catch, all user exceptions are treated
              // like caught exceptions, and the DevTools won't pause unless the developer
              // takes the extra step of enabling pause on caught exceptions. This is
              // unintuitive, though, because even though React has caught the error, from
              // the developer's perspective, the error is uncaught.
              //
              // To preserve the expected "Pause on exceptions" behavior, we don't use a
              // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
              // DOM node, and call the user-provided callback from inside an event handler
              // for that fake event. If the callback throws, the error is "captured" using
              // a global event handler. But because the error happens in a different
              // event loop context, it does not interrupt the normal program flow.
              // Effectively, this gives us try-catch behavior without actually using
              // try-catch. Neat!

              // Check that the browser supports the APIs we need to implement our special
              // DEV version of invokeGuardedCallback
              if (
                typeof window !== 'undefined' &&
                typeof window.dispatchEvent === 'function' &&
                typeof document !== 'undefined' &&
                typeof document.createEvent === 'function'
              ) {
                var fakeNode = document.createElement('react');

                var invokeGuardedCallbackDev = function(name, func, context, a, b, c, d, e, f) {
                  // If document doesn't exist we know for sure we will crash in this method
                  // when we call document.createEvent(). However this can cause confusing
                  // errors: https://github.com/facebookincubator/create-react-app/issues/3482
                  // So we preemptively throw with a better message instead.
                  (function() {
                    if (!(typeof document !== 'undefined')) {
                      {
                        throw ReactError(
                          Error(
                            'The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.',
                          ),
                        );
                      }
                    }
                  })();
                  var evt = document.createEvent('Event');

                  // Keeps track of whether the user-provided callback threw an error. We
                  // set this to true at the beginning, then set it to false right after
                  // calling the function. If the function errors, `didError` will never be
                  // set to false. This strategy works even if the browser is flaky and
                  // fails to call our global error handler, because it doesn't rely on
                  // the error event at all.
                  var didError = true;

                  // Keeps track of the value of window.event so that we can reset it
                  // during the callback to let user code access window.event in the
                  // browsers that support it.
                  var windowEvent = window.event;

                  // Keeps track of the descriptor of window.event to restore it after event
                  // dispatching: https://github.com/facebook/react/issues/13688
                  var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');

                  // Create an event handler for our fake event. We will synchronously
                  // dispatch our fake event using `dispatchEvent`. Inside the handler, we
                  // call the user-provided callback.
                  var funcArgs = Array.prototype.slice.call(arguments, 3);
                  function callCallback() {
                    // We immediately remove the callback from event listeners so that
                    // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                    // nested call would trigger the fake event handlers of any call higher
                    // in the stack.
                    fakeNode.removeEventListener(evtType, callCallback, false);

                    // We check for window.hasOwnProperty('event') to prevent the
                    // window.event assignment in both IE <= 10 as they throw an error
                    // "Member not found" in strict mode, and in Firefox which does not
                    // support window.event.
                    if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
                      window.event = windowEvent;
                    }

                    func.apply(context, funcArgs);
                    didError = false;
                  }

                  // Create a global error event handler. We use this to capture the value
                  // that was thrown. It's possible that this error handler will fire more
                  // than once; for example, if non-React code also calls `dispatchEvent`
                  // and a handler for that event throws. We should be resilient to most of
                  // those cases. Even if our error event handler fires more than once, the
                  // last error event is always used. If the callback actually does error,
                  // we know that the last error event is the correct one, because it's not
                  // possible for anything else to have happened in between our callback
                  // erroring and the code that follows the `dispatchEvent` call below. If
                  // the callback doesn't error, but the error event was fired, we know to
                  // ignore it because `didError` will be false, as described above.
                  var error = void 0;
                  // Use this to track whether the error event is ever called.
                  var didSetError = false;
                  var isCrossOriginError = false;

                  function handleWindowError(event) {
                    error = event.error;
                    didSetError = true;
                    if (error === null && event.colno === 0 && event.lineno === 0) {
                      isCrossOriginError = true;
                    }
                    if (event.defaultPrevented) {
                      // Some other error handler has prevented default.
                      // Browsers silence the error report if this happens.
                      // We'll remember this to later decide whether to log it or not.
                      if (error != null && typeof error === 'object') {
                        try {
                          error._suppressLogging = true;
                        } catch (inner) {
                          // Ignore.
                        }
                      }
                    }
                  }

                  // Create a fake event type.
                  var evtType = 'react-' + (name ? name : 'invokeguardedcallback');

                  // Attach our event handlers
                  window.addEventListener('error', handleWindowError);
                  fakeNode.addEventListener(evtType, callCallback, false);

                  // Synchronously dispatch our fake event. If the user-provided function
                  // errors, it will trigger our global error handler.
                  evt.initEvent(evtType, false, false);
                  fakeNode.dispatchEvent(evt);

                  if (windowEventDescriptor) {
                    Object.defineProperty(window, 'event', windowEventDescriptor);
                  }

                  if (didError) {
                    if (!didSetError) {
                      // The callback errored, but the error event never fired.
                      error = new Error(
                        'An error was thrown inside one of your components, but React ' +
                          "doesn't know what it was. This is likely due to browser " +
                          'flakiness. React does its best to preserve the "Pause on ' +
                          'exceptions" behavior of the DevTools, which requires some ' +
                          "DEV-mode only tricks. It's possible that these don't work in " +
                          'your browser. Try triggering the error in production mode, ' +
                          'or switching to a modern browser. If you suspect that this is ' +
                          'actually an issue with React, please file an issue.',
                      );
                    } else if (isCrossOriginError) {
                      error = new Error(
                        "A cross-origin error was thrown. React doesn't have access to " +
                          'the actual error object in development. ' +
                          'See https://fb.me/react-crossorigin-error for more information.',
                      );
                    }
                    this.onError(error);
                  }

                  // Remove our event listeners
                  window.removeEventListener('error', handleWindowError);
                };

                invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
              }
            }

            var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

            // Used by Fiber to simulate a try-catch.
            var hasError = false;
            var caughtError = null;

            // Used by event system to capture/rethrow the first error.
            var hasRethrowError = false;
            var rethrowError = null;

            var reporter = {
              onError: function(error) {
                hasError = true;
                caughtError = error;
              },
            };

            /**
             * Call a function while guarding against errors that happens within it.
             * Returns an error if it throws, otherwise null.
             *
             * In production, this is implemented using a try-catch. The reason we don't
             * use a try-catch directly is so that we can swap out a different
             * implementation in DEV mode.
             *
             * @param {String} name of the guard to use for logging or debugging
             * @param {Function} func The function to invoke
             * @param {*} context The context to use when calling the function
             * @param {...*} args Arguments for function
             */
            function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
              hasError = false;
              caughtError = null;
              invokeGuardedCallbackImpl$1.apply(reporter, arguments);
            }

            /**
             * Same as invokeGuardedCallback, but instead of returning an error, it stores
             * it in a global so it can be rethrown by `rethrowCaughtError` later.
             * TODO: See if caughtError and rethrowError can be unified.
             *
             * @param {String} name of the guard to use for logging or debugging
             * @param {Function} func The function to invoke
             * @param {*} context The context to use when calling the function
             * @param {...*} args Arguments for function
             */
            function invokeGuardedCallbackAndCatchFirstError(
              name,
              func,
              context,
              a,
              b,
              c,
              d,
              e,
              f,
            ) {
              invokeGuardedCallback.apply(this, arguments);
              if (hasError) {
                var error = clearCaughtError();
                if (!hasRethrowError) {
                  hasRethrowError = true;
                  rethrowError = error;
                }
              }
            }

            /**
             * During execution of guarded functions we will capture the first error which
             * we will rethrow to be handled by the top level error handler.
             */
            function rethrowCaughtError() {
              if (hasRethrowError) {
                var error = rethrowError;
                hasRethrowError = false;
                rethrowError = null;
                throw error;
              }
            }

            function hasCaughtError() {
              return hasError;
            }

            function clearCaughtError() {
              if (hasError) {
                var error = caughtError;
                hasError = false;
                caughtError = null;
                return error;
              } else {
                (function() {
                  {
                    {
                      throw ReactError(
                        Error(
                          'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.',
                        ),
                      );
                    }
                  }
                })();
              }
            }

            /**
             * Similar to invariant but only logs a warning if the condition is not met.
             * This can be used to log issues in development environments in critical
             * paths. Removing the logging code for production environments will keep the
             * same logic and follow the same code paths.
             */

            var warningWithoutStack = function() {};

            {
              warningWithoutStack = function(condition, format) {
                for (
                  var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2;
                  _key < _len;
                  _key++
                ) {
                  args[_key - 2] = arguments[_key];
                }

                if (format === undefined) {
                  throw new Error(
                    '`warningWithoutStack(condition, format, ...args)` requires a warning ' +
                      'message argument',
                  );
                }
                if (args.length > 8) {
                  // Check before the condition to catch violations early.
                  throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
                }
                if (condition) {
                  return;
                }
                if (typeof console !== 'undefined') {
                  var argsWithFormat = args.map(function(item) {
                    return '' + item;
                  });
                  argsWithFormat.unshift('Warning: ' + format);

                  // We intentionally don't use spread (or .apply) directly because it
                  // breaks IE9: https://github.com/facebook/react/issues/13610
                  Function.prototype.apply.call(console.error, console, argsWithFormat);
                }
                try {
                  // --- Welcome to debugging React ---
                  // This error was thrown as a convenience so that you can use this stack
                  // to find the callsite that caused this warning to fire.
                  var argIndex = 0;
                  var message =
                    'Warning: ' +
                    format.replace(/%s/g, function() {
                      return args[argIndex++];
                    });
                  throw new Error(message);
                } catch (x) {}
              };
            }

            var warningWithoutStack$1 = warningWithoutStack;

            var getFiberCurrentPropsFromNode = null;
            var getInstanceFromNode = null;
            var getNodeFromInstance = null;

            function setComponentTree(
              getFiberCurrentPropsFromNodeImpl,
              getInstanceFromNodeImpl,
              getNodeFromInstanceImpl,
            ) {
              getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
              getInstanceFromNode = getInstanceFromNodeImpl;
              getNodeFromInstance = getNodeFromInstanceImpl;
              {
                !(getNodeFromInstance && getInstanceFromNode)
                  ? warningWithoutStack$1(
                      false,
                      'EventPluginUtils.setComponentTree(...): Injected ' +
                        'module is missing getNodeFromInstance or getInstanceFromNode.',
                    )
                  : void 0;
              }
            }

            var validateEventDispatches = void 0;
            {
              validateEventDispatches = function(event) {
                var dispatchListeners = event._dispatchListeners;
                var dispatchInstances = event._dispatchInstances;

                var listenersIsArr = Array.isArray(dispatchListeners);
                var listenersLen = listenersIsArr
                  ? dispatchListeners.length
                  : dispatchListeners
                  ? 1
                  : 0;

                var instancesIsArr = Array.isArray(dispatchInstances);
                var instancesLen = instancesIsArr
                  ? dispatchInstances.length
                  : dispatchInstances
                  ? 1
                  : 0;

                !(instancesIsArr === listenersIsArr && instancesLen === listenersLen)
                  ? warningWithoutStack$1(false, 'EventPluginUtils: Invalid `event`.')
                  : void 0;
              };
            }

            /**
             * Dispatch the event to the listener.
             * @param {SyntheticEvent} event SyntheticEvent to handle
             * @param {function} listener Application-level callback
             * @param {*} inst Internal component instance
             */
            function executeDispatch(event, listener, inst) {
              var type = event.type || 'unknown-event';
              event.currentTarget = getNodeFromInstance(inst);
              invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
              event.currentTarget = null;
            }

            /**
             * Standard/simple iteration through an event's collected dispatches.
             */
            function executeDispatchesInOrder(event) {
              var dispatchListeners = event._dispatchListeners;
              var dispatchInstances = event._dispatchInstances;
              {
                validateEventDispatches(event);
              }
              if (Array.isArray(dispatchListeners)) {
                for (var i = 0; i < dispatchListeners.length; i++) {
                  if (event.isPropagationStopped()) {
                    break;
                  }
                  // Listeners and Instances are two parallel arrays that are always in sync.
                  executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
                }
              } else if (dispatchListeners) {
                executeDispatch(event, dispatchListeners, dispatchInstances);
              }
              event._dispatchListeners = null;
              event._dispatchInstances = null;
            }

            /**
             * @see executeDispatchesInOrderStopAtTrueImpl
             */

            /**
             * Execution of a "direct" dispatch - there must be at most one dispatch
             * accumulated on the event or it is considered an error. It doesn't really make
             * sense for an event with multiple dispatches (bubbled) to keep track of the
             * return values at each dispatch execution, but it does tend to make sense when
             * dealing with "direct" dispatches.
             *
             * @return {*} The return value of executing the single dispatch.
             */

            /**
             * @param {SyntheticEvent} event
             * @return {boolean} True iff number of dispatches accumulated is greater than 0.
             */

            /**
             * Accumulates items that must not be null or undefined into the first one. This
             * is used to conserve memory by avoiding array allocations, and thus sacrifices
             * API cleanness. Since `current` can be null before being passed in and not
             * null after this function, make sure to assign it back to `current`:
             *
             * `a = accumulateInto(a, b);`
             *
             * This API should be sparingly used. Try `accumulate` for something cleaner.
             *
             * @return {*|array<*>} An accumulation of items.
             */

            function accumulateInto(current, next) {
              (function() {
                if (!(next != null)) {
                  {
                    throw ReactError(
                      Error(
                        'accumulateInto(...): Accumulated items must not be null or undefined.',
                      ),
                    );
                  }
                }
              })();

              if (current == null) {
                return next;
              }

              // Both are not empty. Warning: Never call x.concat(y) when you are not
              // certain that x is an Array (x could be a string with concat method).
              if (Array.isArray(current)) {
                if (Array.isArray(next)) {
                  current.push.apply(current, next);
                  return current;
                }
                current.push(next);
                return current;
              }

              if (Array.isArray(next)) {
                // A bit too dangerous to mutate `next`.
                return [current].concat(next);
              }

              return [current, next];
            }

            /**
             * @param {array} arr an "accumulation" of items which is either an Array or
             * a single item. Useful when paired with the `accumulate` module. This is a
             * simple utility that allows us to reason about a collection of items, but
             * handling the case when there is exactly one item (and we do not need to
             * allocate an array).
             * @param {function} cb Callback invoked with each element or a collection.
             * @param {?} [scope] Scope used as `this` in a callback.
             */
            function forEachAccumulated(arr, cb, scope) {
              if (Array.isArray(arr)) {
                arr.forEach(cb, scope);
              } else if (arr) {
                cb.call(scope, arr);
              }
            }

            /**
             * Internal queue of events that have accumulated their dispatches and are
             * waiting to have their dispatches executed.
             */
            var eventQueue = null;

            /**
             * Dispatches an event and releases it back into the pool, unless persistent.
             *
             * @param {?object} event Synthetic event to be dispatched.
             * @private
             */
            var executeDispatchesAndRelease = function(event) {
              if (event) {
                executeDispatchesInOrder(event);

                if (!event.isPersistent()) {
                  event.constructor.release(event);
                }
              }
            };
            var executeDispatchesAndReleaseTopLevel = function(e) {
              return executeDispatchesAndRelease(e);
            };

            function runEventsInBatch(events) {
              if (events !== null) {
                eventQueue = accumulateInto(eventQueue, events);
              }

              // Set `eventQueue` to null before processing it so that we can tell if more
              // events get enqueued while processing.
              var processingEventQueue = eventQueue;
              eventQueue = null;

              if (!processingEventQueue) {
                return;
              }

              forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
              (function() {
                if (!!eventQueue) {
                  {
                    throw ReactError(
                      Error(
                        'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.',
                      ),
                    );
                  }
                }
              })();
              // This would be a good time to rethrow if any of the event handlers threw.
              rethrowCaughtError();
            }

            function isInteractive(tag) {
              return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
            }

            function shouldPreventMouseEvent(name, type, props) {
              switch (name) {
                case 'onClick':
                case 'onClickCapture':
                case 'onDoubleClick':
                case 'onDoubleClickCapture':
                case 'onMouseDown':
                case 'onMouseDownCapture':
                case 'onMouseMove':
                case 'onMouseMoveCapture':
                case 'onMouseUp':
                case 'onMouseUpCapture':
                  return !!(props.disabled && isInteractive(type));
                default:
                  return false;
              }
            }

            /**
             * This is a unified interface for event plugins to be installed and configured.
             *
             * Event plugins can implement the following properties:
             *
             *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
             *     Required. When a top-level event is fired, this method is expected to
             *     extract synthetic events that will in turn be queued and dispatched.
             *
             *   `eventTypes` {object}
             *     Optional, plugins that fire events must publish a mapping of registration
             *     names that are used to register listeners. Values of this mapping must
             *     be objects that contain `registrationName` or `phasedRegistrationNames`.
             *
             *   `executeDispatch` {function(object, function, string)}
             *     Optional, allows plugins to override how an event gets dispatched. By
             *     default, the listener is simply invoked.
             *
             * Each plugin that is injected into `EventsPluginHub` is immediately operable.
             *
             * @public
             */

            /**
             * Methods for injecting dependencies.
             */
            var injection = {
              /**
               * @param {array} InjectedEventPluginOrder
               * @public
               */
              injectEventPluginOrder: injectEventPluginOrder,

              /**
               * @param {object} injectedNamesToPlugins Map from names to plugin modules.
               */
              injectEventPluginsByName: injectEventPluginsByName,
            };

            /**
             * @param {object} inst The instance, which is the source of events.
             * @param {string} registrationName Name of listener (e.g. `onClick`).
             * @return {?function} The stored callback.
             */
            function getListener(inst, registrationName) {
              var listener = void 0;

              // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
              // live here; needs to be moved to a better place soon
              var stateNode = inst.stateNode;
              if (!stateNode) {
                // Work in progress (ex: onload events in incremental mode).
                return null;
              }
              var props = getFiberCurrentPropsFromNode(stateNode);
              if (!props) {
                // Work in progress.
                return null;
              }
              listener = props[registrationName];
              if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
                return null;
              }
              (function() {
                if (!(!listener || typeof listener === 'function')) {
                  {
                    throw ReactError(
                      Error(
                        'Expected `' +
                          registrationName +
                          '` listener to be a function, instead got a value of `' +
                          typeof listener +
                          '` type.',
                      ),
                    );
                  }
                }
              })();
              return listener;
            }

            /**
             * Allows registered plugins an opportunity to extract events from top-level
             * native browser events.
             *
             * @return {*} An accumulation of synthetic events.
             * @internal
             */
            function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
              var events = null;
              for (var i = 0; i < plugins.length; i++) {
                // Not every plugin in the ordering may be loaded at runtime.
                var possiblePlugin = plugins[i];
                if (possiblePlugin) {
                  var extractedEvents = possiblePlugin.extractEvents(
                    topLevelType,
                    targetInst,
                    nativeEvent,
                    nativeEventTarget,
                  );
                  if (extractedEvents) {
                    events = accumulateInto(events, extractedEvents);
                  }
                }
              }
              return events;
            }

            function runExtractedPluginEventsInBatch(
              topLevelType,
              targetInst,
              nativeEvent,
              nativeEventTarget,
            ) {
              var events = extractPluginEvents(
                topLevelType,
                targetInst,
                nativeEvent,
                nativeEventTarget,
              );
              runEventsInBatch(events);
            }

            var FunctionComponent = 0;
            var ClassComponent = 1;
            var IndeterminateComponent = 2; // Before we know whether it is function or class
            var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
            var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
            var HostComponent = 5;
            var HostText = 6;
            var Fragment = 7;
            var Mode = 8;
            var ContextConsumer = 9;
            var ContextProvider = 10;
            var ForwardRef = 11;
            var Profiler = 12;
            var SuspenseComponent = 13;
            var MemoComponent = 14;
            var SimpleMemoComponent = 15;
            var LazyComponent = 16;
            var IncompleteClassComponent = 17;
            var DehydratedSuspenseComponent = 18;
            var SuspenseListComponent = 19;
            var FundamentalComponent = 20;

            var randomKey = Math.random()
              .toString(36)
              .slice(2);
            var internalInstanceKey = '__reactInternalInstance$' + randomKey;
            var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;

            function precacheFiberNode(hostInst, node) {
              node[internalInstanceKey] = hostInst;
            }

            /**
             * Given a DOM node, return the closest ReactDOMComponent or
             * ReactDOMTextComponent instance ancestor.
             */
            function getClosestInstanceFromNode(node) {
              if (node[internalInstanceKey]) {
                return node[internalInstanceKey];
              }

              while (!node[internalInstanceKey]) {
                if (node.parentNode) {
                  node = node.parentNode;
                } else {
                  // Top of the tree. This node must not be part of a React tree (or is
                  // unmounted, potentially).
                  return null;
                }
              }

              var inst = node[internalInstanceKey];
              if (inst.tag === HostComponent || inst.tag === HostText) {
                // In Fiber, this will always be the deepest root.
                return inst;
              }

              return null;
            }

            /**
             * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
             * instance, or null if the node was not rendered by this React.
             */
            function getInstanceFromNode$1(node) {
              var inst = node[internalInstanceKey];
              if (inst) {
                if (inst.tag === HostComponent || inst.tag === HostText) {
                  return inst;
                } else {
                  return null;
                }
              }
              return null;
            }

            /**
             * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
             * DOM node.
             */
            function getNodeFromInstance$1(inst) {
              if (inst.tag === HostComponent || inst.tag === HostText) {
                // In Fiber this, is just the state node right now. We assume it will be
                // a host component or host text.
                return inst.stateNode;
              }

              // Without this first invariant, passing a non-DOM-component triggers the next
              // invariant for a missing parent, which is super confusing.
              (function() {
                {
                  {
                    throw ReactError(Error('getNodeFromInstance: Invalid argument.'));
                  }
                }
              })();
            }

            function getFiberCurrentPropsFromNode$1(node) {
              return node[internalEventHandlersKey] || null;
            }

            function updateFiberProps(node, props) {
              node[internalEventHandlersKey] = props;
            }

            function getParent(inst) {
              do {
                inst = inst.return;
                // TODO: If this is a HostRoot we might want to bail out.
                // That is depending on if we want nested subtrees (layers) to bubble
                // events to their parent. We could also go through parentNode on the
                // host node but that wouldn't work for React Native and doesn't let us
                // do the portal feature.
              } while (inst && inst.tag !== HostComponent);
              if (inst) {
                return inst;
              }
              return null;
            }

            /**
             * Return the lowest common ancestor of A and B, or null if they are in
             * different trees.
             */
            function getLowestCommonAncestor(instA, instB) {
              var depthA = 0;
              for (var tempA = instA; tempA; tempA = getParent(tempA)) {
                depthA++;
              }
              var depthB = 0;
              for (var tempB = instB; tempB; tempB = getParent(tempB)) {
                depthB++;
              }

              // If A is deeper, crawl up.
              while (depthA - depthB > 0) {
                instA = getParent(instA);
                depthA--;
              }

              // If B is deeper, crawl up.
              while (depthB - depthA > 0) {
                instB = getParent(instB);
                depthB--;
              }

              // Walk in lockstep until we find a match.
              var depth = depthA;
              while (depth--) {
                if (instA === instB || instA === instB.alternate) {
                  return instA;
                }
                instA = getParent(instA);
                instB = getParent(instB);
              }
              return null;
            }

            /**
             * Return if A is an ancestor of B.
             */

            /**
             * Return the parent instance of the passed-in instance.
             */

            /**
             * Simulates the traversal of a two-phase, capture/bubble event dispatch.
             */
            function traverseTwoPhase(inst, fn, arg) {
              var path = [];
              while (inst) {
                path.push(inst);
                inst = getParent(inst);
              }
              var i = void 0;
              for (i = path.length; i-- > 0; ) {
                fn(path[i], 'captured', arg);
              }
              for (i = 0; i < path.length; i++) {
                fn(path[i], 'bubbled', arg);
              }
            }

            /**
             * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
             * should would receive a `mouseEnter` or `mouseLeave` event.
             *
             * Does not invoke the callback on the nearest common ancestor because nothing
             * "entered" or "left" that element.
             */
            function traverseEnterLeave(from, to, fn, argFrom, argTo) {
              var common = from && to ? getLowestCommonAncestor(from, to) : null;
              var pathFrom = [];
              while (true) {
                if (!from) {
                  break;
                }
                if (from === common) {
                  break;
                }
                var alternate = from.alternate;
                if (alternate !== null && alternate === common) {
                  break;
                }
                pathFrom.push(from);
                from = getParent(from);
              }
              var pathTo = [];
              while (true) {
                if (!to) {
                  break;
                }
                if (to === common) {
                  break;
                }
                var _alternate = to.alternate;
                if (_alternate !== null && _alternate === common) {
                  break;
                }
                pathTo.push(to);
                to = getParent(to);
              }
              for (var i = 0; i < pathFrom.length; i++) {
                fn(pathFrom[i], 'bubbled', argFrom);
              }
              for (var _i = pathTo.length; _i-- > 0; ) {
                fn(pathTo[_i], 'captured', argTo);
              }
            }

            /**
             * Some event types have a notion of different registration names for different
             * "phases" of propagation. This finds listeners by a given phase.
             */
            function listenerAtPhase(inst, event, propagationPhase) {
              var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
              return getListener(inst, registrationName);
            }

            /**
             * A small set of propagation patterns, each of which will accept a small amount
             * of information, and generate a set of "dispatch ready event objects" - which
             * are sets of events that have already been annotated with a set of dispatched
             * listener functions/ids. The API is designed this way to discourage these
             * propagation strategies from actually executing the dispatches, since we
             * always want to collect the entire set of dispatches before executing even a
             * single one.
             */

            /**
             * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
             * here, allows us to not have to bind or create functions for each event.
             * Mutating the event's members allows us to not have to create a wrapping
             * "dispatch" object that pairs the event with the listener.
             */
            function accumulateDirectionalDispatches(inst, phase, event) {
              {
                !inst ? warningWithoutStack$1(false, 'Dispatching inst must not be null') : void 0;
              }
              var listener = listenerAtPhase(inst, event, phase);
              if (listener) {
                event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
                event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
              }
            }

            /**
             * Collect dispatches (must be entirely collected before dispatching - see unit
             * tests). Lazily allocate the array to conserve memory.  We must loop through
             * each event and perform the traversal for each one. We cannot perform a
             * single traversal for the entire collection of events because each event may
             * have a different target.
             */
            function accumulateTwoPhaseDispatchesSingle(event) {
              if (event && event.dispatchConfig.phasedRegistrationNames) {
                traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
              }
            }

            /**
             * Accumulates without regard to direction, does not look for phased
             * registration names. Same as `accumulateDirectDispatchesSingle` but without
             * requiring that the `dispatchMarker` be the same as the dispatched ID.
             */
            function accumulateDispatches(inst, ignoredDirection, event) {
              if (inst && event && event.dispatchConfig.registrationName) {
                var registrationName = event.dispatchConfig.registrationName;
                var listener = getListener(inst, registrationName);
                if (listener) {
                  event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
                  event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
                }
              }
            }

            /**
             * Accumulates dispatches on an `SyntheticEvent`, but only for the
             * `dispatchMarker`.
             * @param {SyntheticEvent} event
             */
            function accumulateDirectDispatchesSingle(event) {
              if (event && event.dispatchConfig.registrationName) {
                accumulateDispatches(event._targetInst, null, event);
              }
            }

            function accumulateTwoPhaseDispatches(events) {
              forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
            }

            function accumulateEnterLeaveDispatches(leave, enter, from, to) {
              traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
            }

            function accumulateDirectDispatches(events) {
              forEachAccumulated(events, accumulateDirectDispatchesSingle);
            }

            var canUseDOM = !!(
              typeof window !== 'undefined' &&
              typeof window.document !== 'undefined' &&
              typeof window.document.createElement !== 'undefined'
            );

            // Do not use the below two methods directly!
            // Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
            // (It is the only module that is allowed to access these methods.)

            function unsafeCastStringToDOMTopLevelType(topLevelType) {
              return topLevelType;
            }

            function unsafeCastDOMTopLevelTypeToString(topLevelType) {
              return topLevelType;
            }

            /**
             * Generate a mapping of standard vendor prefixes using the defined style property and event name.
             *
             * @param {string} styleProp
             * @param {string} eventName
             * @returns {object}
             */
            function makePrefixMap(styleProp, eventName) {
              var prefixes = {};

              prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
              prefixes['Webkit' + styleProp] = 'webkit' + eventName;
              prefixes['Moz' + styleProp] = 'moz' + eventName;

              return prefixes;
            }

            /**
             * A list of event names to a configurable list of vendor prefixes.
             */
            var vendorPrefixes = {
              animationend: makePrefixMap('Animation', 'AnimationEnd'),
              animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
              animationstart: makePrefixMap('Animation', 'AnimationStart'),
              transitionend: makePrefixMap('Transition', 'TransitionEnd'),
            };

            /**
             * Event names that have already been detected and prefixed (if applicable).
             */
            var prefixedEventNames = {};

            /**
             * Element to check for prefixes on.
             */
            var style = {};

            /**
             * Bootstrap if a DOM exists.
             */
            if (canUseDOM) {
              style = document.createElement('div').style;

              // On some platforms, in particular some releases of Android 4.x,
              // the un-prefixed "animation" and "transition" properties are defined on the
              // style object but the events that fire will still be prefixed, so we need
              // to check if the un-prefixed events are usable, and if not remove them from the map.
              if (!('AnimationEvent' in window)) {
                delete vendorPrefixes.animationend.animation;
                delete vendorPrefixes.animationiteration.animation;
                delete vendorPrefixes.animationstart.animation;
              }

              // Same as above
              if (!('TransitionEvent' in window)) {
                delete vendorPrefixes.transitionend.transition;
              }
            }

            /**
             * Attempts to determine the correct vendor prefixed event name.
             *
             * @param {string} eventName
             * @returns {string}
             */
            function getVendorPrefixedEventName(eventName) {
              if (prefixedEventNames[eventName]) {
                return prefixedEventNames[eventName];
              } else if (!vendorPrefixes[eventName]) {
                return eventName;
              }

              var prefixMap = vendorPrefixes[eventName];

              for (var styleProp in prefixMap) {
                if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                  return (prefixedEventNames[eventName] = prefixMap[styleProp]);
                }
              }

              return eventName;
            }

            /**
             * To identify top level events in ReactDOM, we use constants defined by this
             * module. This is the only module that uses the unsafe* methods to express
             * that the constants actually correspond to the browser event names. This lets
             * us save some bundle size by avoiding a top level type -> event name map.
             * The rest of ReactDOM code should import top level types from this file.
             */
            var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
            var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(
              getVendorPrefixedEventName('animationend'),
            );
            var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(
              getVendorPrefixedEventName('animationiteration'),
            );
            var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(
              getVendorPrefixedEventName('animationstart'),
            );
            var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
            var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
            var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
            var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
            var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
            var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
            var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
            var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
            var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
            var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
            var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
            var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
            var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
            var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
            var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType('auxclick');
            var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
            var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
            var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
            var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
            var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
            var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
            var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
            var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
            var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
            var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
            var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
            var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
            var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
            var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
            var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
            var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
            var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
            var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
            var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
            var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
            var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
            var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
            var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
            var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
            var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
            var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
            var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
            var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
            var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
            var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
            var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
            var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
            var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
            var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
            var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
            var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');

            var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
            var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
            var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
            var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
            var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
            var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
            var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
            var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
            var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
            var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
            var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
            var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
            var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
            var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
            var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
            var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
            var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
            var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
            var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
            var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
            var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
            var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(
              getVendorPrefixedEventName('transitionend'),
            );
            var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
            var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
            var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel');

            // List of events that need to be individually attached to media elements.
            // Note that events in this list will *not* be listened to at the top level
            // unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.
            var mediaEventTypes = [
              TOP_ABORT,
              TOP_CAN_PLAY,
              TOP_CAN_PLAY_THROUGH,
              TOP_DURATION_CHANGE,
              TOP_EMPTIED,
              TOP_ENCRYPTED,
              TOP_ENDED,
              TOP_ERROR,
              TOP_LOADED_DATA,
              TOP_LOADED_METADATA,
              TOP_LOAD_START,
              TOP_PAUSE,
              TOP_PLAY,
              TOP_PLAYING,
              TOP_PROGRESS,
              TOP_RATE_CHANGE,
              TOP_SEEKED,
              TOP_SEEKING,
              TOP_STALLED,
              TOP_SUSPEND,
              TOP_TIME_UPDATE,
              TOP_VOLUME_CHANGE,
              TOP_WAITING,
            ];

            function getRawEventName(topLevelType) {
              return unsafeCastDOMTopLevelTypeToString(topLevelType);
            }

            /**
             * These variables store information about text content of a target node,
             * allowing comparison of content before and after a given event.
             *
             * Identify the node where selection currently begins, then observe
             * both its text content and its current position in the DOM. Since the
             * browser may natively replace the target node during composition, we can
             * use its position to find its replacement.
             *
             *
             */

            var root = null;
            var startText = null;
            var fallbackText = null;

            function initialize(nativeEventTarget) {
              root = nativeEventTarget;
              startText = getText();
              return true;
            }

            function reset() {
              root = null;
              startText = null;
              fallbackText = null;
            }

            function getData() {
              if (fallbackText) {
                return fallbackText;
              }

              var start = void 0;
              var startValue = startText;
              var startLength = startValue.length;
              var end = void 0;
              var endValue = getText();
              var endLength = endValue.length;

              for (start = 0; start < startLength; start++) {
                if (startValue[start] !== endValue[start]) {
                  break;
                }
              }

              var minEnd = startLength - start;
              for (end = 1; end <= minEnd; end++) {
                if (startValue[startLength - end] !== endValue[endLength - end]) {
                  break;
                }
              }

              var sliceTail = end > 1 ? 1 - end : undefined;
              fallbackText = endValue.slice(start, sliceTail);
              return fallbackText;
            }

            function getText() {
              if ('value' in root) {
                return root.value;
              }
              return root.textContent;
            }

            /* eslint valid-typeof: 0 */

            var EVENT_POOL_SIZE = 10;

            /**
             * @interface Event
             * @see http://www.w3.org/TR/DOM-Level-3-Events/
             */
            var EventInterface = {
              type: null,
              target: null,
              // currentTarget is set when dispatching; no use in copying it here
              currentTarget: function() {
                return null;
              },
              eventPhase: null,
              bubbles: null,
              cancelable: null,
              timeStamp: function(event) {
                return event.timeStamp || Date.now();
              },
              defaultPrevented: null,
              isTrusted: null,
            };

            function functionThatReturnsTrue() {
              return true;
            }

            function functionThatReturnsFalse() {
              return false;
            }

            /**
             * Synthetic events are dispatched by event plugins, typically in response to a
             * top-level event delegation handler.
             *
             * These systems should generally use pooling to reduce the frequency of garbage
             * collection. The system should check `isPersistent` to determine whether the
             * event should be released into the pool after being dispatched. Users that
             * need a persisted event should invoke `persist`.
             *
             * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
             * normalizing browser quirks. Subclasses do not necessarily have to implement a
             * DOM interface; custom application-specific events can also subclass this.
             *
             * @param {object} dispatchConfig Configuration used to dispatch this event.
             * @param {*} targetInst Marker identifying the event target.
             * @param {object} nativeEvent Native browser event.
             * @param {DOMEventTarget} nativeEventTarget Target node.
             */
            function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
              {
                // these have a getter/setter for warnings
                delete this.nativeEvent;
                delete this.preventDefault;
                delete this.stopPropagation;
                delete this.isDefaultPrevented;
                delete this.isPropagationStopped;
              }

              this.dispatchConfig = dispatchConfig;
              this._targetInst = targetInst;
              this.nativeEvent = nativeEvent;

              var Interface = this.constructor.Interface;
              for (var propName in Interface) {
                if (!Interface.hasOwnProperty(propName)) {
                  continue;
                }
                {
                  delete this[propName]; // this has a getter/setter for warnings
                }
                var normalize = Interface[propName];
                if (normalize) {
                  this[propName] = normalize(nativeEvent);
                } else {
                  if (propName === 'target') {
                    this.target = nativeEventTarget;
                  } else {
                    this[propName] = nativeEvent[propName];
                  }
                }
              }

              var defaultPrevented =
                nativeEvent.defaultPrevented != null
                  ? nativeEvent.defaultPrevented
                  : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }

            _assign(SyntheticEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }

                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== 'unknown') {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },

              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }

                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== 'unknown') {
                  // The ChangeEventPlugin registers a "propertychange" event for
                  // IE. This event does not support bubbling or cancelling, and
                  // any references to cancelBubble throw "Member not found".  A
                  // typeof check of "unknown" circumvents this issue (and is also
                  // IE specific).
                  event.cancelBubble = true;
                }

                this.isPropagationStopped = functionThatReturnsTrue;
              },

              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
                this.isPersistent = functionThatReturnsTrue;
              },

              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsFalse,

              /**
               * `PooledClass` looks for `destructor` on each instance it releases.
               */
              destructor: function() {
                var Interface = this.constructor.Interface;
                for (var propName in Interface) {
                  {
                    Object.defineProperty(
                      this,
                      propName,
                      getPooledWarningPropertyDefinition(propName, Interface[propName]),
                    );
                  }
                }
                this.dispatchConfig = null;
                this._targetInst = null;
                this.nativeEvent = null;
                this.isDefaultPrevented = functionThatReturnsFalse;
                this.isPropagationStopped = functionThatReturnsFalse;
                this._dispatchListeners = null;
                this._dispatchInstances = null;
                {
                  Object.defineProperty(
                    this,
                    'nativeEvent',
                    getPooledWarningPropertyDefinition('nativeEvent', null),
                  );
                  Object.defineProperty(
                    this,
                    'isDefaultPrevented',
                    getPooledWarningPropertyDefinition(
                      'isDefaultPrevented',
                      functionThatReturnsFalse,
                    ),
                  );
                  Object.defineProperty(
                    this,
                    'isPropagationStopped',
                    getPooledWarningPropertyDefinition(
                      'isPropagationStopped',
                      functionThatReturnsFalse,
                    ),
                  );
                  Object.defineProperty(
                    this,
                    'preventDefault',
                    getPooledWarningPropertyDefinition('preventDefault', function() {}),
                  );
                  Object.defineProperty(
                    this,
                    'stopPropagation',
                    getPooledWarningPropertyDefinition('stopPropagation', function() {}),
                  );
                }
              },
            });

            SyntheticEvent.Interface = EventInterface;

            /**
             * Helper to reduce boilerplate when creating subclasses.
             */
            SyntheticEvent.extend = function(Interface) {
              var Super = this;

              var E = function() {};
              E.prototype = Super.prototype;
              var prototype = new E();

              function Class() {
                return Super.apply(this, arguments);
              }
              _assign(prototype, Class.prototype);
              Class.prototype = prototype;
              Class.prototype.constructor = Class;

              Class.Interface = _assign({}, Super.Interface, Interface);
              Class.extend = Super.extend;
              addEventPoolingTo(Class);

              return Class;
            };

            addEventPoolingTo(SyntheticEvent);

            /**
             * Helper to nullify syntheticEvent instance properties when destructing
             *
             * @param {String} propName
             * @param {?object} getVal
             * @return {object} defineProperty object
             */
            function getPooledWarningPropertyDefinition(propName, getVal) {
              var isFunction = typeof getVal === 'function';
              return {
                configurable: true,
                set: set,
                get: get,
              };

              function set(val) {
                var action = isFunction ? 'setting the method' : 'setting the property';
                warn(action, 'This is effectively a no-op');
                return val;
              }

              function get() {
                var action = isFunction ? 'accessing the method' : 'accessing the property';
                var result = isFunction ? 'This is a no-op function' : 'This is set to null';
                warn(action, result);
                return getVal;
              }

              function warn(action, result) {
                var warningCondition = false;
                !warningCondition
                  ? warningWithoutStack$1(
                      false,
                      "This synthetic event is reused for performance reasons. If you're seeing this, " +
                        "you're %s `%s` on a released/nullified synthetic event. %s. " +
                        'If you must keep the original synthetic event around, use event.persist(). ' +
                        'See https://fb.me/react-event-pooling for more information.',
                      action,
                      propName,
                      result,
                    )
                  : void 0;
              }
            }

            function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
              var EventConstructor = this;
              if (EventConstructor.eventPool.length) {
                var instance = EventConstructor.eventPool.pop();
                EventConstructor.call(
                  instance,
                  dispatchConfig,
                  targetInst,
                  nativeEvent,
                  nativeInst,
                );
                return instance;
              }
              return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
            }

            function releasePooledEvent(event) {
              var EventConstructor = this;
              (function() {
                if (!(event instanceof EventConstructor)) {
                  {
                    throw ReactError(
                      Error('Trying to release an event instance into a pool of a different type.'),
                    );
                  }
                }
              })();
              event.destructor();
              if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
                EventConstructor.eventPool.push(event);
              }
            }

            function addEventPoolingTo(EventConstructor) {
              EventConstructor.eventPool = [];
              EventConstructor.getPooled = getPooledEvent;
              EventConstructor.release = releasePooledEvent;
            }

            /**
             * @interface Event
             * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
             */
            var SyntheticCompositionEvent = SyntheticEvent.extend({
              data: null,
            });

            /**
             * @interface Event
             * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
             *      /#events-inputevents
             */
            var SyntheticInputEvent = SyntheticEvent.extend({
              data: null,
            });

            var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
            var START_KEYCODE = 229;

            var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;

            var documentMode = null;
            if (canUseDOM && 'documentMode' in document) {
              documentMode = document.documentMode;
            }

            // Webkit offers a very useful `textInput` event that can be used to
            // directly represent `beforeInput`. The IE `textinput` event is not as
            // useful, so we don't use it.
            var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode;

            // In IE9+, we have access to composition events, but the data supplied
            // by the native compositionend event may be incorrect. Japanese ideographic
            // spaces, for instance (\u3000) are not recorded correctly.
            var useFallbackCompositionData =
              canUseDOM &&
              (!canUseCompositionEvent || (documentMode && documentMode > 8 && documentMode <= 11));

            var SPACEBAR_CODE = 32;
            var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

            // Events and their corresponding property names.
            var eventTypes = {
              beforeInput: {
                phasedRegistrationNames: {
                  bubbled: 'onBeforeInput',
                  captured: 'onBeforeInputCapture',
                },
                dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE],
              },
              compositionEnd: {
                phasedRegistrationNames: {
                  bubbled: 'onCompositionEnd',
                  captured: 'onCompositionEndCapture',
                },
                dependencies: [
                  TOP_BLUR,
                  TOP_COMPOSITION_END,
                  TOP_KEY_DOWN,
                  TOP_KEY_PRESS,
                  TOP_KEY_UP,
                  TOP_MOUSE_DOWN,
                ],
              },
              compositionStart: {
                phasedRegistrationNames: {
                  bubbled: 'onCompositionStart',
                  captured: 'onCompositionStartCapture',
                },
                dependencies: [
                  TOP_BLUR,
                  TOP_COMPOSITION_START,
                  TOP_KEY_DOWN,
                  TOP_KEY_PRESS,
                  TOP_KEY_UP,
                  TOP_MOUSE_DOWN,
                ],
              },
              compositionUpdate: {
                phasedRegistrationNames: {
                  bubbled: 'onCompositionUpdate',
                  captured: 'onCompositionUpdateCapture',
                },
                dependencies: [
                  TOP_BLUR,
                  TOP_COMPOSITION_UPDATE,
                  TOP_KEY_DOWN,
                  TOP_KEY_PRESS,
                  TOP_KEY_UP,
                  TOP_MOUSE_DOWN,
                ],
              },
            };

            // Track whether we've ever handled a keypress on the space key.
            var hasSpaceKeypress = false;

            /**
             * Return whether a native keypress event is assumed to be a command.
             * This is required because Firefox fires `keypress` events for key commands
             * (cut, copy, select-all, etc.) even though no character is inserted.
             */
            function isKeypressCommand(nativeEvent) {
              return (
                (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
                // ctrlKey && altKey is equivalent to AltGr, and is not a command.
                !(nativeEvent.ctrlKey && nativeEvent.altKey)
              );
            }

            /**
             * Translate native top level events into event types.
             *
             * @param {string} topLevelType
             * @return {object}
             */
            function getCompositionEventType(topLevelType) {
              switch (topLevelType) {
                case TOP_COMPOSITION_START:
                  return eventTypes.compositionStart;
                case TOP_COMPOSITION_END:
                  return eventTypes.compositionEnd;
                case TOP_COMPOSITION_UPDATE:
                  return eventTypes.compositionUpdate;
              }
            }

            /**
             * Does our fallback best-guess model think this event signifies that
             * composition has begun?
             *
             * @param {string} topLevelType
             * @param {object} nativeEvent
             * @return {boolean}
             */
            function isFallbackCompositionStart(topLevelType, nativeEvent) {
              return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
            }

            /**
             * Does our fallback mode think that this event is the end of composition?
             *
             * @param {string} topLevelType
             * @param {object} nativeEvent
             * @return {boolean}
             */
            function isFallbackCompositionEnd(topLevelType, nativeEvent) {
              switch (topLevelType) {
                case TOP_KEY_UP:
                  // Command keys insert or clear IME input.
                  return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
                case TOP_KEY_DOWN:
                  // Expect IME keyCode on each keydown. If we get any other
                  // code we must have exited earlier.
                  return nativeEvent.keyCode !== START_KEYCODE;
                case TOP_KEY_PRESS:
                case TOP_MOUSE_DOWN:
                case TOP_BLUR:
                  // Events are not possible without cancelling IME.
                  return true;
                default:
                  return false;
              }
            }

            /**
             * Google Input Tools provides composition data via a CustomEvent,
             * with the `data` property populated in the `detail` object. If this
             * is available on the event object, use it. If not, this is a plain
             * composition event and we have nothing special to extract.
             *
             * @param {object} nativeEvent
             * @return {?string}
             */
            function getDataFromCustomEvent(nativeEvent) {
              var detail = nativeEvent.detail;
              if (typeof detail === 'object' && 'data' in detail) {
                return detail.data;
              }
              return null;
            }

            /**
             * Check if a composition event was triggered by Korean IME.
             * Our fallback mode does not work well with IE's Korean IME,
             * so just use native composition events when Korean IME is used.
             * Although CompositionEvent.locale property is deprecated,
             * it is available in IE, where our fallback mode is enabled.
             *
             * @param {object} nativeEvent
             * @return {boolean}
             */
            function isUsingKoreanIME(nativeEvent) {
              return nativeEvent.locale === 'ko';
            }

            // Track the current IME composition status, if any.
            var isComposing = false;

            /**
             * @return {?object} A SyntheticCompositionEvent.
             */
            function extractCompositionEvent(
              topLevelType,
              targetInst,
              nativeEvent,
              nativeEventTarget,
            ) {
              var eventType = void 0;
              var fallbackData = void 0;

              if (canUseCompositionEvent) {
                eventType = getCompositionEventType(topLevelType);
              } else if (!isComposing) {
                if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
                  eventType = eventTypes.compositionStart;
                }
              } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
                eventType = eventTypes.compositionEnd;
              }

              if (!eventType) {
                return null;
              }

              if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
                // The current composition is stored statically and must not be
                // overwritten while composition continues.
                if (!isComposing && eventType === eventTypes.compositionStart) {
                  isComposing = initialize(nativeEventTarget);
                } else if (eventType === eventTypes.compositionEnd) {
                  if (isComposing) {
                    fallbackData = getData();
                  }
                }
              }

              var event = SyntheticCompositionEvent.getPooled(
                eventType,
                targetInst,
                nativeEvent,
                nativeEventTarget,
              );

              if (fallbackData) {
                // Inject data generated from fallback path into the synthetic event.
                // This matches the property of native CompositionEventInterface.
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }

              accumulateTwoPhaseDispatches(event);
              return event;
            }

            /**
             * @param {TopLevelType} topLevelType Number from `TopLevelType`.
             * @param {object} nativeEvent Native browser event.
             * @return {?string} The string corresponding to this `beforeInput` event.
             */
            function getNativeBeforeInputChars(topLevelType, nativeEvent) {
              switch (topLevelType) {
                case TOP_COMPOSITION_END:
                  return getDataFromCustomEvent(nativeEvent);
                case TOP_KEY_PRESS:
                  /**
                   * If native `textInput` events are available, our goal is to make
                   * use of them. However, there is a special case: the spacebar key.
                   * In Webkit, preventing default on a spacebar `textInput` event
                   * cancels character insertion, but it *also* causes the browser
                   * to fall back to its default spacebar behavior of scrolling the
                   * page.
                   *
                   * Tracking at:
                   * https://code.google.com/p/chromium/issues/detail?id=355103
                   *
                   * To avoid this issue, use the keypress event as if no `textInput`
                   * event is available.
                   */
                  var which = nativeEvent.which;
                  if (which !== SPACEBAR_CODE) {
                    return null;
                  }

                  hasSpaceKeypress = true;
                  return SPACEBAR_CHAR;

                case TOP_TEXT_INPUT:
                  // Record the characters to be added to the DOM.
                  var chars = nativeEvent.data;

                  // If it's a spacebar character, assume that we have already handled
                  // it at the keypress level and bail immediately. Android Chrome
                  // doesn't give us keycodes, so we need to ignore it.
                  if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                    return null;
                  }

                  return chars;

                default:
                  // For other native event types, do nothing.
                  return null;
              }
            }

            /**
             * For browsers that do not provide the `textInput` event, extract the
             * appropriate string to use for SyntheticInputEvent.
             *
             * @param {number} topLevelType Number from `TopLevelEventTypes`.
             * @param {object} nativeEvent Native browser event.
             * @return {?string} The fallback string for this `beforeInput` event.
             */
            function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
              // If we are currently composing (IME) and using a fallback to do so,
              // try to extract the composed characters from the fallback object.
              // If composition event is available, we extract a string only at
              // compositionevent, otherwise extract it at fallback events.
              if (isComposing) {
                if (
                  topLevelType === TOP_COMPOSITION_END ||
                  (!canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent))
                ) {
                  var chars = getData();
                  reset();
                  isComposing = false;
                  return chars;
                }
                return null;
              }

              switch (topLevelType) {
                case TOP_PASTE:
                  // If a paste event occurs after a keypress, throw out the input
                  // chars. Paste events should not lead to BeforeInput events.
                  return null;
                case TOP_KEY_PRESS:
                  /**
                   * As of v27, Firefox may fire keypress events even when no character
                   * will be inserted. A few possibilities:
                   *
                   * - `which` is `0`. Arrow keys, Esc key, etc.
                   *
                   * - `which` is the pressed key code, but no char is available.
                   *   Ex: 'AltGr + d` in Polish. There is no modified character for
                   *   this key combination and no character is inserted into the
                   *   document, but FF fires the keypress for char code `100` anyway.
                   *   No `input` event will occur.
                   *
                   * - `which` is the pressed key code, but a command combination is
                   *   being used. Ex: `Cmd+C`. No character is inserted, and no
                   *   `input` event will occur.
                   */
                  if (!isKeypressCommand(nativeEvent)) {
                    // IE fires the `keypress` event when a user types an emoji via
                    // Touch keyboard of Windows.  In such a case, the `char` property
                    // holds an emoji character like `\uD83D\uDE0A`.  Because its length
                    // is 2, the property `which` does not represent an emoji correctly.
                    // In such a case, we directly return the `char` property instead of
                    // using `which`.
                    if (nativeEvent.char && nativeEvent.char.length > 1) {
                      return nativeEvent.char;
                    } else if (nativeEvent.which) {
                      return String.fromCharCode(nativeEvent.which);
                    }
                  }
                  return null;
                case TOP_COMPOSITION_END:
                  return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)
                    ? null
                    : nativeEvent.data;
                default:
                  return null;
              }
            }

            /**
             * Extract a SyntheticInputEvent for `beforeInput`, based on either native
             * `textInput` or fallback behavior.
             *
             * @return {?object} A SyntheticInputEvent.
             */
            function extractBeforeInputEvent(
              topLevelType,
              targetInst,
              nativeEvent,
              nativeEventTarget,
            ) {
              var chars = void 0;

              if (canUseTextInputEvent) {
                chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
              } else {
                chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
              }

              // If no characters are being inserted, no BeforeInput event should
              // be fired.
              if (!chars) {
                return null;
              }

              var event = SyntheticInputEvent.getPooled(
                eventTypes.beforeInput,
                targetInst,
                nativeEvent,
                nativeEventTarget,
              );

              event.data = chars;
              accumulateTwoPhaseDispatches(event);
              return event;
            }

            /**
             * Create an `onBeforeInput` event to match
             * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
             *
             * This event plugin is based on the native `textInput` event
             * available in Chrome, Safari, Opera, and IE. This event fires after
             * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
             *
             * `beforeInput` is spec'd but not implemented in any browsers, and
             * the `input` event does not provide any useful information about what has
             * actually been added, contrary to the spec. Thus, `textInput` is the best
             * available event to identify the characters that have actually been inserted
             * into the target node.
             *
             * This plugin is also responsible for emitting `composition` events, thus
             * allowing us to share composition fallback code for both `beforeInput` and
             * `composition` event types.
             */
            var BeforeInputEventPlugin = {
              eventTypes: eventTypes,

              extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
                var composition = extractCompositionEvent(
                  topLevelType,
                  targetInst,
                  nativeEvent,
                  nativeEventTarget,
                );

                var beforeInput = extractBeforeInputEvent(
                  topLevelType,
                  targetInst,
                  nativeEvent,
                  nativeEventTarget,
                );

                if (composition === null) {
                  return beforeInput;
                }

                if (beforeInput === null) {
                  return composition;
                }

                return [composition, beforeInput];
              },
            };

            // Use to restore controlled state after a change event has fired.

            var restoreImpl = null;
            var restoreTarget = null;
            var restoreQueue = null;

            function restoreStateOfTarget(target) {
              // We perform this translation at the end of the event loop so that we
              // always receive the correct fiber here
              var internalInstance = getInstanceFromNode(target);
              if (!internalInstance) {
                // Unmounted
                return;
              }
              (function() {
                if (!(typeof restoreImpl === 'function')) {
                  {
                    throw ReactError(
                      Error(
                        'setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.',
                      ),
                    );
                  }
                }
              })();
              var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, props);
            }

            function setRestoreImplementation(impl) {
              restoreImpl = impl;
            }

            function enqueueStateRestore(target) {
              if (restoreTarget) {
                if (restoreQueue) {
                  restoreQueue.push(target);
                } else {
                  restoreQueue = [target];
                }
              } else {
                restoreTarget = target;
              }
            }

            function needsStateRestore() {
              return restoreTarget !== null || restoreQueue !== null;
            }

            function restoreStateIfNeeded() {
              if (!restoreTarget) {
                return;
              }
              var target = restoreTarget;
              var queuedTargets = restoreQueue;
              restoreTarget = null;
              restoreQueue = null;

              restoreStateOfTarget(target);
              if (queuedTargets) {
                for (var i = 0; i < queuedTargets.length; i++) {
                  restoreStateOfTarget(queuedTargets[i]);
                }
              }
            }

            var enableUserTimingAPI = true;

            // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
            var debugRenderPhaseSideEffects = false;

            // In some cases, StrictMode should also double-render lifecycles.
            // This can be confusing for tests though,
            // And it can be bad for performance in production.
            // This feature flag can be used to control the behavior:
            var debugRenderPhaseSideEffectsForStrictMode = true;

            // To preserve the "Pause on caught exceptions" behavior of the debugger, we
            // replay the begin phase of a failed component inside invokeGuardedCallback.
            var replayFailedUnitOfWorkWithInvokeGuardedCallback = true;

            // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
            var warnAboutDeprecatedLifecycles = true;

            // Gather advanced timing metrics for Profiler subtrees.
            var enableProfilerTimer = true;

            // Trace which interactions trigger each commit.
            var enableSchedulerTracing = true;

            // Only used in www builds.
            var enableSuspenseServerRenderer = false; // TODO: true? Here it might just be false.

            // Only used in www builds.

            // Only used in www builds.

            // Disable javascript: URL strings in href for XSS protection.
            var disableJavaScriptURLs = false;

            // React Fire: prevent the value and checked attributes from syncing
            // with their related DOM properties
            var disableInputAttributeSyncing = false;

            // These APIs will no longer be "unstable" in the upcoming 16.7 release,
            // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.
            var enableStableConcurrentModeAPIs = false;

            var warnAboutShorthandPropertyCollision = false;

            // See https://github.com/react-native-community/discussions-and-proposals/issues/72 for more information
            // This is a flag so we can fix warnings in RN core before turning it on

            // Experimental React Flare event system and event components support.
            var enableFlareAPI = false;

            // Experimental Host Component support.
            var enableFundamentalAPI = false;

            // New API for JSX transforms to target - https://github.com/reactjs/rfcs/pull/107

            // We will enforce mocking scheduler with scheduler/unstable_mock at some point. (v17?)
            // Till then, we warn about the missing mock, but still fallback to a sync mode compatible version
            var warnAboutUnmockedScheduler = false;
            // Temporary flag to revert the fix in #15650
            var revertPassiveEffectsChange = false;

            // For tests, we flush suspense fallbacks in an act scope;
            // *except* in some of our own tests, where we test incremental loading states.
            var flushSuspenseFallbacksInTests = true;

            // Changes priority of some events like mousemove to user-blocking priority,
            // but without making them discrete. The flag exists in case it causes
            // starvation problems.
            var enableUserBlockingEvents = false;

            // Add a callback property to suspense to notify which promises are currently
            // in the update queue. This allows reporting and tracing of what is causing
            // the user to see a loading state.
            var enableSuspenseCallback = false;

            // Part of the simplification of React.createElement so we can eventually move
            // from React.createElement to React.jsx
            // https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md
            var warnAboutDefaultPropsOnFunctionComponents = false;

            var disableLegacyContext = false;

            var disableSchedulerTimeoutBasedOnReactExpirationTime = false;

            // Used as a way to call batchedUpdates when we don't have a reference to
            // the renderer. Such as when we're dispatching events or if third party
            // libraries need to call batchedUpdates. Eventually, this API will go away when
            // everything is batched by default. We'll then have a similar API to opt-out of
            // scheduled work and instead do synchronous work.

            // Defaults
            var batchedUpdatesImpl = function(fn, bookkeeping) {
              return fn(bookkeeping);
            };
            var discreteUpdatesImpl = function(fn, a, b, c) {
              return fn(a, b, c);
            };
            var flushDiscreteUpdatesImpl = function() {};
            var batchedEventUpdatesImpl = batchedUpdatesImpl;

            var isInsideEventHandler = false;

            function finishEventHandler() {
              // Here we wait until all updates have propagated, which is important
              // when using controlled components within layers:
              // https://github.com/facebook/react/issues/1698
              // Then we restore state of any controlled component.
              var controlledComponentsHavePendingUpdates = needsStateRestore();
              if (controlledComponentsHavePendingUpdates) {
                // If a controlled event was fired, we may need to restore the state of
                // the DOM node back to the controlled value. This is necessary when React
                // bails out of the update without touching the DOM.
                flushDiscreteUpdatesImpl();
                restoreStateIfNeeded();
              }
            }

            function batchedUpdates(fn, bookkeeping) {
              if (isInsideEventHandler) {
                // If we are currently inside another batch, we need to wait until it
                // fully completes before restoring state.
                return fn(bookkeeping);
              }
              isInsideEventHandler = true;
              try {
                return batchedUpdatesImpl(fn, bookkeeping);
              } finally {
                isInsideEventHandler = false;
                finishEventHandler();
              }
            }

            function batchedEventUpdates(fn, a, b) {
              if (isInsideEventHandler) {
                // If we are currently inside another batch, we need to wait until it
                // fully completes before restoring state.
                return fn(a, b);
              }
              isInsideEventHandler = true;
              try {
                return batchedEventUpdatesImpl(fn, a, b);
              } finally {
                isInsideEventHandler = false;
                finishEventHandler();
              }
            }

            function discreteUpdates(fn, a, b, c) {
              var prevIsInsideEventHandler = isInsideEventHandler;
              isInsideEventHandler = true;
              try {
                return discreteUpdatesImpl(fn, a, b, c);
              } finally {
                isInsideEventHandler = prevIsInsideEventHandler;
                if (!isInsideEventHandler) {
                  finishEventHandler();
                }
              }
            }

            var lastFlushedEventTimeStamp = 0;
            function flushDiscreteUpdatesIfNeeded(timeStamp) {
              // event.timeStamp isn't overly reliable due to inconsistencies in
              // how different browsers have historically provided the time stamp.
              // Some browsers provide high-resolution time stamps for all events,
              // some provide low-resolution time stamps for all events. FF < 52
              // even mixes both time stamps together. Some browsers even report
              // negative time stamps or time stamps that are 0 (iOS9) in some cases.
              // Given we are only comparing two time stamps with equality (!==),
              // we are safe from the resolution differences. If the time stamp is 0
              // we bail-out of preventing the flush, which can affect semantics,
              // such as if an earlier flush removes or adds event listeners that
              // are fired in the subsequent flush. However, this is the same
              // behaviour as we had before this change, so the risks are low.
              if (
                !isInsideEventHandler &&
                (!enableFlareAPI || timeStamp === 0 || lastFlushedEventTimeStamp !== timeStamp)
              ) {
                lastFlushedEventTimeStamp = timeStamp;
                flushDiscreteUpdatesImpl();
              }
            }

            function setBatchingImplementation(
              _batchedUpdatesImpl,
              _discreteUpdatesImpl,
              _flushDiscreteUpdatesImpl,
              _batchedEventUpdatesImpl,
            ) {
              batchedUpdatesImpl = _batchedUpdatesImpl;
              discreteUpdatesImpl = _discreteUpdatesImpl;
              flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
              batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
            }

            /**
             * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
             */
            var supportedInputTypes = {
              color: true,
              date: true,
              datetime: true,
              'datetime-local': true,
              email: true,
              month: true,
              number: true,
              password: true,
              range: true,
              search: true,
              tel: true,
              text: true,
              time: true,
              url: true,
              week: true,
            };

            function isTextInputElement(elem) {
              var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

              if (nodeName === 'input') {
                return !!supportedInputTypes[elem.type];
              }

              if (nodeName === 'textarea') {
                return true;
              }

              return false;
            }

            /**
             * HTML nodeType values that represent the type of the node
             */

            var ELEMENT_NODE = 1;
            var TEXT_NODE = 3;
            var COMMENT_NODE = 8;
            var DOCUMENT_NODE = 9;
            var DOCUMENT_FRAGMENT_NODE = 11;

            /**
             * Gets the target node from a native browser event by accounting for
             * inconsistencies in browser DOM APIs.
             *
             * @param {object} nativeEvent Native browser event.
             * @return {DOMEventTarget} Target node.
             */
            function getEventTarget(nativeEvent) {
              // Fallback to nativeEvent.srcElement for IE9
              // https://github.com/facebook/react/issues/12506
              var target = nativeEvent.target || nativeEvent.srcElement || window;

              // Normalize SVG <use> element events #4963
              if (target.correspondingUseElement) {
                target = target.correspondingUseElement;
              }

              // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
              // @see http://www.quirksmode.org/js/events_properties.html
              return target.nodeType === TEXT_NODE ? target.parentNode : target;
            }

            /**
             * Checks if an event is supported in the current execution environment.
             *
             * NOTE: This will not work correctly for non-generic events such as `change`,
             * `reset`, `load`, `error`, and `select`.
             *
             * Borrows from Modernizr.
             *
             * @param {string} eventNameSuffix Event name, e.g. "click".
             * @return {boolean} True if the event is supported.
             * @internal
             * @license Modernizr 3.0.0pre (Custom Build) | MIT
             */
            function isEventSupported(eventNameSuffix) {
              if (!canUseDOM) {
                return false;
              }

              var eventName = 'on' + eventNameSuffix;
              var isSupported = eventName in document;

              if (!isSupported) {
                var element = document.createElement('div');
                element.setAttribute(eventName, 'return;');
                isSupported = typeof element[eventName] === 'function';
              }

              return isSupported;
            }

            function isCheckable(elem) {
              var type = elem.type;
              var nodeName = elem.nodeName;
              return (
                nodeName &&
                nodeName.toLowerCase() === 'input' &&
                (type === 'checkbox' || type === 'radio')
              );
            }

            function getTracker(node) {
              return node._valueTracker;
            }

            function detachTracker(node) {
              node._valueTracker = null;
            }

            function getValueFromNode(node) {
              var value = '';
              if (!node) {
                return value;
              }

              if (isCheckable(node)) {
                value = node.checked ? 'true' : 'false';
              } else {
                value = node.value;
              }

              return value;
            }

            function trackValueOnNode(node) {
              var valueField = isCheckable(node) ? 'checked' : 'value';
              var descriptor = Object.getOwnPropertyDescriptor(
                node.constructor.prototype,
                valueField,
              );

              var currentValue = '' + node[valueField];

              // if someone has already defined a value or Safari, then bail
              // and don't track value will cause over reporting of changes,
              // but it's better then a hard failure
              // (needed for certain tests that spyOn input values and Safari)
              if (
                node.hasOwnProperty(valueField) ||
                typeof descriptor === 'undefined' ||
                typeof descriptor.get !== 'function' ||
                typeof descriptor.set !== 'function'
              ) {
                return;
              }
              var get = descriptor.get,
                set = descriptor.set;

              Object.defineProperty(node, valueField, {
                configurable: true,
                get: function() {
                  return get.call(this);
                },
                set: function(value) {
                  currentValue = '' + value;
                  set.call(this, value);
                },
              });
              // We could've passed this the first time
              // but it triggers a bug in IE11 and Edge 14/15.
              // Calling defineProperty() again should be equivalent.
              // https://github.com/facebook/react/issues/11768
              Object.defineProperty(node, valueField, {
                enumerable: descriptor.enumerable,
              });

              var tracker = {
                getValue: function() {
                  return currentValue;
                },
                setValue: function(value) {
                  currentValue = '' + value;
                },
                stopTracking: function() {
                  detachTracker(node);
                  delete node[valueField];
                },
              };
              return tracker;
            }

            function track(node) {
              if (getTracker(node)) {
                return;
              }

              // TODO: Once it's just Fiber we can move this to node._wrapperState
              node._valueTracker = trackValueOnNode(node);
            }

            function updateValueIfChanged(node) {
              if (!node) {
                return false;
              }

              var tracker = getTracker(node);
              // if there is no tracker at this point it's unlikely
              // that trying again will succeed
              if (!tracker) {
                return true;
              }

              var lastValue = tracker.getValue();
              var nextValue = getValueFromNode(node);
              if (nextValue !== lastValue) {
                tracker.setValue(nextValue);
                return true;
              }
              return false;
            }

            var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

            // Prevent newer renderers from RTE when used with older react package versions.
            // Current owner and dispatcher used to share the same ref,
            // but PR #14548 split them out to better support the react-debug-tools package.
            if (!ReactSharedInternals.hasOwnProperty('ReactCurrentDispatcher')) {
              ReactSharedInternals.ReactCurrentDispatcher = {
                current: null,
              };
            }
            if (!ReactSharedInternals.hasOwnProperty('ReactCurrentBatchConfig')) {
              ReactSharedInternals.ReactCurrentBatchConfig = {
                suspense: null,
              };
            }

            var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

            var describeComponentFrame = function(name, source, ownerName) {
              var sourceInfo = '';
              if (source) {
                var path = source.fileName;
                var fileName = path.replace(BEFORE_SLASH_RE, '');
                {
                  // In DEV, include code for a common special case:
                  // prefer "folder/index.js" instead of just "index.js".
                  if (/^index\./.test(fileName)) {
                    var match = path.match(BEFORE_SLASH_RE);
                    if (match) {
                      var pathBeforeSlash = match[1];
                      if (pathBeforeSlash) {
                        var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
                        fileName = folderName + '/' + fileName;
                      }
                    }
                  }
                }
                sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
              } else if (ownerName) {
                sourceInfo = ' (created by ' + ownerName + ')';
              }
              return '\n    in ' + (name || 'Unknown') + sourceInfo;
            };

            // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
            // nor polyfill, then a plain number is used for performance.
            var hasSymbol = typeof Symbol === 'function' && Symbol.for;

            var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
            var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
            var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
            var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
            var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
            var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
            var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
            // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
            // (unstable) APIs that have been removed. Can we remove the symbols?

            var REACT_CONCURRENT_MODE_TYPE = hasSymbol
              ? Symbol.for('react.concurrent_mode')
              : 0xeacf;
            var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
            var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
            var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
            var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
            var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
            var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
            var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;

            var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
            var FAUX_ITERATOR_SYMBOL = '@@iterator';

            function getIteratorFn(maybeIterable) {
              if (maybeIterable === null || typeof maybeIterable !== 'object') {
                return null;
              }
              var maybeIterator =
                (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
                maybeIterable[FAUX_ITERATOR_SYMBOL];
              if (typeof maybeIterator === 'function') {
                return maybeIterator;
              }
              return null;
            }

            var Pending = 0;
            var Resolved = 1;
            var Rejected = 2;

            function refineResolvedLazyComponent(lazyComponent) {
              return lazyComponent._status === Resolved ? lazyComponent._result : null;
            }

            function getWrappedName(outerType, innerType, wrapperName) {
              var functionName = innerType.displayName || innerType.name || '';
              return (
                outerType.displayName ||
                (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName)
              );
            }

            function getComponentName(type) {
              if (type == null) {
                // Host root, text node or just invalid type.
                return null;
              }
              {
                if (typeof type.tag === 'number') {
                  warningWithoutStack$1(
                    false,
                    'Received an unexpected object in getComponentName(). ' +
                      'This is likely a bug in React. Please file an issue.',
                  );
                }
              }
              if (typeof type === 'function') {
                return type.displayName || type.name || null;
              }
              if (typeof type === 'string') {
                return type;
              }
              switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return 'Fragment';
                case REACT_PORTAL_TYPE:
                  return 'Portal';
                case REACT_PROFILER_TYPE:
                  return 'Profiler';
                case REACT_STRICT_MODE_TYPE:
                  return 'StrictMode';
                case REACT_SUSPENSE_TYPE:
                  return 'Suspense';
                case REACT_SUSPENSE_LIST_TYPE:
                  return 'SuspenseList';
              }
              if (typeof type === 'object') {
                switch (type.$$typeof) {
                  case REACT_CONTEXT_TYPE:
                    return 'Context.Consumer';
                  case REACT_PROVIDER_TYPE:
                    return 'Context.Provider';
                  case REACT_FORWARD_REF_TYPE:
                    return getWrappedName(type, type.render, 'ForwardRef');
                  case REACT_MEMO_TYPE:
                    return getComponentName(type.type);
                  case REACT_LAZY_TYPE: {
                    var thenable = type;
                    var resolvedThenable = refineResolvedLazyComponent(thenable);
                    if (resolvedThenable) {
                      return getComponentName(resolvedThenable);
                    }
                    break;
                  }
                }
              }
              return null;
            }

            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

            function describeFiber(fiber) {
              switch (fiber.tag) {
                case HostRoot:
                case HostPortal:
                case HostText:
                case Fragment:
                case ContextProvider:
                case ContextConsumer:
                  return '';
                default:
                  var owner = fiber._debugOwner;
                  var source = fiber._debugSource;
                  var name = getComponentName(fiber.type);
                  var ownerName = null;
                  if (owner) {
                    ownerName = getComponentName(owner.type);
                  }
                  return describeComponentFrame(name, source, ownerName);
              }
            }

            function getStackByFiberInDevAndProd(workInProgress) {
              var info = '';
              var node = workInProgress;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            }

            var current = null;
            var phase = null;

            function getCurrentFiberOwnerNameInDevOrNull() {
              {
                if (current === null) {
                  return null;
                }
                var owner = current._debugOwner;
                if (owner !== null && typeof owner !== 'undefined') {
                  return getComponentName(owner.type);
                }
              }
              return null;
            }

            function getCurrentFiberStackInDev() {
              {
                if (current === null) {
                  return '';
                }
                // Safe because if current fiber exists, we are reconciling,
                // and it is guaranteed to be the work-in-progress version.
                return getStackByFiberInDevAndProd(current);
              }
              return '';
            }

            function resetCurrentFiber() {
              {
                ReactDebugCurrentFrame.getCurrentStack = null;
                current = null;
                phase = null;
              }
            }

            function setCurrentFiber(fiber) {
              {
                ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
                current = fiber;
                phase = null;
              }
            }

            function setCurrentPhase(lifeCyclePhase) {
              {
                phase = lifeCyclePhase;
              }
            }

            /**
             * Similar to invariant but only logs a warning if the condition is not met.
             * This can be used to log issues in development environments in critical
             * paths. Removing the logging code for production environments will keep the
             * same logic and follow the same code paths.
             */

            var warning = warningWithoutStack$1;

            {
              warning = function(condition, format) {
                if (condition) {
                  return;
                }
                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
                var stack = ReactDebugCurrentFrame.getStackAddendum();
                // eslint-disable-next-line react-internal/warning-and-invariant-args

                for (
                  var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2;
                  _key < _len;
                  _key++
                ) {
                  args[_key - 2] = arguments[_key];
                }

                warningWithoutStack$1.apply(
                  undefined,
                  [false, format + '%s'].concat(args, [stack]),
                );
              };
            }

            var warning$1 = warning;

            // A reserved attribute.
            // It is handled by React separately and shouldn't be written to the DOM.
            var RESERVED = 0;

            // A simple string attribute.
            // Attributes that aren't in the whitelist are presumed to have this type.
            var STRING = 1;

            // A string attribute that accepts booleans in React. In HTML, these are called
            // "enumerated" attributes with "true" and "false" as possible values.
            // When true, it should be set to a "true" string.
            // When false, it should be set to a "false" string.
            var BOOLEANISH_STRING = 2;

            // A real boolean attribute.
            // When true, it should be present (set either to an empty string or its name).
            // When false, it should be omitted.
            var BOOLEAN = 3;

            // An attribute that can be used as a flag as well as with a value.
            // When true, it should be present (set either to an empty string or its name).
            // When false, it should be omitted.
            // For any other value, should be present with that value.
            var OVERLOADED_BOOLEAN = 4;

            // An attribute that must be numeric or parse as a numeric.
            // When falsy, it should be removed.
            var NUMERIC = 5;

            // An attribute that must be positive numeric or parse as a positive numeric.
            // When falsy, it should be removed.
            var POSITIVE_NUMERIC = 6;

            /* eslint-disable max-len */
            var ATTRIBUTE_NAME_START_CHAR =
              ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
            /* eslint-enable max-len */
            var ATTRIBUTE_NAME_CHAR =
              ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040';

            var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
            var VALID_ATTRIBUTE_NAME_REGEX = new RegExp(
              '^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$',
            );

            var hasOwnProperty = Object.prototype.hasOwnProperty;
            var illegalAttributeNameCache = {};
            var validatedAttributeNameCache = {};

            function isAttributeNameSafe(attributeName) {
              if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
                return true;
              }
              if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
                return false;
              }
              if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
                validatedAttributeNameCache[attributeName] = true;
                return true;
              }
              illegalAttributeNameCache[attributeName] = true;
              {
                warning$1(false, 'Invalid attribute name: `%s`', attributeName);
              }
              return false;
            }

            function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
              if (propertyInfo !== null) {
                return propertyInfo.type === RESERVED;
              }
              if (isCustomComponentTag) {
                return false;
              }
              if (
                name.length > 2 &&
                (name[0] === 'o' || name[0] === 'O') &&
                (name[1] === 'n' || name[1] === 'N')
              ) {
                return true;
              }
              return false;
            }

            function shouldRemoveAttributeWithWarning(
              name,
              value,
              propertyInfo,
              isCustomComponentTag,
            ) {
              if (propertyInfo !== null && propertyInfo.type === RESERVED) {
                return false;
              }
              switch (typeof value) {
                case 'function':
                // $FlowIssue symbol is perfectly valid here
                case 'symbol':
                  // eslint-disable-line
                  return true;
                case 'boolean': {
                  if (isCustomComponentTag) {
                    return false;
                  }
                  if (propertyInfo !== null) {
                    return !propertyInfo.acceptsBooleans;
                  } else {
                    var prefix = name.toLowerCase().slice(0, 5);
                    return prefix !== 'data-' && prefix !== 'aria-';
                  }
                }
                default:
                  return false;
              }
            }

            function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
              if (value === null || typeof value === 'undefined') {
                return true;
              }
              if (
                shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)
              ) {
                return true;
              }
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                switch (propertyInfo.type) {
                  case BOOLEAN:
                    return !value;
                  case OVERLOADED_BOOLEAN:
                    return value === false;
                  case NUMERIC:
                    return isNaN(value);
                  case POSITIVE_NUMERIC:
                    return isNaN(value) || value < 1;
                }
              }
              return false;
            }

            function getPropertyInfo(name) {
              return properties.hasOwnProperty(name) ? properties[name] : null;
            }

            function PropertyInfoRecord(
              name,
              type,
              mustUseProperty,
              attributeName,
              attributeNamespace,
              sanitizeURL,
            ) {
              this.acceptsBooleans =
                type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
              this.attributeName = attributeName;
              this.attributeNamespace = attributeNamespace;
              this.mustUseProperty = mustUseProperty;
              this.propertyName = name;
              this.type = type;
              this.sanitizeURL = sanitizeURL;
            }

            // When adding attributes to this list, be sure to also add them to
            // the `possibleStandardNames` module to ensure casing and incorrect
            // name warnings.
            var properties = {};

            // These props are reserved by React. They shouldn't be written to the DOM.
            [
              'children',
              'dangerouslySetInnerHTML',
              // TODO: This prevents the assignment of defaultValue to regular
              // elements (not just inputs). Now that ReactDOMInput assigns to the
              // defaultValue property -- do we need this?
              'defaultValue',
              'defaultChecked',
              'innerHTML',
              'suppressContentEditableWarning',
              'suppressHydrationWarning',
              'style',
            ].forEach(
              function(name) {
                properties[name] = new PropertyInfoRecord(
                  name,
                  RESERVED,
                  false, // mustUseProperty
                  name, // attributeName
                  null, // attributeNamespace
                  false,
                );
              }, // sanitizeURL
            );

            // A few React string attributes have a different name.
            // This is a mapping from React prop names to the attribute names.
            [
              ['acceptCharset', 'accept-charset'],
              ['className', 'class'],
              ['htmlFor', 'for'],
              ['httpEquiv', 'http-equiv'],
            ].forEach(
              function(_ref) {
                var name = _ref[0],
                  attributeName = _ref[1];

                properties[name] = new PropertyInfoRecord(
                  name,
                  STRING,
                  false, // mustUseProperty
                  attributeName, // attributeName
                  null, // attributeNamespace
                  false,
                );
              }, // sanitizeURL
            );

            // These are "enumerated" HTML attributes that accept "true" and "false".
            // In React, we let users pass `true` and `false` even though technically
            // these aren't boolean attributes (they are coerced to strings).
            ['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(
              function(name) {
                properties[name] = new PropertyInfoRecord(
                  name,
                  BOOLEANISH_STRING,
                  false, // mustUseProperty
                  name.toLowerCase(), // attributeName
                  null, // attributeNamespace
                  false,
                );
              }, // sanitizeURL
            );

            // These are "enumerated" SVG attributes that accept "true" and "false".
            // In React, we let users pass `true` and `false` even though technically
            // these aren't boolean attributes (they are coerced to strings).
            // Since these are SVG attributes, their attribute names are case-sensitive.
            ['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(
              function(name) {
                properties[name] = new PropertyInfoRecord(
                  name,
                  BOOLEANISH_STRING,
                  false, // mustUseProperty
                  name, // attributeName
                  null, // attributeNamespace
                  false,
                );
              }, // sanitizeURL
            );

            // These are HTML boolean attributes.
            [
              'allowFullScreen',
              'async',
              // Note: there is a special case that prevents it from being written to the DOM
              // on the client side because the browsers are inconsistent. Instead we call focus().
              'autoFocus',
              'autoPlay',
              'controls',
              'default',
              'defer',
              'disabled',
              'disablePictureInPicture',
              'formNoValidate',
              'hidden',
              'loop',
              'noModule',
              'noValidate',
              'open',
              'playsInline',
              'readOnly',
              'required',
              'reversed',
              'scoped',
              'seamless',
              // Microdata
              'itemScope',
            ].forEach(
              function(name) {
                properties[name] = new PropertyInfoRecord(
                  name,
                  BOOLEAN,
                  false, // mustUseProperty
                  name.toLowerCase(), // attributeName
                  null, // attributeNamespace
                  false,
                );
              }, // sanitizeURL
            );

            // These are the few React props that we set as DOM properties
            // rather than attributes. These are all booleans.
            [
              'checked',
              // Note: `option.selected` is not updated if `select.multiple` is
              // disabled with `removeAttribute`. We have special logic for handling this.
              'multiple',
              'muted',
              'selected',
            ].forEach(
              function(name) {
                properties[name] = new PropertyInfoRecord(
                  name,
                  BOOLEAN,
                  true, // mustUseProperty
                  name, // attributeName
                  null, // attributeNamespace
                  false,
                );
              }, // sanitizeURL
            );

            // These are HTML attributes that are "overloaded booleans": they behave like
            // booleans, but can also accept a string value.
            ['capture', 'download'].forEach(
              function(name) {
                properties[name] = new PropertyInfoRecord(
                  name,
                  OVERLOADED_BOOLEAN,
                  false, // mustUseProperty
                  name, // attributeName
                  null, // attributeNamespace
                  false,
                );
              }, // sanitizeURL
            );

            // These are HTML attributes that must be positive numbers.
            ['cols', 'rows', 'size', 'span'].forEach(
              function(name) {
                properties[name] = new PropertyInfoRecord(
                  name,
                  POSITIVE_NUMERIC,
                  false, // mustUseProperty
                  name, // attributeName
                  null, // attributeNamespace
                  false,
                );
              }, // sanitizeURL
            );

            // These are HTML attributes that must be numbers.
            ['rowSpan', 'start'].forEach(
              function(name) {
                properties[name] = new PropertyInfoRecord(
                  name,
                  NUMERIC,
                  false, // mustUseProperty
                  name.toLowerCase(), // attributeName
                  null, // attributeNamespace
                  false,
                );
              }, // sanitizeURL
            );

            var CAMELIZE = /[\-\:]([a-z])/g;
            var capitalize = function(token) {
              return token[1].toUpperCase();
            };

            // This is a list of all SVG attributes that need special casing, namespacing,
            // or boolean value assignment. Regular attributes that just accept strings
            // and have the same names are omitted, just like in the HTML whitelist.
            // Some of these attributes can be hard to find. This list was created by
            // scrapping the MDN documentation.
            [
              'accent-height',
              'alignment-baseline',
              'arabic-form',
              'baseline-shift',
              'cap-height',
              'clip-path',
              'clip-rule',
              'color-interpolation',
              'color-interpolation-filters',
              'color-profile',
              'color-rendering',
              'dominant-baseline',
              'enable-background',
              'fill-opacity',
              'fill-rule',
              'flood-color',
              'flood-opacity',
              'font-family',
              'font-size',
              'font-size-adjust',
              'font-stretch',
              'font-style',
              'font-variant',
              'font-weight',
              'glyph-name',
              'glyph-orientation-horizontal',
              'glyph-orientation-vertical',
              'horiz-adv-x',
              'horiz-origin-x',
              'image-rendering',
              'letter-spacing',
              'lighting-color',
              'marker-end',
              'marker-mid',
              'marker-start',
              'overline-position',
              'overline-thickness',
              'paint-order',
              'panose-1',
              'pointer-events',
              'rendering-intent',
              'shape-rendering',
              'stop-color',
              'stop-opacity',
              'strikethrough-position',
              'strikethrough-thickness',
              'stroke-dasharray',
              'stroke-dashoffset',
              'stroke-linecap',
              'stroke-linejoin',
              'stroke-miterlimit',
              'stroke-opacity',
              'stroke-width',
              'text-anchor',
              'text-decoration',
              'text-rendering',
              'underline-position',
              'underline-thickness',
              'unicode-bidi',
              'unicode-range',
              'units-per-em',
              'v-alphabetic',
              'v-hanging',
              'v-ideographic',
              'v-mathematical',
              'vector-effect',
              'vert-adv-y',
              'vert-origin-x',
              'vert-origin-y',
              'word-spacing',
              'writing-mode',
              'xmlns:xlink',
              'x-height',
            ].forEach(
              function(attributeName) {
                var name = attributeName.replace(CAMELIZE, capitalize);
                properties[name] = new PropertyInfoRecord(
                  name,
                  STRING,
                  false, // mustUseProperty
                  attributeName,
                  null, // attributeNamespace
                  false,
                );
              }, // sanitizeURL
            );

            // String SVG attributes with the xlink namespace.
            [
              'xlink:actuate',
              'xlink:arcrole',
              'xlink:role',
              'xlink:show',
              'xlink:title',
              'xlink:type',
            ].forEach(
              function(attributeName) {
                var name = attributeName.replace(CAMELIZE, capitalize);
                properties[name] = new PropertyInfoRecord(
                  name,
                  STRING,
                  false, // mustUseProperty
                  attributeName,
                  'http://www.w3.org/1999/xlink',
                  false,
                );
              }, // sanitizeURL
            );

            // String SVG attributes with the xml namespace.
            ['xml:base', 'xml:lang', 'xml:space'].forEach(
              function(attributeName) {
                var name = attributeName.replace(CAMELIZE, capitalize);
                properties[name] = new PropertyInfoRecord(
                  name,
                  STRING,
                  false, // mustUseProperty
                  attributeName,
                  'http://www.w3.org/XML/1998/namespace',
                  false,
                );
              }, // sanitizeURL
            );

            // These attribute exists both in HTML and SVG.
            // The attribute name is case-sensitive in SVG so we can't just use
            // the React name like we do for attributes that exist only in HTML.
            ['tabIndex', 'crossOrigin'].forEach(
              function(attributeName) {
                properties[attributeName] = new PropertyInfoRecord(
                  attributeName,
                  STRING,
                  false, // mustUseProperty
                  attributeName.toLowerCase(), // attributeName
                  null, // attributeNamespace
                  false,
                );
              }, // sanitizeURL
            );

            // These attributes accept URLs. These must not allow javascript: URLS.
            // These will also need to accept Trusted Types object in the future.
            var xlinkHref = 'xlinkHref';
            properties[xlinkHref] = new PropertyInfoRecord(
              'xlinkHref',
              STRING,
              false, // mustUseProperty
              'xlink:href',
              'http://www.w3.org/1999/xlink',
              true,
            );

            ['src', 'href', 'action', 'formAction'].forEach(
              function(attributeName) {
                properties[attributeName] = new PropertyInfoRecord(
                  attributeName,
                  STRING,
                  false, // mustUseProperty
                  attributeName.toLowerCase(), // attributeName
                  null, // attributeNamespace
                  true,
                );
              }, // sanitizeURL
            );

            var ReactDebugCurrentFrame$1 = null;
            {
              ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
            }

            // A javascript: URL can contain leading C0 control or \u0020 SPACE,
            // and any newline or tab are filtered out as if they're not part of the URL.
            // https://url.spec.whatwg.org/#url-parsing
            // Tab or newline are defined as \r\n\t:
            // https://infra.spec.whatwg.org/#ascii-tab-or-newline
            // A C0 control is a code point in the range \u0000 NULL to \u001F
            // INFORMATION SEPARATOR ONE, inclusive:
            // https://infra.spec.whatwg.org/#c0-control-or-space

            /* eslint-disable max-len */
            var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;

            var didWarn = false;

            function sanitizeURL(url) {
              if (disableJavaScriptURLs) {
                (function() {
                  if (!!isJavaScriptProtocol.test(url)) {
                    {
                      throw ReactError(
                        Error(
                          'React has blocked a javascript: URL as a security precaution.' +
                            ReactDebugCurrentFrame$1.getStackAddendum(),
                        ),
                      );
                    }
                  }
                })();
              } else if (true && !didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                warning$1(
                  false,
                  'A future version of React will block javascript: URLs as a security precaution. ' +
                    'Use event handlers instead if you can. If you need to generate unsafe HTML try ' +
                    'using dangerouslySetInnerHTML instead. React was passed %s.',
                  JSON.stringify(url),
                );
              }
            }

            /**
             * Get the value for a property on a node. Only used in DEV for SSR validation.
             * The "expected" argument is used as a hint of what the expected value is.
             * Some properties have multiple equivalent values.
             */
            function getValueForProperty(node, name, expected, propertyInfo) {
              {
                if (propertyInfo.mustUseProperty) {
                  var propertyName = propertyInfo.propertyName;

                  return node[propertyName];
                } else {
                  if (!disableJavaScriptURLs && propertyInfo.sanitizeURL) {
                    // If we haven't fully disabled javascript: URLs, and if
                    // the hydration is successful of a javascript: URL, we
                    // still want to warn on the client.
                    sanitizeURL('' + expected);
                  }

                  var attributeName = propertyInfo.attributeName;

                  var stringValue = null;

                  if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                    if (node.hasAttribute(attributeName)) {
                      var value = node.getAttribute(attributeName);
                      if (value === '') {
                        return true;
                      }
                      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                        return value;
                      }
                      if (value === '' + expected) {
                        return expected;
                      }
                      return value;
                    }
                  } else if (node.hasAttribute(attributeName)) {
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      // We had an attribute but shouldn't have had one, so read it
                      // for the error message.
                      return node.getAttribute(attributeName);
                    }
                    if (propertyInfo.type === BOOLEAN) {
                      // If this was a boolean, it doesn't matter what the value is
                      // the fact that we have it is the same as the expected.
                      return expected;
                    }
                    // Even if this property uses a namespace we use getAttribute
                    // because we assume its namespaced name is the same as our config.
                    // To use getAttributeNS we need the local name which we don't have
                    // in our config atm.
                    stringValue = node.getAttribute(attributeName);
                  }

                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return stringValue === null ? expected : stringValue;
                  } else if (stringValue === '' + expected) {
                    return expected;
                  } else {
                    return stringValue;
                  }
                }
              }
            }

            /**
             * Get the value for a attribute on a node. Only used in DEV for SSR validation.
             * The third argument is used as a hint of what the expected value is. Some
             * attributes have multiple equivalent values.
             */
            function getValueForAttribute(node, name, expected) {
              {
                if (!isAttributeNameSafe(name)) {
                  return;
                }
                if (!node.hasAttribute(name)) {
                  return expected === undefined ? undefined : null;
                }
                var value = node.getAttribute(name);
                if (value === '' + expected) {
                  return expected;
                }
                return value;
              }
            }

            /**
             * Sets the value for a property on a node.
             *
             * @param {DOMElement} node
             * @param {string} name
             * @param {*} value
             */
            function setValueForProperty(node, name, value, isCustomComponentTag) {
              var propertyInfo = getPropertyInfo(name);
              if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
                return;
              }
              if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
                value = null;
              }
              // If the prop isn't in the special list, treat it as a simple attribute.
              if (isCustomComponentTag || propertyInfo === null) {
                if (isAttributeNameSafe(name)) {
                  var _attributeName = name;
                  if (value === null) {
                    node.removeAttribute(_attributeName);
                  } else {
                    node.setAttribute(_attributeName, '' + value);
                  }
                }
                return;
              }
              var mustUseProperty = propertyInfo.mustUseProperty;

              if (mustUseProperty) {
                var propertyName = propertyInfo.propertyName;

                if (value === null) {
                  var type = propertyInfo.type;

                  node[propertyName] = type === BOOLEAN ? false : '';
                } else {
                  // Contrary to `setAttribute`, object properties are properly
                  // `toString`ed by IE8/9.
                  node[propertyName] = value;
                }
                return;
              }
              // The rest are treated as attributes with special cases.
              var attributeName = propertyInfo.attributeName,
                attributeNamespace = propertyInfo.attributeNamespace;

              if (value === null) {
                node.removeAttribute(attributeName);
              } else {
                var _type = propertyInfo.type;

                var attributeValue = void 0;
                if (_type === BOOLEAN || (_type === OVERLOADED_BOOLEAN && value === true)) {
                  attributeValue = '';
                } else {
                  // `setAttribute` with objects becomes only `[object]` in IE8/9,
                  // ('' + value) makes it output the correct toString()-value.
                  attributeValue = '' + value;
                  if (propertyInfo.sanitizeURL) {
                    sanitizeURL(attributeValue);
                  }
                }
                if (attributeNamespace) {
                  node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
                } else {
                  node.setAttribute(attributeName, attributeValue);
                }
              }
            }

            // Flow does not allow string concatenation of most non-string types. To work
            // around this limitation, we use an opaque type that can only be obtained by
            // passing the value through getToStringValue first.
            function toString(value) {
              return '' + value;
            }

            function getToStringValue(value) {
              switch (typeof value) {
                case 'boolean':
                case 'number':
                case 'object':
                case 'string':
                case 'undefined':
                  return value;
                default:
                  // function, symbol are assigned as empty strings
                  return '';
              }
            }

            var ReactDebugCurrentFrame$2 = null;

            var ReactControlledValuePropTypes = {
              checkPropTypes: null,
            };

            {
              ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;

              var hasReadOnlyValue = {
                button: true,
                checkbox: true,
                image: true,
                hidden: true,
                radio: true,
                reset: true,
                submit: true,
              };

              var propTypes = {
                value: function(props, propName, componentName) {
                  if (
                    hasReadOnlyValue[props.type] ||
                    props.onChange ||
                    props.readOnly ||
                    props.disabled ||
                    props[propName] == null ||
                    (enableFlareAPI && props.listeners)
                  ) {
                    return null;
                  }
                  return new Error(
                    'You provided a `value` prop to a form field without an ' +
                      '`onChange` handler. This will render a read-only field. If ' +
                      'the field should be mutable use `defaultValue`. Otherwise, ' +
                      'set either `onChange` or `readOnly`.',
                  );
                },
                checked: function(props, propName, componentName) {
                  if (
                    props.onChange ||
                    props.readOnly ||
                    props.disabled ||
                    props[propName] == null ||
                    (enableFlareAPI && props.listeners)
                  ) {
                    return null;
                  }
                  return new Error(
                    'You provided a `checked` prop to a form field without an ' +
                      '`onChange` handler. This will render a read-only field. If ' +
                      'the field should be mutable use `defaultChecked`. Otherwise, ' +
                      'set either `onChange` or `readOnly`.',
                  );
                },
              };

              /**
               * Provide a linked `value` attribute for controlled forms. You should not use
               * this outside of the ReactDOM controlled form components.
               */
              ReactControlledValuePropTypes.checkPropTypes = function(tagName, props) {
                checkPropTypes(
                  propTypes,
                  props,
                  'prop',
                  tagName,
                  ReactDebugCurrentFrame$2.getStackAddendum,
                );
              };
            }

            // TODO: direct imports like some-package/src/* are bad. Fix me.
            var didWarnValueDefaultValue = false;
            var didWarnCheckedDefaultChecked = false;
            var didWarnControlledToUncontrolled = false;
            var didWarnUncontrolledToControlled = false;

            function isControlled(props) {
              var usesChecked = props.type === 'checkbox' || props.type === 'radio';
              return usesChecked ? props.checked != null : props.value != null;
            }

            /**
             * Implements an <input> host component that allows setting these optional
             * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
             *
             * If `checked` or `value` are not supplied (or null/undefined), user actions
             * that affect the checked state or value will trigger updates to the element.
             *
             * If they are supplied (and not null/undefined), the rendered element will not
             * trigger updates to the element. Instead, the props must change in order for
             * the rendered element to be updated.
             *
             * The rendered element will be initialized as unchecked (or `defaultChecked`)
             * with an empty value (or `defaultValue`).
             *
             * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
             */

            function getHostProps(element, props) {
              var node = element;
              var checked = props.checked;

              var hostProps = _assign({}, props, {
                defaultChecked: undefined,
                defaultValue: undefined,
                value: undefined,
                checked: checked != null ? checked : node._wrapperState.initialChecked,
              });

              return hostProps;
            }

            function initWrapperState(element, props) {
              {
                ReactControlledValuePropTypes.checkPropTypes('input', props);

                if (
                  props.checked !== undefined &&
                  props.defaultChecked !== undefined &&
                  !didWarnCheckedDefaultChecked
                ) {
                  warning$1(
                    false,
                    '%s contains an input of type %s with both checked and defaultChecked props. ' +
                      'Input elements must be either controlled or uncontrolled ' +
                      '(specify either the checked prop, or the defaultChecked prop, but not ' +
                      'both). Decide between using a controlled or uncontrolled input ' +
                      'element and remove one of these props. More info: ' +
                      'https://fb.me/react-controlled-components',
                    getCurrentFiberOwnerNameInDevOrNull() || 'A component',
                    props.type,
                  );
                  didWarnCheckedDefaultChecked = true;
                }
                if (
                  props.value !== undefined &&
                  props.defaultValue !== undefined &&
                  !didWarnValueDefaultValue
                ) {
                  warning$1(
                    false,
                    '%s contains an input of type %s with both value and defaultValue props. ' +
                      'Input elements must be either controlled or uncontrolled ' +
                      '(specify either the value prop, or the defaultValue prop, but not ' +
                      'both). Decide between using a controlled or uncontrolled input ' +
                      'element and remove one of these props. More info: ' +
                      'https://fb.me/react-controlled-components',
                    getCurrentFiberOwnerNameInDevOrNull() || 'A component',
                    props.type,
                  );
                  didWarnValueDefaultValue = true;
                }
              }

              var node = element;
              var defaultValue = props.defaultValue == null ? '' : props.defaultValue;

              node._wrapperState = {
                initialChecked: props.checked != null ? props.checked : props.defaultChecked,
                initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
                controlled: isControlled(props),
              };
            }

            function updateChecked(element, props) {
              var node = element;
              var checked = props.checked;
              if (checked != null) {
                setValueForProperty(node, 'checked', checked, false);
              }
            }

            function updateWrapper(element, props) {
              var node = element;
              {
                var _controlled = isControlled(props);

                if (
                  !node._wrapperState.controlled &&
                  _controlled &&
                  !didWarnUncontrolledToControlled
                ) {
                  warning$1(
                    false,
                    'A component is changing an uncontrolled input of type %s to be controlled. ' +
                      'Input elements should not switch from uncontrolled to controlled (or vice versa). ' +
                      'Decide between using a controlled or uncontrolled input ' +
                      'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',
                    props.type,
                  );
                  didWarnUncontrolledToControlled = true;
                }
                if (
                  node._wrapperState.controlled &&
                  !_controlled &&
                  !didWarnControlledToUncontrolled
                ) {
                  warning$1(
                    false,
                    'A component is changing a controlled input of type %s to be uncontrolled. ' +
                      'Input elements should not switch from controlled to uncontrolled (or vice versa). ' +
                      'Decide between using a controlled or uncontrolled input ' +
                      'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',
                    props.type,
                  );
                  didWarnControlledToUncontrolled = true;
                }
              }

              updateChecked(element, props);

              var value = getToStringValue(props.value);
              var type = props.type;

              if (value != null) {
                if (type === 'number') {
                  if (
                    (value === 0 && node.value === '') ||
                    // We explicitly want to coerce to number here if possible.
                    // eslint-disable-next-line
                    node.value != value
                  ) {
                    node.value = toString(value);
                  }
                } else if (node.value !== toString(value)) {
                  node.value = toString(value);
                }
              } else if (type === 'submit' || type === 'reset') {
                // Submit/reset inputs need the attribute removed completely to avoid
                // blank-text buttons.
                node.removeAttribute('value');
                return;
              }

              if (disableInputAttributeSyncing) {
                // When not syncing the value attribute, React only assigns a new value
                // whenever the defaultValue React prop has changed. When not present,
                // React does nothing
                if (props.hasOwnProperty('defaultValue')) {
                  setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
                }
              } else {
                // When syncing the value attribute, the value comes from a cascade of
                // properties:
                //  1. The value React property
                //  2. The defaultValue React property
                //  3. Otherwise there should be no change
                if (props.hasOwnProperty('value')) {
                  setDefaultValue(node, props.type, value);
                } else if (props.hasOwnProperty('defaultValue')) {
                  setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
                }
              }

              if (disableInputAttributeSyncing) {
                // When not syncing the checked attribute, the attribute is directly
                // controllable from the defaultValue React property. It needs to be
                // updated as new props come in.
                if (props.defaultChecked == null) {
                  node.removeAttribute('checked');
                } else {
                  node.defaultChecked = !!props.defaultChecked;
                }
              } else {
                // When syncing the checked attribute, it only changes when it needs
                // to be removed, such as transitioning from a checkbox into a text input
                if (props.checked == null && props.defaultChecked != null) {
                  node.defaultChecked = !!props.defaultChecked;
                }
              }
            }

            function postMountWrapper(element, props, isHydrating) {
              var node = element;

              // Do not assign value if it is already set. This prevents user text input
              // from being lost during SSR hydration.
              if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
                var type = props.type;
                var isButton = type === 'submit' || type === 'reset';

                // Avoid setting value attribute on submit/reset inputs as it overrides the
                // default value provided by the browser. See: #12872
                if (isButton && (props.value === undefined || props.value === null)) {
                  return;
                }

                var _initialValue = toString(node._wrapperState.initialValue);

                // Do not assign value if it is already set. This prevents user text input
                // from being lost during SSR hydration.
                if (!isHydrating) {
                  if (disableInputAttributeSyncing) {
                    var value = getToStringValue(props.value);

                    // When not syncing the value attribute, the value property points
                    // directly to the React prop. Only assign it if it exists.
                    if (value != null) {
                      // Always assign on buttons so that it is possible to assign an
                      // empty string to clear button text.
                      //
                      // Otherwise, do not re-assign the value property if is empty. This
                      // potentially avoids a DOM write and prevents Firefox (~60.0.1) from
                      // prematurely marking required inputs as invalid. Equality is compared
                      // to the current value in case the browser provided value is not an
                      // empty string.
                      if (isButton || value !== node.value) {
                        node.value = toString(value);
                      }
                    }
                  } else {
                    // When syncing the value attribute, the value property should use
                    // the wrapperState._initialValue property. This uses:
                    //
                    //   1. The value React property when present
                    //   2. The defaultValue React property when present
                    //   3. An empty string
                    if (_initialValue !== node.value) {
                      node.value = _initialValue;
                    }
                  }
                }

                if (disableInputAttributeSyncing) {
                  // When not syncing the value attribute, assign the value attribute
                  // directly from the defaultValue React property (when present)
                  var defaultValue = getToStringValue(props.defaultValue);
                  if (defaultValue != null) {
                    node.defaultValue = toString(defaultValue);
                  }
                } else {
                  // Otherwise, the value attribute is synchronized to the property,
                  // so we assign defaultValue to the same thing as the value property
                  // assignment step above.
                  node.defaultValue = _initialValue;
                }
              }

              // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
              // this is needed to work around a chrome bug where setting defaultChecked
              // will sometimes influence the value of checked (even after detachment).
              // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
              // We need to temporarily unset name to avoid disrupting radio button groups.
              var name = node.name;
              if (name !== '') {
                node.name = '';
              }

              if (disableInputAttributeSyncing) {
                // When not syncing the checked attribute, the checked property
                // never gets assigned. It must be manually set. We don't want
                // to do this when hydrating so that existing user input isn't
                // modified
                if (!isHydrating) {
                  updateChecked(element, props);
                }

                // Only assign the checked attribute if it is defined. This saves
                // a DOM write when controlling the checked attribute isn't needed
                // (text inputs, submit/reset)
                if (props.hasOwnProperty('defaultChecked')) {
                  node.defaultChecked = !node.defaultChecked;
                  node.defaultChecked = !!props.defaultChecked;
                }
              } else {
                // When syncing the checked attribute, both the checked property and
                // attribute are assigned at the same time using defaultChecked. This uses:
                //
                //   1. The checked React property when present
                //   2. The defaultChecked React property when present
                //   3. Otherwise, false
                node.defaultChecked = !node.defaultChecked;
                node.defaultChecked = !!node._wrapperState.initialChecked;
              }

              if (name !== '') {
                node.name = name;
              }
            }

            function restoreControlledState(element, props) {
              var node = element;
              updateWrapper(node, props);
              updateNamedCousins(node, props);
            }

            function updateNamedCousins(rootNode, props) {
              var name = props.name;
              if (props.type === 'radio' && name != null) {
                var queryRoot = rootNode;

                while (queryRoot.parentNode) {
                  queryRoot = queryRoot.parentNode;
                }

                // If `rootNode.form` was non-null, then we could try `form.elements`,
                // but that sometimes behaves strangely in IE8. We could also try using
                // `form.getElementsByName`, but that will only return direct children
                // and won't include inputs that use the HTML5 `form=` attribute. Since
                // the input might not even be in a form. It might not even be in the
                // document. Let's just use the local `querySelectorAll` to ensure we don't
                // miss anything.
                var group = queryRoot.querySelectorAll(
                  'input[name=' + JSON.stringify('' + name) + '][type="radio"]',
                );

                for (var i = 0; i < group.length; i++) {
                  var otherNode = group[i];
                  if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                    continue;
                  }
                  // This will throw if radio buttons rendered by different copies of React
                  // and the same name are rendered into the same form (same as #1939).
                  // That's probably okay; we don't support it just as we don't support
                  // mixing React radio buttons with non-React ones.
                  var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
                  (function() {
                    if (!otherProps) {
                      {
                        throw ReactError(
                          Error(
                            'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.',
                          ),
                        );
                      }
                    }
                  })();

                  // We need update the tracked value on the named cousin since the value
                  // was changed but the input saw no event or value set
                  updateValueIfChanged(otherNode);

                  // If this is a controlled radio button group, forcing the input that
                  // was previously checked to update will cause it to be come re-checked
                  // as appropriate.
                  updateWrapper(otherNode, otherProps);
                }
              }
            }

            // In Chrome, assigning defaultValue to certain input types triggers input validation.
            // For number inputs, the display value loses trailing decimal points. For email inputs,
            // Chrome raises "The specified value <x> is not a valid email address".
            //
            // Here we check to see if the defaultValue has actually changed, avoiding these problems
            // when the user is inputting text
            //
            // https://github.com/facebook/react/issues/7253
            function setDefaultValue(node, type, value) {
              if (
                // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
                type !== 'number' ||
                node.ownerDocument.activeElement !== node
              ) {
                if (value == null) {
                  node.defaultValue = toString(node._wrapperState.initialValue);
                } else if (node.defaultValue !== toString(value)) {
                  node.defaultValue = toString(value);
                }
              }
            }

            var eventTypes$1 = {
              change: {
                phasedRegistrationNames: {
                  bubbled: 'onChange',
                  captured: 'onChangeCapture',
                },
                dependencies: [
                  TOP_BLUR,
                  TOP_CHANGE,
                  TOP_CLICK,
                  TOP_FOCUS,
                  TOP_INPUT,
                  TOP_KEY_DOWN,
                  TOP_KEY_UP,
                  TOP_SELECTION_CHANGE,
                ],
              },
            };

            function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
              var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
              event.type = 'change';
              // Flag this event loop as needing state restore.
              enqueueStateRestore(target);
              accumulateTwoPhaseDispatches(event);
              return event;
            }
            /**
             * For IE shims
             */
            var activeElement = null;
            var activeElementInst = null;

            /**
             * SECTION: handle `change` event
             */
            function shouldUseChangeEvent(elem) {
              var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
              return nodeName === 'select' || (nodeName === 'input' && elem.type === 'file');
            }

            function manualDispatchChangeEvent(nativeEvent) {
              var event = createAndAccumulateChangeEvent(
                activeElementInst,
                nativeEvent,
                getEventTarget(nativeEvent),
              );

              // If change and propertychange bubbled, we'd just bind to it like all the
              // other events and have it go through ReactBrowserEventEmitter. Since it
              // doesn't, we manually listen for the events and so we have to enqueue and
              // process the abstract event manually.
              //
              // Batching is necessary here in order to ensure that all event handlers run
              // before the next rerender (including event handlers attached to ancestor
              // elements instead of directly on the input). Without this, controlled
              // components don't work properly in conjunction with event bubbling because
              // the component is rerendered and the value reverted before all the event
              // handlers can run. See https://github.com/facebook/react/issues/708.
              batchedUpdates(runEventInBatch, event);
            }

            function runEventInBatch(event) {
              runEventsInBatch(event);
            }

            function getInstIfValueChanged(targetInst) {
              var targetNode = getNodeFromInstance$1(targetInst);
              if (updateValueIfChanged(targetNode)) {
                return targetInst;
              }
            }

            function getTargetInstForChangeEvent(topLevelType, targetInst) {
              if (topLevelType === TOP_CHANGE) {
                return targetInst;
              }
            }

            /**
             * SECTION: handle `input` event
             */
            var isInputEventSupported = false;
            if (canUseDOM) {
              // IE9 claims to support the input event but fails to trigger it when
              // deleting text, so we ignore its input events.
              isInputEventSupported =
                isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
            }

            /**
             * (For IE <=9) Starts tracking propertychange events on the passed-in element
             * and override the value property so that we can distinguish user events from
             * value changes in JS.
             */
            function startWatchingForValueChange(target, targetInst) {
              activeElement = target;
              activeElementInst = targetInst;
              activeElement.attachEvent('onpropertychange', handlePropertyChange);
            }

            /**
             * (For IE <=9) Removes the event listeners from the currently-tracked element,
             * if any exists.
             */
            function stopWatchingForValueChange() {
              if (!activeElement) {
                return;
              }
              activeElement.detachEvent('onpropertychange', handlePropertyChange);
              activeElement = null;
              activeElementInst = null;
            }

            /**
             * (For IE <=9) Handles a propertychange event, sending a `change` event if
             * the value of the active element has changed.
             */
            function handlePropertyChange(nativeEvent) {
              if (nativeEvent.propertyName !== 'value') {
                return;
              }
              if (getInstIfValueChanged(activeElementInst)) {
                manualDispatchChangeEvent(nativeEvent);
              }
            }

            function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
              if (topLevelType === TOP_FOCUS) {
                // In IE9, propertychange fires for most input events but is buggy and
                // doesn't fire when text is deleted, but conveniently, selectionchange
                // appears to fire in all of the remaining cases so we catch those and
                // forward the event if the value has changed
                // In either case, we don't want to call the event handler if the value
                // is changed from JS so we redefine a setter for `.value` that updates
                // our activeElementValue variable, allowing us to ignore those changes
                //
                // stopWatching() should be a noop here but we call it just in case we
                // missed a blur event somehow.
                stopWatchingForValueChange();
                startWatchingForValueChange(target, targetInst);
              } else if (topLevelType === TOP_BLUR) {
                stopWatchingForValueChange();
              }
            }

            // For IE8 and IE9.
            function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
              if (
                topLevelType === TOP_SELECTION_CHANGE ||
                topLevelType === TOP_KEY_UP ||
                topLevelType === TOP_KEY_DOWN
              ) {
                // On the selectionchange event, the target is just document which isn't
                // helpful for us so just check activeElement instead.
                //
                // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
                // propertychange on the first input event after setting `value` from a
                // script and fires only keydown, keypress, keyup. Catching keyup usually
                // gets it and catching keydown lets us fire an event for the first
                // keystroke if user does a key repeat (it'll be a little delayed: right
                // before the second keystroke). Other input methods (e.g., paste) seem to
                // fire selectionchange normally.
                return getInstIfValueChanged(activeElementInst);
              }
            }

            /**
             * SECTION: handle `click` event
             */
            function shouldUseClickEvent(elem) {
              // Use the `click` event to detect changes to checkbox and radio inputs.
              // This approach works across all browsers, whereas `change` does not fire
              // until `blur` in IE8.
              var nodeName = elem.nodeName;
              return (
                nodeName &&
                nodeName.toLowerCase() === 'input' &&
                (elem.type === 'checkbox' || elem.type === 'radio')
              );
            }

            function getTargetInstForClickEvent(topLevelType, targetInst) {
              if (topLevelType === TOP_CLICK) {
                return getInstIfValueChanged(targetInst);
              }
            }

            function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
              if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
                return getInstIfValueChanged(targetInst);
              }
            }

            function handleControlledInputBlur(node) {
              var state = node._wrapperState;

              if (!state || !state.controlled || node.type !== 'number') {
                return;
              }

              if (!disableInputAttributeSyncing) {
                // If controlled, assign the value attribute to the current value on blur
                setDefaultValue(node, 'number', node.value);
              }
            }

            /**
             * This plugin creates an `onChange` event that normalizes change events
             * across form elements. This event fires at a time when it's possible to
             * change the element's value without seeing a flicker.
             *
             * Supported elements are:
             * - input (see `isTextInputElement`)
             * - textarea
             * - select
             */
            var ChangeEventPlugin = {
              eventTypes: eventTypes$1,

              _isInputEventSupported: isInputEventSupported,

              extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
                var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

                var getTargetInstFunc = void 0,
                  handleEventFunc = void 0;
                if (shouldUseChangeEvent(targetNode)) {
                  getTargetInstFunc = getTargetInstForChangeEvent;
                } else if (isTextInputElement(targetNode)) {
                  if (isInputEventSupported) {
                    getTargetInstFunc = getTargetInstForInputOrChangeEvent;
                  } else {
                    getTargetInstFunc = getTargetInstForInputEventPolyfill;
                    handleEventFunc = handleEventsForInputEventPolyfill;
                  }
                } else if (shouldUseClickEvent(targetNode)) {
                  getTargetInstFunc = getTargetInstForClickEvent;
                }

                if (getTargetInstFunc) {
                  var inst = getTargetInstFunc(topLevelType, targetInst);
                  if (inst) {
                    var event = createAndAccumulateChangeEvent(
                      inst,
                      nativeEvent,
                      nativeEventTarget,
                    );
                    return event;
                  }
                }

                if (handleEventFunc) {
                  handleEventFunc(topLevelType, targetNode, targetInst);
                }

                // When blurring, set the value attribute for number inputs
                if (topLevelType === TOP_BLUR) {
                  handleControlledInputBlur(targetNode);
                }
              },
            };

            /**
             * Module that is injectable into `EventPluginHub`, that specifies a
             * deterministic ordering of `EventPlugin`s. A convenient way to reason about
             * plugins, without having to package every one of them. This is better than
             * having plugins be ordered in the same order that they are injected because
             * that ordering would be influenced by the packaging order.
             * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
             * preventing default on events is convenient in `SimpleEventPlugin` handlers.
             */
            var DOMEventPluginOrder = [
              'ResponderEventPlugin',
              'SimpleEventPlugin',
              'EnterLeaveEventPlugin',
              'ChangeEventPlugin',
              'SelectEventPlugin',
              'BeforeInputEventPlugin',
            ];

            var SyntheticUIEvent = SyntheticEvent.extend({
              view: null,
              detail: null,
            });

            var modifierKeyToProp = {
              Alt: 'altKey',
              Control: 'ctrlKey',
              Meta: 'metaKey',
              Shift: 'shiftKey',
            };

            // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
            // getModifierState. If getModifierState is not supported, we map it to a set of
            // modifier keys exposed by the event. In this case, Lock-keys are not supported.
            /**
             * Translation from modifier key to the associated property in the event.
             * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
             */

            function modifierStateGetter(keyArg) {
              var syntheticEvent = this;
              var nativeEvent = syntheticEvent.nativeEvent;
              if (nativeEvent.getModifierState) {
                return nativeEvent.getModifierState(keyArg);
              }
              var keyProp = modifierKeyToProp[keyArg];
              return keyProp ? !!nativeEvent[keyProp] : false;
            }

            function getEventModifierState(nativeEvent) {
              return modifierStateGetter;
            }

            var previousScreenX = 0;
            var previousScreenY = 0;
            // Use flags to signal movementX/Y has already been set
            var isMovementXSet = false;
            var isMovementYSet = false;

            /**
             * @interface MouseEvent
             * @see http://www.w3.org/TR/DOM-Level-3-Events/
             */
            var SyntheticMouseEvent = SyntheticUIEvent.extend({
              screenX: null,
              screenY: null,
              clientX: null,
              clientY: null,
              pageX: null,
              pageY: null,
              ctrlKey: null,
              shiftKey: null,
              altKey: null,
              metaKey: null,
              getModifierState: getEventModifierState,
              button: null,
              buttons: null,
              relatedTarget: function(event) {
                return (
                  event.relatedTarget ||
                  (event.fromElement === event.srcElement ? event.toElement : event.fromElement)
                );
              },
              movementX: function(event) {
                if ('movementX' in event) {
                  return event.movementX;
                }

                var screenX = previousScreenX;
                previousScreenX = event.screenX;

                if (!isMovementXSet) {
                  isMovementXSet = true;
                  return 0;
                }

                return event.type === 'mousemove' ? event.screenX - screenX : 0;
              },
              movementY: function(event) {
                if ('movementY' in event) {
                  return event.movementY;
                }

                var screenY = previousScreenY;
                previousScreenY = event.screenY;

                if (!isMovementYSet) {
                  isMovementYSet = true;
                  return 0;
                }

                return event.type === 'mousemove' ? event.screenY - screenY : 0;
              },
            });

            /**
             * @interface PointerEvent
             * @see http://www.w3.org/TR/pointerevents/
             */
            var SyntheticPointerEvent = SyntheticMouseEvent.extend({
              pointerId: null,
              width: null,
              height: null,
              pressure: null,
              tangentialPressure: null,
              tiltX: null,
              tiltY: null,
              twist: null,
              pointerType: null,
              isPrimary: null,
            });

            var eventTypes$2 = {
              mouseEnter: {
                registrationName: 'onMouseEnter',
                dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER],
              },
              mouseLeave: {
                registrationName: 'onMouseLeave',
                dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER],
              },
              pointerEnter: {
                registrationName: 'onPointerEnter',
                dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER],
              },
              pointerLeave: {
                registrationName: 'onPointerLeave',
                dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER],
              },
            };

            var EnterLeaveEventPlugin = {
              eventTypes: eventTypes$2,

              /**
               * For almost every interaction we care about, there will be both a top-level
               * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
               * we do not extract duplicate events. However, moving the mouse into the
               * browser from outside will not fire a `mouseout` event. In this case, we use
               * the `mouseover` top-level event.
               */
              extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
                var isOverEvent =
                  topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
                var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;

                if (isOverEvent && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
                  return null;
                }

                if (!isOutEvent && !isOverEvent) {
                  // Must not be a mouse or pointer in or out - ignoring.
                  return null;
                }

                var win = void 0;
                if (nativeEventTarget.window === nativeEventTarget) {
                  // `nativeEventTarget` is probably a window object.
                  win = nativeEventTarget;
                } else {
                  // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
                  var doc = nativeEventTarget.ownerDocument;
                  if (doc) {
                    win = doc.defaultView || doc.parentWindow;
                  } else {
                    win = window;
                  }
                }

                var from = void 0;
                var to = void 0;
                if (isOutEvent) {
                  from = targetInst;
                  var related = nativeEvent.relatedTarget || nativeEvent.toElement;
                  to = related ? getClosestInstanceFromNode(related) : null;
                } else {
                  // Moving to a node from outside the window.
                  from = null;
                  to = targetInst;
                }

                if (from === to) {
                  // Nothing pertains to our managed components.
                  return null;
                }

                var eventInterface = void 0,
                  leaveEventType = void 0,
                  enterEventType = void 0,
                  eventTypePrefix = void 0;

                if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
                  eventInterface = SyntheticMouseEvent;
                  leaveEventType = eventTypes$2.mouseLeave;
                  enterEventType = eventTypes$2.mouseEnter;
                  eventTypePrefix = 'mouse';
                } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
                  eventInterface = SyntheticPointerEvent;
                  leaveEventType = eventTypes$2.pointerLeave;
                  enterEventType = eventTypes$2.pointerEnter;
                  eventTypePrefix = 'pointer';
                }

                var fromNode = from == null ? win : getNodeFromInstance$1(from);
                var toNode = to == null ? win : getNodeFromInstance$1(to);

                var leave = eventInterface.getPooled(
                  leaveEventType,
                  from,
                  nativeEvent,
                  nativeEventTarget,
                );
                leave.type = eventTypePrefix + 'leave';
                leave.target = fromNode;
                leave.relatedTarget = toNode;

                var enter = eventInterface.getPooled(
                  enterEventType,
                  to,
                  nativeEvent,
                  nativeEventTarget,
                );
                enter.type = eventTypePrefix + 'enter';
                enter.target = toNode;
                enter.relatedTarget = fromNode;

                accumulateEnterLeaveDispatches(leave, enter, from, to);

                return [leave, enter];
              },
            };

            /**
             * inlined Object.is polyfill to avoid requiring consumers ship their own
             * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
             */
            function is(x, y) {
              return (
                (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare
              );
            }

            var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

            /**
             * Performs equality by iterating through keys on an object and returning false
             * when any key has values which are not strictly equal between the arguments.
             * Returns true when the values of all keys are strictly equal.
             */
            function shallowEqual(objA, objB) {
              if (is(objA, objB)) {
                return true;
              }

              if (
                typeof objA !== 'object' ||
                objA === null ||
                typeof objB !== 'object' ||
                objB === null
              ) {
                return false;
              }

              var keysA = Object.keys(objA);
              var keysB = Object.keys(objB);

              if (keysA.length !== keysB.length) {
                return false;
              }

              // Test for A's keys different from B.
              for (var i = 0; i < keysA.length; i++) {
                if (!hasOwnProperty$1.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
                  return false;
                }
              }

              return true;
            }

            var PLUGIN_EVENT_SYSTEM = 1;
            var RESPONDER_EVENT_SYSTEM = 1 << 1;
            var IS_PASSIVE = 1 << 2;
            var IS_ACTIVE = 1 << 3;
            var PASSIVE_NOT_SUPPORTED = 1 << 4;

            function createResponderListener(responder, props) {
              var eventResponderListener = {
                responder: responder,
                props: props,
              };
              {
                Object.freeze(eventResponderListener);
              }
              return eventResponderListener;
            }

            function isFiberSuspenseAndTimedOut(fiber) {
              return fiber.tag === SuspenseComponent && fiber.memoizedState !== null;
            }

            function getSuspenseFallbackChild(fiber) {
              return fiber.child.sibling.child;
            }

            function createResponderInstance(
              responder,
              responderProps,
              responderState,
              target,
              fiber,
            ) {
              return {
                fiber: fiber,
                props: responderProps,
                responder: responder,
                rootEventTypes: null,
                state: responderState,
                target: target,
              };
            }

            var DiscreteEvent = 0;
            var UserBlockingEvent = 1;
            var ContinuousEvent = 2;

            // Intentionally not named imports because Rollup would use dynamic dispatch for
            // CommonJS interop named imports.
            var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority;
            var runWithPriority$1 = Scheduler.unstable_runWithPriority;

            var listenToResponderEventTypesImpl = void 0;

            function setListenToResponderEventTypes(_listenToResponderEventTypesImpl) {
              listenToResponderEventTypesImpl = _listenToResponderEventTypesImpl;
            }

            var activeTimeouts = new Map();
            var rootEventTypesToEventResponderInstances = new Map();
            var ownershipChangeListeners = new Set();

            var globalOwner = null;

            var currentTimeStamp = 0;
            var currentTimers = new Map();
            var currentInstance = null;
            var currentEventQueue = null;
            var currentEventQueuePriority = ContinuousEvent;
            var currentTimerIDCounter = 0;
            var currentDocument = null;

            var eventResponderContext = {
              dispatchEvent: function(eventValue, eventListener, eventPriority) {
                validateResponderContext();
                validateEventValue(eventValue);
                if (eventPriority < currentEventQueuePriority) {
                  currentEventQueuePriority = eventPriority;
                }
                currentEventQueue.push(createEventQueueItem(eventValue, eventListener));
              },
              isTargetWithinResponder: function(target) {
                validateResponderContext();
                if (target != null) {
                  var fiber = getClosestInstanceFromNode(target);
                  var responderFiber = currentInstance.fiber;

                  while (fiber !== null) {
                    if (fiber === responderFiber || fiber.alternate === responderFiber) {
                      return true;
                    }
                    fiber = fiber.return;
                  }
                }
                return false;
              },
              isTargetWithinResponderScope: function(target) {
                validateResponderContext();
                var componentInstance = currentInstance;
                var responder = componentInstance.responder;

                if (target != null) {
                  var fiber = getClosestInstanceFromNode(target);
                  var responderFiber = currentInstance.fiber;

                  while (fiber !== null) {
                    if (fiber === responderFiber || fiber.alternate === responderFiber) {
                      return true;
                    }
                    if (doesFiberHaveResponder(fiber, responder)) {
                      return false;
                    }
                    fiber = fiber.return;
                  }
                }
                return false;
              },
              isTargetWithinNode: function(childTarget, parentTarget) {
                validateResponderContext();
                var childFiber = getClosestInstanceFromNode(childTarget);
                var parentFiber = getClosestInstanceFromNode(parentTarget);
                var parentAlternateFiber = parentFiber.alternate;

                var node = childFiber;
                while (node !== null) {
                  if (node === parentFiber || node === parentAlternateFiber) {
                    return true;
                  }
                  node = node.return;
                }
                return false;
              },
              addRootEventTypes: function(rootEventTypes) {
                validateResponderContext();
                var activeDocument = getActiveDocument();
                listenToResponderEventTypesImpl(rootEventTypes, activeDocument);
                for (var i = 0; i < rootEventTypes.length; i++) {
                  var rootEventType = rootEventTypes[i];
                  var eventResponderInstance = currentInstance;
                  registerRootEventType(rootEventType, eventResponderInstance);
                }
              },
              removeRootEventTypes: function(rootEventTypes) {
                validateResponderContext();
                for (var i = 0; i < rootEventTypes.length; i++) {
                  var rootEventType = rootEventTypes[i];
                  var rootEventResponders = rootEventTypesToEventResponderInstances.get(
                    rootEventType,
                  );
                  var rootEventTypesSet = currentInstance.rootEventTypes;
                  if (rootEventTypesSet !== null) {
                    rootEventTypesSet.delete(rootEventType);
                  }
                  if (rootEventResponders !== undefined) {
                    rootEventResponders.delete(currentInstance);
                  }
                }
              },
              hasOwnership: function() {
                validateResponderContext();
                return globalOwner === currentInstance;
              },
              requestGlobalOwnership: function() {
                validateResponderContext();
                if (globalOwner !== null) {
                  return false;
                }
                globalOwner = currentInstance;
                triggerOwnershipListeners();
                return true;
              },
              releaseOwnership: function() {
                validateResponderContext();
                return releaseOwnershipForEventResponderInstance(currentInstance);
              },
              setTimeout: function(func, delay) {
                validateResponderContext();
                if (currentTimers === null) {
                  currentTimers = new Map();
                }
                var timeout = currentTimers.get(delay);

                var timerId = currentTimerIDCounter++;
                if (timeout === undefined) {
                  var _timers = new Map();
                  var _id = setTimeout(function() {
                    processTimers(_timers, delay);
                  }, delay);
                  timeout = {
                    id: _id,
                    timers: _timers,
                  };
                  currentTimers.set(delay, timeout);
                }
                timeout.timers.set(timerId, {
                  instance: currentInstance,
                  func: func,
                  id: timerId,
                  timeStamp: currentTimeStamp,
                });
                activeTimeouts.set(timerId, timeout);
                return timerId;
              },
              clearTimeout: function(timerId) {
                validateResponderContext();
                var timeout = activeTimeouts.get(timerId);

                if (timeout !== undefined) {
                  var _timers2 = timeout.timers;
                  _timers2.delete(timerId);
                  if (_timers2.size === 0) {
                    clearTimeout(timeout.id);
                  }
                }
              },
              getFocusableElementsInScope: function(deep) {
                validateResponderContext();
                var focusableElements = [];
                var eventResponderInstance = currentInstance;
                var currentResponder = eventResponderInstance.responder;
                var focusScopeFiber = eventResponderInstance.fiber;
                if (deep) {
                  var deepNode = focusScopeFiber.return;
                  while (deepNode !== null) {
                    if (doesFiberHaveResponder(deepNode, currentResponder)) {
                      focusScopeFiber = deepNode;
                    }
                    deepNode = deepNode.return;
                  }
                }
                var child = focusScopeFiber.child;

                if (child !== null) {
                  collectFocusableElements(child, focusableElements);
                }
                return focusableElements;
              },

              getActiveDocument: getActiveDocument,
              objectAssign: _assign,
              getTimeStamp: function() {
                validateResponderContext();
                return currentTimeStamp;
              },
              isTargetWithinHostComponent: function(target, elementType) {
                validateResponderContext();
                var fiber = getClosestInstanceFromNode(target);

                while (fiber !== null) {
                  if (fiber.tag === HostComponent && fiber.type === elementType) {
                    return true;
                  }
                  fiber = fiber.return;
                }
                return false;
              },

              enqueueStateRestore: enqueueStateRestore,
            };

            function validateEventValue(eventValue) {
              if (typeof eventValue === 'object' && eventValue !== null) {
                var target = eventValue.target,
                  type = eventValue.type,
                  _timeStamp = eventValue.timeStamp;

                if (target == null || type == null || _timeStamp == null) {
                  throw new Error(
                    'context.dispatchEvent: "target", "timeStamp", and "type" fields on event object are required.',
                  );
                }
                var showWarning = function(name) {
                  {
                    warning$1(
                      false,
                      '%s is not available on event objects created from event responder modules (React Flare). ' +
                        'Try wrapping in a conditional, i.e. `if (event.type !== "press") { event.%s }`',
                      name,
                      name,
                    );
                  }
                };
                eventValue.preventDefault = function() {
                  {
                    showWarning('preventDefault()');
                  }
                };
                eventValue.stopPropagation = function() {
                  {
                    showWarning('stopPropagation()');
                  }
                };
                eventValue.isDefaultPrevented = function() {
                  {
                    showWarning('isDefaultPrevented()');
                  }
                };
                eventValue.isPropagationStopped = function() {
                  {
                    showWarning('isPropagationStopped()');
                  }
                };
                // $FlowFixMe: we don't need value, Flow thinks we do
                Object.defineProperty(eventValue, 'nativeEvent', {
                  get: function() {
                    {
                      showWarning('nativeEvent');
                    }
                  },
                });
              }
            }

            function collectFocusableElements(node, focusableElements) {
              if (isFiberSuspenseAndTimedOut(node)) {
                var fallbackChild = getSuspenseFallbackChild(node);
                if (fallbackChild !== null) {
                  collectFocusableElements(fallbackChild, focusableElements);
                }
              } else {
                if (isFiberHostComponentFocusable(node)) {
                  focusableElements.push(node.stateNode);
                } else {
                  var child = node.child;

                  if (child !== null) {
                    collectFocusableElements(child, focusableElements);
                  }
                }
              }
              var sibling = node.sibling;

              if (sibling !== null) {
                collectFocusableElements(sibling, focusableElements);
              }
            }

            function createEventQueueItem(value, listener) {
              return {
                value: value,
                listener: listener,
              };
            }

            function doesFiberHaveResponder(fiber, responder) {
              if (fiber.tag === HostComponent) {
                var dependencies = fiber.dependencies;
                if (dependencies !== null) {
                  var respondersMap = dependencies.responders;
                  if (respondersMap !== null && respondersMap.has(responder)) {
                    return true;
                  }
                }
              }
              return false;
            }

            function getActiveDocument() {
              return currentDocument;
            }

            function releaseOwnershipForEventResponderInstance(eventResponderInstance) {
              if (globalOwner === eventResponderInstance) {
                globalOwner = null;
                triggerOwnershipListeners();
                return true;
              }
              return false;
            }

            function isFiberHostComponentFocusable(fiber) {
              if (fiber.tag !== HostComponent) {
                return false;
              }
              var type = fiber.type,
                memoizedProps = fiber.memoizedProps;

              if (memoizedProps.tabIndex === -1 || memoizedProps.disabled) {
                return false;
              }
              if (memoizedProps.tabIndex === 0 || memoizedProps.contentEditable === true) {
                return true;
              }
              if (type === 'a' || type === 'area') {
                return !!memoizedProps.href && memoizedProps.rel !== 'ignore';
              }
              if (type === 'input') {
                return memoizedProps.type !== 'hidden' && memoizedProps.type !== 'file';
              }
              return (
                type === 'button' ||
                type === 'textarea' ||
                type === 'object' ||
                type === 'select' ||
                type === 'iframe' ||
                type === 'embed'
              );
            }

            function processTimers(timers, delay) {
              var timersArr = Array.from(timers.values());
              currentEventQueuePriority = ContinuousEvent;
              try {
                for (var i = 0; i < timersArr.length; i++) {
                  var _timersArr$i = timersArr[i],
                    _instance = _timersArr$i.instance,
                    _func = _timersArr$i.func,
                    _id2 = _timersArr$i.id,
                    _timeStamp2 = _timersArr$i.timeStamp;

                  currentInstance = _instance;
                  currentEventQueue = [];
                  currentTimeStamp = _timeStamp2 + delay;
                  try {
                    _func();
                  } finally {
                    activeTimeouts.delete(_id2);
                  }
                }
                processEventQueue();
              } finally {
                currentTimers = null;
                currentInstance = null;
                currentEventQueue = null;
                currentTimeStamp = 0;
              }
            }

            function createDOMResponderEvent(
              topLevelType,
              nativeEvent,
              nativeEventTarget,
              passive,
              passiveSupported,
            ) {
              var _ref = nativeEvent,
                pointerType = _ref.pointerType;

              var eventPointerType = '';
              var pointerId = null;

              if (pointerType !== undefined) {
                eventPointerType = pointerType;
                pointerId = nativeEvent.pointerId;
              } else if (nativeEvent.key !== undefined) {
                eventPointerType = 'keyboard';
              } else if (nativeEvent.button !== undefined) {
                eventPointerType = 'mouse';
              } else if (nativeEvent.changedTouches !== undefined) {
                eventPointerType = 'touch';
              }

              return {
                nativeEvent: nativeEvent,
                passive: passive,
                passiveSupported: passiveSupported,
                pointerId: pointerId,
                pointerType: eventPointerType,
                responderTarget: null,
                target: nativeEventTarget,
                type: topLevelType,
              };
            }

            function processEvents(eventQueue) {
              for (var i = 0, length = eventQueue.length; i < length; i++) {
                var _eventQueue$i = eventQueue[i],
                  _value = _eventQueue$i.value,
                  _listener = _eventQueue$i.listener;

                var type = typeof _value === 'object' && _value !== null ? _value.type : '';
                invokeGuardedCallbackAndCatchFirstError(type, _listener, undefined, _value);
              }
            }

            function processEventQueue() {
              var eventQueue = currentEventQueue;
              if (eventQueue.length === 0) {
                return;
              }
              switch (currentEventQueuePriority) {
                case DiscreteEvent: {
                  flushDiscreteUpdatesIfNeeded(currentTimeStamp);
                  discreteUpdates(function() {
                    batchedEventUpdates(processEvents, eventQueue);
                  });
                  break;
                }
                case UserBlockingEvent: {
                  if (enableUserBlockingEvents) {
                    runWithPriority$1(
                      UserBlockingPriority$1,
                      batchedEventUpdates.bind(null, processEvents, eventQueue),
                    );
                  } else {
                    batchedEventUpdates(processEvents, eventQueue);
                  }
                  break;
                }
                case ContinuousEvent: {
                  batchedEventUpdates(processEvents, eventQueue);
                  break;
                }
              }
            }

            function responderEventTypesContainType(eventTypes, type) {
              for (var i = 0, len = eventTypes.length; i < len; i++) {
                if (eventTypes[i] === type) {
                  return true;
                }
              }
              return false;
            }

            function validateResponderTargetEventTypes(eventType, responder) {
              var targetEventTypes = responder.targetEventTypes;
              // Validate the target event type exists on the responder

              if (targetEventTypes !== null) {
                return responderEventTypesContainType(targetEventTypes, eventType);
              }
              return false;
            }

            function validateOwnership(responderInstance) {
              return globalOwner === null || globalOwner === responderInstance;
            }

            function traverseAndHandleEventResponderInstances(
              topLevelType,
              targetFiber,
              nativeEvent,
              nativeEventTarget,
              eventSystemFlags,
            ) {
              var isPassiveEvent = (eventSystemFlags & IS_PASSIVE) !== 0;
              var isPassiveSupported = (eventSystemFlags & PASSIVE_NOT_SUPPORTED) === 0;
              var isPassive = isPassiveEvent || !isPassiveSupported;
              var eventType = isPassive ? topLevelType : topLevelType + '_active';

              // Trigger event responders in this order:
              // - Bubble target responder phase
              // - Root responder phase

              var visitedResponders = new Set();
              var responderEvent = createDOMResponderEvent(
                topLevelType,
                nativeEvent,
                nativeEventTarget,
                isPassiveEvent,
                isPassiveSupported,
              );
              var node = targetFiber;
              while (node !== null) {
                var _node = node,
                  dependencies = _node.dependencies,
                  tag = _node.tag;

                if (tag === HostComponent && dependencies !== null) {
                  var respondersMap = dependencies.responders;
                  if (respondersMap !== null) {
                    var responderInstances = Array.from(respondersMap.values());
                    for (var i = 0, length = responderInstances.length; i < length; i++) {
                      var responderInstance = responderInstances[i];

                      if (validateOwnership(responderInstance)) {
                        var props = responderInstance.props,
                          responder = responderInstance.responder,
                          state = responderInstance.state,
                          target = responderInstance.target;

                        if (
                          !visitedResponders.has(responder) &&
                          validateResponderTargetEventTypes(eventType, responder)
                        ) {
                          visitedResponders.add(responder);
                          var onEvent = responder.onEvent;
                          if (onEvent !== null) {
                            currentInstance = responderInstance;
                            responderEvent.responderTarget = target;
                            onEvent(responderEvent, eventResponderContext, props, state);
                          }
                        }
                      }
                    }
                  }
                }
                node = node.return;
              }
              // Root phase
              var rootEventResponderInstances = rootEventTypesToEventResponderInstances.get(
                eventType,
              );
              if (rootEventResponderInstances !== undefined) {
                var _responderInstances = Array.from(rootEventResponderInstances);

                for (var _i = 0; _i < _responderInstances.length; _i++) {
                  var _responderInstance = _responderInstances[_i];
                  if (!validateOwnership(_responderInstance)) {
                    continue;
                  }
                  var _props = _responderInstance.props,
                    _responder = _responderInstance.responder,
                    _state = _responderInstance.state,
                    _target = _responderInstance.target;

                  var onRootEvent = _responder.onRootEvent;
                  if (onRootEvent !== null) {
                    currentInstance = _responderInstance;
                    responderEvent.responderTarget = _target;
                    onRootEvent(responderEvent, eventResponderContext, _props, _state);
                  }
                }
              }
            }

            function triggerOwnershipListeners() {
              var listeningInstances = Array.from(ownershipChangeListeners);
              var previousInstance = currentInstance;
              var previousEventQueuePriority = currentEventQueuePriority;
              var previousEventQueue = currentEventQueue;
              try {
                for (var i = 0; i < listeningInstances.length; i++) {
                  var _instance2 = listeningInstances[i];
                  var props = _instance2.props,
                    responder = _instance2.responder,
                    state = _instance2.state;

                  currentInstance = _instance2;
                  currentEventQueuePriority = ContinuousEvent;
                  currentEventQueue = [];
                  var onOwnershipChange = responder.onOwnershipChange;
                  if (onOwnershipChange !== null) {
                    onOwnershipChange(eventResponderContext, props, state);
                  }
                }
                processEventQueue();
              } finally {
                currentInstance = previousInstance;
                currentEventQueue = previousEventQueue;
                currentEventQueuePriority = previousEventQueuePriority;
              }
            }

            function mountEventResponder(responder, responderInstance, props, state) {
              if (responder.onOwnershipChange !== null) {
                ownershipChangeListeners.add(responderInstance);
              }
              var onMount = responder.onMount;
              if (onMount !== null) {
                currentEventQueuePriority = ContinuousEvent;
                currentInstance = responderInstance;
                currentEventQueue = [];
                try {
                  onMount(eventResponderContext, props, state);
                  processEventQueue();
                } finally {
                  currentEventQueue = null;
                  currentInstance = null;
                  currentTimers = null;
                }
              }
            }

            function unmountEventResponder(responderInstance) {
              var responder = responderInstance.responder;
              var onUnmount = responder.onUnmount;
              if (onUnmount !== null) {
                var props = responderInstance.props,
                  state = responderInstance.state;

                currentEventQueue = [];
                currentEventQueuePriority = ContinuousEvent;
                currentInstance = responderInstance;
                try {
                  onUnmount(eventResponderContext, props, state);
                  processEventQueue();
                } finally {
                  currentEventQueue = null;
                  currentInstance = null;
                  currentTimers = null;
                }
              }
              releaseOwnershipForEventResponderInstance(responderInstance);
              if (responder.onOwnershipChange !== null) {
                ownershipChangeListeners.delete(responderInstance);
              }
              var rootEventTypesSet = responderInstance.rootEventTypes;
              if (rootEventTypesSet !== null) {
                var rootEventTypes = Array.from(rootEventTypesSet);

                for (var i = 0; i < rootEventTypes.length; i++) {
                  var topLevelEventType = rootEventTypes[i];
                  var rootEventResponderInstances = rootEventTypesToEventResponderInstances.get(
                    topLevelEventType,
                  );
                  if (rootEventResponderInstances !== undefined) {
                    rootEventResponderInstances.delete(responderInstance);
                  }
                }
              }
            }

            function validateResponderContext() {
              (function() {
                if (!(currentInstance !== null)) {
                  {
                    throw ReactError(
                      Error(
                        'An event responder context was used outside of an event cycle. Use context.setTimeout() to use asynchronous responder context outside of event cycle .',
                      ),
                    );
                  }
                }
              })();
            }

            function dispatchEventForResponderEventSystem(
              topLevelType,
              targetFiber,
              nativeEvent,
              nativeEventTarget,
              eventSystemFlags,
            ) {
              if (enableFlareAPI) {
                var previousEventQueue = currentEventQueue;
                var previousInstance = currentInstance;
                var previousTimers = currentTimers;
                var previousTimeStamp = currentTimeStamp;
                var previousDocument = currentDocument;
                var previousEventQueuePriority = currentEventQueuePriority;
                currentTimers = null;
                currentEventQueue = [];
                currentEventQueuePriority = ContinuousEvent;
                // nodeType 9 is DOCUMENT_NODE
                currentDocument =
                  nativeEventTarget.nodeType === 9
                    ? nativeEventTarget
                    : nativeEventTarget.ownerDocument;
                // We might want to control timeStamp another way here
                currentTimeStamp = nativeEvent.timeStamp;
                try {
                  traverseAndHandleEventResponderInstances(
                    topLevelType,
                    targetFiber,
                    nativeEvent,
                    nativeEventTarget,
                    eventSystemFlags,
                  );
                  processEventQueue();
                } finally {
                  currentTimers = previousTimers;
                  currentInstance = previousInstance;
                  currentEventQueue = previousEventQueue;
                  currentTimeStamp = previousTimeStamp;
                  currentDocument = previousDocument;
                  currentEventQueuePriority = previousEventQueuePriority;
                }
              }
            }

            function addRootEventTypesForResponderInstance(responderInstance, rootEventTypes) {
              for (var i = 0; i < rootEventTypes.length; i++) {
                var rootEventType = rootEventTypes[i];
                registerRootEventType(rootEventType, responderInstance);
              }
            }

            function registerRootEventType(rootEventType, eventResponderInstance) {
              var rootEventResponderInstances = rootEventTypesToEventResponderInstances.get(
                rootEventType,
              );
              if (rootEventResponderInstances === undefined) {
                rootEventResponderInstances = new Set();
                rootEventTypesToEventResponderInstances.set(
                  rootEventType,
                  rootEventResponderInstances,
                );
              }
              var rootEventTypesSet = eventResponderInstance.rootEventTypes;
              if (rootEventTypesSet === null) {
                rootEventTypesSet = eventResponderInstance.rootEventTypes = new Set();
              }
              (function() {
                if (!!rootEventTypesSet.has(rootEventType)) {
                  {
                    throw ReactError(
                      Error(
                        'addRootEventTypes() found a duplicate root event type of "' +
                          rootEventType +
                          '". This might be because the event type exists in the event responder "rootEventTypes" array or because of a previous addRootEventTypes() using this root event type.',
                      ),
                    );
                  }
                }
              })();
              rootEventTypesSet.add(rootEventType);
              rootEventResponderInstances.add(eventResponderInstance);
            }

            /**
             * `ReactInstanceMap` maintains a mapping from a public facing stateful
             * instance (key) and the internal representation (value). This allows public
             * methods to accept the user facing instance as an argument and map them back
             * to internal methods.
             *
             * Note that this module is currently shared and assumed to be stateless.
             * If this becomes an actual Map, that will break.
             */

            /**
             * This API should be called `delete` but we'd have to make sure to always
             * transform these to strings for IE support. When this transform is fully
             * supported we can rename it.
             */

            function get(key) {
              return key._reactInternalFiber;
            }

            function has(key) {
              return key._reactInternalFiber !== undefined;
            }

            function set(key, value) {
              key._reactInternalFiber = value;
            }

            // Don't change these two values. They're used by React Dev Tools.
            var NoEffect = /*              */ 0;
            var PerformedWork = /*         */ 1;

            // You can change the rest (and add more).
            var Placement = /*             */ 2;
            var Update = /*                */ 4;
            var PlacementAndUpdate = /*    */ 6;
            var Deletion = /*              */ 8;
            var ContentReset = /*          */ 16;
            var Callback = /*              */ 32;
            var DidCapture = /*            */ 64;
            var Ref = /*                   */ 128;
            var Snapshot = /*              */ 256;
            var Passive = /*               */ 512;

            // Passive & Update & Callback & Ref & Snapshot
            var LifecycleEffectMask = /*   */ 932;

            // Union of all host effects
            var HostEffectMask = /*        */ 1023;

            var Incomplete = /*            */ 1024;
            var ShouldCapture = /*         */ 2048;

            var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;

            var MOUNTING = 1;
            var MOUNTED = 2;
            var UNMOUNTED = 3;

            function isFiberMountedImpl(fiber) {
              var node = fiber;
              if (!fiber.alternate) {
                // If there is no alternate, this might be a new tree that isn't inserted
                // yet. If it is, then it will have a pending insertion effect on it.
                if ((node.effectTag & Placement) !== NoEffect) {
                  return MOUNTING;
                }
                while (node.return) {
                  node = node.return;
                  if ((node.effectTag & Placement) !== NoEffect) {
                    return MOUNTING;
                  }
                }
              } else {
                while (node.return) {
                  node = node.return;
                }
              }
              if (node.tag === HostRoot) {
                // TODO: Check if this was a nested HostRoot when used with
                // renderContainerIntoSubtree.
                return MOUNTED;
              }
              // If we didn't hit the root, that means that we're in an disconnected tree
              // that has been unmounted.
              return UNMOUNTED;
            }

            function isFiberMounted(fiber) {
              return isFiberMountedImpl(fiber) === MOUNTED;
            }

            function isMounted(component) {
              {
                var owner = ReactCurrentOwner$1.current;
                if (owner !== null && owner.tag === ClassComponent) {
                  var ownerFiber = owner;
                  var instance = ownerFiber.stateNode;
                  !instance._warnedAboutRefsInRender
                    ? warningWithoutStack$1(
                        false,
                        '%s is accessing isMounted inside its render() function. ' +
                          'render() should be a pure function of props and state. It should ' +
                          'never access something that requires stale data from the previous ' +
                          'render, such as refs. Move this logic to componentDidMount and ' +
                          'componentDidUpdate instead.',
                        getComponentName(ownerFiber.type) || 'A component',
                      )
                    : void 0;
                  instance._warnedAboutRefsInRender = true;
                }
              }

              var fiber = get(component);
              if (!fiber) {
                return false;
              }
              return isFiberMountedImpl(fiber) === MOUNTED;
            }

            function assertIsMounted(fiber) {
              (function() {
                if (!(isFiberMountedImpl(fiber) === MOUNTED)) {
                  {
                    throw ReactError(Error('Unable to find node on an unmounted component.'));
                  }
                }
              })();
            }

            function findCurrentFiberUsingSlowPath(fiber) {
              var alternate = fiber.alternate;
              if (!alternate) {
                // If there is no alternate, then we only need to check if it is mounted.
                var state = isFiberMountedImpl(fiber);
                (function() {
                  if (!(state !== UNMOUNTED)) {
                    {
                      throw ReactError(Error('Unable to find node on an unmounted component.'));
                    }
                  }
                })();
                if (state === MOUNTING) {
                  return null;
                }
                return fiber;
              }
              // If we have two possible branches, we'll walk backwards up to the root
              // to see what path the root points to. On the way we may hit one of the
              // special cases and we'll deal with them.
              var a = fiber;
              var b = alternate;
              while (true) {
                var parentA = a.return;
                if (parentA === null) {
                  // We're at the root.
                  break;
                }
                var parentB = parentA.alternate;
                if (parentB === null) {
                  // There is no alternate. This is an unusual case. Currently, it only
                  // happens when a Suspense component is hidden. An extra fragment fiber
                  // is inserted in between the Suspense fiber and its children. Skip
                  // over this extra fragment fiber and proceed to the next parent.
                  var nextParent = parentA.return;
                  if (nextParent !== null) {
                    a = b = nextParent;
                    continue;
                  }
                  // If there's no parent, we're at the root.
                  break;
                }

                // If both copies of the parent fiber point to the same child, we can
                // assume that the child is current. This happens when we bailout on low
                // priority: the bailed out fiber's child reuses the current child.
                if (parentA.child === parentB.child) {
                  var child = parentA.child;
                  while (child) {
                    if (child === a) {
                      // We've determined that A is the current branch.
                      assertIsMounted(parentA);
                      return fiber;
                    }
                    if (child === b) {
                      // We've determined that B is the current branch.
                      assertIsMounted(parentA);
                      return alternate;
                    }
                    child = child.sibling;
                  }
                  // We should never have an alternate for any mounting node. So the only
                  // way this could possibly happen is if this was unmounted, if at all.
                  (function() {
                    {
                      {
                        throw ReactError(Error('Unable to find node on an unmounted component.'));
                      }
                    }
                  })();
                }

                if (a.return !== b.return) {
                  // The return pointer of A and the return pointer of B point to different
                  // fibers. We assume that return pointers never criss-cross, so A must
                  // belong to the child set of A.return, and B must belong to the child
                  // set of B.return.
                  a = parentA;
                  b = parentB;
                } else {
                  // The return pointers point to the same fiber. We'll have to use the
                  // default, slow path: scan the child sets of each parent alternate to see
                  // which child belongs to which set.
                  //
                  // Search parent A's child set
                  var didFindChild = false;
                  var _child = parentA.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentA;
                      b = parentB;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentA;
                      a = parentB;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    // Search parent B's child set
                    _child = parentB.child;
                    while (_child) {
                      if (_child === a) {
                        didFindChild = true;
                        a = parentB;
                        b = parentA;
                        break;
                      }
                      if (_child === b) {
                        didFindChild = true;
                        b = parentB;
                        a = parentA;
                        break;
                      }
                      _child = _child.sibling;
                    }
                    (function() {
                      if (!didFindChild) {
                        {
                          throw ReactError(
                            Error(
                              'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.',
                            ),
                          );
                        }
                      }
                    })();
                  }
                }

                (function() {
                  if (!(a.alternate === b)) {
                    {
                      throw ReactError(
                        Error(
                          "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.",
                        ),
                      );
                    }
                  }
                })();
              }
              // If the root is not a host container, we're in a disconnected tree. I.e.
              // unmounted.
              (function() {
                if (!(a.tag === HostRoot)) {
                  {
                    throw ReactError(Error('Unable to find node on an unmounted component.'));
                  }
                }
              })();
              if (a.stateNode.current === a) {
                // We've determined that A is the current branch.
                return fiber;
              }
              // Otherwise B has to be current branch.
              return alternate;
            }

            function findCurrentHostFiber(parent) {
              var currentParent = findCurrentFiberUsingSlowPath(parent);
              if (!currentParent) {
                return null;
              }

              // Next we'll drill down this component to find the first HostComponent/Text.
              var node = currentParent;
              while (true) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  return node;
                } else if (node.child) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === currentParent) {
                  return null;
                }
                while (!node.sibling) {
                  if (!node.return || node.return === currentParent) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
              // Flow needs the return null here, but ESLint complains about it.
              // eslint-disable-next-line no-unreachable
              return null;
            }

            function findCurrentHostFiberWithNoPortals(parent) {
              var currentParent = findCurrentFiberUsingSlowPath(parent);
              if (!currentParent) {
                return null;
              }

              // Next we'll drill down this component to find the first HostComponent/Text.
              var node = currentParent;
              while (true) {
                if (
                  node.tag === HostComponent ||
                  node.tag === HostText ||
                  node.tag === FundamentalComponent
                ) {
                  return node;
                } else if (node.child && node.tag !== HostPortal) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === currentParent) {
                  return null;
                }
                while (!node.sibling) {
                  if (!node.return || node.return === currentParent) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
              // Flow needs the return null here, but ESLint complains about it.
              // eslint-disable-next-line no-unreachable
              return null;
            }

            function addEventBubbleListener(element, eventType, listener) {
              element.addEventListener(eventType, listener, false);
            }

            function addEventCaptureListener(element, eventType, listener) {
              element.addEventListener(eventType, listener, true);
            }

            function addEventCaptureListenerWithPassiveFlag(element, eventType, listener, passive) {
              element.addEventListener(eventType, listener, {
                capture: true,
                passive: passive,
              });
            }

            /**
             * @interface Event
             * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
             * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
             */
            var SyntheticAnimationEvent = SyntheticEvent.extend({
              animationName: null,
              elapsedTime: null,
              pseudoElement: null,
            });

            /**
             * @interface Event
             * @see http://www.w3.org/TR/clipboard-apis/
             */
            var SyntheticClipboardEvent = SyntheticEvent.extend({
              clipboardData: function(event) {
                return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
              },
            });

            /**
             * @interface FocusEvent
             * @see http://www.w3.org/TR/DOM-Level-3-Events/
             */
            var SyntheticFocusEvent = SyntheticUIEvent.extend({
              relatedTarget: null,
            });

            /**
             * `charCode` represents the actual "character code" and is safe to use with
             * `String.fromCharCode`. As such, only keys that correspond to printable
             * characters produce a valid `charCode`, the only exception to this is Enter.
             * The Tab-key is considered non-printable and does not have a `charCode`,
             * presumably because it does not produce a tab-character in browsers.
             *
             * @param {object} nativeEvent Native browser event.
             * @return {number} Normalized `charCode` property.
             */
            function getEventCharCode(nativeEvent) {
              var charCode = void 0;
              var keyCode = nativeEvent.keyCode;

              if ('charCode' in nativeEvent) {
                charCode = nativeEvent.charCode;

                // FF does not set `charCode` for the Enter-key, check against `keyCode`.
                if (charCode === 0 && keyCode === 13) {
                  charCode = 13;
                }
              } else {
                // IE8 does not implement `charCode`, but `keyCode` has the correct value.
                charCode = keyCode;
              }

              // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
              // report Enter as charCode 10 when ctrl is pressed.
              if (charCode === 10) {
                charCode = 13;
              }

              // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
              // Must not discard the (non-)printable Enter-key.
              if (charCode >= 32 || charCode === 13) {
                return charCode;
              }

              return 0;
            }

            /**
             * Normalization of deprecated HTML5 `key` values
             * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
             */
            var normalizeKey = {
              Esc: 'Escape',
              Spacebar: ' ',
              Left: 'ArrowLeft',
              Up: 'ArrowUp',
              Right: 'ArrowRight',
              Down: 'ArrowDown',
              Del: 'Delete',
              Win: 'OS',
              Menu: 'ContextMenu',
              Apps: 'ContextMenu',
              Scroll: 'ScrollLock',
              MozPrintableKey: 'Unidentified',
            };

            /**
             * Translation from legacy `keyCode` to HTML5 `key`
             * Only special keys supported, all others depend on keyboard layout or browser
             * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
             */
            var translateToKey = {
              '8': 'Backspace',
              '9': 'Tab',
              '12': 'Clear',
              '13': 'Enter',
              '16': 'Shift',
              '17': 'Control',
              '18': 'Alt',
              '19': 'Pause',
              '20': 'CapsLock',
              '27': 'Escape',
              '32': ' ',
              '33': 'PageUp',
              '34': 'PageDown',
              '35': 'End',
              '36': 'Home',
              '37': 'ArrowLeft',
              '38': 'ArrowUp',
              '39': 'ArrowRight',
              '40': 'ArrowDown',
              '45': 'Insert',
              '46': 'Delete',
              '112': 'F1',
              '113': 'F2',
              '114': 'F3',
              '115': 'F4',
              '116': 'F5',
              '117': 'F6',
              '118': 'F7',
              '119': 'F8',
              '120': 'F9',
              '121': 'F10',
              '122': 'F11',
              '123': 'F12',
              '144': 'NumLock',
              '145': 'ScrollLock',
              '224': 'Meta',
            };

            /**
             * @param {object} nativeEvent Native browser event.
             * @return {string} Normalized `key` property.
             */
            function getEventKey(nativeEvent) {
              if (nativeEvent.key) {
                // Normalize inconsistent values reported by browsers due to
                // implementations of a working draft specification.

                // FireFox implements `key` but returns `MozPrintableKey` for all
                // printable characters (normalized to `Unidentified`), ignore it.
                var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
                if (key !== 'Unidentified') {
                  return key;
                }
              }

              // Browser does not implement `key`, polyfill as much of it as we can.
              if (nativeEvent.type === 'keypress') {
                var charCode = getEventCharCode(nativeEvent);

                // The enter-key is technically both printable and non-printable and can
                // thus be captured by `keypress`, no other non-printable key should.
                return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
              }
              if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
                // While user keyboard layout determines the actual meaning of each
                // `keyCode` value, almost all function keys have a universal value.
                return translateToKey[nativeEvent.keyCode] || 'Unidentified';
              }
              return '';
            }

            /**
             * @interface KeyboardEvent
             * @see http://www.w3.org/TR/DOM-Level-3-Events/
             */
            var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
              key: getEventKey,
              location: null,
              ctrlKey: null,
              shiftKey: null,
              altKey: null,
              metaKey: null,
              repeat: null,
              locale: null,
              getModifierState: getEventModifierState,
              // Legacy Interface
              charCode: function(event) {
                // `charCode` is the result of a KeyPress event and represents the value of
                // the actual printable character.

                // KeyPress is deprecated, but its replacement is not yet final and not
                // implemented in any major browser. Only KeyPress has charCode.
                if (event.type === 'keypress') {
                  return getEventCharCode(event);
                }
                return 0;
              },
              keyCode: function(event) {
                // `keyCode` is the result of a KeyDown/Up event and represents the value of
                // physical keyboard key.

                // The actual meaning of the value depends on the users' keyboard layout
                // which cannot be detected. Assuming that it is a US keyboard layout
                // provides a surprisingly accurate mapping for US and European users.
                // Due to this, it is left to the user to implement at this time.
                if (event.type === 'keydown' || event.type === 'keyup') {
                  return event.keyCode;
                }
                return 0;
              },
              which: function(event) {
                // `which` is an alias for either `keyCode` or `charCode` depending on the
                // type of the event.
                if (event.type === 'keypress') {
                  return getEventCharCode(event);
                }
                if (event.type === 'keydown' || event.type === 'keyup') {
                  return event.keyCode;
                }
                return 0;
              },
            });

            /**
             * @interface DragEvent
             * @see http://www.w3.org/TR/DOM-Level-3-Events/
             */
            var SyntheticDragEvent = SyntheticMouseEvent.extend({
              dataTransfer: null,
            });

            /**
             * @interface TouchEvent
             * @see http://www.w3.org/TR/touch-events/
             */
            var SyntheticTouchEvent = SyntheticUIEvent.extend({
              touches: null,
              targetTouches: null,
              changedTouches: null,
              altKey: null,
              metaKey: null,
              ctrlKey: null,
              shiftKey: null,
              getModifierState: getEventModifierState,
            });

            /**
             * @interface Event
             * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
             * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
             */
            var SyntheticTransitionEvent = SyntheticEvent.extend({
              propertyName: null,
              elapsedTime: null,
              pseudoElement: null,
            });

            /**
             * @interface WheelEvent
             * @see http://www.w3.org/TR/DOM-Level-3-Events/
             */
            var SyntheticWheelEvent = SyntheticMouseEvent.extend({
              deltaX: function(event) {
                return 'deltaX' in event
                  ? event.deltaX // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                  : 'wheelDeltaX' in event
                  ? -event.wheelDeltaX
                  : 0;
              },
              deltaY: function(event) {
                return 'deltaY' in event
                  ? event.deltaY // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                  : 'wheelDeltaY' in event
                  ? -event.wheelDeltaY // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  : 'wheelDelta' in event
                  ? -event.wheelDelta
                  : 0;
              },

              deltaZ: null,

              // Browsers without "deltaMode" is reporting in raw wheel delta where one
              // notch on the scroll is always +/- 120, roughly equivalent to pixels.
              // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
              // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
              deltaMode: null,
            });

            /**
             * Turns
             * ['abort', ...]
             * into
             * eventTypes = {
             *   'abort': {
             *     phasedRegistrationNames: {
             *       bubbled: 'onAbort',
             *       captured: 'onAbortCapture',
             *     },
             *     dependencies: [TOP_ABORT],
             *   },
             *   ...
             * };
             * topLevelEventsToDispatchConfig = new Map([
             *   [TOP_ABORT, { sameConfig }],
             * ]);
             */

            var eventTuples = [
              // Discrete events
              [TOP_BLUR, 'blur', DiscreteEvent],
              [TOP_CANCEL, 'cancel', DiscreteEvent],
              [TOP_CLICK, 'click', DiscreteEvent],
              [TOP_CLOSE, 'close', DiscreteEvent],
              [TOP_CONTEXT_MENU, 'contextMenu', DiscreteEvent],
              [TOP_COPY, 'copy', DiscreteEvent],
              [TOP_CUT, 'cut', DiscreteEvent],
              [TOP_AUX_CLICK, 'auxClick', DiscreteEvent],
              [TOP_DOUBLE_CLICK, 'doubleClick', DiscreteEvent],
              [TOP_DRAG_END, 'dragEnd', DiscreteEvent],
              [TOP_DRAG_START, 'dragStart', DiscreteEvent],
              [TOP_DROP, 'drop', DiscreteEvent],
              [TOP_FOCUS, 'focus', DiscreteEvent],
              [TOP_INPUT, 'input', DiscreteEvent],
              [TOP_INVALID, 'invalid', DiscreteEvent],
              [TOP_KEY_DOWN, 'keyDown', DiscreteEvent],
              [TOP_KEY_PRESS, 'keyPress', DiscreteEvent],
              [TOP_KEY_UP, 'keyUp', DiscreteEvent],
              [TOP_MOUSE_DOWN, 'mouseDown', DiscreteEvent],
              [TOP_MOUSE_UP, 'mouseUp', DiscreteEvent],
              [TOP_PASTE, 'paste', DiscreteEvent],
              [TOP_PAUSE, 'pause', DiscreteEvent],
              [TOP_PLAY, 'play', DiscreteEvent],
              [TOP_POINTER_CANCEL, 'pointerCancel', DiscreteEvent],
              [TOP_POINTER_DOWN, 'pointerDown', DiscreteEvent],
              [TOP_POINTER_UP, 'pointerUp', DiscreteEvent],
              [TOP_RATE_CHANGE, 'rateChange', DiscreteEvent],
              [TOP_RESET, 'reset', DiscreteEvent],
              [TOP_SEEKED, 'seeked', DiscreteEvent],
              [TOP_SUBMIT, 'submit', DiscreteEvent],
              [TOP_TOUCH_CANCEL, 'touchCancel', DiscreteEvent],
              [TOP_TOUCH_END, 'touchEnd', DiscreteEvent],
              [TOP_TOUCH_START, 'touchStart', DiscreteEvent],
              [TOP_VOLUME_CHANGE, 'volumeChange', DiscreteEvent],

              // User-blocking events
              [TOP_DRAG, 'drag', UserBlockingEvent],
              [TOP_DRAG_ENTER, 'dragEnter', UserBlockingEvent],
              [TOP_DRAG_EXIT, 'dragExit', UserBlockingEvent],
              [TOP_DRAG_LEAVE, 'dragLeave', UserBlockingEvent],
              [TOP_DRAG_OVER, 'dragOver', UserBlockingEvent],
              [TOP_MOUSE_MOVE, 'mouseMove', UserBlockingEvent],
              [TOP_MOUSE_OUT, 'mouseOut', UserBlockingEvent],
              [TOP_MOUSE_OVER, 'mouseOver', UserBlockingEvent],
              [TOP_POINTER_MOVE, 'pointerMove', UserBlockingEvent],
              [TOP_POINTER_OUT, 'pointerOut', UserBlockingEvent],
              [TOP_POINTER_OVER, 'pointerOver', UserBlockingEvent],
              [TOP_SCROLL, 'scroll', UserBlockingEvent],
              [TOP_TOGGLE, 'toggle', UserBlockingEvent],
              [TOP_TOUCH_MOVE, 'touchMove', UserBlockingEvent],
              [TOP_WHEEL, 'wheel', UserBlockingEvent],

              // Continuous events
              [TOP_ABORT, 'abort', ContinuousEvent],
              [TOP_ANIMATION_END, 'animationEnd', ContinuousEvent],
              [TOP_ANIMATION_ITERATION, 'animationIteration', ContinuousEvent],
              [TOP_ANIMATION_START, 'animationStart', ContinuousEvent],
              [TOP_CAN_PLAY, 'canPlay', ContinuousEvent],
              [TOP_CAN_PLAY_THROUGH, 'canPlayThrough', ContinuousEvent],
              [TOP_DURATION_CHANGE, 'durationChange', ContinuousEvent],
              [TOP_EMPTIED, 'emptied', ContinuousEvent],
              [TOP_ENCRYPTED, 'encrypted', ContinuousEvent],
              [TOP_ENDED, 'ended', ContinuousEvent],
              [TOP_ERROR, 'error', ContinuousEvent],
              [TOP_GOT_POINTER_CAPTURE, 'gotPointerCapture', ContinuousEvent],
              [TOP_LOAD, 'load', ContinuousEvent],
              [TOP_LOADED_DATA, 'loadedData', ContinuousEvent],
              [TOP_LOADED_METADATA, 'loadedMetadata', ContinuousEvent],
              [TOP_LOAD_START, 'loadStart', ContinuousEvent],
              [TOP_LOST_POINTER_CAPTURE, 'lostPointerCapture', ContinuousEvent],
              [TOP_PLAYING, 'playing', ContinuousEvent],
              [TOP_PROGRESS, 'progress', ContinuousEvent],
              [TOP_SEEKING, 'seeking', ContinuousEvent],
              [TOP_STALLED, 'stalled', ContinuousEvent],
              [TOP_SUSPEND, 'suspend', ContinuousEvent],
              [TOP_TIME_UPDATE, 'timeUpdate', ContinuousEvent],
              [TOP_TRANSITION_END, 'transitionEnd', ContinuousEvent],
              [TOP_WAITING, 'waiting', ContinuousEvent],
            ];

            var eventTypes$4 = {};
            var topLevelEventsToDispatchConfig = {};

            for (var i = 0; i < eventTuples.length; i++) {
              var eventTuple = eventTuples[i];
              var topEvent = eventTuple[0];
              var event = eventTuple[1];
              var eventPriority = eventTuple[2];

              var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
              var onEvent = 'on' + capitalizedEvent;

              var config = {
                phasedRegistrationNames: {
                  bubbled: onEvent,
                  captured: onEvent + 'Capture',
                },
                dependencies: [topEvent],
                eventPriority: eventPriority,
              };
              eventTypes$4[event] = config;
              topLevelEventsToDispatchConfig[topEvent] = config;
            }

            // Only used in DEV for exhaustiveness validation.
            var knownHTMLTopLevelTypes = [
              TOP_ABORT,
              TOP_CANCEL,
              TOP_CAN_PLAY,
              TOP_CAN_PLAY_THROUGH,
              TOP_CLOSE,
              TOP_DURATION_CHANGE,
              TOP_EMPTIED,
              TOP_ENCRYPTED,
              TOP_ENDED,
              TOP_ERROR,
              TOP_INPUT,
              TOP_INVALID,
              TOP_LOAD,
              TOP_LOADED_DATA,
              TOP_LOADED_METADATA,
              TOP_LOAD_START,
              TOP_PAUSE,
              TOP_PLAY,
              TOP_PLAYING,
              TOP_PROGRESS,
              TOP_RATE_CHANGE,
              TOP_RESET,
              TOP_SEEKED,
              TOP_SEEKING,
              TOP_STALLED,
              TOP_SUBMIT,
              TOP_SUSPEND,
              TOP_TIME_UPDATE,
              TOP_TOGGLE,
              TOP_VOLUME_CHANGE,
              TOP_WAITING,
            ];

            var SimpleEventPlugin = {
              eventTypes: eventTypes$4,

              getEventPriority: function(topLevelType) {
                var config = topLevelEventsToDispatchConfig[topLevelType];
                return config !== undefined ? config.eventPriority : ContinuousEvent;
              },

              extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
                var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
                if (!dispatchConfig) {
                  return null;
                }
                var EventConstructor = void 0;
                switch (topLevelType) {
                  case TOP_KEY_PRESS:
                    // Firefox creates a keypress event for function keys too. This removes
                    // the unwanted keypress events. Enter is however both printable and
                    // non-printable. One would expect Tab to be as well (but it isn't).
                    if (getEventCharCode(nativeEvent) === 0) {
                      return null;
                    }
                  /* falls through */
                  case TOP_KEY_DOWN:
                  case TOP_KEY_UP:
                    EventConstructor = SyntheticKeyboardEvent;
                    break;
                  case TOP_BLUR:
                  case TOP_FOCUS:
                    EventConstructor = SyntheticFocusEvent;
                    break;
                  case TOP_CLICK:
                    // Firefox creates a click event on right mouse clicks. This removes the
                    // unwanted click events.
                    if (nativeEvent.button === 2) {
                      return null;
                    }
                  /* falls through */
                  case TOP_AUX_CLICK:
                  case TOP_DOUBLE_CLICK:
                  case TOP_MOUSE_DOWN:
                  case TOP_MOUSE_MOVE:
                  case TOP_MOUSE_UP:
                  // TODO: Disabled elements should not respond to mouse events
                  /* falls through */
                  case TOP_MOUSE_OUT:
                  case TOP_MOUSE_OVER:
                  case TOP_CONTEXT_MENU:
                    EventConstructor = SyntheticMouseEvent;
                    break;
                  case TOP_DRAG:
                  case TOP_DRAG_END:
                  case TOP_DRAG_ENTER:
                  case TOP_DRAG_EXIT:
                  case TOP_DRAG_LEAVE:
                  case TOP_DRAG_OVER:
                  case TOP_DRAG_START:
                  case TOP_DROP:
                    EventConstructor = SyntheticDragEvent;
                    break;
                  case TOP_TOUCH_CANCEL:
                  case TOP_TOUCH_END:
                  case TOP_TOUCH_MOVE:
                  case TOP_TOUCH_START:
                    EventConstructor = SyntheticTouchEvent;
                    break;
                  case TOP_ANIMATION_END:
                  case TOP_ANIMATION_ITERATION:
                  case TOP_ANIMATION_START:
                    EventConstructor = SyntheticAnimationEvent;
                    break;
                  case TOP_TRANSITION_END:
                    EventConstructor = SyntheticTransitionEvent;
                    break;
                  case TOP_SCROLL:
                    EventConstructor = SyntheticUIEvent;
                    break;
                  case TOP_WHEEL:
                    EventConstructor = SyntheticWheelEvent;
                    break;
                  case TOP_COPY:
                  case TOP_CUT:
                  case TOP_PASTE:
                    EventConstructor = SyntheticClipboardEvent;
                    break;
                  case TOP_GOT_POINTER_CAPTURE:
                  case TOP_LOST_POINTER_CAPTURE:
                  case TOP_POINTER_CANCEL:
                  case TOP_POINTER_DOWN:
                  case TOP_POINTER_MOVE:
                  case TOP_POINTER_OUT:
                  case TOP_POINTER_OVER:
                  case TOP_POINTER_UP:
                    EventConstructor = SyntheticPointerEvent;
                    break;
                  default:
                    {
                      if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
                        warningWithoutStack$1(
                          false,
                          'SimpleEventPlugin: Unhandled event type, `%s`. This warning ' +
                            'is likely caused by a bug in React. Please file an issue.',
                          topLevelType,
                        );
                      }
                    }
                    // HTML Events
                    // @see http://www.w3.org/TR/html5/index.html#events-0
                    EventConstructor = SyntheticEvent;
                    break;
                }
                var event = EventConstructor.getPooled(
                  dispatchConfig,
                  targetInst,
                  nativeEvent,
                  nativeEventTarget,
                );
                accumulateTwoPhaseDispatches(event);
                return event;
              },
            };

            var passiveBrowserEventsSupported = false;

            // Check if browser support events with passive listeners
            // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
            if (enableFlareAPI && canUseDOM) {
              try {
                var options = {};
                // $FlowFixMe: Ignore Flow complaining about needing a value
                Object.defineProperty(options, 'passive', {
                  get: function() {
                    passiveBrowserEventsSupported = true;
                  },
                });
                window.addEventListener('test', options, options);
                window.removeEventListener('test', options, options);
              } catch (e) {
                passiveBrowserEventsSupported = false;
              }
            }

            // Intentionally not named imports because Rollup would use dynamic dispatch for
            // CommonJS interop named imports.
            var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
            var runWithPriority = Scheduler.unstable_runWithPriority;
            var getEventPriority = SimpleEventPlugin.getEventPriority;

            var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
            var callbackBookkeepingPool = [];

            /**
             * Find the deepest React component completely containing the root of the
             * passed-in instance (for use when entire React trees are nested within each
             * other). If React trees are not nested, returns null.
             */
            function findRootContainerNode(inst) {
              // TODO: It may be a good idea to cache this to prevent unnecessary DOM
              // traversal, but caching is difficult to do correctly without using a
              // mutation observer to listen for all DOM changes.
              while (inst.return) {
                inst = inst.return;
              }
              if (inst.tag !== HostRoot) {
                // This can happen if we're in a detached tree.
                return null;
              }
              return inst.stateNode.containerInfo;
            }

            // Used to store ancestor hierarchy in top level callback
            function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst) {
              if (callbackBookkeepingPool.length) {
                var instance = callbackBookkeepingPool.pop();
                instance.topLevelType = topLevelType;
                instance.nativeEvent = nativeEvent;
                instance.targetInst = targetInst;
                return instance;
              }
              return {
                topLevelType: topLevelType,
                nativeEvent: nativeEvent,
                targetInst: targetInst,
                ancestors: [],
              };
            }

            function releaseTopLevelCallbackBookKeeping(instance) {
              instance.topLevelType = null;
              instance.nativeEvent = null;
              instance.targetInst = null;
              instance.ancestors.length = 0;
              if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
                callbackBookkeepingPool.push(instance);
              }
            }

            function handleTopLevel(bookKeeping) {
              var targetInst = bookKeeping.targetInst;

              // Loop through the hierarchy, in case there's any nested components.
              // It's important that we build the array of ancestors before calling any
              // event handlers, because event handlers can modify the DOM, leading to
              // inconsistencies with ReactMount's node cache. See #1105.
              var ancestor = targetInst;
              do {
                if (!ancestor) {
                  var _ancestors = bookKeeping.ancestors;
                  _ancestors.push(ancestor);
                  break;
                }
                var root = findRootContainerNode(ancestor);
                if (!root) {
                  break;
                }
                bookKeeping.ancestors.push(ancestor);
                ancestor = getClosestInstanceFromNode(root);
              } while (ancestor);

              for (var i = 0; i < bookKeeping.ancestors.length; i++) {
                targetInst = bookKeeping.ancestors[i];
                var eventTarget = getEventTarget(bookKeeping.nativeEvent);
                var _topLevelType = bookKeeping.topLevelType;
                var _nativeEvent = bookKeeping.nativeEvent;

                runExtractedPluginEventsInBatch(
                  _topLevelType,
                  targetInst,
                  _nativeEvent,
                  eventTarget,
                );
              }
            }

            // TODO: can we stop exporting these?
            var _enabled = true;

            function setEnabled(enabled) {
              _enabled = !!enabled;
            }

            function isEnabled() {
              return _enabled;
            }

            function trapBubbledEvent(topLevelType, element) {
              trapEventForPluginEventSystem(element, topLevelType, false);
            }

            function trapCapturedEvent(topLevelType, element) {
              trapEventForPluginEventSystem(element, topLevelType, true);
            }

            function trapEventForResponderEventSystem(element, topLevelType, passive) {
              if (enableFlareAPI) {
                var rawEventName = getRawEventName(topLevelType);
                var eventFlags = RESPONDER_EVENT_SYSTEM;

                // If passive option is not supported, then the event will be
                // active and not passive, but we flag it as using not being
                // supported too. This way the responder event plugins know,
                // and can provide polyfills if needed.
                if (passive) {
                  if (passiveBrowserEventsSupported) {
                    eventFlags |= IS_PASSIVE;
                  } else {
                    eventFlags |= IS_ACTIVE;
                    eventFlags |= PASSIVE_NOT_SUPPORTED;
                    passive = false;
                  }
                } else {
                  eventFlags |= IS_ACTIVE;
                }
                // Check if interactive and wrap in discreteUpdates
                var listener = dispatchEvent.bind(null, topLevelType, eventFlags);
                if (passiveBrowserEventsSupported) {
                  addEventCaptureListenerWithPassiveFlag(element, rawEventName, listener, passive);
                } else {
                  addEventCaptureListener(element, rawEventName, listener);
                }
              }
            }

            function trapEventForPluginEventSystem(element, topLevelType, capture) {
              var listener = void 0;
              switch (getEventPriority(topLevelType)) {
                case DiscreteEvent:
                  listener = dispatchDiscreteEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM);
                  break;
                case UserBlockingEvent:
                  listener = dispatchUserBlockingUpdate.bind(
                    null,
                    topLevelType,
                    PLUGIN_EVENT_SYSTEM,
                  );
                  break;
                case ContinuousEvent:
                default:
                  listener = dispatchEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM);
                  break;
              }

              var rawEventName = getRawEventName(topLevelType);
              if (capture) {
                addEventCaptureListener(element, rawEventName, listener);
              } else {
                addEventBubbleListener(element, rawEventName, listener);
              }
            }

            function dispatchDiscreteEvent(topLevelType, eventSystemFlags, nativeEvent) {
              flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
              discreteUpdates(dispatchEvent, topLevelType, eventSystemFlags, nativeEvent);
            }

            function dispatchUserBlockingUpdate(topLevelType, eventSystemFlags, nativeEvent) {
              if (enableUserBlockingEvents) {
                runWithPriority(
                  UserBlockingPriority,
                  dispatchEvent.bind(null, topLevelType, eventSystemFlags, nativeEvent),
                );
              } else {
                dispatchEvent(topLevelType, eventSystemFlags, nativeEvent);
              }
            }

            function dispatchEventForPluginEventSystem(
              topLevelType,
              eventSystemFlags,
              nativeEvent,
              targetInst,
            ) {
              var bookKeeping = getTopLevelCallbackBookKeeping(
                topLevelType,
                nativeEvent,
                targetInst,
              );

              try {
                // Event queue being processed in the same cycle allows
                // `preventDefault`.
                batchedEventUpdates(handleTopLevel, bookKeeping);
              } finally {
                releaseTopLevelCallbackBookKeeping(bookKeeping);
              }
            }

            function dispatchEvent(topLevelType, eventSystemFlags, nativeEvent) {
              if (!_enabled) {
                return;
              }
              var nativeEventTarget = getEventTarget(nativeEvent);
              var targetInst = getClosestInstanceFromNode(nativeEventTarget);

              if (
                targetInst !== null &&
                typeof targetInst.tag === 'number' &&
                !isFiberMounted(targetInst)
              ) {
                // If we get an event (ex: img onload) before committing that
                // component's mount, ignore it for now (that is, treat it as if it was an
                // event on a non-React tree). We might also consider queueing events and
                // dispatching them after the mount.
                targetInst = null;
              }

              if (enableFlareAPI) {
                if (eventSystemFlags === PLUGIN_EVENT_SYSTEM) {
                  dispatchEventForPluginEventSystem(
                    topLevelType,
                    eventSystemFlags,
                    nativeEvent,
                    targetInst,
                  );
                } else {
                  // React Flare event system
                  dispatchEventForResponderEventSystem(
                    topLevelType,
                    targetInst,
                    nativeEvent,
                    nativeEventTarget,
                    eventSystemFlags,
                  );
                }
              } else {
                dispatchEventForPluginEventSystem(
                  topLevelType,
                  eventSystemFlags,
                  nativeEvent,
                  targetInst,
                );
              }
            }

            /**
             * Summary of `ReactBrowserEventEmitter` event handling:
             *
             *  - Top-level delegation is used to trap most native browser events. This
             *    may only occur in the main thread and is the responsibility of
             *    ReactDOMEventListener, which is injected and can therefore support
             *    pluggable event sources. This is the only work that occurs in the main
             *    thread.
             *
             *  - We normalize and de-duplicate events to account for browser quirks. This
             *    may be done in the worker thread.
             *
             *  - Forward these native events (with the associated top-level type used to
             *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
             *    to extract any synthetic events.
             *
             *  - The `EventPluginHub` will then process each event by annotating them with
             *    "dispatches", a sequence of listeners and IDs that care about that event.
             *
             *  - The `EventPluginHub` then dispatches the events.
             *
             * Overview of React and the event system:
             *
             * +------------+    .
             * |    DOM     |    .
             * +------------+    .
             *       |           .
             *       v           .
             * +------------+    .
             * | ReactEvent |    .
             * |  Listener  |    .
             * +------------+    .                         +-----------+
             *       |           .               +--------+|SimpleEvent|
             *       |           .               |         |Plugin     |
             * +-----|------+    .               v         +-----------+
             * |     |      |    .    +--------------+                    +------------+
             * |     +-----------.--->|EventPluginHub|                    |    Event   |
             * |            |    .    |              |     +-----------+  | Propagators|
             * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
             * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
             * |            |    .    |              |     +-----------+  |  utilities |
             * |     +-----------.--->|              |                    +------------+
             * |     |      |    .    +--------------+
             * +-----|------+    .                ^        +-----------+
             *       |           .                |        |Enter/Leave|
             *       +           .                +-------+|Plugin     |
             * +-------------+   .                         +-----------+
             * | application |   .
             * |-------------|   .
             * |             |   .
             * |             |   .
             * +-------------+   .
             *                   .
             *    React Core     .  General Purpose Event Plugin System
             */

            var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
            var elementListeningSets = new PossiblyWeakMap();

            function getListeningSetForElement(element) {
              var listeningSet = elementListeningSets.get(element);
              if (listeningSet === undefined) {
                listeningSet = new Set();
                elementListeningSets.set(element, listeningSet);
              }
              return listeningSet;
            }

            /**
             * We listen for bubbled touch events on the document object.
             *
             * Firefox v8.01 (and possibly others) exhibited strange behavior when
             * mounting `onmousemove` events at some node that was not the document
             * element. The symptoms were that if your mouse is not moving over something
             * contained within that mount point (for example on the background) the
             * top-level listeners for `onmousemove` won't be called. However, if you
             * register the `mousemove` on the document object, then it will of course
             * catch all `mousemove`s. This along with iOS quirks, justifies restricting
             * top-level listeners to the document object only, at least for these
             * movement types of events and possibly all events.
             *
             * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
             *
             * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
             * they bubble to document.
             *
             * @param {string} registrationName Name of listener (e.g. `onClick`).
             * @param {object} mountAt Container where to mount the listener
             */
            function listenTo(registrationName, mountAt) {
              var listeningSet = getListeningSetForElement(mountAt);
              var dependencies = registrationNameDependencies[registrationName];

              for (var i = 0; i < dependencies.length; i++) {
                var dependency = dependencies[i];
                if (!listeningSet.has(dependency)) {
                  switch (dependency) {
                    case TOP_SCROLL:
                      trapCapturedEvent(TOP_SCROLL, mountAt);
                      break;
                    case TOP_FOCUS:
                    case TOP_BLUR:
                      trapCapturedEvent(TOP_FOCUS, mountAt);
                      trapCapturedEvent(TOP_BLUR, mountAt);
                      // We set the flag for a single dependency later in this function,
                      // but this ensures we mark both as attached rather than just one.
                      listeningSet.add(TOP_BLUR);
                      listeningSet.add(TOP_FOCUS);
                      break;
                    case TOP_CANCEL:
                    case TOP_CLOSE:
                      if (isEventSupported(getRawEventName(dependency))) {
                        trapCapturedEvent(dependency, mountAt);
                      }
                      break;
                    case TOP_INVALID:
                    case TOP_SUBMIT:
                    case TOP_RESET:
                      // We listen to them on the target DOM elements.
                      // Some of them bubble so we don't want them to fire twice.
                      break;
                    default:
                      // By default, listen on the top level to all non-media events.
                      // Media events don't bubble so adding the listener wouldn't do anything.
                      var isMediaEvent = mediaEventTypes.indexOf(dependency) !== -1;
                      if (!isMediaEvent) {
                        trapBubbledEvent(dependency, mountAt);
                      }
                      break;
                  }
                  listeningSet.add(dependency);
                }
              }
            }

            function isListeningToAllDependencies(registrationName, mountAt) {
              var listeningSet = getListeningSetForElement(mountAt);
              var dependencies = registrationNameDependencies[registrationName];

              for (var i = 0; i < dependencies.length; i++) {
                var dependency = dependencies[i];
                if (!listeningSet.has(dependency)) {
                  return false;
                }
              }
              return true;
            }

            function getActiveElement(doc) {
              doc = doc || (typeof document !== 'undefined' ? document : undefined);
              if (typeof doc === 'undefined') {
                return null;
              }
              try {
                return doc.activeElement || doc.body;
              } catch (e) {
                return doc.body;
              }
            }

            /**
             * Given any node return the first leaf node without children.
             *
             * @param {DOMElement|DOMTextNode} node
             * @return {DOMElement|DOMTextNode}
             */
            function getLeafNode(node) {
              while (node && node.firstChild) {
                node = node.firstChild;
              }
              return node;
            }

            /**
             * Get the next sibling within a container. This will walk up the
             * DOM if a node's siblings have been exhausted.
             *
             * @param {DOMElement|DOMTextNode} node
             * @return {?DOMElement|DOMTextNode}
             */
            function getSiblingNode(node) {
              while (node) {
                if (node.nextSibling) {
                  return node.nextSibling;
                }
                node = node.parentNode;
              }
            }

            /**
             * Get object describing the nodes which contain characters at offset.
             *
             * @param {DOMElement|DOMTextNode} root
             * @param {number} offset
             * @return {?object}
             */
            function getNodeForCharacterOffset(root, offset) {
              var node = getLeafNode(root);
              var nodeStart = 0;
              var nodeEnd = 0;

              while (node) {
                if (node.nodeType === TEXT_NODE) {
                  nodeEnd = nodeStart + node.textContent.length;

                  if (nodeStart <= offset && nodeEnd >= offset) {
                    return {
                      node: node,
                      offset: offset - nodeStart,
                    };
                  }

                  nodeStart = nodeEnd;
                }

                node = getLeafNode(getSiblingNode(node));
              }
            }

            /**
             * @param {DOMElement} outerNode
             * @return {?object}
             */
            function getOffsets(outerNode) {
              var ownerDocument = outerNode.ownerDocument;

              var win = (ownerDocument && ownerDocument.defaultView) || window;
              var selection = win.getSelection && win.getSelection();

              if (!selection || selection.rangeCount === 0) {
                return null;
              }

              var anchorNode = selection.anchorNode,
                anchorOffset = selection.anchorOffset,
                focusNode = selection.focusNode,
                focusOffset = selection.focusOffset;

              // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
              // up/down buttons on an <input type="number">. Anonymous divs do not seem to
              // expose properties, triggering a "Permission denied error" if any of its
              // properties are accessed. The only seemingly possible way to avoid erroring
              // is to access a property that typically works for non-anonymous divs and
              // catch any error that may otherwise arise. See
              // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

              try {
                /* eslint-disable no-unused-expressions */
                anchorNode.nodeType;
                focusNode.nodeType;
                /* eslint-enable no-unused-expressions */
              } catch (e) {
                return null;
              }

              return getModernOffsetsFromPoints(
                outerNode,
                anchorNode,
                anchorOffset,
                focusNode,
                focusOffset,
              );
            }

            /**
             * Returns {start, end} where `start` is the character/codepoint index of
             * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
             * `end` is the index of (focusNode, focusOffset).
             *
             * Returns null if you pass in garbage input but we should probably just crash.
             *
             * Exported only for testing.
             */
            function getModernOffsetsFromPoints(
              outerNode,
              anchorNode,
              anchorOffset,
              focusNode,
              focusOffset,
            ) {
              var length = 0;
              var start = -1;
              var end = -1;
              var indexWithinAnchor = 0;
              var indexWithinFocus = 0;
              var node = outerNode;
              var parentNode = null;

              outer: while (true) {
                var next = null;

                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }

                  if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                  }

                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  // Moving from `node` to its first child `next`.
                  parentNode = node;
                  node = next;
                }

                while (true) {
                  if (node === outerNode) {
                    // If `outerNode` has children, this is always the second time visiting
                    // it. If it has no children, this is still the first loop, and the only
                    // valid selection is anchorNode and focusNode both equal to this node
                    // and both offsets 0, in which case we will have handled above.
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }

                // Moving from `node` to its next sibling `next`.
                node = next;
              }

              if (start === -1 || end === -1) {
                // This should never happen. (Would happen if the anchor/focus nodes aren't
                // actually inside the passed-in node.)
                return null;
              }

              return {
                start: start,
                end: end,
              };
            }

            /**
             * In modern non-IE browsers, we can support both forward and backward
             * selections.
             *
             * Note: IE10+ supports the Selection object, but it does not support
             * the `extend` method, which means that even in modern IE, it's not possible
             * to programmatically create a backward selection. Thus, for all IE
             * versions, we use the old IE API to create our selections.
             *
             * @param {DOMElement|DOMTextNode} node
             * @param {object} offsets
             */
            function setOffsets(node, offsets) {
              var doc = node.ownerDocument || document;
              var win = (doc && doc.defaultView) || window;

              // Edge fails with "Object expected" in some scenarios.
              // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
              // fails when pasting 100+ items)
              if (!win.getSelection) {
                return;
              }

              var selection = win.getSelection();
              var length = node.textContent.length;
              var start = Math.min(offsets.start, length);
              var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

              // IE 11 uses modern selection, but doesn't support the extend method.
              // Flip backward selections, so we can set with a single range.
              if (!selection.extend && start > end) {
                var temp = end;
                end = start;
                start = temp;
              }

              var startMarker = getNodeForCharacterOffset(node, start);
              var endMarker = getNodeForCharacterOffset(node, end);

              if (startMarker && endMarker) {
                if (
                  selection.rangeCount === 1 &&
                  selection.anchorNode === startMarker.node &&
                  selection.anchorOffset === startMarker.offset &&
                  selection.focusNode === endMarker.node &&
                  selection.focusOffset === endMarker.offset
                ) {
                  return;
                }
                var range = doc.createRange();
                range.setStart(startMarker.node, startMarker.offset);
                selection.removeAllRanges();

                if (start > end) {
                  selection.addRange(range);
                  selection.extend(endMarker.node, endMarker.offset);
                } else {
                  range.setEnd(endMarker.node, endMarker.offset);
                  selection.addRange(range);
                }
              }
            }

            function isTextNode(node) {
              return node && node.nodeType === TEXT_NODE;
            }

            function containsNode(outerNode, innerNode) {
              if (!outerNode || !innerNode) {
                return false;
              } else if (outerNode === innerNode) {
                return true;
              } else if (isTextNode(outerNode)) {
                return false;
              } else if (isTextNode(innerNode)) {
                return containsNode(outerNode, innerNode.parentNode);
              } else if ('contains' in outerNode) {
                return outerNode.contains(innerNode);
              } else if (outerNode.compareDocumentPosition) {
                return !!(outerNode.compareDocumentPosition(innerNode) & 16);
              } else {
                return false;
              }
            }

            function isInDocument(node) {
              return (
                node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node)
              );
            }

            function isSameOriginFrame(iframe) {
              try {
                // Accessing the contentDocument of a HTMLIframeElement can cause the browser
                // to throw, e.g. if it has a cross-origin src attribute.
                // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
                // iframe.contentDocument.defaultView;
                // A safety way is to access one of the cross origin properties: Window or Location
                // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
                // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl

                return typeof iframe.contentWindow.location.href === 'string';
              } catch (err) {
                return false;
              }
            }

            function getActiveElementDeep() {
              var win = window;
              var element = getActiveElement();
              while (element instanceof win.HTMLIFrameElement) {
                if (isSameOriginFrame(element)) {
                  win = element.contentWindow;
                } else {
                  return element;
                }
                element = getActiveElement(win.document);
              }
              return element;
            }

            /**
             * @ReactInputSelection: React input selection module. Based on Selection.js,
             * but modified to be suitable for react and has a couple of bug fixes (doesn't
             * assume buttons have range selections allowed).
             * Input selection module for React.
             */

            /**
             * @hasSelectionCapabilities: we get the element types that support selection
             * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
             * and `selectionEnd` rows.
             */
            function hasSelectionCapabilities(elem) {
              var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
              return (
                nodeName &&
                ((nodeName === 'input' &&
                  (elem.type === 'text' ||
                    elem.type === 'search' ||
                    elem.type === 'tel' ||
                    elem.type === 'url' ||
                    elem.type === 'password')) ||
                  nodeName === 'textarea' ||
                  elem.contentEditable === 'true')
              );
            }

            function getSelectionInformation() {
              var focusedElem = getActiveElementDeep();
              return {
                focusedElem: focusedElem,
                selectionRange: hasSelectionCapabilities(focusedElem)
                  ? getSelection$1(focusedElem)
                  : null,
              };
            }

            /**
             * @restoreSelection: If any selection information was potentially lost,
             * restore it. This is useful when performing operations that could remove dom
             * nodes and place them back in, resulting in focus being lost.
             */
            function restoreSelection(priorSelectionInformation) {
              var curFocusedElem = getActiveElementDeep();
              var priorFocusedElem = priorSelectionInformation.focusedElem;
              var priorSelectionRange = priorSelectionInformation.selectionRange;
              if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
                if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                  setSelection(priorFocusedElem, priorSelectionRange);
                }

                // Focusing a node can change the scroll position, which is undesirable
                var ancestors = [];
                var ancestor = priorFocusedElem;
                while ((ancestor = ancestor.parentNode)) {
                  if (ancestor.nodeType === ELEMENT_NODE) {
                    ancestors.push({
                      element: ancestor,
                      left: ancestor.scrollLeft,
                      top: ancestor.scrollTop,
                    });
                  }
                }

                if (typeof priorFocusedElem.focus === 'function') {
                  priorFocusedElem.focus();
                }

                for (var i = 0; i < ancestors.length; i++) {
                  var info = ancestors[i];
                  info.element.scrollLeft = info.left;
                  info.element.scrollTop = info.top;
                }
              }
            }

            /**
             * @getSelection: Gets the selection bounds of a focused textarea, input or
             * contentEditable node.
             * -@input: Look up selection bounds of this input
             * -@return {start: selectionStart, end: selectionEnd}
             */
            function getSelection$1(input) {
              var selection = void 0;

              if ('selectionStart' in input) {
                // Modern browser with input or textarea.
                selection = {
                  start: input.selectionStart,
                  end: input.selectionEnd,
                };
              } else {
                // Content editable or old IE textarea.
                selection = getOffsets(input);
              }

              return selection || { start: 0, end: 0 };
            }

            /**
             * @setSelection: Sets the selection bounds of a textarea or input and focuses
             * the input.
             * -@input     Set selection bounds of this input or textarea
             * -@offsets   Object of same form that is returned from get*
             */
            function setSelection(input, offsets) {
              var start = offsets.start,
                end = offsets.end;

              if (end === undefined) {
                end = start;
              }

              if ('selectionStart' in input) {
                input.selectionStart = start;
                input.selectionEnd = Math.min(end, input.value.length);
              } else {
                setOffsets(input, offsets);
              }
            }

            var skipSelectionChangeEvent =
              canUseDOM && 'documentMode' in document && document.documentMode <= 11;

            var eventTypes$3 = {
              select: {
                phasedRegistrationNames: {
                  bubbled: 'onSelect',
                  captured: 'onSelectCapture',
                },
                dependencies: [
                  TOP_BLUR,
                  TOP_CONTEXT_MENU,
                  TOP_DRAG_END,
                  TOP_FOCUS,
                  TOP_KEY_DOWN,
                  TOP_KEY_UP,
                  TOP_MOUSE_DOWN,
                  TOP_MOUSE_UP,
                  TOP_SELECTION_CHANGE,
                ],
              },
            };

            var activeElement$1 = null;
            var activeElementInst$1 = null;
            var lastSelection = null;
            var mouseDown = false;

            /**
             * Get an object which is a unique representation of the current selection.
             *
             * The return value will not be consistent across nodes or browsers, but
             * two identical selections on the same node will return identical objects.
             *
             * @param {DOMElement} node
             * @return {object}
             */
            function getSelection(node) {
              if ('selectionStart' in node && hasSelectionCapabilities(node)) {
                return {
                  start: node.selectionStart,
                  end: node.selectionEnd,
                };
              } else {
                var win = (node.ownerDocument && node.ownerDocument.defaultView) || window;
                var selection = win.getSelection();
                return {
                  anchorNode: selection.anchorNode,
                  anchorOffset: selection.anchorOffset,
                  focusNode: selection.focusNode,
                  focusOffset: selection.focusOffset,
                };
              }
            }

            /**
             * Get document associated with the event target.
             *
             * @param {object} nativeEventTarget
             * @return {Document}
             */
            function getEventTargetDocument(eventTarget) {
              return eventTarget.window === eventTarget
                ? eventTarget.document
                : eventTarget.nodeType === DOCUMENT_NODE
                ? eventTarget
                : eventTarget.ownerDocument;
            }

            /**
             * Poll selection to see whether it's changed.
             *
             * @param {object} nativeEvent
             * @param {object} nativeEventTarget
             * @return {?SyntheticEvent}
             */
            function constructSelectEvent(nativeEvent, nativeEventTarget) {
              // Ensure we have the right element, and that the user is not dragging a
              // selection (this matches native `select` event behavior). In HTML5, select
              // fires only on input and textarea thus if there's no focused element we
              // won't dispatch.
              var doc = getEventTargetDocument(nativeEventTarget);

              if (
                mouseDown ||
                activeElement$1 == null ||
                activeElement$1 !== getActiveElement(doc)
              ) {
                return null;
              }

              // Only fire when selection has actually changed.
              var currentSelection = getSelection(activeElement$1);
              if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
                lastSelection = currentSelection;

                var syntheticEvent = SyntheticEvent.getPooled(
                  eventTypes$3.select,
                  activeElementInst$1,
                  nativeEvent,
                  nativeEventTarget,
                );

                syntheticEvent.type = 'select';
                syntheticEvent.target = activeElement$1;

                accumulateTwoPhaseDispatches(syntheticEvent);

                return syntheticEvent;
              }

              return null;
            }

            /**
             * This plugin creates an `onSelect` event that normalizes select events
             * across form elements.
             *
             * Supported elements are:
             * - input (see `isTextInputElement`)
             * - textarea
             * - contentEditable
             *
             * This differs from native browser implementations in the following ways:
             * - Fires on contentEditable fields as well as inputs.
             * - Fires for collapsed selection.
             * - Fires after user input.
             */
            var SelectEventPlugin = {
              eventTypes: eventTypes$3,

              extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
                var doc = getEventTargetDocument(nativeEventTarget);
                // Track whether all listeners exists for this plugin. If none exist, we do
                // not extract events. See #3639.
                if (!doc || !isListeningToAllDependencies('onSelect', doc)) {
                  return null;
                }

                var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

                switch (topLevelType) {
                  // Track the input node that has focus.
                  case TOP_FOCUS:
                    if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
                      activeElement$1 = targetNode;
                      activeElementInst$1 = targetInst;
                      lastSelection = null;
                    }
                    break;
                  case TOP_BLUR:
                    activeElement$1 = null;
                    activeElementInst$1 = null;
                    lastSelection = null;
                    break;
                  // Don't fire the event while the user is dragging. This matches the
                  // semantics of the native select event.
                  case TOP_MOUSE_DOWN:
                    mouseDown = true;
                    break;
                  case TOP_CONTEXT_MENU:
                  case TOP_MOUSE_UP:
                  case TOP_DRAG_END:
                    mouseDown = false;
                    return constructSelectEvent(nativeEvent, nativeEventTarget);
                  // Chrome and IE fire non-standard event when selection is changed (and
                  // sometimes when it hasn't). IE's event fires out of order with respect
                  // to key and input events on deletion, so we discard it.
                  //
                  // Firefox doesn't support selectionchange, so check selection status
                  // after each key entry. The selection changes after keydown and before
                  // keyup, but we check on keydown as well in the case of holding down a
                  // key, when multiple keydown events are fired but only one keyup is.
                  // This is also our approach for IE handling, for the reason above.
                  case TOP_SELECTION_CHANGE:
                    if (skipSelectionChangeEvent) {
                      break;
                    }
                  // falls through
                  case TOP_KEY_DOWN:
                  case TOP_KEY_UP:
                    return constructSelectEvent(nativeEvent, nativeEventTarget);
                }

                return null;
              },
            };

            /**
             * Inject modules for resolving DOM hierarchy and plugin ordering.
             */
            injection.injectEventPluginOrder(DOMEventPluginOrder);
            setComponentTree(
              getFiberCurrentPropsFromNode$1,
              getInstanceFromNode$1,
              getNodeFromInstance$1,
            );

            /**
             * Some important event plugins included by default (without having to require
             * them).
             */
            injection.injectEventPluginsByName({
              SimpleEventPlugin: SimpleEventPlugin,
              EnterLeaveEventPlugin: EnterLeaveEventPlugin,
              ChangeEventPlugin: ChangeEventPlugin,
              SelectEventPlugin: SelectEventPlugin,
              BeforeInputEventPlugin: BeforeInputEventPlugin,
            });

            function endsWith(subject, search) {
              var length = subject.length;
              return subject.substring(length - search.length, length) === search;
            }

            var didWarnSelectedSetOnOption = false;
            var didWarnInvalidChild = false;

            function flattenChildren(children) {
              var content = '';

              // Flatten children. We'll warn if they are invalid
              // during validateProps() which runs for hydration too.
              // Note that this would throw on non-element objects.
              // Elements are stringified (which is normally irrelevant
              // but matters for <fbt>).
              React.Children.forEach(children, function(child) {
                if (child == null) {
                  return;
                }
                content += child;
                // Note: we don't warn about invalid children here.
                // Instead, this is done separately below so that
                // it happens during the hydration codepath too.
              });

              return content;
            }

            /**
             * Implements an <option> host component that warns when `selected` is set.
             */

            function validateProps(element, props) {
              {
                // This mirrors the codepath above, but runs for hydration too.
                // Warn about invalid children here so that client and hydration are consistent.
                // TODO: this seems like it could cause a DEV-only throw for hydration
                // if children contains a non-element object. We should try to avoid that.
                if (typeof props.children === 'object' && props.children !== null) {
                  React.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === 'string' || typeof child === 'number') {
                      return;
                    }
                    if (typeof child.type !== 'string') {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      warning$1(
                        false,
                        'Only strings and numbers are supported as <option> children.',
                      );
                    }
                  });
                }

                // TODO: Remove support for `selected` in <option>.
                if (props.selected != null && !didWarnSelectedSetOnOption) {
                  warning$1(
                    false,
                    'Use the `defaultValue` or `value` props on <select> instead of ' +
                      'setting `selected` on <option>.',
                  );
                  didWarnSelectedSetOnOption = true;
                }
              }
            }

            function postMountWrapper$1(element, props) {
              // value="" should make a value attribute (#6219)
              if (props.value != null) {
                element.setAttribute('value', toString(getToStringValue(props.value)));
              }
            }

            function getHostProps$1(element, props) {
              var hostProps = _assign({ children: undefined }, props);
              var content = flattenChildren(props.children);

              if (content) {
                hostProps.children = content;
              }

              return hostProps;
            }

            // TODO: direct imports like some-package/src/* are bad. Fix me.
            var didWarnValueDefaultValue$1 = void 0;

            {
              didWarnValueDefaultValue$1 = false;
            }

            function getDeclarationErrorAddendum() {
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                return '\n\nCheck the render method of `' + ownerName + '`.';
              }
              return '';
            }

            var valuePropNames = ['value', 'defaultValue'];

            /**
             * Validation function for `value` and `defaultValue`.
             */
            function checkSelectPropTypes(props) {
              ReactControlledValuePropTypes.checkPropTypes('select', props);

              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var isArray = Array.isArray(props[propName]);
                if (props.multiple && !isArray) {
                  warning$1(
                    false,
                    'The `%s` prop supplied to <select> must be an array if ' +
                      '`multiple` is true.%s',
                    propName,
                    getDeclarationErrorAddendum(),
                  );
                } else if (!props.multiple && isArray) {
                  warning$1(
                    false,
                    'The `%s` prop supplied to <select> must be a scalar ' +
                      'value if `multiple` is false.%s',
                    propName,
                    getDeclarationErrorAddendum(),
                  );
                }
              }
            }

            function updateOptions(node, multiple, propValue, setDefaultSelected) {
              var options = node.options;

              if (multiple) {
                var selectedValues = propValue;
                var selectedValue = {};
                for (var i = 0; i < selectedValues.length; i++) {
                  // Prefix to avoid chaos with special keys.
                  selectedValue['$' + selectedValues[i]] = true;
                }
                for (var _i = 0; _i < options.length; _i++) {
                  var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
                  if (options[_i].selected !== selected) {
                    options[_i].selected = selected;
                  }
                  if (selected && setDefaultSelected) {
                    options[_i].defaultSelected = true;
                  }
                }
              } else {
                // Do not set `select.value` as exact behavior isn't consistent across all
                // browsers for all cases.
                var _selectedValue = toString(getToStringValue(propValue));
                var defaultSelected = null;
                for (var _i2 = 0; _i2 < options.length; _i2++) {
                  if (options[_i2].value === _selectedValue) {
                    options[_i2].selected = true;
                    if (setDefaultSelected) {
                      options[_i2].defaultSelected = true;
                    }
                    return;
                  }
                  if (defaultSelected === null && !options[_i2].disabled) {
                    defaultSelected = options[_i2];
                  }
                }
                if (defaultSelected !== null) {
                  defaultSelected.selected = true;
                }
              }
            }

            /**
             * Implements a <select> host component that allows optionally setting the
             * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
             * stringable. If `multiple` is true, the prop must be an array of stringables.
             *
             * If `value` is not supplied (or null/undefined), user actions that change the
             * selected option will trigger updates to the rendered options.
             *
             * If it is supplied (and not null/undefined), the rendered options will not
             * update in response to user actions. Instead, the `value` prop must change in
             * order for the rendered options to update.
             *
             * If `defaultValue` is provided, any options with the supplied values will be
             * selected.
             */

            function getHostProps$2(element, props) {
              return _assign({}, props, {
                value: undefined,
              });
            }

            function initWrapperState$1(element, props) {
              var node = element;
              {
                checkSelectPropTypes(props);
              }

              node._wrapperState = {
                wasMultiple: !!props.multiple,
              };

              {
                if (
                  props.value !== undefined &&
                  props.defaultValue !== undefined &&
                  !didWarnValueDefaultValue$1
                ) {
                  warning$1(
                    false,
                    'Select elements must be either controlled or uncontrolled ' +
                      '(specify either the value prop, or the defaultValue prop, but not ' +
                      'both). Decide between using a controlled or uncontrolled select ' +
                      'element and remove one of these props. More info: ' +
                      'https://fb.me/react-controlled-components',
                  );
                  didWarnValueDefaultValue$1 = true;
                }
              }
            }

            function postMountWrapper$2(element, props) {
              var node = element;
              node.multiple = !!props.multiple;
              var value = props.value;
              if (value != null) {
                updateOptions(node, !!props.multiple, value, false);
              } else if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              }
            }

            function postUpdateWrapper(element, props) {
              var node = element;
              var wasMultiple = node._wrapperState.wasMultiple;
              node._wrapperState.wasMultiple = !!props.multiple;

              var value = props.value;
              if (value != null) {
                updateOptions(node, !!props.multiple, value, false);
              } else if (wasMultiple !== !!props.multiple) {
                // For simplicity, reapply `defaultValue` if `multiple` is toggled.
                if (props.defaultValue != null) {
                  updateOptions(node, !!props.multiple, props.defaultValue, true);
                } else {
                  // Revert the select back to its default unselected state.
                  updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
                }
              }
            }

            function restoreControlledState$2(element, props) {
              var node = element;
              var value = props.value;

              if (value != null) {
                updateOptions(node, !!props.multiple, value, false);
              }
            }

            var didWarnValDefaultVal = false;

            /**
             * Implements a <textarea> host component that allows setting `value`, and
             * `defaultValue`. This differs from the traditional DOM API because value is
             * usually set as PCDATA children.
             *
             * If `value` is not supplied (or null/undefined), user actions that affect the
             * value will trigger updates to the element.
             *
             * If `value` is supplied (and not null/undefined), the rendered element will
             * not trigger updates to the element. Instead, the `value` prop must change in
             * order for the rendered element to be updated.
             *
             * The rendered element will be initialized with an empty value, the prop
             * `defaultValue` if specified, or the children content (deprecated).
             */

            function getHostProps$3(element, props) {
              var node = element;
              (function() {
                if (!(props.dangerouslySetInnerHTML == null)) {
                  {
                    throw ReactError(
                      Error('`dangerouslySetInnerHTML` does not make sense on <textarea>.'),
                    );
                  }
                }
              })();

              // Always set children to the same thing. In IE9, the selection range will
              // get reset if `textContent` is mutated.  We could add a check in setTextContent
              // to only set the value if/when the value differs from the node value (which would
              // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
              // solution. The value can be a boolean or object so that's why it's forced
              // to be a string.
              var hostProps = _assign({}, props, {
                value: undefined,
                defaultValue: undefined,
                children: toString(node._wrapperState.initialValue),
              });

              return hostProps;
            }

            function initWrapperState$2(element, props) {
              var node = element;
              {
                ReactControlledValuePropTypes.checkPropTypes('textarea', props);
                if (
                  props.value !== undefined &&
                  props.defaultValue !== undefined &&
                  !didWarnValDefaultVal
                ) {
                  warning$1(
                    false,
                    '%s contains a textarea with both value and defaultValue props. ' +
                      'Textarea elements must be either controlled or uncontrolled ' +
                      '(specify either the value prop, or the defaultValue prop, but not ' +
                      'both). Decide between using a controlled or uncontrolled textarea ' +
                      'and remove one of these props. More info: ' +
                      'https://fb.me/react-controlled-components',
                    getCurrentFiberOwnerNameInDevOrNull() || 'A component',
                  );
                  didWarnValDefaultVal = true;
                }
              }

              var initialValue = props.value;

              // Only bother fetching default value if we're going to use it
              if (initialValue == null) {
                var defaultValue = props.defaultValue;
                // TODO (yungsters): Remove support for children content in <textarea>.
                var children = props.children;
                if (children != null) {
                  {
                    warning$1(
                      false,
                      'Use the `defaultValue` or `value` props instead of setting ' +
                        'children on <textarea>.',
                    );
                  }
                  (function() {
                    if (!(defaultValue == null)) {
                      {
                        throw ReactError(
                          Error(
                            'If you supply `defaultValue` on a <textarea>, do not pass children.',
                          ),
                        );
                      }
                    }
                  })();
                  if (Array.isArray(children)) {
                    (function() {
                      if (!(children.length <= 1)) {
                        {
                          throw ReactError(Error('<textarea> can only have at most one child.'));
                        }
                      }
                    })();
                    children = children[0];
                  }

                  defaultValue = children;
                }
                if (defaultValue == null) {
                  defaultValue = '';
                }
                initialValue = defaultValue;
              }

              node._wrapperState = {
                initialValue: getToStringValue(initialValue),
              };
            }

            function updateWrapper$1(element, props) {
              var node = element;
              var value = getToStringValue(props.value);
              var defaultValue = getToStringValue(props.defaultValue);
              if (value != null) {
                // Cast `value` to a string to ensure the value is set correctly. While
                // browsers typically do this as necessary, jsdom doesn't.
                var newValue = toString(value);
                // To avoid side effects (such as losing text selection), only set value if changed
                if (newValue !== node.value) {
                  node.value = newValue;
                }
                if (props.defaultValue == null && node.defaultValue !== newValue) {
                  node.defaultValue = newValue;
                }
              }
              if (defaultValue != null) {
                node.defaultValue = toString(defaultValue);
              }
            }

            function postMountWrapper$3(element, props) {
              var node = element;
              // This is in postMount because we need access to the DOM node, which is not
              // available until after the component has mounted.
              var textContent = node.textContent;

              // Only set node.value if textContent is equal to the expected
              // initial value. In IE10/IE11 there is a bug where the placeholder attribute
              // will populate textContent as well.
              // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
              if (textContent === node._wrapperState.initialValue) {
                node.value = textContent;
              }
            }

            function restoreControlledState$3(element, props) {
              // DOM component is still mounted; update
              updateWrapper$1(element, props);
            }

            var HTML_NAMESPACE$1 = 'http://www.w3.org/1999/xhtml';
            var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
            var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';

            var Namespaces = {
              html: HTML_NAMESPACE$1,
              mathml: MATH_NAMESPACE,
              svg: SVG_NAMESPACE,
            };

            // Assumes there is no parent namespace.
            function getIntrinsicNamespace(type) {
              switch (type) {
                case 'svg':
                  return SVG_NAMESPACE;
                case 'math':
                  return MATH_NAMESPACE;
                default:
                  return HTML_NAMESPACE$1;
              }
            }

            function getChildNamespace(parentNamespace, type) {
              if (parentNamespace == null || parentNamespace === HTML_NAMESPACE$1) {
                // No (or default) parent namespace: potential entry point.
                return getIntrinsicNamespace(type);
              }
              if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
                // We're leaving SVG.
                return HTML_NAMESPACE$1;
              }
              // By default, pass namespace below.
              return parentNamespace;
            }

            /* globals MSApp */

            /**
             * Create a function which has 'unsafe' privileges (required by windows8 apps)
             */
            var createMicrosoftUnsafeLocalFunction = function(func) {
              if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
                return function(arg0, arg1, arg2, arg3) {
                  MSApp.execUnsafeLocalFunction(function() {
                    return func(arg0, arg1, arg2, arg3);
                  });
                };
              } else {
                return func;
              }
            };

            // SVG temp container for IE lacking innerHTML
            var reusableSVGContainer = void 0;

            /**
             * Set the innerHTML property of a node
             *
             * @param {DOMElement} node
             * @param {string} html
             * @internal
             */
            var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
              // IE does not have innerHTML for SVG nodes, so instead we inject the
              // new markup in a temp node and then move the child nodes across into
              // the target node

              if (node.namespaceURI === Namespaces.svg && !('innerHTML' in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement('div');
                reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
              } else {
                node.innerHTML = html;
              }
            });

            /**
             * Set the textContent property of a node. For text updates, it's faster
             * to set the `nodeValue` of the Text node directly instead of using
             * `.textContent` which will remove the existing node and create a new one.
             *
             * @param {DOMElement} node
             * @param {string} text
             * @internal
             */
            var setTextContent = function(node, text) {
              if (text) {
                var firstChild = node.firstChild;

                if (
                  firstChild &&
                  firstChild === node.lastChild &&
                  firstChild.nodeType === TEXT_NODE
                ) {
                  firstChild.nodeValue = text;
                  return;
                }
              }
              node.textContent = text;
            };

            // List derived from Gecko source code:
            // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
            var shorthandToLonghand = {
              animation: [
                'animationDelay',
                'animationDirection',
                'animationDuration',
                'animationFillMode',
                'animationIterationCount',
                'animationName',
                'animationPlayState',
                'animationTimingFunction',
              ],
              background: [
                'backgroundAttachment',
                'backgroundClip',
                'backgroundColor',
                'backgroundImage',
                'backgroundOrigin',
                'backgroundPositionX',
                'backgroundPositionY',
                'backgroundRepeat',
                'backgroundSize',
              ],
              backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
              border: [
                'borderBottomColor',
                'borderBottomStyle',
                'borderBottomWidth',
                'borderImageOutset',
                'borderImageRepeat',
                'borderImageSlice',
                'borderImageSource',
                'borderImageWidth',
                'borderLeftColor',
                'borderLeftStyle',
                'borderLeftWidth',
                'borderRightColor',
                'borderRightStyle',
                'borderRightWidth',
                'borderTopColor',
                'borderTopStyle',
                'borderTopWidth',
              ],
              borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
              borderBlockStart: [
                'borderBlockStartColor',
                'borderBlockStartStyle',
                'borderBlockStartWidth',
              ],
              borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
              borderColor: [
                'borderBottomColor',
                'borderLeftColor',
                'borderRightColor',
                'borderTopColor',
              ],
              borderImage: [
                'borderImageOutset',
                'borderImageRepeat',
                'borderImageSlice',
                'borderImageSource',
                'borderImageWidth',
              ],
              borderInlineEnd: [
                'borderInlineEndColor',
                'borderInlineEndStyle',
                'borderInlineEndWidth',
              ],
              borderInlineStart: [
                'borderInlineStartColor',
                'borderInlineStartStyle',
                'borderInlineStartWidth',
              ],
              borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
              borderRadius: [
                'borderBottomLeftRadius',
                'borderBottomRightRadius',
                'borderTopLeftRadius',
                'borderTopRightRadius',
              ],
              borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
              borderStyle: [
                'borderBottomStyle',
                'borderLeftStyle',
                'borderRightStyle',
                'borderTopStyle',
              ],
              borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
              borderWidth: [
                'borderBottomWidth',
                'borderLeftWidth',
                'borderRightWidth',
                'borderTopWidth',
              ],
              columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
              columns: ['columnCount', 'columnWidth'],
              flex: ['flexBasis', 'flexGrow', 'flexShrink'],
              flexFlow: ['flexDirection', 'flexWrap'],
              font: [
                'fontFamily',
                'fontFeatureSettings',
                'fontKerning',
                'fontLanguageOverride',
                'fontSize',
                'fontSizeAdjust',
                'fontStretch',
                'fontStyle',
                'fontVariant',
                'fontVariantAlternates',
                'fontVariantCaps',
                'fontVariantEastAsian',
                'fontVariantLigatures',
                'fontVariantNumeric',
                'fontVariantPosition',
                'fontWeight',
                'lineHeight',
              ],
              fontVariant: [
                'fontVariantAlternates',
                'fontVariantCaps',
                'fontVariantEastAsian',
                'fontVariantLigatures',
                'fontVariantNumeric',
                'fontVariantPosition',
              ],
              gap: ['columnGap', 'rowGap'],
              grid: [
                'gridAutoColumns',
                'gridAutoFlow',
                'gridAutoRows',
                'gridTemplateAreas',
                'gridTemplateColumns',
                'gridTemplateRows',
              ],
              gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
              gridColumn: ['gridColumnEnd', 'gridColumnStart'],
              gridColumnGap: ['columnGap'],
              gridGap: ['columnGap', 'rowGap'],
              gridRow: ['gridRowEnd', 'gridRowStart'],
              gridRowGap: ['rowGap'],
              gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
              listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
              margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
              marker: ['markerEnd', 'markerMid', 'markerStart'],
              mask: [
                'maskClip',
                'maskComposite',
                'maskImage',
                'maskMode',
                'maskOrigin',
                'maskPositionX',
                'maskPositionY',
                'maskRepeat',
                'maskSize',
              ],
              maskPosition: ['maskPositionX', 'maskPositionY'],
              outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
              overflow: ['overflowX', 'overflowY'],
              padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
              placeContent: ['alignContent', 'justifyContent'],
              placeItems: ['alignItems', 'justifyItems'],
              placeSelf: ['alignSelf', 'justifySelf'],
              textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
              textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
              transition: [
                'transitionDelay',
                'transitionDuration',
                'transitionProperty',
                'transitionTimingFunction',
              ],
              wordWrap: ['overflowWrap'],
            };

            /**
             * CSS properties which accept numbers but are not in units of "px".
             */
            var isUnitlessNumber = {
              animationIterationCount: true,
              borderImageOutset: true,
              borderImageSlice: true,
              borderImageWidth: true,
              boxFlex: true,
              boxFlexGroup: true,
              boxOrdinalGroup: true,
              columnCount: true,
              columns: true,
              flex: true,
              flexGrow: true,
              flexPositive: true,
              flexShrink: true,
              flexNegative: true,
              flexOrder: true,
              gridArea: true,
              gridRow: true,
              gridRowEnd: true,
              gridRowSpan: true,
              gridRowStart: true,
              gridColumn: true,
              gridColumnEnd: true,
              gridColumnSpan: true,
              gridColumnStart: true,
              fontWeight: true,
              lineClamp: true,
              lineHeight: true,
              opacity: true,
              order: true,
              orphans: true,
              tabSize: true,
              widows: true,
              zIndex: true,
              zoom: true,

              // SVG-related properties
              fillOpacity: true,
              floodOpacity: true,
              stopOpacity: true,
              strokeDasharray: true,
              strokeDashoffset: true,
              strokeMiterlimit: true,
              strokeOpacity: true,
              strokeWidth: true,
            };

            /**
             * @param {string} prefix vendor-specific prefix, eg: Webkit
             * @param {string} key style name, eg: transitionDuration
             * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
             * WebkitTransitionDuration
             */
            function prefixKey(prefix, key) {
              return prefix + key.charAt(0).toUpperCase() + key.substring(1);
            }

            /**
             * Support style names that may come passed in prefixed by adding permutations
             * of vendor prefixes.
             */
            var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

            // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
            // infinite loop, because it iterates over the newly added props too.
            Object.keys(isUnitlessNumber).forEach(function(prop) {
              prefixes.forEach(function(prefix) {
                isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
              });
            });

            /**
             * Convert a value into the proper css writable value. The style name `name`
             * should be logical (no hyphens), as specified
             * in `CSSProperty.isUnitlessNumber`.
             *
             * @param {string} name CSS property name such as `topMargin`.
             * @param {*} value CSS property value such as `10px`.
             * @return {string} Normalized style value with dimensions applied.
             */
            function dangerousStyleValue(name, value, isCustomProperty) {
              // Note that we've removed escapeTextForBrowser() calls here since the
              // whole string will be escaped when the attribute is injected into
              // the markup. If you provide unsafe user data here they can inject
              // arbitrary CSS which may be problematic (I couldn't repro this):
              // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
              // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
              // This is not an XSS hole but instead a potential CSS injection issue
              // which has lead to a greater discussion about how we're going to
              // trust URLs moving forward. See #2115901

              var isEmpty = value == null || typeof value === 'boolean' || value === '';
              if (isEmpty) {
                return '';
              }

              if (
                !isCustomProperty &&
                typeof value === 'number' &&
                value !== 0 &&
                !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])
              ) {
                return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
              }

              return ('' + value).trim();
            }

            var uppercasePattern = /([A-Z])/g;
            var msPattern = /^ms-/;

            /**
             * Hyphenates a camelcased CSS property name, for example:
             *
             *   > hyphenateStyleName('backgroundColor')
             *   < "background-color"
             *   > hyphenateStyleName('MozTransition')
             *   < "-moz-transition"
             *   > hyphenateStyleName('msTransition')
             *   < "-ms-transition"
             *
             * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
             * is converted to `-ms-`.
             */
            function hyphenateStyleName(name) {
              return name
                .replace(uppercasePattern, '-$1')
                .toLowerCase()
                .replace(msPattern, '-ms-');
            }

            var warnValidStyle = function() {};

            {
              // 'msTransform' is correct, but the other prefixes should be capitalized
              var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
              var msPattern$1 = /^-ms-/;
              var hyphenPattern = /-(.)/g;

              // style values shouldn't contain a semicolon
              var badStyleValueWithSemicolonPattern = /;\s*$/;

              var warnedStyleNames = {};
              var warnedStyleValues = {};
              var warnedForNaNValue = false;
              var warnedForInfinityValue = false;

              var camelize = function(string) {
                return string.replace(hyphenPattern, function(_, character) {
                  return character.toUpperCase();
                });
              };

              var warnHyphenatedStyleName = function(name) {
                if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                  return;
                }

                warnedStyleNames[name] = true;
                warning$1(
                  false,
                  'Unsupported style property %s. Did you mean %s?',
                  name,
                  // As Andi Smith suggests
                  // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                  // is converted to lowercase `ms`.
                  camelize(name.replace(msPattern$1, 'ms-')),
                );
              };

              var warnBadVendoredStyleName = function(name) {
                if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                  return;
                }

                warnedStyleNames[name] = true;
                warning$1(
                  false,
                  'Unsupported vendor-prefixed style property %s. Did you mean %s?',
                  name,
                  name.charAt(0).toUpperCase() + name.slice(1),
                );
              };

              var warnStyleValueWithSemicolon = function(name, value) {
                if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                  return;
                }

                warnedStyleValues[value] = true;
                warning$1(
                  false,
                  "Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.',
                  name,
                  value.replace(badStyleValueWithSemicolonPattern, ''),
                );
              };

              var warnStyleValueIsNaN = function(name, value) {
                if (warnedForNaNValue) {
                  return;
                }

                warnedForNaNValue = true;
                warning$1(
                  false,
                  '`NaN` is an invalid value for the `%s` css style property.',
                  name,
                );
              };

              var warnStyleValueIsInfinity = function(name, value) {
                if (warnedForInfinityValue) {
                  return;
                }

                warnedForInfinityValue = true;
                warning$1(
                  false,
                  '`Infinity` is an invalid value for the `%s` css style property.',
                  name,
                );
              };

              warnValidStyle = function(name, value) {
                if (name.indexOf('-') > -1) {
                  warnHyphenatedStyleName(name);
                } else if (badVendoredStyleNamePattern.test(name)) {
                  warnBadVendoredStyleName(name);
                } else if (badStyleValueWithSemicolonPattern.test(value)) {
                  warnStyleValueWithSemicolon(name, value);
                }

                if (typeof value === 'number') {
                  if (isNaN(value)) {
                    warnStyleValueIsNaN(name, value);
                  } else if (!isFinite(value)) {
                    warnStyleValueIsInfinity(name, value);
                  }
                }
              };
            }

            var warnValidStyle$1 = warnValidStyle;

            /**
             * Operations for dealing with CSS properties.
             */

            /**
             * This creates a string that is expected to be equivalent to the style
             * attribute generated by server-side rendering. It by-passes warnings and
             * security checks so it's not safe to use this value for anything other than
             * comparison. It is only used in DEV for SSR validation.
             */
            function createDangerousStringForStyles(styles) {
              {
                var serialized = '';
                var delimiter = '';
                for (var styleName in styles) {
                  if (!styles.hasOwnProperty(styleName)) {
                    continue;
                  }
                  var styleValue = styles[styleName];
                  if (styleValue != null) {
                    var isCustomProperty = styleName.indexOf('--') === 0;
                    serialized +=
                      delimiter +
                      (isCustomProperty ? styleName : hyphenateStyleName(styleName)) +
                      ':';
                    serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);

                    delimiter = ';';
                  }
                }
                return serialized || null;
              }
            }

            /**
             * Sets the value for multiple styles on a node.  If a value is specified as
             * '' (empty string), the corresponding style property will be unset.
             *
             * @param {DOMElement} node
             * @param {object} styles
             */
            function setValueForStyles(node, styles) {
              var style = node.style;
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var isCustomProperty = styleName.indexOf('--') === 0;
                {
                  if (!isCustomProperty) {
                    warnValidStyle$1(styleName, styles[styleName]);
                  }
                }
                var styleValue = dangerousStyleValue(
                  styleName,
                  styles[styleName],
                  isCustomProperty,
                );
                if (styleName === 'float') {
                  styleName = 'cssFloat';
                }
                if (isCustomProperty) {
                  style.setProperty(styleName, styleValue);
                } else {
                  style[styleName] = styleValue;
                }
              }
            }

            function isValueEmpty(value) {
              return value == null || typeof value === 'boolean' || value === '';
            }

            /**
             * Given {color: 'red', overflow: 'hidden'} returns {
             *   color: 'color',
             *   overflowX: 'overflow',
             *   overflowY: 'overflow',
             * }. This can be read as "the overflowY property was set by the overflow
             * shorthand". That is, the values are the property that each was derived from.
             */
            function expandShorthandMap(styles) {
              var expanded = {};
              for (var key in styles) {
                var longhands = shorthandToLonghand[key] || [key];
                for (var i = 0; i < longhands.length; i++) {
                  expanded[longhands[i]] = key;
                }
              }
              return expanded;
            }

            /**
             * When mixing shorthand and longhand property names, we warn during updates if
             * we expect an incorrect result to occur. In particular, we warn for:
             *
             * Updating a shorthand property (longhand gets overwritten):
             *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
             *   becomes .style.font = 'baz'
             * Removing a shorthand property (longhand gets lost too):
             *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
             *   becomes .style.font = ''
             * Removing a longhand property (should revert to shorthand; doesn't):
             *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
             *   becomes .style.fontVariant = ''
             */
            function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
              if (!warnAboutShorthandPropertyCollision) {
                return;
              }

              if (!nextStyles) {
                return;
              }

              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + ',' + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  warning$1(
                    false,
                    '%s a style property during rerender (%s) when a ' +
                      'conflicting property is set (%s) can lead to styling bugs. To ' +
                      "avoid this, don't mix shorthand and non-shorthand properties " +
                      'for the same value; instead, replace the shorthand with ' +
                      'separate values.',
                    isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating',
                    originalKey,
                    correctOriginalKey,
                  );
                }
              }
            }

            // For HTML, certain tags should omit their close tag. We keep a whitelist for
            // those special-case tags.

            var omittedCloseTags = {
              area: true,
              base: true,
              br: true,
              col: true,
              embed: true,
              hr: true,
              img: true,
              input: true,
              keygen: true,
              link: true,
              meta: true,
              param: true,
              source: true,
              track: true,
              wbr: true,
              // NOTE: menuitem's close tag should be omitted, but that causes problems.
            };

            // For HTML, certain tags cannot have children. This has the same purpose as
            // `omittedCloseTags` except that `menuitem` should still have its closing tag.

            var voidElementTags = _assign(
              {
                menuitem: true,
              },
              omittedCloseTags,
            );

            // TODO: We can remove this if we add invariantWithStack()
            // or add stack by default to invariants where possible.
            var HTML$1 = '__html';

            var ReactDebugCurrentFrame$3 = null;
            {
              ReactDebugCurrentFrame$3 = ReactSharedInternals.ReactDebugCurrentFrame;
            }

            function assertValidProps(tag, props) {
              if (!props) {
                return;
              }
              // Note the use of `==` which checks for null or undefined.
              if (voidElementTags[tag]) {
                (function() {
                  if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
                    {
                      throw ReactError(
                        Error(
                          tag +
                            ' is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.' +
                            ReactDebugCurrentFrame$3.getStackAddendum(),
                        ),
                      );
                    }
                  }
                })();
              }
              if (props.dangerouslySetInnerHTML != null) {
                (function() {
                  if (!(props.children == null)) {
                    {
                      throw ReactError(
                        Error('Can only set one of `children` or `props.dangerouslySetInnerHTML`.'),
                      );
                    }
                  }
                })();
                (function() {
                  if (
                    !(
                      typeof props.dangerouslySetInnerHTML === 'object' &&
                      HTML$1 in props.dangerouslySetInnerHTML
                    )
                  ) {
                    {
                      throw ReactError(
                        Error(
                          '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.',
                        ),
                      );
                    }
                  }
                })();
              }
              {
                !(
                  props.suppressContentEditableWarning ||
                  !props.contentEditable ||
                  props.children == null
                )
                  ? warning$1(
                      false,
                      'A component is `contentEditable` and contains `children` managed by ' +
                        'React. It is now your responsibility to guarantee that none of ' +
                        'those nodes are unexpectedly modified or duplicated. This is ' +
                        'probably not intentional.',
                    )
                  : void 0;
              }
              (function() {
                if (!(props.style == null || typeof props.style === 'object')) {
                  {
                    throw ReactError(
                      Error(
                        "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX." +
                          ReactDebugCurrentFrame$3.getStackAddendum(),
                      ),
                    );
                  }
                }
              })();
            }

            function isCustomComponent(tagName, props) {
              if (tagName.indexOf('-') === -1) {
                return typeof props.is === 'string';
              }
              switch (tagName) {
                // These are reserved SVG and MathML elements.
                // We don't mind this whitelist too much because we expect it to never grow.
                // The alternative is to track the namespace in a few places which is convoluted.
                // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
                case 'annotation-xml':
                case 'color-profile':
                case 'font-face':
                case 'font-face-src':
                case 'font-face-uri':
                case 'font-face-format':
                case 'font-face-name':
                case 'missing-glyph':
                  return false;
                default:
                  return true;
              }
            }

            // When adding attributes to the HTML or SVG whitelist, be sure to
            // also add them to this module to ensure casing and incorrect name
            // warnings.
            var possibleStandardNames = {
              // HTML
              accept: 'accept',
              acceptcharset: 'acceptCharset',
              'accept-charset': 'acceptCharset',
              accesskey: 'accessKey',
              action: 'action',
              allowfullscreen: 'allowFullScreen',
              alt: 'alt',
              as: 'as',
              async: 'async',
              autocapitalize: 'autoCapitalize',
              autocomplete: 'autoComplete',
              autocorrect: 'autoCorrect',
              autofocus: 'autoFocus',
              autoplay: 'autoPlay',
              autosave: 'autoSave',
              capture: 'capture',
              cellpadding: 'cellPadding',
              cellspacing: 'cellSpacing',
              challenge: 'challenge',
              charset: 'charSet',
              checked: 'checked',
              children: 'children',
              cite: 'cite',
              class: 'className',
              classid: 'classID',
              classname: 'className',
              cols: 'cols',
              colspan: 'colSpan',
              content: 'content',
              contenteditable: 'contentEditable',
              contextmenu: 'contextMenu',
              controls: 'controls',
              controlslist: 'controlsList',
              coords: 'coords',
              crossorigin: 'crossOrigin',
              dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
              data: 'data',
              datetime: 'dateTime',
              default: 'default',
              defaultchecked: 'defaultChecked',
              defaultvalue: 'defaultValue',
              defer: 'defer',
              dir: 'dir',
              disabled: 'disabled',
              disablepictureinpicture: 'disablePictureInPicture',
              download: 'download',
              draggable: 'draggable',
              enctype: 'encType',
              for: 'htmlFor',
              form: 'form',
              formmethod: 'formMethod',
              formaction: 'formAction',
              formenctype: 'formEncType',
              formnovalidate: 'formNoValidate',
              formtarget: 'formTarget',
              frameborder: 'frameBorder',
              headers: 'headers',
              height: 'height',
              hidden: 'hidden',
              high: 'high',
              href: 'href',
              hreflang: 'hrefLang',
              htmlfor: 'htmlFor',
              httpequiv: 'httpEquiv',
              'http-equiv': 'httpEquiv',
              icon: 'icon',
              id: 'id',
              innerhtml: 'innerHTML',
              inputmode: 'inputMode',
              integrity: 'integrity',
              is: 'is',
              itemid: 'itemID',
              itemprop: 'itemProp',
              itemref: 'itemRef',
              itemscope: 'itemScope',
              itemtype: 'itemType',
              keyparams: 'keyParams',
              keytype: 'keyType',
              kind: 'kind',
              label: 'label',
              lang: 'lang',
              list: 'list',
              loop: 'loop',
              low: 'low',
              manifest: 'manifest',
              marginwidth: 'marginWidth',
              marginheight: 'marginHeight',
              max: 'max',
              maxlength: 'maxLength',
              media: 'media',
              mediagroup: 'mediaGroup',
              method: 'method',
              min: 'min',
              minlength: 'minLength',
              multiple: 'multiple',
              muted: 'muted',
              name: 'name',
              nomodule: 'noModule',
              nonce: 'nonce',
              novalidate: 'noValidate',
              open: 'open',
              optimum: 'optimum',
              pattern: 'pattern',
              placeholder: 'placeholder',
              playsinline: 'playsInline',
              poster: 'poster',
              preload: 'preload',
              profile: 'profile',
              radiogroup: 'radioGroup',
              readonly: 'readOnly',
              referrerpolicy: 'referrerPolicy',
              rel: 'rel',
              required: 'required',
              reversed: 'reversed',
              role: 'role',
              rows: 'rows',
              rowspan: 'rowSpan',
              sandbox: 'sandbox',
              scope: 'scope',
              scoped: 'scoped',
              scrolling: 'scrolling',
              seamless: 'seamless',
              selected: 'selected',
              shape: 'shape',
              size: 'size',
              sizes: 'sizes',
              span: 'span',
              spellcheck: 'spellCheck',
              src: 'src',
              srcdoc: 'srcDoc',
              srclang: 'srcLang',
              srcset: 'srcSet',
              start: 'start',
              step: 'step',
              style: 'style',
              summary: 'summary',
              tabindex: 'tabIndex',
              target: 'target',
              title: 'title',
              type: 'type',
              usemap: 'useMap',
              value: 'value',
              width: 'width',
              wmode: 'wmode',
              wrap: 'wrap',

              // SVG
              about: 'about',
              accentheight: 'accentHeight',
              'accent-height': 'accentHeight',
              accumulate: 'accumulate',
              additive: 'additive',
              alignmentbaseline: 'alignmentBaseline',
              'alignment-baseline': 'alignmentBaseline',
              allowreorder: 'allowReorder',
              alphabetic: 'alphabetic',
              amplitude: 'amplitude',
              arabicform: 'arabicForm',
              'arabic-form': 'arabicForm',
              ascent: 'ascent',
              attributename: 'attributeName',
              attributetype: 'attributeType',
              autoreverse: 'autoReverse',
              azimuth: 'azimuth',
              basefrequency: 'baseFrequency',
              baselineshift: 'baselineShift',
              'baseline-shift': 'baselineShift',
              baseprofile: 'baseProfile',
              bbox: 'bbox',
              begin: 'begin',
              bias: 'bias',
              by: 'by',
              calcmode: 'calcMode',
              capheight: 'capHeight',
              'cap-height': 'capHeight',
              clip: 'clip',
              clippath: 'clipPath',
              'clip-path': 'clipPath',
              clippathunits: 'clipPathUnits',
              cliprule: 'clipRule',
              'clip-rule': 'clipRule',
              color: 'color',
              colorinterpolation: 'colorInterpolation',
              'color-interpolation': 'colorInterpolation',
              colorinterpolationfilters: 'colorInterpolationFilters',
              'color-interpolation-filters': 'colorInterpolationFilters',
              colorprofile: 'colorProfile',
              'color-profile': 'colorProfile',
              colorrendering: 'colorRendering',
              'color-rendering': 'colorRendering',
              contentscripttype: 'contentScriptType',
              contentstyletype: 'contentStyleType',
              cursor: 'cursor',
              cx: 'cx',
              cy: 'cy',
              d: 'd',
              datatype: 'datatype',
              decelerate: 'decelerate',
              descent: 'descent',
              diffuseconstant: 'diffuseConstant',
              direction: 'direction',
              display: 'display',
              divisor: 'divisor',
              dominantbaseline: 'dominantBaseline',
              'dominant-baseline': 'dominantBaseline',
              dur: 'dur',
              dx: 'dx',
              dy: 'dy',
              edgemode: 'edgeMode',
              elevation: 'elevation',
              enablebackground: 'enableBackground',
              'enable-background': 'enableBackground',
              end: 'end',
              exponent: 'exponent',
              externalresourcesrequired: 'externalResourcesRequired',
              fill: 'fill',
              fillopacity: 'fillOpacity',
              'fill-opacity': 'fillOpacity',
              fillrule: 'fillRule',
              'fill-rule': 'fillRule',
              filter: 'filter',
              filterres: 'filterRes',
              filterunits: 'filterUnits',
              floodopacity: 'floodOpacity',
              'flood-opacity': 'floodOpacity',
              floodcolor: 'floodColor',
              'flood-color': 'floodColor',
              focusable: 'focusable',
              fontfamily: 'fontFamily',
              'font-family': 'fontFamily',
              fontsize: 'fontSize',
              'font-size': 'fontSize',
              fontsizeadjust: 'fontSizeAdjust',
              'font-size-adjust': 'fontSizeAdjust',
              fontstretch: 'fontStretch',
              'font-stretch': 'fontStretch',
              fontstyle: 'fontStyle',
              'font-style': 'fontStyle',
              fontvariant: 'fontVariant',
              'font-variant': 'fontVariant',
              fontweight: 'fontWeight',
              'font-weight': 'fontWeight',
              format: 'format',
              from: 'from',
              fx: 'fx',
              fy: 'fy',
              g1: 'g1',
              g2: 'g2',
              glyphname: 'glyphName',
              'glyph-name': 'glyphName',
              glyphorientationhorizontal: 'glyphOrientationHorizontal',
              'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
              glyphorientationvertical: 'glyphOrientationVertical',
              'glyph-orientation-vertical': 'glyphOrientationVertical',
              glyphref: 'glyphRef',
              gradienttransform: 'gradientTransform',
              gradientunits: 'gradientUnits',
              hanging: 'hanging',
              horizadvx: 'horizAdvX',
              'horiz-adv-x': 'horizAdvX',
              horizoriginx: 'horizOriginX',
              'horiz-origin-x': 'horizOriginX',
              ideographic: 'ideographic',
              imagerendering: 'imageRendering',
              'image-rendering': 'imageRendering',
              in2: 'in2',
              in: 'in',
              inlist: 'inlist',
              intercept: 'intercept',
              k1: 'k1',
              k2: 'k2',
              k3: 'k3',
              k4: 'k4',
              k: 'k',
              kernelmatrix: 'kernelMatrix',
              kernelunitlength: 'kernelUnitLength',
              kerning: 'kerning',
              keypoints: 'keyPoints',
              keysplines: 'keySplines',
              keytimes: 'keyTimes',
              lengthadjust: 'lengthAdjust',
              letterspacing: 'letterSpacing',
              'letter-spacing': 'letterSpacing',
              lightingcolor: 'lightingColor',
              'lighting-color': 'lightingColor',
              limitingconeangle: 'limitingConeAngle',
              local: 'local',
              markerend: 'markerEnd',
              'marker-end': 'markerEnd',
              markerheight: 'markerHeight',
              markermid: 'markerMid',
              'marker-mid': 'markerMid',
              markerstart: 'markerStart',
              'marker-start': 'markerStart',
              markerunits: 'markerUnits',
              markerwidth: 'markerWidth',
              mask: 'mask',
              maskcontentunits: 'maskContentUnits',
              maskunits: 'maskUnits',
              mathematical: 'mathematical',
              mode: 'mode',
              numoctaves: 'numOctaves',
              offset: 'offset',
              opacity: 'opacity',
              operator: 'operator',
              order: 'order',
              orient: 'orient',
              orientation: 'orientation',
              origin: 'origin',
              overflow: 'overflow',
              overlineposition: 'overlinePosition',
              'overline-position': 'overlinePosition',
              overlinethickness: 'overlineThickness',
              'overline-thickness': 'overlineThickness',
              paintorder: 'paintOrder',
              'paint-order': 'paintOrder',
              panose1: 'panose1',
              'panose-1': 'panose1',
              pathlength: 'pathLength',
              patterncontentunits: 'patternContentUnits',
              patterntransform: 'patternTransform',
              patternunits: 'patternUnits',
              pointerevents: 'pointerEvents',
              'pointer-events': 'pointerEvents',
              points: 'points',
              pointsatx: 'pointsAtX',
              pointsaty: 'pointsAtY',
              pointsatz: 'pointsAtZ',
              prefix: 'prefix',
              preservealpha: 'preserveAlpha',
              preserveaspectratio: 'preserveAspectRatio',
              primitiveunits: 'primitiveUnits',
              property: 'property',
              r: 'r',
              radius: 'radius',
              refx: 'refX',
              refy: 'refY',
              renderingintent: 'renderingIntent',
              'rendering-intent': 'renderingIntent',
              repeatcount: 'repeatCount',
              repeatdur: 'repeatDur',
              requiredextensions: 'requiredExtensions',
              requiredfeatures: 'requiredFeatures',
              resource: 'resource',
              restart: 'restart',
              result: 'result',
              results: 'results',
              rotate: 'rotate',
              rx: 'rx',
              ry: 'ry',
              scale: 'scale',
              security: 'security',
              seed: 'seed',
              shaperendering: 'shapeRendering',
              'shape-rendering': 'shapeRendering',
              slope: 'slope',
              spacing: 'spacing',
              specularconstant: 'specularConstant',
              specularexponent: 'specularExponent',
              speed: 'speed',
              spreadmethod: 'spreadMethod',
              startoffset: 'startOffset',
              stddeviation: 'stdDeviation',
              stemh: 'stemh',
              stemv: 'stemv',
              stitchtiles: 'stitchTiles',
              stopcolor: 'stopColor',
              'stop-color': 'stopColor',
              stopopacity: 'stopOpacity',
              'stop-opacity': 'stopOpacity',
              strikethroughposition: 'strikethroughPosition',
              'strikethrough-position': 'strikethroughPosition',
              strikethroughthickness: 'strikethroughThickness',
              'strikethrough-thickness': 'strikethroughThickness',
              string: 'string',
              stroke: 'stroke',
              strokedasharray: 'strokeDasharray',
              'stroke-dasharray': 'strokeDasharray',
              strokedashoffset: 'strokeDashoffset',
              'stroke-dashoffset': 'strokeDashoffset',
              strokelinecap: 'strokeLinecap',
              'stroke-linecap': 'strokeLinecap',
              strokelinejoin: 'strokeLinejoin',
              'stroke-linejoin': 'strokeLinejoin',
              strokemiterlimit: 'strokeMiterlimit',
              'stroke-miterlimit': 'strokeMiterlimit',
              strokewidth: 'strokeWidth',
              'stroke-width': 'strokeWidth',
              strokeopacity: 'strokeOpacity',
              'stroke-opacity': 'strokeOpacity',
              suppresscontenteditablewarning: 'suppressContentEditableWarning',
              suppresshydrationwarning: 'suppressHydrationWarning',
              surfacescale: 'surfaceScale',
              systemlanguage: 'systemLanguage',
              tablevalues: 'tableValues',
              targetx: 'targetX',
              targety: 'targetY',
              textanchor: 'textAnchor',
              'text-anchor': 'textAnchor',
              textdecoration: 'textDecoration',
              'text-decoration': 'textDecoration',
              textlength: 'textLength',
              textrendering: 'textRendering',
              'text-rendering': 'textRendering',
              to: 'to',
              transform: 'transform',
              typeof: 'typeof',
              u1: 'u1',
              u2: 'u2',
              underlineposition: 'underlinePosition',
              'underline-position': 'underlinePosition',
              underlinethickness: 'underlineThickness',
              'underline-thickness': 'underlineThickness',
              unicode: 'unicode',
              unicodebidi: 'unicodeBidi',
              'unicode-bidi': 'unicodeBidi',
              unicoderange: 'unicodeRange',
              'unicode-range': 'unicodeRange',
              unitsperem: 'unitsPerEm',
              'units-per-em': 'unitsPerEm',
              unselectable: 'unselectable',
              valphabetic: 'vAlphabetic',
              'v-alphabetic': 'vAlphabetic',
              values: 'values',
              vectoreffect: 'vectorEffect',
              'vector-effect': 'vectorEffect',
              version: 'version',
              vertadvy: 'vertAdvY',
              'vert-adv-y': 'vertAdvY',
              vertoriginx: 'vertOriginX',
              'vert-origin-x': 'vertOriginX',
              vertoriginy: 'vertOriginY',
              'vert-origin-y': 'vertOriginY',
              vhanging: 'vHanging',
              'v-hanging': 'vHanging',
              videographic: 'vIdeographic',
              'v-ideographic': 'vIdeographic',
              viewbox: 'viewBox',
              viewtarget: 'viewTarget',
              visibility: 'visibility',
              vmathematical: 'vMathematical',
              'v-mathematical': 'vMathematical',
              vocab: 'vocab',
              widths: 'widths',
              wordspacing: 'wordSpacing',
              'word-spacing': 'wordSpacing',
              writingmode: 'writingMode',
              'writing-mode': 'writingMode',
              x1: 'x1',
              x2: 'x2',
              x: 'x',
              xchannelselector: 'xChannelSelector',
              xheight: 'xHeight',
              'x-height': 'xHeight',
              xlinkactuate: 'xlinkActuate',
              'xlink:actuate': 'xlinkActuate',
              xlinkarcrole: 'xlinkArcrole',
              'xlink:arcrole': 'xlinkArcrole',
              xlinkhref: 'xlinkHref',
              'xlink:href': 'xlinkHref',
              xlinkrole: 'xlinkRole',
              'xlink:role': 'xlinkRole',
              xlinkshow: 'xlinkShow',
              'xlink:show': 'xlinkShow',
              xlinktitle: 'xlinkTitle',
              'xlink:title': 'xlinkTitle',
              xlinktype: 'xlinkType',
              'xlink:type': 'xlinkType',
              xmlbase: 'xmlBase',
              'xml:base': 'xmlBase',
              xmllang: 'xmlLang',
              'xml:lang': 'xmlLang',
              xmlns: 'xmlns',
              'xml:space': 'xmlSpace',
              xmlnsxlink: 'xmlnsXlink',
              'xmlns:xlink': 'xmlnsXlink',
              xmlspace: 'xmlSpace',
              y1: 'y1',
              y2: 'y2',
              y: 'y',
              ychannelselector: 'yChannelSelector',
              z: 'z',
              zoomandpan: 'zoomAndPan',
            };

            var ariaProperties = {
              'aria-current': 0, // state
              'aria-details': 0,
              'aria-disabled': 0, // state
              'aria-hidden': 0, // state
              'aria-invalid': 0, // state
              'aria-keyshortcuts': 0,
              'aria-label': 0,
              'aria-roledescription': 0,
              // Widget Attributes
              'aria-autocomplete': 0,
              'aria-checked': 0,
              'aria-expanded': 0,
              'aria-haspopup': 0,
              'aria-level': 0,
              'aria-modal': 0,
              'aria-multiline': 0,
              'aria-multiselectable': 0,
              'aria-orientation': 0,
              'aria-placeholder': 0,
              'aria-pressed': 0,
              'aria-readonly': 0,
              'aria-required': 0,
              'aria-selected': 0,
              'aria-sort': 0,
              'aria-valuemax': 0,
              'aria-valuemin': 0,
              'aria-valuenow': 0,
              'aria-valuetext': 0,
              // Live Region Attributes
              'aria-atomic': 0,
              'aria-busy': 0,
              'aria-live': 0,
              'aria-relevant': 0,
              // Drag-and-Drop Attributes
              'aria-dropeffect': 0,
              'aria-grabbed': 0,
              // Relationship Attributes
              'aria-activedescendant': 0,
              'aria-colcount': 0,
              'aria-colindex': 0,
              'aria-colspan': 0,
              'aria-controls': 0,
              'aria-describedby': 0,
              'aria-errormessage': 0,
              'aria-flowto': 0,
              'aria-labelledby': 0,
              'aria-owns': 0,
              'aria-posinset': 0,
              'aria-rowcount': 0,
              'aria-rowindex': 0,
              'aria-rowspan': 0,
              'aria-setsize': 0,
            };

            var warnedProperties = {};
            var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
            var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

            var hasOwnProperty$2 = Object.prototype.hasOwnProperty;

            function validateProperty(tagName, name) {
              if (hasOwnProperty$2.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }

              if (rARIACamel.test(name)) {
                var ariaName = 'aria-' + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;

                // If this is an aria-* attribute, but is not listed in the known DOM
                // DOM properties, then it is an invalid aria-* attribute.
                if (correctName == null) {
                  warning$1(
                    false,
                    'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.',
                    name,
                  );
                  warnedProperties[name] = true;
                  return true;
                }
                // aria-* attributes should be lowercase; suggest the lowercase version.
                if (name !== correctName) {
                  warning$1(
                    false,
                    'Invalid ARIA attribute `%s`. Did you mean `%s`?',
                    name,
                    correctName,
                  );
                  warnedProperties[name] = true;
                  return true;
                }
              }

              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName)
                  ? lowerCasedName
                  : null;

                // If this is an aria-* attribute, but is not listed in the known DOM
                // DOM properties, then it is an invalid aria-* attribute.
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                // aria-* attributes should be lowercase; suggest the lowercase version.
                if (name !== standardName) {
                  warning$1(
                    false,
                    'Unknown ARIA attribute `%s`. Did you mean `%s`?',
                    name,
                    standardName,
                  );
                  warnedProperties[name] = true;
                  return true;
                }
              }

              return true;
            }

            function warnInvalidARIAProps(type, props) {
              var invalidProps = [];

              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }

              var unknownPropString = invalidProps
                .map(function(prop) {
                  return '`' + prop + '`';
                })
                .join(', ');

              if (invalidProps.length === 1) {
                warning$1(
                  false,
                  'Invalid aria prop %s on <%s> tag. ' +
                    'For details, see https://fb.me/invalid-aria-prop',
                  unknownPropString,
                  type,
                );
              } else if (invalidProps.length > 1) {
                warning$1(
                  false,
                  'Invalid aria props %s on <%s> tag. ' +
                    'For details, see https://fb.me/invalid-aria-prop',
                  unknownPropString,
                  type,
                );
              }
            }

            function validateProperties(type, props) {
              if (isCustomComponent(type, props)) {
                return;
              }
              warnInvalidARIAProps(type, props);
            }

            var didWarnValueNull = false;

            function validateProperties$1(type, props) {
              if (type !== 'input' && type !== 'textarea' && type !== 'select') {
                return;
              }

              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === 'select' && props.multiple) {
                  warning$1(
                    false,
                    '`value` prop on `%s` should not be null. ' +
                      'Consider using an empty array when `multiple` is set to `true` ' +
                      'to clear the component or `undefined` for uncontrolled components.',
                    type,
                  );
                } else {
                  warning$1(
                    false,
                    '`value` prop on `%s` should not be null. ' +
                      'Consider using an empty string to clear the component or `undefined` ' +
                      'for uncontrolled components.',
                    type,
                  );
                }
              }
            }

            var validateProperty$1 = function() {};

            {
              var warnedProperties$1 = {};
              var _hasOwnProperty = Object.prototype.hasOwnProperty;
              var EVENT_NAME_REGEX = /^on./;
              var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
              var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
              var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

              validateProperty$1 = function(tagName, name, value, canUseEventSystem) {
                if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                  return true;
                }

                var lowerCasedName = name.toLowerCase();
                if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
                  warning$1(
                    false,
                    'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' +
                      'All React events are normalized to bubble, so onFocusIn and onFocusOut ' +
                      'are not needed/supported by React.',
                  );
                  warnedProperties$1[name] = true;
                  return true;
                }

                // We can't rely on the event system being injected on the server.
                if (canUseEventSystem) {
                  if (registrationNameModules.hasOwnProperty(name)) {
                    return true;
                  }
                  var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName)
                    ? possibleRegistrationNames[lowerCasedName]
                    : null;
                  if (registrationName != null) {
                    warning$1(
                      false,
                      'Invalid event handler property `%s`. Did you mean `%s`?',
                      name,
                      registrationName,
                    );
                    warnedProperties$1[name] = true;
                    return true;
                  }
                  if (EVENT_NAME_REGEX.test(name)) {
                    warning$1(
                      false,
                      'Unknown event handler property `%s`. It will be ignored.',
                      name,
                    );
                    warnedProperties$1[name] = true;
                    return true;
                  }
                } else if (EVENT_NAME_REGEX.test(name)) {
                  // If no event plugins have been injected, we are in a server environment.
                  // So we can't tell if the event name is correct for sure, but we can filter
                  // out known bad ones like `onclick`. We can't suggest a specific replacement though.
                  if (INVALID_EVENT_NAME_REGEX.test(name)) {
                    warning$1(
                      false,
                      'Invalid event handler property `%s`. ' +
                        'React events use the camelCase naming convention, for example `onClick`.',
                      name,
                    );
                  }
                  warnedProperties$1[name] = true;
                  return true;
                }

                // Let the ARIA attribute hook validate ARIA attributes
                if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                  return true;
                }

                if (lowerCasedName === 'innerhtml') {
                  warning$1(
                    false,
                    'Directly setting property `innerHTML` is not permitted. ' +
                      'For more information, lookup documentation on `dangerouslySetInnerHTML`.',
                  );
                  warnedProperties$1[name] = true;
                  return true;
                }

                if (lowerCasedName === 'aria') {
                  warning$1(
                    false,
                    'The `aria` attribute is reserved for future use in React. ' +
                      'Pass individual `aria-` attributes instead.',
                  );
                  warnedProperties$1[name] = true;
                  return true;
                }

                if (
                  lowerCasedName === 'is' &&
                  value !== null &&
                  value !== undefined &&
                  typeof value !== 'string'
                ) {
                  warning$1(
                    false,
                    'Received a `%s` for a string attribute `is`. If this is expected, cast ' +
                      'the value to a string.',
                    typeof value,
                  );
                  warnedProperties$1[name] = true;
                  return true;
                }

                if (typeof value === 'number' && isNaN(value)) {
                  warning$1(
                    false,
                    'Received NaN for the `%s` attribute. If this is expected, cast ' +
                      'the value to a string.',
                    name,
                  );
                  warnedProperties$1[name] = true;
                  return true;
                }

                var propertyInfo = getPropertyInfo(name);
                var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;

                // Known attributes should match the casing specified in the property config.
                if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                  var standardName = possibleStandardNames[lowerCasedName];
                  if (standardName !== name) {
                    warning$1(
                      false,
                      'Invalid DOM property `%s`. Did you mean `%s`?',
                      name,
                      standardName,
                    );
                    warnedProperties$1[name] = true;
                    return true;
                  }
                } else if (!isReserved && name !== lowerCasedName) {
                  // Unknown attributes should have lowercase casing since that's how they
                  // will be cased anyway with server rendering.
                  warning$1(
                    false,
                    'React does not recognize the `%s` prop on a DOM element. If you ' +
                      'intentionally want it to appear in the DOM as a custom ' +
                      'attribute, spell it as lowercase `%s` instead. ' +
                      'If you accidentally passed it from a parent component, remove ' +
                      'it from the DOM element.',
                    name,
                    lowerCasedName,
                  );
                  warnedProperties$1[name] = true;
                  return true;
                }

                if (
                  typeof value === 'boolean' &&
                  shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)
                ) {
                  if (value) {
                    warning$1(
                      false,
                      'Received `%s` for a non-boolean attribute `%s`.\n\n' +
                        'If you want to write it to the DOM, pass a string instead: ' +
                        '%s="%s" or %s={value.toString()}.',
                      value,
                      name,
                      name,
                      value,
                      name,
                    );
                  } else {
                    warning$1(
                      false,
                      'Received `%s` for a non-boolean attribute `%s`.\n\n' +
                        'If you want to write it to the DOM, pass a string instead: ' +
                        '%s="%s" or %s={value.toString()}.\n\n' +
                        'If you used to conditionally omit it with %s={condition && value}, ' +
                        'pass %s={condition ? value : undefined} instead.',
                      value,
                      name,
                      name,
                      value,
                      name,
                      name,
                      name,
                    );
                  }
                  warnedProperties$1[name] = true;
                  return true;
                }

                // Now that we've validated casing, do not validate
                // data types for reserved props
                if (isReserved) {
                  return true;
                }

                // Warn when a known attribute is a bad type
                if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                  warnedProperties$1[name] = true;
                  return false;
                }

                // Warn when passing the strings 'false' or 'true' into a boolean prop
                if (
                  (value === 'false' || value === 'true') &&
                  propertyInfo !== null &&
                  propertyInfo.type === BOOLEAN
                ) {
                  warning$1(
                    false,
                    'Received the string `%s` for the boolean attribute `%s`. ' +
                      '%s ' +
                      'Did you mean %s={%s}?',
                    value,
                    name,
                    value === 'false'
                      ? 'The browser will interpret it as a truthy value.'
                      : 'Although this works, it will not work as expected if you pass the string "false".',
                    name,
                    value,
                  );
                  warnedProperties$1[name] = true;
                  return true;
                }

                return true;
              };
            }

            var warnUnknownProperties = function(type, props, canUseEventSystem) {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }

              var unknownPropString = unknownProps
                .map(function(prop) {
                  return '`' + prop + '`';
                })
                .join(', ');
              if (unknownProps.length === 1) {
                warning$1(
                  false,
                  'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' +
                    'or pass a string or number value to keep it in the DOM. ' +
                    'For details, see https://fb.me/react-attribute-behavior',
                  unknownPropString,
                  type,
                );
              } else if (unknownProps.length > 1) {
                warning$1(
                  false,
                  'Invalid values for props %s on <%s> tag. Either remove them from the element, ' +
                    'or pass a string or number value to keep them in the DOM. ' +
                    'For details, see https://fb.me/react-attribute-behavior',
                  unknownPropString,
                  type,
                );
              }
            };

            function validateProperties$2(type, props, canUseEventSystem) {
              if (isCustomComponent(type, props)) {
                return;
              }
              warnUnknownProperties(type, props, canUseEventSystem);
            }

            // TODO: direct imports like some-package/src/* are bad. Fix me.
            var didWarnInvalidHydration = false;
            var didWarnShadyDOM = false;

            var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
            var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
            var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
            var AUTOFOCUS = 'autoFocus';
            var CHILDREN = 'children';
            var STYLE$1 = 'style';
            var HTML = '__html';
            var LISTENERS = 'listeners';

            var HTML_NAMESPACE = Namespaces.html;

            var warnedUnknownTags = void 0;
            var suppressHydrationWarning = void 0;

            var validatePropertiesInDevelopment = void 0;
            var warnForTextDifference = void 0;
            var warnForPropDifference = void 0;
            var warnForExtraAttributes = void 0;
            var warnForInvalidEventListener = void 0;
            var canDiffStyleForHydrationWarning = void 0;

            var normalizeMarkupForTextOrAttribute = void 0;
            var normalizeHTML = void 0;

            {
              warnedUnknownTags = {
                // Chrome is the only major browser not shipping <time>. But as of July
                // 2017 it intends to ship it due to widespread usage. We intentionally
                // *don't* warn for <time> even if it's unrecognized by Chrome because
                // it soon will be, and many apps have been using it anyway.
                time: true,
                // There are working polyfills for <dialog>. Let people use it.
                dialog: true,
                // Electron ships a custom <webview> tag to display external web content in
                // an isolated frame and process.
                // This tag is not present in non Electron environments such as JSDom which
                // is often used for testing purposes.
                // @see https://electronjs.org/docs/api/webview-tag
                webview: true,
              };

              validatePropertiesInDevelopment = function(type, props) {
                validateProperties(type, props);
                validateProperties$1(type, props);
                validateProperties$2(type, props, /* canUseEventSystem */ true);
              };

              // IE 11 parses & normalizes the style attribute as opposed to other
              // browsers. It adds spaces and sorts the properties in some
              // non-alphabetical order. Handling that would require sorting CSS
              // properties in the client & server versions or applying
              // `expectedStyle` to a temporary DOM node to read its `style` attribute
              // normalized. Since it only affects IE, we're skipping style warnings
              // in that browser completely in favor of doing all that work.
              // See https://github.com/facebook/react/issues/11807
              canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;

              // HTML parsing normalizes CR and CRLF to LF.
              // It also can turn \u0000 into \uFFFD inside attributes.
              // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
              // If we have a mismatch, it might be caused by that.
              // We will still patch up in this case but not fire the warning.
              var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
              var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

              normalizeMarkupForTextOrAttribute = function(markup) {
                var markupString = typeof markup === 'string' ? markup : '' + markup;
                return markupString
                  .replace(NORMALIZE_NEWLINES_REGEX, '\n')
                  .replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
              };

              warnForTextDifference = function(serverText, clientText) {
                if (didWarnInvalidHydration) {
                  return;
                }
                var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
                var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
                if (normalizedServerText === normalizedClientText) {
                  return;
                }
                didWarnInvalidHydration = true;
                warningWithoutStack$1(
                  false,
                  'Text content did not match. Server: "%s" Client: "%s"',
                  normalizedServerText,
                  normalizedClientText,
                );
              };

              warnForPropDifference = function(propName, serverValue, clientValue) {
                if (didWarnInvalidHydration) {
                  return;
                }
                var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
                var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
                if (normalizedServerValue === normalizedClientValue) {
                  return;
                }
                didWarnInvalidHydration = true;
                warningWithoutStack$1(
                  false,
                  'Prop `%s` did not match. Server: %s Client: %s',
                  propName,
                  JSON.stringify(normalizedServerValue),
                  JSON.stringify(normalizedClientValue),
                );
              };

              warnForExtraAttributes = function(attributeNames) {
                if (didWarnInvalidHydration) {
                  return;
                }
                didWarnInvalidHydration = true;
                var names = [];
                attributeNames.forEach(function(name) {
                  names.push(name);
                });
                warningWithoutStack$1(false, 'Extra attributes from the server: %s', names);
              };

              warnForInvalidEventListener = function(registrationName, listener) {
                if (listener === false) {
                  warning$1(
                    false,
                    'Expected `%s` listener to be a function, instead got `false`.\n\n' +
                      'If you used to conditionally omit it with %s={condition && value}, ' +
                      'pass %s={condition ? value : undefined} instead.',
                    registrationName,
                    registrationName,
                    registrationName,
                  );
                } else {
                  warning$1(
                    false,
                    'Expected `%s` listener to be a function, instead got a value of `%s` type.',
                    registrationName,
                    typeof listener,
                  );
                }
              };

              // Parse the HTML and read it back to normalize the HTML string so that it
              // can be used for comparison.
              normalizeHTML = function(parent, html) {
                // We could have created a separate document here to avoid
                // re-initializing custom elements if they exist. But this breaks
                // how <noscript> is being handled. So we use the same document.
                // See the discussion in https://github.com/facebook/react/pull/11157.
                var testElement =
                  parent.namespaceURI === HTML_NAMESPACE
                    ? parent.ownerDocument.createElement(parent.tagName)
                    : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
                testElement.innerHTML = html;
                return testElement.innerHTML;
              };
            }

            function ensureListeningTo(rootContainerElement, registrationName) {
              var isDocumentOrFragment =
                rootContainerElement.nodeType === DOCUMENT_NODE ||
                rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
              var doc = isDocumentOrFragment
                ? rootContainerElement
                : rootContainerElement.ownerDocument;
              listenTo(registrationName, doc);
            }

            function getOwnerDocumentFromRootContainer(rootContainerElement) {
              return rootContainerElement.nodeType === DOCUMENT_NODE
                ? rootContainerElement
                : rootContainerElement.ownerDocument;
            }

            function noop() {}

            function trapClickOnNonInteractiveElement(node) {
              // Mobile Safari does not fire properly bubble click events on
              // non-interactive elements, which means delegated click listeners do not
              // fire. The workaround for this bug involves attaching an empty click
              // listener on the target node.
              // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
              // Just set it using the onclick property so that we don't have to manage any
              // bookkeeping for it. Not sure if we need to clear it when the listener is
              // removed.
              // TODO: Only do this for the relevant Safaris maybe?
              node.onclick = noop;
            }

            function setInitialDOMProperties(
              tag,
              domElement,
              rootContainerElement,
              nextProps,
              isCustomComponentTag,
            ) {
              for (var propKey in nextProps) {
                if (!nextProps.hasOwnProperty(propKey)) {
                  continue;
                }
                var nextProp = nextProps[propKey];
                if (propKey === STYLE$1) {
                  {
                    if (nextProp) {
                      // Freeze the next style object so that we can assume it won't be
                      // mutated. We have already warned for this in the past.
                      Object.freeze(nextProp);
                    }
                  }
                  // Relies on `updateStylesByID` not mutating `styleUpdates`.
                  setValueForStyles(domElement, nextProp);
                } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var nextHtml = nextProp ? nextProp[HTML] : undefined;
                  if (nextHtml != null) {
                    setInnerHTML(domElement, nextHtml);
                  }
                } else if (propKey === CHILDREN) {
                  if (typeof nextProp === 'string') {
                    // Avoid setting initial textContent when the text is empty. In IE11 setting
                    // textContent on a <textarea> will cause the placeholder to not
                    // show within the <textarea> until it has been focused and blurred again.
                    // https://github.com/facebook/react/issues/6731#issuecomment-254874553
                    var canSetTextContent = tag !== 'textarea' || nextProp !== '';
                    if (canSetTextContent) {
                      setTextContent(domElement, nextProp);
                    }
                  } else if (typeof nextProp === 'number') {
                    setTextContent(domElement, '' + nextProp);
                  }
                } else if (
                  (enableFlareAPI && propKey === LISTENERS) ||
                  propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
                  propKey === SUPPRESS_HYDRATION_WARNING$1
                ) {
                  // Noop
                } else if (propKey === AUTOFOCUS) {
                  // We polyfill it separately on the client during commit.
                  // We could have excluded it in the property list instead of
                  // adding a special case here, but then it wouldn't be emitted
                  // on server rendering (but we *do* want to emit it in SSR).
                } else if (registrationNameModules.hasOwnProperty(propKey)) {
                  if (nextProp != null) {
                    if (true && typeof nextProp !== 'function') {
                      warnForInvalidEventListener(propKey, nextProp);
                    }
                    ensureListeningTo(rootContainerElement, propKey);
                  }
                } else if (nextProp != null) {
                  setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
                }
              }
            }

            function updateDOMProperties(
              domElement,
              updatePayload,
              wasCustomComponentTag,
              isCustomComponentTag,
            ) {
              // TODO: Handle wasCustomComponentTag
              for (var i = 0; i < updatePayload.length; i += 2) {
                var propKey = updatePayload[i];
                var propValue = updatePayload[i + 1];
                if (propKey === STYLE$1) {
                  setValueForStyles(domElement, propValue);
                } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  setInnerHTML(domElement, propValue);
                } else if (propKey === CHILDREN) {
                  setTextContent(domElement, propValue);
                } else {
                  setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
                }
              }
            }

            function createElement(type, props, rootContainerElement, parentNamespace) {
              var isCustomComponentTag = void 0;

              // We create tags in the namespace of their parent container, except HTML
              // tags get no namespace.
              var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
              var domElement = void 0;
              var namespaceURI = parentNamespace;
              if (namespaceURI === HTML_NAMESPACE) {
                namespaceURI = getIntrinsicNamespace(type);
              }
              if (namespaceURI === HTML_NAMESPACE) {
                {
                  isCustomComponentTag = isCustomComponent(type, props);
                  // Should this check be gated by parent namespace? Not sure we want to
                  // allow <SVG> or <mATH>.
                  !(isCustomComponentTag || type === type.toLowerCase())
                    ? warning$1(
                        false,
                        '<%s /> is using incorrect casing. ' +
                          'Use PascalCase for React components, ' +
                          'or lowercase for HTML elements.',
                        type,
                      )
                    : void 0;
                }

                if (type === 'script') {
                  // Create the script via .innerHTML so its "parser-inserted" flag is
                  // set to true and it does not execute
                  var div = ownerDocument.createElement('div');
                  div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
                  // This is guaranteed to yield a script element.
                  var firstChild = div.firstChild;
                  domElement = div.removeChild(firstChild);
                } else if (typeof props.is === 'string') {
                  // $FlowIssue `createElement` should be updated for Web Components
                  domElement = ownerDocument.createElement(type, { is: props.is });
                } else {
                  // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
                  // See discussion in https://github.com/facebook/react/pull/6896
                  // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
                  domElement = ownerDocument.createElement(type);
                  // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
                  // attributes on `select`s needs to be added before `option`s are inserted.
                  // This prevents:
                  // - a bug where the `select` does not scroll to the correct option because singular
                  //  `select` elements automatically pick the first item #13222
                  // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
                  // See https://github.com/facebook/react/issues/13222
                  // and https://github.com/facebook/react/issues/14239
                  if (type === 'select') {
                    var node = domElement;
                    if (props.multiple) {
                      node.multiple = true;
                    } else if (props.size) {
                      // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
                      // it is possible that no option is selected.
                      //
                      // This is only necessary when a select in "single selection mode".
                      node.size = props.size;
                    }
                  }
                }
              } else {
                domElement = ownerDocument.createElementNS(namespaceURI, type);
              }

              {
                if (namespaceURI === HTML_NAMESPACE) {
                  if (
                    !isCustomComponentTag &&
                    Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' &&
                    !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)
                  ) {
                    warnedUnknownTags[type] = true;
                    warning$1(
                      false,
                      'The tag <%s> is unrecognized in this browser. ' +
                        'If you meant to render a React component, start its name with ' +
                        'an uppercase letter.',
                      type,
                    );
                  }
                }
              }

              return domElement;
            }

            function createTextNode(text, rootContainerElement) {
              return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
            }

            function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
              var isCustomComponentTag = isCustomComponent(tag, rawProps);
              {
                validatePropertiesInDevelopment(tag, rawProps);
                if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
                  warning$1(
                    false,
                    '%s is using shady DOM. Using shady DOM with React can ' +
                      'cause things to break subtly.',
                    getCurrentFiberOwnerNameInDevOrNull() || 'A component',
                  );
                  didWarnShadyDOM = true;
                }
              }

              // TODO: Make sure that we check isMounted before firing any of these events.
              var props = void 0;
              switch (tag) {
                case 'iframe':
                case 'object':
                case 'embed':
                  trapBubbledEvent(TOP_LOAD, domElement);
                  props = rawProps;
                  break;
                case 'video':
                case 'audio':
                  // Create listener for each media event
                  for (var i = 0; i < mediaEventTypes.length; i++) {
                    trapBubbledEvent(mediaEventTypes[i], domElement);
                  }
                  props = rawProps;
                  break;
                case 'source':
                  trapBubbledEvent(TOP_ERROR, domElement);
                  props = rawProps;
                  break;
                case 'img':
                case 'image':
                case 'link':
                  trapBubbledEvent(TOP_ERROR, domElement);
                  trapBubbledEvent(TOP_LOAD, domElement);
                  props = rawProps;
                  break;
                case 'form':
                  trapBubbledEvent(TOP_RESET, domElement);
                  trapBubbledEvent(TOP_SUBMIT, domElement);
                  props = rawProps;
                  break;
                case 'details':
                  trapBubbledEvent(TOP_TOGGLE, domElement);
                  props = rawProps;
                  break;
                case 'input':
                  initWrapperState(domElement, rawProps);
                  props = getHostProps(domElement, rawProps);
                  trapBubbledEvent(TOP_INVALID, domElement);
                  // For controlled components we always need to ensure we're listening
                  // to onChange. Even if there is no listener.
                  ensureListeningTo(rootContainerElement, 'onChange');
                  break;
                case 'option':
                  validateProps(domElement, rawProps);
                  props = getHostProps$1(domElement, rawProps);
                  break;
                case 'select':
                  initWrapperState$1(domElement, rawProps);
                  props = getHostProps$2(domElement, rawProps);
                  trapBubbledEvent(TOP_INVALID, domElement);
                  // For controlled components we always need to ensure we're listening
                  // to onChange. Even if there is no listener.
                  ensureListeningTo(rootContainerElement, 'onChange');
                  break;
                case 'textarea':
                  initWrapperState$2(domElement, rawProps);
                  props = getHostProps$3(domElement, rawProps);
                  trapBubbledEvent(TOP_INVALID, domElement);
                  // For controlled components we always need to ensure we're listening
                  // to onChange. Even if there is no listener.
                  ensureListeningTo(rootContainerElement, 'onChange');
                  break;
                default:
                  props = rawProps;
              }

              assertValidProps(tag, props);

              setInitialDOMProperties(
                tag,
                domElement,
                rootContainerElement,
                props,
                isCustomComponentTag,
              );

              switch (tag) {
                case 'input':
                  // TODO: Make sure we check if this is still unmounted or do any clean
                  // up necessary since we never stop tracking anymore.
                  track(domElement);
                  postMountWrapper(domElement, rawProps, false);
                  break;
                case 'textarea':
                  // TODO: Make sure we check if this is still unmounted or do any clean
                  // up necessary since we never stop tracking anymore.
                  track(domElement);
                  postMountWrapper$3(domElement, rawProps);
                  break;
                case 'option':
                  postMountWrapper$1(domElement, rawProps);
                  break;
                case 'select':
                  postMountWrapper$2(domElement, rawProps);
                  break;
                default:
                  if (typeof props.onClick === 'function') {
                    // TODO: This cast may not be sound for SVG, MathML or custom elements.
                    trapClickOnNonInteractiveElement(domElement);
                  }
                  break;
              }
            }

            // Calculate the diff between the two objects.
            function diffProperties(
              domElement,
              tag,
              lastRawProps,
              nextRawProps,
              rootContainerElement,
            ) {
              {
                validatePropertiesInDevelopment(tag, nextRawProps);
              }

              var updatePayload = null;

              var lastProps = void 0;
              var nextProps = void 0;
              switch (tag) {
                case 'input':
                  lastProps = getHostProps(domElement, lastRawProps);
                  nextProps = getHostProps(domElement, nextRawProps);
                  updatePayload = [];
                  break;
                case 'option':
                  lastProps = getHostProps$1(domElement, lastRawProps);
                  nextProps = getHostProps$1(domElement, nextRawProps);
                  updatePayload = [];
                  break;
                case 'select':
                  lastProps = getHostProps$2(domElement, lastRawProps);
                  nextProps = getHostProps$2(domElement, nextRawProps);
                  updatePayload = [];
                  break;
                case 'textarea':
                  lastProps = getHostProps$3(domElement, lastRawProps);
                  nextProps = getHostProps$3(domElement, nextRawProps);
                  updatePayload = [];
                  break;
                default:
                  lastProps = lastRawProps;
                  nextProps = nextRawProps;
                  if (
                    typeof lastProps.onClick !== 'function' &&
                    typeof nextProps.onClick === 'function'
                  ) {
                    // TODO: This cast may not be sound for SVG, MathML or custom elements.
                    trapClickOnNonInteractiveElement(domElement);
                  }
                  break;
              }

              assertValidProps(tag, nextProps);

              var propKey = void 0;
              var styleName = void 0;
              var styleUpdates = null;
              for (propKey in lastProps) {
                if (
                  nextProps.hasOwnProperty(propKey) ||
                  !lastProps.hasOwnProperty(propKey) ||
                  lastProps[propKey] == null
                ) {
                  continue;
                }
                if (propKey === STYLE$1) {
                  var lastStyle = lastProps[propKey];
                  for (styleName in lastStyle) {
                    if (lastStyle.hasOwnProperty(styleName)) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = '';
                    }
                  }
                } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) {
                  // Noop. This is handled by the clear text mechanism.
                } else if (
                  (enableFlareAPI && propKey === LISTENERS) ||
                  propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
                  propKey === SUPPRESS_HYDRATION_WARNING$1
                ) {
                  // Noop
                } else if (propKey === AUTOFOCUS) {
                  // Noop. It doesn't work on updates anyway.
                } else if (registrationNameModules.hasOwnProperty(propKey)) {
                  // This is a special case. If any listener updates we need to ensure
                  // that the "current" fiber pointer gets updated so we need a commit
                  // to update this element.
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                } else {
                  // For all other deleted properties we add it to the queue. We use
                  // the whitelist in the commit phase instead.
                  (updatePayload = updatePayload || []).push(propKey, null);
                }
              }
              for (propKey in nextProps) {
                var nextProp = nextProps[propKey];
                var lastProp = lastProps != null ? lastProps[propKey] : undefined;
                if (
                  !nextProps.hasOwnProperty(propKey) ||
                  nextProp === lastProp ||
                  (nextProp == null && lastProp == null)
                ) {
                  continue;
                }
                if (propKey === STYLE$1) {
                  {
                    if (nextProp) {
                      // Freeze the next style object so that we can assume it won't be
                      // mutated. We have already warned for this in the past.
                      Object.freeze(nextProp);
                    }
                  }
                  if (lastProp) {
                    // Unset styles on `lastProp` but not on `nextProp`.
                    for (styleName in lastProp) {
                      if (
                        lastProp.hasOwnProperty(styleName) &&
                        (!nextProp || !nextProp.hasOwnProperty(styleName))
                      ) {
                        if (!styleUpdates) {
                          styleUpdates = {};
                        }
                        styleUpdates[styleName] = '';
                      }
                    }
                    // Update styles that changed since `lastProp`.
                    for (styleName in nextProp) {
                      if (
                        nextProp.hasOwnProperty(styleName) &&
                        lastProp[styleName] !== nextProp[styleName]
                      ) {
                        if (!styleUpdates) {
                          styleUpdates = {};
                        }
                        styleUpdates[styleName] = nextProp[styleName];
                      }
                    }
                  } else {
                    // Relies on `updateStylesByID` not mutating `styleUpdates`.
                    if (!styleUpdates) {
                      if (!updatePayload) {
                        updatePayload = [];
                      }
                      updatePayload.push(propKey, styleUpdates);
                    }
                    styleUpdates = nextProp;
                  }
                } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var nextHtml = nextProp ? nextProp[HTML] : undefined;
                  var lastHtml = lastProp ? lastProp[HTML] : undefined;
                  if (nextHtml != null) {
                    if (lastHtml !== nextHtml) {
                      (updatePayload = updatePayload || []).push(propKey, '' + nextHtml);
                    }
                  } else {
                    // TODO: It might be too late to clear this if we have children
                    // inserted already.
                  }
                } else if (propKey === CHILDREN) {
                  if (
                    lastProp !== nextProp &&
                    (typeof nextProp === 'string' || typeof nextProp === 'number')
                  ) {
                    (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
                  }
                } else if (
                  (enableFlareAPI && propKey === LISTENERS) ||
                  propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
                  propKey === SUPPRESS_HYDRATION_WARNING$1
                ) {
                  // Noop
                } else if (registrationNameModules.hasOwnProperty(propKey)) {
                  if (nextProp != null) {
                    // We eagerly listen to this even though we haven't committed yet.
                    if (true && typeof nextProp !== 'function') {
                      warnForInvalidEventListener(propKey, nextProp);
                    }
                    ensureListeningTo(rootContainerElement, propKey);
                  }
                  if (!updatePayload && lastProp !== nextProp) {
                    // This is a special case. If any listener updates we need to ensure
                    // that the "current" props pointer gets updated so we need a commit
                    // to update this element.
                    updatePayload = [];
                  }
                } else {
                  // For any other property we always add it to the queue and then we
                  // filter it out using the whitelist during the commit.
                  (updatePayload = updatePayload || []).push(propKey, nextProp);
                }
              }
              if (styleUpdates) {
                {
                  validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE$1]);
                }
                (updatePayload = updatePayload || []).push(STYLE$1, styleUpdates);
              }
              return updatePayload;
            }

            // Apply the diff.
            function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
              // Update checked *before* name.
              // In the middle of an update, it is possible to have multiple checked.
              // When a checked radio tries to change name, browser makes another radio's checked false.
              if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
                updateChecked(domElement, nextRawProps);
              }

              var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
              var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
              // Apply the diff.
              updateDOMProperties(
                domElement,
                updatePayload,
                wasCustomComponentTag,
                isCustomComponentTag,
              );

              // TODO: Ensure that an update gets scheduled if any of the special props
              // changed.
              switch (tag) {
                case 'input':
                  // Update the wrapper around inputs *after* updating props. This has to
                  // happen after `updateDOMProperties`. Otherwise HTML5 input validations
                  // raise warnings and prevent the new value from being assigned.
                  updateWrapper(domElement, nextRawProps);
                  break;
                case 'textarea':
                  updateWrapper$1(domElement, nextRawProps);
                  break;
                case 'select':
                  // <select> value update needs to occur after <option> children
                  // reconciliation
                  postUpdateWrapper(domElement, nextRawProps);
                  break;
              }
            }

            function getPossibleStandardName(propName) {
              {
                var lowerCasedName = propName.toLowerCase();
                if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                  return null;
                }
                return possibleStandardNames[lowerCasedName] || null;
              }
              return null;
            }

            function diffHydratedProperties(
              domElement,
              tag,
              rawProps,
              parentNamespace,
              rootContainerElement,
            ) {
              var isCustomComponentTag = void 0;
              var extraAttributeNames = void 0;

              {
                suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING$1] === true;
                isCustomComponentTag = isCustomComponent(tag, rawProps);
                validatePropertiesInDevelopment(tag, rawProps);
                if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
                  warning$1(
                    false,
                    '%s is using shady DOM. Using shady DOM with React can ' +
                      'cause things to break subtly.',
                    getCurrentFiberOwnerNameInDevOrNull() || 'A component',
                  );
                  didWarnShadyDOM = true;
                }
              }

              // TODO: Make sure that we check isMounted before firing any of these events.
              switch (tag) {
                case 'iframe':
                case 'object':
                case 'embed':
                  trapBubbledEvent(TOP_LOAD, domElement);
                  break;
                case 'video':
                case 'audio':
                  // Create listener for each media event
                  for (var i = 0; i < mediaEventTypes.length; i++) {
                    trapBubbledEvent(mediaEventTypes[i], domElement);
                  }
                  break;
                case 'source':
                  trapBubbledEvent(TOP_ERROR, domElement);
                  break;
                case 'img':
                case 'image':
                case 'link':
                  trapBubbledEvent(TOP_ERROR, domElement);
                  trapBubbledEvent(TOP_LOAD, domElement);
                  break;
                case 'form':
                  trapBubbledEvent(TOP_RESET, domElement);
                  trapBubbledEvent(TOP_SUBMIT, domElement);
                  break;
                case 'details':
                  trapBubbledEvent(TOP_TOGGLE, domElement);
                  break;
                case 'input':
                  initWrapperState(domElement, rawProps);
                  trapBubbledEvent(TOP_INVALID, domElement);
                  // For controlled components we always need to ensure we're listening
                  // to onChange. Even if there is no listener.
                  ensureListeningTo(rootContainerElement, 'onChange');
                  break;
                case 'option':
                  validateProps(domElement, rawProps);
                  break;
                case 'select':
                  initWrapperState$1(domElement, rawProps);
                  trapBubbledEvent(TOP_INVALID, domElement);
                  // For controlled components we always need to ensure we're listening
                  // to onChange. Even if there is no listener.
                  ensureListeningTo(rootContainerElement, 'onChange');
                  break;
                case 'textarea':
                  initWrapperState$2(domElement, rawProps);
                  trapBubbledEvent(TOP_INVALID, domElement);
                  // For controlled components we always need to ensure we're listening
                  // to onChange. Even if there is no listener.
                  ensureListeningTo(rootContainerElement, 'onChange');
                  break;
              }

              assertValidProps(tag, rawProps);

              {
                extraAttributeNames = new Set();
                var attributes = domElement.attributes;
                for (var _i = 0; _i < attributes.length; _i++) {
                  var name = attributes[_i].name.toLowerCase();
                  switch (name) {
                    // Built-in SSR attribute is whitelisted
                    case 'data-reactroot':
                      break;
                    // Controlled attributes are not validated
                    // TODO: Only ignore them on controlled tags.
                    case 'value':
                      break;
                    case 'checked':
                      break;
                    case 'selected':
                      break;
                    default:
                      // Intentionally use the original name.
                      // See discussion in https://github.com/facebook/react/pull/10676.
                      extraAttributeNames.add(attributes[_i].name);
                  }
                }
              }

              var updatePayload = null;
              for (var propKey in rawProps) {
                if (!rawProps.hasOwnProperty(propKey)) {
                  continue;
                }
                var nextProp = rawProps[propKey];
                if (propKey === CHILDREN) {
                  // For text content children we compare against textContent. This
                  // might match additional HTML that is hidden when we read it using
                  // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
                  // satisfies our requirement. Our requirement is not to produce perfect
                  // HTML and attributes. Ideally we should preserve structure but it's
                  // ok not to if the visible content is still enough to indicate what
                  // even listeners these nodes might be wired up to.
                  // TODO: Warn if there is more than a single textNode as a child.
                  // TODO: Should we use domElement.firstChild.nodeValue to compare?
                  if (typeof nextProp === 'string') {
                    if (domElement.textContent !== nextProp) {
                      if (true && !suppressHydrationWarning) {
                        warnForTextDifference(domElement.textContent, nextProp);
                      }
                      updatePayload = [CHILDREN, nextProp];
                    }
                  } else if (typeof nextProp === 'number') {
                    if (domElement.textContent !== '' + nextProp) {
                      if (true && !suppressHydrationWarning) {
                        warnForTextDifference(domElement.textContent, nextProp);
                      }
                      updatePayload = [CHILDREN, '' + nextProp];
                    }
                  }
                } else if (registrationNameModules.hasOwnProperty(propKey)) {
                  if (nextProp != null) {
                    if (true && typeof nextProp !== 'function') {
                      warnForInvalidEventListener(propKey, nextProp);
                    }
                    ensureListeningTo(rootContainerElement, propKey);
                  }
                } else if (
                  true &&
                  // Convince Flow we've calculated it (it's DEV-only in this method.)
                  typeof isCustomComponentTag === 'boolean'
                ) {
                  // Validate that the properties correspond to their expected values.
                  var serverValue = void 0;
                  var propertyInfo = getPropertyInfo(propKey);
                  if (suppressHydrationWarning) {
                    // Don't bother comparing. We're ignoring all these warnings.
                  } else if (
                    (enableFlareAPI && propKey === LISTENERS) ||
                    propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
                    propKey === SUPPRESS_HYDRATION_WARNING$1 ||
                    // Controlled attributes are not validated
                    // TODO: Only ignore them on controlled tags.
                    propKey === 'value' ||
                    propKey === 'checked' ||
                    propKey === 'selected'
                  ) {
                    // Noop
                  } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    var serverHTML = domElement.innerHTML;
                    var nextHtml = nextProp ? nextProp[HTML] : undefined;
                    var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : '');
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  } else if (propKey === STYLE$1) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey);

                    if (canDiffStyleForHydrationWarning) {
                      var expectedStyle = createDangerousStringForStyles(nextProp);
                      serverValue = domElement.getAttribute('style');
                      if (expectedStyle !== serverValue) {
                        warnForPropDifference(propKey, serverValue, expectedStyle);
                      }
                    }
                  } else if (isCustomComponentTag) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey.toLowerCase());
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);

                    if (nextProp !== serverValue) {
                      warnForPropDifference(propKey, serverValue, nextProp);
                    }
                  } else if (
                    !shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) &&
                    !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)
                  ) {
                    var isMismatchDueToBadCasing = false;
                    if (propertyInfo !== null) {
                      // $FlowFixMe - Should be inferred as not undefined.
                      extraAttributeNames.delete(propertyInfo.attributeName);
                      serverValue = getValueForProperty(
                        domElement,
                        propKey,
                        nextProp,
                        propertyInfo,
                      );
                    } else {
                      var ownNamespace = parentNamespace;
                      if (ownNamespace === HTML_NAMESPACE) {
                        ownNamespace = getIntrinsicNamespace(tag);
                      }
                      if (ownNamespace === HTML_NAMESPACE) {
                        // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propKey.toLowerCase());
                      } else {
                        var standardName = getPossibleStandardName(propKey);
                        if (standardName !== null && standardName !== propKey) {
                          // If an SVG prop is supplied with bad casing, it will
                          // be successfully parsed from HTML, but will produce a mismatch
                          // (and would be incorrectly rendered on the client).
                          // However, we already warn about bad casing elsewhere.
                          // So we'll skip the misleading extra mismatch warning in this case.
                          isMismatchDueToBadCasing = true;
                          // $FlowFixMe - Should be inferred as not undefined.
                          extraAttributeNames.delete(standardName);
                        }
                        // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propKey);
                      }
                      serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    }

                    if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                      warnForPropDifference(propKey, serverValue, nextProp);
                    }
                  }
                }
              }

              {
                // $FlowFixMe - Should be inferred as not undefined.
                if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
                  // $FlowFixMe - Should be inferred as not undefined.
                  warnForExtraAttributes(extraAttributeNames);
                }
              }

              switch (tag) {
                case 'input':
                  // TODO: Make sure we check if this is still unmounted or do any clean
                  // up necessary since we never stop tracking anymore.
                  track(domElement);
                  postMountWrapper(domElement, rawProps, true);
                  break;
                case 'textarea':
                  // TODO: Make sure we check if this is still unmounted or do any clean
                  // up necessary since we never stop tracking anymore.
                  track(domElement);
                  postMountWrapper$3(domElement, rawProps);
                  break;
                case 'select':
                case 'option':
                  // For input and textarea we current always set the value property at
                  // post mount to force it to diverge from attributes. However, for
                  // option and select we don't quite do the same thing and select
                  // is not resilient to the DOM state changing so we don't do that here.
                  // TODO: Consider not doing this for input and textarea.
                  break;
                default:
                  if (typeof rawProps.onClick === 'function') {
                    // TODO: This cast may not be sound for SVG, MathML or custom elements.
                    trapClickOnNonInteractiveElement(domElement);
                  }
                  break;
              }

              return updatePayload;
            }

            function diffHydratedText(textNode, text) {
              var isDifferent = textNode.nodeValue !== text;
              return isDifferent;
            }

            function warnForUnmatchedText(textNode, text) {
              {
                warnForTextDifference(textNode.nodeValue, text);
              }
            }

            function warnForDeletedHydratableElement(parentNode, child) {
              {
                if (didWarnInvalidHydration) {
                  return;
                }
                didWarnInvalidHydration = true;
                warningWithoutStack$1(
                  false,
                  'Did not expect server HTML to contain a <%s> in <%s>.',
                  child.nodeName.toLowerCase(),
                  parentNode.nodeName.toLowerCase(),
                );
              }
            }

            function warnForDeletedHydratableText(parentNode, child) {
              {
                if (didWarnInvalidHydration) {
                  return;
                }
                didWarnInvalidHydration = true;
                warningWithoutStack$1(
                  false,
                  'Did not expect server HTML to contain the text node "%s" in <%s>.',
                  child.nodeValue,
                  parentNode.nodeName.toLowerCase(),
                );
              }
            }

            function warnForInsertedHydratedElement(parentNode, tag, props) {
              {
                if (didWarnInvalidHydration) {
                  return;
                }
                didWarnInvalidHydration = true;
                warningWithoutStack$1(
                  false,
                  'Expected server HTML to contain a matching <%s> in <%s>.',
                  tag,
                  parentNode.nodeName.toLowerCase(),
                );
              }
            }

            function warnForInsertedHydratedText(parentNode, text) {
              {
                if (text === '') {
                  // We expect to insert empty text nodes since they're not represented in
                  // the HTML.
                  // TODO: Remove this special case if we can just avoid inserting empty
                  // text nodes.
                  return;
                }
                if (didWarnInvalidHydration) {
                  return;
                }
                didWarnInvalidHydration = true;
                warningWithoutStack$1(
                  false,
                  'Expected server HTML to contain a matching text node for "%s" in <%s>.',
                  text,
                  parentNode.nodeName.toLowerCase(),
                );
              }
            }

            function restoreControlledState$1(domElement, tag, props) {
              switch (tag) {
                case 'input':
                  restoreControlledState(domElement, props);
                  return;
                case 'textarea':
                  restoreControlledState$3(domElement, props);
                  return;
                case 'select':
                  restoreControlledState$2(domElement, props);
                  return;
              }
            }

            function listenToEventResponderEventTypes(eventTypes, element) {
              if (enableFlareAPI) {
                // Get the listening Set for this element. We use this to track
                // what events we're listening to.
                var listeningSet = getListeningSetForElement(element);

                // Go through each target event type of the event responder
                for (var i = 0, length = eventTypes.length; i < length; ++i) {
                  var eventType = eventTypes[i];
                  var isPassive = !endsWith(eventType, '_active');
                  var eventKey = isPassive ? eventType + '_passive' : eventType;
                  var targetEventType = isPassive
                    ? eventType
                    : eventType.substring(0, eventType.length - 7);
                  if (!listeningSet.has(eventKey)) {
                    trapEventForResponderEventSystem(element, targetEventType, isPassive);
                    listeningSet.add(eventKey);
                  }
                }
              }
            }

            // We can remove this once the event API is stable and out of a flag
            if (enableFlareAPI) {
              setListenToResponderEventTypes(listenToEventResponderEventTypes);
            }

            // TODO: direct imports like some-package/src/* are bad. Fix me.
            var validateDOMNesting = function() {};
            var updatedAncestorInfo = function() {};

            {
              // This validation code was written based on the HTML5 parsing spec:
              // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
              //
              // Note: this does not catch all invalid nesting, nor does it try to (as it's
              // not clear what practical benefit doing so provides); instead, we warn only
              // for cases where the parser will give a parse tree differing from what React
              // intended. For example, <b><div></div></b> is invalid but we don't warn
              // because it still parses correctly; we do warn for other cases like nested
              // <p> tags where the beginning of the second element implicitly closes the
              // first, causing a confusing mess.

              // https://html.spec.whatwg.org/multipage/syntax.html#special
              var specialTags = [
                'address',
                'applet',
                'area',
                'article',
                'aside',
                'base',
                'basefont',
                'bgsound',
                'blockquote',
                'body',
                'br',
                'button',
                'caption',
                'center',
                'col',
                'colgroup',
                'dd',
                'details',
                'dir',
                'div',
                'dl',
                'dt',
                'embed',
                'fieldset',
                'figcaption',
                'figure',
                'footer',
                'form',
                'frame',
                'frameset',
                'h1',
                'h2',
                'h3',
                'h4',
                'h5',
                'h6',
                'head',
                'header',
                'hgroup',
                'hr',
                'html',
                'iframe',
                'img',
                'input',
                'isindex',
                'li',
                'link',
                'listing',
                'main',
                'marquee',
                'menu',
                'menuitem',
                'meta',
                'nav',
                'noembed',
                'noframes',
                'noscript',
                'object',
                'ol',
                'p',
                'param',
                'plaintext',
                'pre',
                'script',
                'section',
                'select',
                'source',
                'style',
                'summary',
                'table',
                'tbody',
                'td',
                'template',
                'textarea',
                'tfoot',
                'th',
                'thead',
                'title',
                'tr',
                'track',
                'ul',
                'wbr',
                'xmp',
              ];

              // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
              var inScopeTags = [
                'applet',
                'caption',
                'html',
                'table',
                'td',
                'th',
                'marquee',
                'object',
                'template',

                // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
                // TODO: Distinguish by namespace here -- for <title>, including it here
                // errs on the side of fewer warnings
                'foreignObject',
                'desc',
                'title',
              ];

              // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
              var buttonScopeTags = inScopeTags.concat(['button']);

              // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
              var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

              var emptyAncestorInfo = {
                current: null,

                formTag: null,
                aTagInScope: null,
                buttonTagInScope: null,
                nobrTagInScope: null,
                pTagInButtonScope: null,

                listItemTagAutoclosing: null,
                dlItemTagAutoclosing: null,
              };

              updatedAncestorInfo = function(oldInfo, tag) {
                var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
                var info = { tag: tag };

                if (inScopeTags.indexOf(tag) !== -1) {
                  ancestorInfo.aTagInScope = null;
                  ancestorInfo.buttonTagInScope = null;
                  ancestorInfo.nobrTagInScope = null;
                }
                if (buttonScopeTags.indexOf(tag) !== -1) {
                  ancestorInfo.pTagInButtonScope = null;
                }

                // See rules for 'li', 'dd', 'dt' start tags in
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
                if (
                  specialTags.indexOf(tag) !== -1 &&
                  tag !== 'address' &&
                  tag !== 'div' &&
                  tag !== 'p'
                ) {
                  ancestorInfo.listItemTagAutoclosing = null;
                  ancestorInfo.dlItemTagAutoclosing = null;
                }

                ancestorInfo.current = info;

                if (tag === 'form') {
                  ancestorInfo.formTag = info;
                }
                if (tag === 'a') {
                  ancestorInfo.aTagInScope = info;
                }
                if (tag === 'button') {
                  ancestorInfo.buttonTagInScope = info;
                }
                if (tag === 'nobr') {
                  ancestorInfo.nobrTagInScope = info;
                }
                if (tag === 'p') {
                  ancestorInfo.pTagInButtonScope = info;
                }
                if (tag === 'li') {
                  ancestorInfo.listItemTagAutoclosing = info;
                }
                if (tag === 'dd' || tag === 'dt') {
                  ancestorInfo.dlItemTagAutoclosing = info;
                }

                return ancestorInfo;
              };

              /**
               * Returns whether
               */
              var isTagValidWithParent = function(tag, parentTag) {
                // First, let's check if we're in an unusual parsing mode...
                switch (parentTag) {
                  // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
                  case 'select':
                    return tag === 'option' || tag === 'optgroup' || tag === '#text';
                  case 'optgroup':
                    return tag === 'option' || tag === '#text';
                  // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
                  // but
                  case 'option':
                    return tag === '#text';
                  // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
                  // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
                  // No special behavior since these rules fall back to "in body" mode for
                  // all except special table nodes which cause bad parsing behavior anyway.

                  // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
                  case 'tr':
                    return (
                      tag === 'th' ||
                      tag === 'td' ||
                      tag === 'style' ||
                      tag === 'script' ||
                      tag === 'template'
                    );
                  // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
                  case 'tbody':
                  case 'thead':
                  case 'tfoot':
                    return (
                      tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template'
                    );
                  // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
                  case 'colgroup':
                    return tag === 'col' || tag === 'template';
                  // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
                  case 'table':
                    return (
                      tag === 'caption' ||
                      tag === 'colgroup' ||
                      tag === 'tbody' ||
                      tag === 'tfoot' ||
                      tag === 'thead' ||
                      tag === 'style' ||
                      tag === 'script' ||
                      tag === 'template'
                    );
                  // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
                  case 'head':
                    return (
                      tag === 'base' ||
                      tag === 'basefont' ||
                      tag === 'bgsound' ||
                      tag === 'link' ||
                      tag === 'meta' ||
                      tag === 'title' ||
                      tag === 'noscript' ||
                      tag === 'noframes' ||
                      tag === 'style' ||
                      tag === 'script' ||
                      tag === 'template'
                    );
                  // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
                  case 'html':
                    return tag === 'head' || tag === 'body' || tag === 'frameset';
                  case 'frameset':
                    return tag === 'frame';
                  case '#document':
                    return tag === 'html';
                }

                // Probably in the "in body" parsing mode, so we outlaw only tag combos
                // where the parsing rules cause implicit opens or closes to be added.
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
                switch (tag) {
                  case 'h1':
                  case 'h2':
                  case 'h3':
                  case 'h4':
                  case 'h5':
                  case 'h6':
                    return (
                      parentTag !== 'h1' &&
                      parentTag !== 'h2' &&
                      parentTag !== 'h3' &&
                      parentTag !== 'h4' &&
                      parentTag !== 'h5' &&
                      parentTag !== 'h6'
                    );

                  case 'rp':
                  case 'rt':
                    return impliedEndTags.indexOf(parentTag) === -1;

                  case 'body':
                  case 'caption':
                  case 'col':
                  case 'colgroup':
                  case 'frameset':
                  case 'frame':
                  case 'head':
                  case 'html':
                  case 'tbody':
                  case 'td':
                  case 'tfoot':
                  case 'th':
                  case 'thead':
                  case 'tr':
                    // These tags are only valid with a few parents that have special child
                    // parsing rules -- if we're down here, then none of those matched and
                    // so we allow it only if we don't know what the parent is, as all other
                    // cases are invalid.
                    return parentTag == null;
                }

                return true;
              };

              /**
               * Returns whether
               */
              var findInvalidAncestorForTag = function(tag, ancestorInfo) {
                switch (tag) {
                  case 'address':
                  case 'article':
                  case 'aside':
                  case 'blockquote':
                  case 'center':
                  case 'details':
                  case 'dialog':
                  case 'dir':
                  case 'div':
                  case 'dl':
                  case 'fieldset':
                  case 'figcaption':
                  case 'figure':
                  case 'footer':
                  case 'header':
                  case 'hgroup':
                  case 'main':
                  case 'menu':
                  case 'nav':
                  case 'ol':
                  case 'p':
                  case 'section':
                  case 'summary':
                  case 'ul':
                  case 'pre':
                  case 'listing':
                  case 'table':
                  case 'hr':
                  case 'xmp':
                  case 'h1':
                  case 'h2':
                  case 'h3':
                  case 'h4':
                  case 'h5':
                  case 'h6':
                    return ancestorInfo.pTagInButtonScope;

                  case 'form':
                    return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

                  case 'li':
                    return ancestorInfo.listItemTagAutoclosing;

                  case 'dd':
                  case 'dt':
                    return ancestorInfo.dlItemTagAutoclosing;

                  case 'button':
                    return ancestorInfo.buttonTagInScope;

                  case 'a':
                    // Spec says something about storing a list of markers, but it sounds
                    // equivalent to this check.
                    return ancestorInfo.aTagInScope;

                  case 'nobr':
                    return ancestorInfo.nobrTagInScope;
                }

                return null;
              };

              var didWarn$1 = {};

              validateDOMNesting = function(childTag, childText, ancestorInfo) {
                ancestorInfo = ancestorInfo || emptyAncestorInfo;
                var parentInfo = ancestorInfo.current;
                var parentTag = parentInfo && parentInfo.tag;

                if (childText != null) {
                  !(childTag == null)
                    ? warningWithoutStack$1(
                        false,
                        'validateDOMNesting: when childText is passed, childTag should be null',
                      )
                    : void 0;
                  childTag = '#text';
                }

                var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
                var invalidAncestor = invalidParent
                  ? null
                  : findInvalidAncestorForTag(childTag, ancestorInfo);
                var invalidParentOrAncestor = invalidParent || invalidAncestor;
                if (!invalidParentOrAncestor) {
                  return;
                }

                var ancestorTag = invalidParentOrAncestor.tag;
                var addendum = getCurrentFiberStackInDev();

                var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;
                if (didWarn$1[warnKey]) {
                  return;
                }
                didWarn$1[warnKey] = true;

                var tagDisplayName = childTag;
                var whitespaceInfo = '';
                if (childTag === '#text') {
                  if (/\S/.test(childText)) {
                    tagDisplayName = 'Text nodes';
                  } else {
                    tagDisplayName = 'Whitespace text nodes';
                    whitespaceInfo =
                      " Make sure you don't have any extra whitespace between tags on " +
                      'each line of your source code.';
                  }
                } else {
                  tagDisplayName = '<' + childTag + '>';
                }

                if (invalidParent) {
                  var info = '';
                  if (ancestorTag === 'table' && childTag === 'tr') {
                    info +=
                      ' Add a <tbody> to your code to match the DOM tree generated by ' +
                      'the browser.';
                  }
                  warningWithoutStack$1(
                    false,
                    'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s',
                    tagDisplayName,
                    ancestorTag,
                    whitespaceInfo,
                    info,
                    addendum,
                  );
                } else {
                  warningWithoutStack$1(
                    false,
                    'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.%s',
                    tagDisplayName,
                    ancestorTag,
                    addendum,
                  );
                }
              };
            }

            // Renderers that don't support persistence
            // can re-export everything from this module.

            function shim() {
              (function() {
                {
                  {
                    throw ReactError(
                      Error(
                        'The current renderer does not support persistence. This error is likely caused by a bug in React. Please file an issue.',
                      ),
                    );
                  }
                }
              })();
            }

            // Persistence (when unsupported)
            var supportsPersistence = false;
            var cloneInstance = shim;
            var cloneFundamentalInstance = shim;
            var createContainerChildSet = shim;
            var appendChildToContainerChildSet = shim;
            var finalizeContainerChildren = shim;
            var replaceContainerChildren = shim;
            var cloneHiddenInstance = shim;
            var cloneHiddenTextInstance = shim;

            var SUPPRESS_HYDRATION_WARNING = void 0;
            {
              SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
            }

            var SUSPENSE_START_DATA = '$';
            var SUSPENSE_END_DATA = '/$';
            var SUSPENSE_PENDING_START_DATA = '$?';
            var SUSPENSE_FALLBACK_START_DATA = '$!';

            var STYLE = 'style';

            var eventsEnabled = null;
            var selectionInformation = null;

            function shouldAutoFocusHostComponent(type, props) {
              switch (type) {
                case 'button':
                case 'input':
                case 'select':
                case 'textarea':
                  return !!props.autoFocus;
              }
              return false;
            }

            function getRootHostContext(rootContainerInstance) {
              var type = void 0;
              var namespace = void 0;
              var nodeType = rootContainerInstance.nodeType;
              switch (nodeType) {
                case DOCUMENT_NODE:
                case DOCUMENT_FRAGMENT_NODE: {
                  type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
                  var root = rootContainerInstance.documentElement;
                  namespace = root ? root.namespaceURI : getChildNamespace(null, '');
                  break;
                }
                default: {
                  var container =
                    nodeType === COMMENT_NODE
                      ? rootContainerInstance.parentNode
                      : rootContainerInstance;
                  var ownNamespace = container.namespaceURI || null;
                  type = container.tagName;
                  namespace = getChildNamespace(ownNamespace, type);
                  break;
                }
              }
              {
                var validatedTag = type.toLowerCase();
                var _ancestorInfo = updatedAncestorInfo(null, validatedTag);
                return { namespace: namespace, ancestorInfo: _ancestorInfo };
              }
              return namespace;
            }

            function getChildHostContext(parentHostContext, type, rootContainerInstance) {
              {
                var parentHostContextDev = parentHostContext;
                var _namespace = getChildNamespace(parentHostContextDev.namespace, type);
                var _ancestorInfo2 = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
                return { namespace: _namespace, ancestorInfo: _ancestorInfo2 };
              }
              var parentNamespace = parentHostContext;
              return getChildNamespace(parentNamespace, type);
            }

            function getPublicInstance(instance) {
              return instance;
            }

            function prepareForCommit(containerInfo) {
              eventsEnabled = isEnabled();
              selectionInformation = getSelectionInformation();
              setEnabled(false);
            }

            function resetAfterCommit(containerInfo) {
              restoreSelection(selectionInformation);
              selectionInformation = null;
              setEnabled(eventsEnabled);
              eventsEnabled = null;
            }

            function createInstance(
              type,
              props,
              rootContainerInstance,
              hostContext,
              internalInstanceHandle,
            ) {
              var parentNamespace = void 0;
              {
                // TODO: take namespace into account when validating.
                var hostContextDev = hostContext;
                validateDOMNesting(type, null, hostContextDev.ancestorInfo);
                if (typeof props.children === 'string' || typeof props.children === 'number') {
                  var string = '' + props.children;
                  var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                  validateDOMNesting(null, string, ownAncestorInfo);
                }
                parentNamespace = hostContextDev.namespace;
              }
              var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
              precacheFiberNode(internalInstanceHandle, domElement);
              updateFiberProps(domElement, props);
              return domElement;
            }

            function appendInitialChild(parentInstance, child) {
              parentInstance.appendChild(child);
            }

            function finalizeInitialChildren(
              domElement,
              type,
              props,
              rootContainerInstance,
              hostContext,
            ) {
              setInitialProperties(domElement, type, props, rootContainerInstance);
              return shouldAutoFocusHostComponent(type, props);
            }

            function prepareUpdate(
              domElement,
              type,
              oldProps,
              newProps,
              rootContainerInstance,
              hostContext,
            ) {
              {
                var hostContextDev = hostContext;
                if (
                  typeof newProps.children !== typeof oldProps.children &&
                  (typeof newProps.children === 'string' || typeof newProps.children === 'number')
                ) {
                  var string = '' + newProps.children;
                  var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                  validateDOMNesting(null, string, ownAncestorInfo);
                }
              }
              return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
            }

            function shouldSetTextContent(type, props) {
              return (
                type === 'textarea' ||
                type === 'option' ||
                type === 'noscript' ||
                typeof props.children === 'string' ||
                typeof props.children === 'number' ||
                (typeof props.dangerouslySetInnerHTML === 'object' &&
                  props.dangerouslySetInnerHTML !== null &&
                  props.dangerouslySetInnerHTML.__html != null)
              );
            }

            function shouldDeprioritizeSubtree(type, props) {
              return !!props.hidden;
            }

            function createTextInstance(
              text,
              rootContainerInstance,
              hostContext,
              internalInstanceHandle,
            ) {
              {
                var hostContextDev = hostContext;
                validateDOMNesting(null, text, hostContextDev.ancestorInfo);
              }
              var textNode = createTextNode(text, rootContainerInstance);
              precacheFiberNode(internalInstanceHandle, textNode);
              return textNode;
            }

            var isPrimaryRenderer = true;
            var warnsIfNotActing = true;
            // This initialization code may run even on server environments
            // if a component just imports ReactDOM (e.g. for findDOMNode).
            // Some environments might not have setTimeout or clearTimeout.
            var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
            var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
            var noTimeout = -1;

            // -------------------
            //     Mutation
            // -------------------

            var supportsMutation = true;

            function commitMount(domElement, type, newProps, internalInstanceHandle) {
              // Despite the naming that might imply otherwise, this method only
              // fires if there is an `Update` effect scheduled during mounting.
              // This happens if `finalizeInitialChildren` returns `true` (which it
              // does to implement the `autoFocus` attribute on the client). But
              // there are also other cases when this might happen (such as patching
              // up text content during hydration mismatch). So we'll check this again.
              if (shouldAutoFocusHostComponent(type, newProps)) {
                domElement.focus();
              }
            }

            function commitUpdate(
              domElement,
              updatePayload,
              type,
              oldProps,
              newProps,
              internalInstanceHandle,
            ) {
              // Update the props handle so that we know which props are the ones with
              // with current event handlers.
              updateFiberProps(domElement, newProps);
              // Apply the diff to the DOM node.
              updateProperties(domElement, updatePayload, type, oldProps, newProps);
            }

            function resetTextContent(domElement) {
              setTextContent(domElement, '');
            }

            function commitTextUpdate(textInstance, oldText, newText) {
              textInstance.nodeValue = newText;
            }

            function appendChild(parentInstance, child) {
              parentInstance.appendChild(child);
            }

            function appendChildToContainer(container, child) {
              var parentNode = void 0;
              if (container.nodeType === COMMENT_NODE) {
                parentNode = container.parentNode;
                parentNode.insertBefore(child, container);
              } else {
                parentNode = container;
                parentNode.appendChild(child);
              }
              // This container might be used for a portal.
              // If something inside a portal is clicked, that click should bubble
              // through the React tree. However, on Mobile Safari the click would
              // never bubble through the *DOM* tree unless an ancestor with onclick
              // event exists. So we wouldn't see it and dispatch it.
              // This is why we ensure that non React root containers have inline onclick
              // defined.
              // https://github.com/facebook/react/issues/11918
              var reactRootContainer = container._reactRootContainer;
              if (
                (reactRootContainer === null || reactRootContainer === undefined) &&
                parentNode.onclick === null
              ) {
                // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(parentNode);
              }
            }

            function insertBefore(parentInstance, child, beforeChild) {
              parentInstance.insertBefore(child, beforeChild);
            }

            function insertInContainerBefore(container, child, beforeChild) {
              if (container.nodeType === COMMENT_NODE) {
                container.parentNode.insertBefore(child, beforeChild);
              } else {
                container.insertBefore(child, beforeChild);
              }
            }

            function removeChild(parentInstance, child) {
              parentInstance.removeChild(child);
            }

            function removeChildFromContainer(container, child) {
              if (container.nodeType === COMMENT_NODE) {
                container.parentNode.removeChild(child);
              } else {
                container.removeChild(child);
              }
            }

            function clearSuspenseBoundary(parentInstance, suspenseInstance) {
              var node = suspenseInstance;
              // Delete all nodes within this suspense boundary.
              // There might be nested nodes so we need to keep track of how
              // deep we are and only break out when we're back on top.
              var depth = 0;
              do {
                var nextNode = node.nextSibling;
                parentInstance.removeChild(node);
                if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                  var data = nextNode.data;
                  if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) {
                      parentInstance.removeChild(nextNode);
                      return;
                    } else {
                      depth--;
                    }
                  } else if (
                    data === SUSPENSE_START_DATA ||
                    data === SUSPENSE_PENDING_START_DATA ||
                    data === SUSPENSE_FALLBACK_START_DATA
                  ) {
                    depth++;
                  }
                }
                node = nextNode;
              } while (node);
              // TODO: Warn, we didn't find the end comment boundary.
            }

            function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
              if (container.nodeType === COMMENT_NODE) {
                clearSuspenseBoundary(container.parentNode, suspenseInstance);
              } else if (container.nodeType === ELEMENT_NODE) {
                clearSuspenseBoundary(container, suspenseInstance);
              } else {
                // Document nodes should never contain suspense boundaries.
              }
            }

            function hideInstance(instance) {
              // TODO: Does this work for all element types? What about MathML? Should we
              // pass host context to this method?
              instance = instance;
              var style = instance.style;
              if (typeof style.setProperty === 'function') {
                style.setProperty('display', 'none', 'important');
              } else {
                style.display = 'none';
              }
            }

            function hideTextInstance(textInstance) {
              textInstance.nodeValue = '';
            }

            function unhideInstance(instance, props) {
              instance = instance;
              var styleProp = props[STYLE];
              var display =
                styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display')
                  ? styleProp.display
                  : null;
              instance.style.display = dangerousStyleValue('display', display);
            }

            function unhideTextInstance(textInstance, text) {
              textInstance.nodeValue = text;
            }

            // -------------------
            //     Hydration
            // -------------------

            var supportsHydration = true;

            function canHydrateInstance(instance, type, props) {
              if (
                instance.nodeType !== ELEMENT_NODE ||
                type.toLowerCase() !== instance.nodeName.toLowerCase()
              ) {
                return null;
              }
              // This has now been refined to an element node.
              return instance;
            }

            function canHydrateTextInstance(instance, text) {
              if (text === '' || instance.nodeType !== TEXT_NODE) {
                // Empty strings are not parsed by HTML so there won't be a correct match here.
                return null;
              }
              // This has now been refined to a text node.
              return instance;
            }

            function canHydrateSuspenseInstance(instance) {
              if (instance.nodeType !== COMMENT_NODE) {
                // Empty strings are not parsed by HTML so there won't be a correct match here.
                return null;
              }
              // This has now been refined to a suspense node.
              return instance;
            }

            function isSuspenseInstancePending(instance) {
              return instance.data === SUSPENSE_PENDING_START_DATA;
            }

            function isSuspenseInstanceFallback(instance) {
              return instance.data === SUSPENSE_FALLBACK_START_DATA;
            }

            function registerSuspenseInstanceRetry(instance, callback) {
              instance._reactRetry = callback;
            }

            function getNextHydratable(node) {
              // Skip non-hydratable nodes.
              for (; node != null; node = node.nextSibling) {
                var nodeType = node.nodeType;
                if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                  break;
                }
                if (enableSuspenseServerRenderer) {
                  if (nodeType === COMMENT_NODE) {
                    break;
                  }
                  var nodeData = node.data;
                  if (
                    nodeData === SUSPENSE_START_DATA ||
                    nodeData === SUSPENSE_FALLBACK_START_DATA ||
                    nodeData === SUSPENSE_PENDING_START_DATA
                  ) {
                    break;
                  }
                }
              }
              return node;
            }

            function getNextHydratableSibling(instance) {
              return getNextHydratable(instance.nextSibling);
            }

            function getFirstHydratableChild(parentInstance) {
              return getNextHydratable(parentInstance.firstChild);
            }

            function hydrateInstance(
              instance,
              type,
              props,
              rootContainerInstance,
              hostContext,
              internalInstanceHandle,
            ) {
              precacheFiberNode(internalInstanceHandle, instance);
              // TODO: Possibly defer this until the commit phase where all the events
              // get attached.
              updateFiberProps(instance, props);
              var parentNamespace = void 0;
              {
                var hostContextDev = hostContext;
                parentNamespace = hostContextDev.namespace;
              }
              return diffHydratedProperties(
                instance,
                type,
                props,
                parentNamespace,
                rootContainerInstance,
              );
            }

            function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
              precacheFiberNode(internalInstanceHandle, textInstance);
              return diffHydratedText(textInstance, text);
            }

            function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
              var node = suspenseInstance.nextSibling;
              // Skip past all nodes within this suspense boundary.
              // There might be nested nodes so we need to keep track of how
              // deep we are and only break out when we're back on top.
              var depth = 0;
              while (node) {
                if (node.nodeType === COMMENT_NODE) {
                  var data = node.data;
                  if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) {
                      return getNextHydratableSibling(node);
                    } else {
                      depth--;
                    }
                  } else if (data === SUSPENSE_START_DATA) {
                    depth++;
                  }
                }
                node = node.nextSibling;
              }
              // TODO: Warn, we didn't find the end comment boundary.
              return null;
            }

            function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
              {
                warnForUnmatchedText(textInstance, text);
              }
            }

            function didNotMatchHydratedTextInstance(
              parentType,
              parentProps,
              parentInstance,
              textInstance,
              text,
            ) {
              if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                warnForUnmatchedText(textInstance, text);
              }
            }

            function didNotHydrateContainerInstance(parentContainer, instance) {
              {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentContainer, instance);
                } else if (instance.nodeType === COMMENT_NODE) {
                  // TODO: warnForDeletedHydratableSuspenseBoundary
                } else {
                  warnForDeletedHydratableText(parentContainer, instance);
                }
              }
            }

            function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
              if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE) {
                  // TODO: warnForDeletedHydratableSuspenseBoundary
                } else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }

            function didNotFindHydratableContainerInstance(parentContainer, type, props) {
              {
                warnForInsertedHydratedElement(parentContainer, type, props);
              }
            }

            function didNotFindHydratableContainerTextInstance(parentContainer, text) {
              {
                warnForInsertedHydratedText(parentContainer, text);
              }
            }

            function didNotFindHydratableInstance(
              parentType,
              parentProps,
              parentInstance,
              type,
              props,
            ) {
              if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                warnForInsertedHydratedElement(parentInstance, type, props);
              }
            }

            function didNotFindHydratableTextInstance(
              parentType,
              parentProps,
              parentInstance,
              text,
            ) {
              if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }

            function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
              if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                // TODO: warnForInsertedHydratedSuspense(parentInstance);
              }
            }

            function mountResponderInstance(
              responder,
              responderInstance,
              responderProps,
              responderState,
              instance,
              rootContainerInstance,
            ) {
              // Listen to events
              var doc = rootContainerInstance.ownerDocument;
              var documentBody = doc.body || doc;
              var _ref = responder,
                rootEventTypes = _ref.rootEventTypes,
                targetEventTypes = _ref.targetEventTypes;

              if (targetEventTypes !== null) {
                listenToEventResponderEventTypes(targetEventTypes, documentBody);
              }
              if (rootEventTypes !== null) {
                addRootEventTypesForResponderInstance(responderInstance, rootEventTypes);
                listenToEventResponderEventTypes(rootEventTypes, documentBody);
              }
              mountEventResponder(responder, responderInstance, responderProps, responderState);
              return responderInstance;
            }

            function unmountResponderInstance(responderInstance) {
              if (enableFlareAPI) {
                // TODO stop listening to targetEventTypes
                unmountEventResponder(responderInstance);
              }
            }

            function getFundamentalComponentInstance(fundamentalInstance) {
              if (enableFundamentalAPI) {
                var currentFiber = fundamentalInstance.currentFiber,
                  impl = fundamentalInstance.impl,
                  _props = fundamentalInstance.props,
                  state = fundamentalInstance.state;

                var instance = impl.getInstance(null, _props, state);
                precacheFiberNode(currentFiber, instance);
                return instance;
              }
              // Because of the flag above, this gets around the Flow error;
              return null;
            }

            function mountFundamentalComponent(fundamentalInstance) {
              if (enableFundamentalAPI) {
                var impl = fundamentalInstance.impl,
                  instance = fundamentalInstance.instance,
                  _props2 = fundamentalInstance.props,
                  state = fundamentalInstance.state;

                var onMount = impl.onMount;
                if (onMount !== undefined) {
                  onMount(null, instance, _props2, state);
                }
              }
            }

            function shouldUpdateFundamentalComponent(fundamentalInstance) {
              if (enableFundamentalAPI) {
                var impl = fundamentalInstance.impl,
                  prevProps = fundamentalInstance.prevProps,
                  _props3 = fundamentalInstance.props,
                  state = fundamentalInstance.state;

                var shouldUpdate = impl.shouldUpdate;
                if (shouldUpdate !== undefined) {
                  return shouldUpdate(null, prevProps, _props3, state);
                }
              }
              return true;
            }

            function updateFundamentalComponent(fundamentalInstance) {
              if (enableFundamentalAPI) {
                var impl = fundamentalInstance.impl,
                  instance = fundamentalInstance.instance,
                  prevProps = fundamentalInstance.prevProps,
                  _props4 = fundamentalInstance.props,
                  state = fundamentalInstance.state;

                var onUpdate = impl.onUpdate;
                if (onUpdate !== undefined) {
                  onUpdate(null, instance, prevProps, _props4, state);
                }
              }
            }

            function unmountFundamentalComponent(fundamentalInstance) {
              if (enableFundamentalAPI) {
                var impl = fundamentalInstance.impl,
                  instance = fundamentalInstance.instance,
                  _props5 = fundamentalInstance.props,
                  state = fundamentalInstance.state;

                var onUnmount = impl.onUnmount;
                if (onUnmount !== undefined) {
                  onUnmount(null, instance, _props5, state);
                }
              }
            }

            // Prefix measurements so that it's possible to filter them.
            // Longer prefixes are hard to read in DevTools.
            var reactEmoji = '\u269B';
            var warningEmoji = '\u26D4';
            var supportsUserTiming =
              typeof performance !== 'undefined' &&
              typeof performance.mark === 'function' &&
              typeof performance.clearMarks === 'function' &&
              typeof performance.measure === 'function' &&
              typeof performance.clearMeasures === 'function';

            // Keep track of current fiber so that we know the path to unwind on pause.
            // TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?
            var currentFiber = null;
            // If we're in the middle of user code, which fiber and method is it?
            // Reusing `currentFiber` would be confusing for this because user code fiber
            // can change during commit phase too, but we don't need to unwind it (since
            // lifecycles in the commit phase don't resemble a tree).
            var currentPhase = null;
            var currentPhaseFiber = null;
            // Did lifecycle hook schedule an update? This is often a performance problem,
            // so we will keep track of it, and include it in the report.
            // Track commits caused by cascading updates.
            var isCommitting = false;
            var hasScheduledUpdateInCurrentCommit = false;
            var hasScheduledUpdateInCurrentPhase = false;
            var commitCountInCurrentWorkLoop = 0;
            var effectCountInCurrentCommit = 0;
            var isWaitingForCallback = false;
            // During commits, we only show a measurement once per method name
            // to avoid stretch the commit phase with measurement overhead.
            var labelsInCurrentCommit = new Set();

            var formatMarkName = function(markName) {
              return reactEmoji + ' ' + markName;
            };

            var formatLabel = function(label, warning) {
              var prefix = warning ? warningEmoji + ' ' : reactEmoji + ' ';
              var suffix = warning ? ' Warning: ' + warning : '';
              return '' + prefix + label + suffix;
            };

            var beginMark = function(markName) {
              performance.mark(formatMarkName(markName));
            };

            var clearMark = function(markName) {
              performance.clearMarks(formatMarkName(markName));
            };

            var endMark = function(label, markName, warning) {
              var formattedMarkName = formatMarkName(markName);
              var formattedLabel = formatLabel(label, warning);
              try {
                performance.measure(formattedLabel, formattedMarkName);
              } catch (err) {}
              // If previous mark was missing for some reason, this will throw.
              // This could only happen if React crashed in an unexpected place earlier.
              // Don't pile on with more errors.

              // Clear marks immediately to avoid growing buffer.
              performance.clearMarks(formattedMarkName);
              performance.clearMeasures(formattedLabel);
            };

            var getFiberMarkName = function(label, debugID) {
              return label + ' (#' + debugID + ')';
            };

            var getFiberLabel = function(componentName, isMounted, phase) {
              if (phase === null) {
                // These are composite component total time measurements.
                return componentName + ' [' + (isMounted ? 'update' : 'mount') + ']';
              } else {
                // Composite component methods.
                return componentName + '.' + phase;
              }
            };

            var beginFiberMark = function(fiber, phase) {
              var componentName = getComponentName(fiber.type) || 'Unknown';
              var debugID = fiber._debugID;
              var isMounted = fiber.alternate !== null;
              var label = getFiberLabel(componentName, isMounted, phase);

              if (isCommitting && labelsInCurrentCommit.has(label)) {
                // During the commit phase, we don't show duplicate labels because
                // there is a fixed overhead for every measurement, and we don't
                // want to stretch the commit phase beyond necessary.
                return false;
              }
              labelsInCurrentCommit.add(label);

              var markName = getFiberMarkName(label, debugID);
              beginMark(markName);
              return true;
            };

            var clearFiberMark = function(fiber, phase) {
              var componentName = getComponentName(fiber.type) || 'Unknown';
              var debugID = fiber._debugID;
              var isMounted = fiber.alternate !== null;
              var label = getFiberLabel(componentName, isMounted, phase);
              var markName = getFiberMarkName(label, debugID);
              clearMark(markName);
            };

            var endFiberMark = function(fiber, phase, warning) {
              var componentName = getComponentName(fiber.type) || 'Unknown';
              var debugID = fiber._debugID;
              var isMounted = fiber.alternate !== null;
              var label = getFiberLabel(componentName, isMounted, phase);
              var markName = getFiberMarkName(label, debugID);
              endMark(label, markName, warning);
            };

            var shouldIgnoreFiber = function(fiber) {
              // Host components should be skipped in the timeline.
              // We could check typeof fiber.type, but does this work with RN?
              switch (fiber.tag) {
                case HostRoot:
                case HostComponent:
                case HostText:
                case HostPortal:
                case Fragment:
                case ContextProvider:
                case ContextConsumer:
                case Mode:
                  return true;
                default:
                  return false;
              }
            };

            var clearPendingPhaseMeasurement = function() {
              if (currentPhase !== null && currentPhaseFiber !== null) {
                clearFiberMark(currentPhaseFiber, currentPhase);
              }
              currentPhaseFiber = null;
              currentPhase = null;
              hasScheduledUpdateInCurrentPhase = false;
            };

            var pauseTimers = function() {
              // Stops all currently active measurements so that they can be resumed
              // if we continue in a later deferred loop from the same unit of work.
              var fiber = currentFiber;
              while (fiber) {
                if (fiber._debugIsCurrentlyTiming) {
                  endFiberMark(fiber, null, null);
                }
                fiber = fiber.return;
              }
            };

            var resumeTimersRecursively = function(fiber) {
              if (fiber.return !== null) {
                resumeTimersRecursively(fiber.return);
              }
              if (fiber._debugIsCurrentlyTiming) {
                beginFiberMark(fiber, null);
              }
            };

            var resumeTimers = function() {
              // Resumes all measurements that were active during the last deferred loop.
              if (currentFiber !== null) {
                resumeTimersRecursively(currentFiber);
              }
            };

            function recordEffect() {
              if (enableUserTimingAPI) {
                effectCountInCurrentCommit++;
              }
            }

            function recordScheduleUpdate() {
              if (enableUserTimingAPI) {
                if (isCommitting) {
                  hasScheduledUpdateInCurrentCommit = true;
                }
                if (
                  currentPhase !== null &&
                  currentPhase !== 'componentWillMount' &&
                  currentPhase !== 'componentWillReceiveProps'
                ) {
                  hasScheduledUpdateInCurrentPhase = true;
                }
              }
            }

            function startRequestCallbackTimer() {
              if (enableUserTimingAPI) {
                if (supportsUserTiming && !isWaitingForCallback) {
                  isWaitingForCallback = true;
                  beginMark('(Waiting for async callback...)');
                }
              }
            }

            function stopRequestCallbackTimer(didExpire) {
              if (enableUserTimingAPI) {
                if (supportsUserTiming) {
                  isWaitingForCallback = false;
                  var warning = didExpire ? 'Update expired; will flush synchronously' : null;
                  endMark(
                    '(Waiting for async callback...)',
                    '(Waiting for async callback...)',
                    warning,
                  );
                }
              }
            }

            function startWorkTimer(fiber) {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                  return;
                }
                // If we pause, this is the fiber to unwind from.
                currentFiber = fiber;
                if (!beginFiberMark(fiber, null)) {
                  return;
                }
                fiber._debugIsCurrentlyTiming = true;
              }
            }

            function cancelWorkTimer(fiber) {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                  return;
                }
                // Remember we shouldn't complete measurement for this fiber.
                // Otherwise flamechart will be deep even for small updates.
                fiber._debugIsCurrentlyTiming = false;
                clearFiberMark(fiber, null);
              }
            }

            function stopWorkTimer(fiber) {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                  return;
                }
                // If we pause, its parent is the fiber to unwind from.
                currentFiber = fiber.return;
                if (!fiber._debugIsCurrentlyTiming) {
                  return;
                }
                fiber._debugIsCurrentlyTiming = false;
                endFiberMark(fiber, null, null);
              }
            }

            function stopFailedWorkTimer(fiber) {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                  return;
                }
                // If we pause, its parent is the fiber to unwind from.
                currentFiber = fiber.return;
                if (!fiber._debugIsCurrentlyTiming) {
                  return;
                }
                fiber._debugIsCurrentlyTiming = false;
                var warning =
                  fiber.tag === SuspenseComponent || fiber.tag === DehydratedSuspenseComponent
                    ? 'Rendering was suspended'
                    : 'An error was thrown inside this error boundary';
                endFiberMark(fiber, null, warning);
              }
            }

            function startPhaseTimer(fiber, phase) {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                  return;
                }
                clearPendingPhaseMeasurement();
                if (!beginFiberMark(fiber, phase)) {
                  return;
                }
                currentPhaseFiber = fiber;
                currentPhase = phase;
              }
            }

            function stopPhaseTimer() {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                  return;
                }
                if (currentPhase !== null && currentPhaseFiber !== null) {
                  var warning = hasScheduledUpdateInCurrentPhase
                    ? 'Scheduled a cascading update'
                    : null;
                  endFiberMark(currentPhaseFiber, currentPhase, warning);
                }
                currentPhase = null;
                currentPhaseFiber = null;
              }
            }

            function startWorkLoopTimer(nextUnitOfWork) {
              if (enableUserTimingAPI) {
                currentFiber = nextUnitOfWork;
                if (!supportsUserTiming) {
                  return;
                }
                commitCountInCurrentWorkLoop = 0;
                // This is top level call.
                // Any other measurements are performed within.
                beginMark('(React Tree Reconciliation)');
                // Resume any measurements that were in progress during the last loop.
                resumeTimers();
              }
            }

            function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                  return;
                }
                var warning = null;
                if (interruptedBy !== null) {
                  if (interruptedBy.tag === HostRoot) {
                    warning = 'A top-level update interrupted the previous render';
                  } else {
                    var componentName = getComponentName(interruptedBy.type) || 'Unknown';
                    warning = 'An update to ' + componentName + ' interrupted the previous render';
                  }
                } else if (commitCountInCurrentWorkLoop > 1) {
                  warning = 'There were cascading updates';
                }
                commitCountInCurrentWorkLoop = 0;
                var label = didCompleteRoot
                  ? '(React Tree Reconciliation: Completed Root)'
                  : '(React Tree Reconciliation: Yielded)';
                // Pause any measurements until the next loop.
                pauseTimers();
                endMark(label, '(React Tree Reconciliation)', warning);
              }
            }

            function startCommitTimer() {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                  return;
                }
                isCommitting = true;
                hasScheduledUpdateInCurrentCommit = false;
                labelsInCurrentCommit.clear();
                beginMark('(Committing Changes)');
              }
            }

            function stopCommitTimer() {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                  return;
                }

                var warning = null;
                if (hasScheduledUpdateInCurrentCommit) {
                  warning = 'Lifecycle hook scheduled a cascading update';
                } else if (commitCountInCurrentWorkLoop > 0) {
                  warning = 'Caused by a cascading update in earlier commit';
                }
                hasScheduledUpdateInCurrentCommit = false;
                commitCountInCurrentWorkLoop++;
                isCommitting = false;
                labelsInCurrentCommit.clear();

                endMark('(Committing Changes)', '(Committing Changes)', warning);
              }
            }

            function startCommitSnapshotEffectsTimer() {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                  return;
                }
                effectCountInCurrentCommit = 0;
                beginMark('(Committing Snapshot Effects)');
              }
            }

            function stopCommitSnapshotEffectsTimer() {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                  return;
                }
                var count = effectCountInCurrentCommit;
                effectCountInCurrentCommit = 0;
                endMark(
                  '(Committing Snapshot Effects: ' + count + ' Total)',
                  '(Committing Snapshot Effects)',
                  null,
                );
              }
            }

            function startCommitHostEffectsTimer() {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                  return;
                }
                effectCountInCurrentCommit = 0;
                beginMark('(Committing Host Effects)');
              }
            }

            function stopCommitHostEffectsTimer() {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                  return;
                }
                var count = effectCountInCurrentCommit;
                effectCountInCurrentCommit = 0;
                endMark(
                  '(Committing Host Effects: ' + count + ' Total)',
                  '(Committing Host Effects)',
                  null,
                );
              }
            }

            function startCommitLifeCyclesTimer() {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                  return;
                }
                effectCountInCurrentCommit = 0;
                beginMark('(Calling Lifecycle Methods)');
              }
            }

            function stopCommitLifeCyclesTimer() {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                  return;
                }
                var count = effectCountInCurrentCommit;
                effectCountInCurrentCommit = 0;
                endMark(
                  '(Calling Lifecycle Methods: ' + count + ' Total)',
                  '(Calling Lifecycle Methods)',
                  null,
                );
              }
            }

            var valueStack = [];

            var fiberStack = void 0;

            {
              fiberStack = [];
            }

            var index = -1;

            function createCursor(defaultValue) {
              return {
                current: defaultValue,
              };
            }

            function pop(cursor, fiber) {
              if (index < 0) {
                {
                  warningWithoutStack$1(false, 'Unexpected pop.');
                }
                return;
              }

              {
                if (fiber !== fiberStack[index]) {
                  warningWithoutStack$1(false, 'Unexpected Fiber popped.');
                }
              }

              cursor.current = valueStack[index];

              valueStack[index] = null;

              {
                fiberStack[index] = null;
              }

              index--;
            }

            function push(cursor, value, fiber) {
              index++;

              valueStack[index] = cursor.current;

              {
                fiberStack[index] = fiber;
              }

              cursor.current = value;
            }

            var warnedAboutMissingGetChildContext = void 0;

            {
              warnedAboutMissingGetChildContext = {};
            }

            var emptyContextObject = {};
            {
              Object.freeze(emptyContextObject);
            }

            // A cursor to the current merged context object on the stack.
            var contextStackCursor = createCursor(emptyContextObject);
            // A cursor to a boolean indicating whether the context has changed.
            var didPerformWorkStackCursor = createCursor(false);
            // Keep track of the previous context object that was on the stack.
            // We use this to get access to the parent context after we have already
            // pushed the next context provider, and now need to merge their contexts.
            var previousContext = emptyContextObject;

            function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
              if (disableLegacyContext) {
                return emptyContextObject;
              } else {
                if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                  // If the fiber is a context provider itself, when we read its context
                  // we may have already pushed its own child context on the stack. A context
                  // provider should not "see" its own child context. Therefore we read the
                  // previous (parent) context instead for a context provider.
                  return previousContext;
                }
                return contextStackCursor.current;
              }
            }

            function cacheContext(workInProgress, unmaskedContext, maskedContext) {
              if (disableLegacyContext) {
                return;
              } else {
                var instance = workInProgress.stateNode;
                instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
                instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
              }
            }

            function getMaskedContext(workInProgress, unmaskedContext) {
              if (disableLegacyContext) {
                return emptyContextObject;
              } else {
                var type = workInProgress.type;
                var contextTypes = type.contextTypes;
                if (!contextTypes) {
                  return emptyContextObject;
                }

                // Avoid recreating masked context unless unmasked context has changed.
                // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
                // This may trigger infinite loops if componentWillReceiveProps calls setState.
                var instance = workInProgress.stateNode;
                if (
                  instance &&
                  instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext
                ) {
                  return instance.__reactInternalMemoizedMaskedChildContext;
                }

                var context = {};
                for (var key in contextTypes) {
                  context[key] = unmaskedContext[key];
                }

                {
                  var name = getComponentName(type) || 'Unknown';
                  checkPropTypes(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
                }

                // Cache unmasked context so we can avoid recreating masked context unless necessary.
                // Context is created before the class component is instantiated so check for instance.
                if (instance) {
                  cacheContext(workInProgress, unmaskedContext, context);
                }

                return context;
              }
            }

            function hasContextChanged() {
              if (disableLegacyContext) {
                return false;
              } else {
                return didPerformWorkStackCursor.current;
              }
            }

            function isContextProvider(type) {
              if (disableLegacyContext) {
                return false;
              } else {
                var childContextTypes = type.childContextTypes;
                return childContextTypes !== null && childContextTypes !== undefined;
              }
            }

            function popContext(fiber) {
              if (disableLegacyContext) {
                return;
              } else {
                pop(didPerformWorkStackCursor, fiber);
                pop(contextStackCursor, fiber);
              }
            }

            function popTopLevelContextObject(fiber) {
              if (disableLegacyContext) {
                return;
              } else {
                pop(didPerformWorkStackCursor, fiber);
                pop(contextStackCursor, fiber);
              }
            }

            function pushTopLevelContextObject(fiber, context, didChange) {
              if (disableLegacyContext) {
                return;
              } else {
                (function() {
                  if (!(contextStackCursor.current === emptyContextObject)) {
                    {
                      throw ReactError(
                        Error(
                          'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.',
                        ),
                      );
                    }
                  }
                })();

                push(contextStackCursor, context, fiber);
                push(didPerformWorkStackCursor, didChange, fiber);
              }
            }

            function processChildContext(fiber, type, parentContext) {
              if (disableLegacyContext) {
                return parentContext;
              } else {
                var instance = fiber.stateNode;
                var childContextTypes = type.childContextTypes;

                // TODO (bvaughn) Replace this behavior with an invariant() in the future.
                // It has only been added in Fiber to match the (unintentional) behavior in Stack.
                if (typeof instance.getChildContext !== 'function') {
                  {
                    var componentName = getComponentName(type) || 'Unknown';

                    if (!warnedAboutMissingGetChildContext[componentName]) {
                      warnedAboutMissingGetChildContext[componentName] = true;
                      warningWithoutStack$1(
                        false,
                        '%s.childContextTypes is specified but there is no getChildContext() method ' +
                          'on the instance. You can either define getChildContext() on %s or remove ' +
                          'childContextTypes from it.',
                        componentName,
                        componentName,
                      );
                    }
                  }
                  return parentContext;
                }

                var childContext = void 0;
                {
                  setCurrentPhase('getChildContext');
                }
                startPhaseTimer(fiber, 'getChildContext');
                childContext = instance.getChildContext();
                stopPhaseTimer();
                {
                  setCurrentPhase(null);
                }
                for (var contextKey in childContext) {
                  (function() {
                    if (!(contextKey in childContextTypes)) {
                      {
                        throw ReactError(
                          Error(
                            (getComponentName(type) || 'Unknown') +
                              '.getChildContext(): key "' +
                              contextKey +
                              '" is not defined in childContextTypes.',
                          ),
                        );
                      }
                    }
                  })();
                }
                {
                  var name = getComponentName(type) || 'Unknown';
                  checkPropTypes(
                    childContextTypes,
                    childContext,
                    'child context',
                    name,
                    // In practice, there is one case in which we won't get a stack. It's when
                    // somebody calls unstable_renderSubtreeIntoContainer() and we process
                    // context from the parent component instance. The stack will be missing
                    // because it's outside of the reconciliation, and so the pointer has not
                    // been set. This is rare and doesn't matter. We'll also remove that API.
                    getCurrentFiberStackInDev,
                  );
                }

                return _assign({}, parentContext, childContext);
              }
            }

            function pushContextProvider(workInProgress) {
              if (disableLegacyContext) {
                return false;
              } else {
                var instance = workInProgress.stateNode;
                // We push the context as early as possible to ensure stack integrity.
                // If the instance does not exist yet, we will push null at first,
                // and replace it on the stack later when invalidating the context.
                var memoizedMergedChildContext =
                  (instance && instance.__reactInternalMemoizedMergedChildContext) ||
                  emptyContextObject;

                // Remember the parent context so we can merge with it later.
                // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
                previousContext = contextStackCursor.current;
                push(contextStackCursor, memoizedMergedChildContext, workInProgress);
                push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);

                return true;
              }
            }

            function invalidateContextProvider(workInProgress, type, didChange) {
              if (disableLegacyContext) {
                return;
              } else {
                var instance = workInProgress.stateNode;
                (function() {
                  if (!instance) {
                    {
                      throw ReactError(
                        Error(
                          'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.',
                        ),
                      );
                    }
                  }
                })();

                if (didChange) {
                  // Merge parent and own context.
                  // Skip this if we're not updating due to sCU.
                  // This avoids unnecessarily recomputing memoized values.
                  var mergedContext = processChildContext(workInProgress, type, previousContext);
                  instance.__reactInternalMemoizedMergedChildContext = mergedContext;

                  // Replace the old (or empty) context with the new one.
                  // It is important to unwind the context in the reverse order.
                  pop(didPerformWorkStackCursor, workInProgress);
                  pop(contextStackCursor, workInProgress);
                  // Now push the new context and mark that it has changed.
                  push(contextStackCursor, mergedContext, workInProgress);
                  push(didPerformWorkStackCursor, didChange, workInProgress);
                } else {
                  pop(didPerformWorkStackCursor, workInProgress);
                  push(didPerformWorkStackCursor, didChange, workInProgress);
                }
              }
            }

            function findCurrentUnmaskedContext(fiber) {
              if (disableLegacyContext) {
                return emptyContextObject;
              } else {
                // Currently this is only used with renderSubtreeIntoContainer; not sure if it
                // makes sense elsewhere
                (function() {
                  if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
                    {
                      throw ReactError(
                        Error(
                          'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.',
                        ),
                      );
                    }
                  }
                })();

                var node = fiber;
                do {
                  switch (node.tag) {
                    case HostRoot:
                      return node.stateNode.context;
                    case ClassComponent: {
                      var Component = node.type;
                      if (isContextProvider(Component)) {
                        return node.stateNode.__reactInternalMemoizedMergedChildContext;
                      }
                      break;
                    }
                  }
                  node = node.return;
                } while (node !== null);
                (function() {
                  {
                    {
                      throw ReactError(
                        Error(
                          'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.',
                        ),
                      );
                    }
                  }
                })();
              }
            }

            var LegacyRoot = 0;
            var BatchedRoot = 1;
            var ConcurrentRoot = 2;

            // Intentionally not named imports because Rollup would use dynamic dispatch for
            // CommonJS interop named imports.
            var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority;
            var Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback;
            var Scheduler_cancelCallback = Scheduler.unstable_cancelCallback;
            var Scheduler_shouldYield = Scheduler.unstable_shouldYield;
            var Scheduler_requestPaint = Scheduler.unstable_requestPaint;
            var Scheduler_now = Scheduler.unstable_now;
            var Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
            var Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority;
            var Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
            var Scheduler_NormalPriority = Scheduler.unstable_NormalPriority;
            var Scheduler_LowPriority = Scheduler.unstable_LowPriority;
            var Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;

            if (enableSchedulerTracing) {
              // Provide explicit error message when production+profiling bundle of e.g.
              // react-dom is used with production (non-profiling) bundle of
              // scheduler/tracing
              (function() {
                if (
                  !(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)
                ) {
                  {
                    throw ReactError(
                      Error(
                        'It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling',
                      ),
                    );
                  }
                }
              })();
            }

            var fakeCallbackNode = {};

            // Except for NoPriority, these correspond to Scheduler priorities. We use
            // ascending numbers so we can compare them like numbers. They start at 90 to
            // avoid clashing with Scheduler's priorities.
            var ImmediatePriority = 99;
            var UserBlockingPriority$2 = 98;
            var NormalPriority = 97;
            var LowPriority = 96;
            var IdlePriority = 95;
            // NoPriority is the absence of priority. Also React-only.
            var NoPriority = 90;

            var shouldYield = Scheduler_shouldYield;
            var requestPaint =
              // Fall back gracefully if we're running an older version of Scheduler.
              Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function() {};

            var syncQueue = null;
            var immediateQueueCallbackNode = null;
            var isFlushingSyncQueue = false;
            var initialTimeMs = Scheduler_now();

            // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
            // This will be the case for modern browsers that support `performance.now`. In
            // older browsers, Scheduler falls back to `Date.now`, which returns a Unix
            // timestamp. In that case, subtract the module initialization time to simulate
            // the behavior of performance.now and keep our times small enough to fit
            // within 32 bits.
            // TODO: Consider lifting this into Scheduler.
            var now =
              initialTimeMs < 10000
                ? Scheduler_now
                : function() {
                    return Scheduler_now() - initialTimeMs;
                  };

            function getCurrentPriorityLevel() {
              switch (Scheduler_getCurrentPriorityLevel()) {
                case Scheduler_ImmediatePriority:
                  return ImmediatePriority;
                case Scheduler_UserBlockingPriority:
                  return UserBlockingPriority$2;
                case Scheduler_NormalPriority:
                  return NormalPriority;
                case Scheduler_LowPriority:
                  return LowPriority;
                case Scheduler_IdlePriority:
                  return IdlePriority;
                default:
                  (function() {
                    {
                      {
                        throw ReactError(Error('Unknown priority level.'));
                      }
                    }
                  })();
              }
            }

            function reactPriorityToSchedulerPriority(reactPriorityLevel) {
              switch (reactPriorityLevel) {
                case ImmediatePriority:
                  return Scheduler_ImmediatePriority;
                case UserBlockingPriority$2:
                  return Scheduler_UserBlockingPriority;
                case NormalPriority:
                  return Scheduler_NormalPriority;
                case LowPriority:
                  return Scheduler_LowPriority;
                case IdlePriority:
                  return Scheduler_IdlePriority;
                default:
                  (function() {
                    {
                      {
                        throw ReactError(Error('Unknown priority level.'));
                      }
                    }
                  })();
              }
            }

            function runWithPriority$2(reactPriorityLevel, fn) {
              var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
              return Scheduler_runWithPriority(priorityLevel, fn);
            }

            function scheduleCallback(reactPriorityLevel, callback, options) {
              var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
              return Scheduler_scheduleCallback(priorityLevel, callback, options);
            }

            function scheduleSyncCallback(callback) {
              // Push this callback into an internal queue. We'll flush these either in
              // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
              if (syncQueue === null) {
                syncQueue = [callback];
                // Flush the queue in the next tick, at the earliest.
                immediateQueueCallbackNode = Scheduler_scheduleCallback(
                  Scheduler_ImmediatePriority,
                  flushSyncCallbackQueueImpl,
                );
              } else {
                // Push onto existing queue. Don't need to schedule a callback because
                // we already scheduled one when we created the queue.
                syncQueue.push(callback);
              }
              return fakeCallbackNode;
            }

            function cancelCallback(callbackNode) {
              if (callbackNode !== fakeCallbackNode) {
                Scheduler_cancelCallback(callbackNode);
              }
            }

            function flushSyncCallbackQueue() {
              if (immediateQueueCallbackNode !== null) {
                Scheduler_cancelCallback(immediateQueueCallbackNode);
              }
              flushSyncCallbackQueueImpl();
            }

            function flushSyncCallbackQueueImpl() {
              if (!isFlushingSyncQueue && syncQueue !== null) {
                // Prevent re-entrancy.
                isFlushingSyncQueue = true;
                var i = 0;
                try {
                  var _isSync = true;
                  var queue = syncQueue;
                  runWithPriority$2(ImmediatePriority, function() {
                    for (; i < queue.length; i++) {
                      var callback = queue[i];
                      do {
                        callback = callback(_isSync);
                      } while (callback !== null);
                    }
                  });
                  syncQueue = null;
                } catch (error) {
                  // If something throws, leave the remaining callbacks on the queue.
                  if (syncQueue !== null) {
                    syncQueue = syncQueue.slice(i + 1);
                  }
                  // Resume flushing in the next tick
                  Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                  throw error;
                } finally {
                  isFlushingSyncQueue = false;
                }
              }
            }

            var NoMode = 0;
            var StrictMode = 1;
            // TODO: Remove BatchedMode and ConcurrentMode by reading from the root
            // tag instead
            var BatchedMode = 2;
            var ConcurrentMode = 4;
            var ProfileMode = 8;

            // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
            // Math.pow(2, 30) - 1
            // 0b111111111111111111111111111111
            var MAX_SIGNED_31_BIT_INT = 1073741823;

            var NoWork = 0;
            var Never = 1;
            var Sync = MAX_SIGNED_31_BIT_INT;
            var Batched = Sync - 1;

            var UNIT_SIZE = 10;
            var MAGIC_NUMBER_OFFSET = Batched - 1;

            // 1 unit of expiration time represents 10ms.
            function msToExpirationTime(ms) {
              // Always add an offset so that we don't clash with the magic number for NoWork.
              return MAGIC_NUMBER_OFFSET - ((ms / UNIT_SIZE) | 0);
            }

            function expirationTimeToMs(expirationTime) {
              return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
            }

            function ceiling(num, precision) {
              return (((num / precision) | 0) + 1) * precision;
            }

            function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
              return (
                MAGIC_NUMBER_OFFSET -
                ceiling(
                  MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE,
                  bucketSizeMs / UNIT_SIZE,
                )
              );
            }

            // TODO: This corresponds to Scheduler's NormalPriority, not LowPriority. Update
            // the names to reflect.
            var LOW_PRIORITY_EXPIRATION = 5000;
            var LOW_PRIORITY_BATCH_SIZE = 250;

            function computeAsyncExpiration(currentTime) {
              return computeExpirationBucket(
                currentTime,
                LOW_PRIORITY_EXPIRATION,
                LOW_PRIORITY_BATCH_SIZE,
              );
            }

            function computeSuspenseExpiration(currentTime, timeoutMs) {
              // TODO: Should we warn if timeoutMs is lower than the normal pri expiration time?
              return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
            }

            // We intentionally set a higher expiration time for interactive updates in
            // dev than in production.
            //
            // If the main thread is being blocked so long that you hit the expiration,
            // it's a problem that could be solved with better scheduling.
            //
            // People will be more likely to notice this and fix it with the long
            // expiration time in development.
            //
            // In production we opt for better UX at the risk of masking scheduling
            // problems, by expiring fast.
            var HIGH_PRIORITY_EXPIRATION = 500;
            var HIGH_PRIORITY_BATCH_SIZE = 100;

            function computeInteractiveExpiration(currentTime) {
              return computeExpirationBucket(
                currentTime,
                HIGH_PRIORITY_EXPIRATION,
                HIGH_PRIORITY_BATCH_SIZE,
              );
            }

            function inferPriorityFromExpirationTime(currentTime, expirationTime) {
              if (expirationTime === Sync) {
                return ImmediatePriority;
              }
              if (expirationTime === Never) {
                return IdlePriority;
              }
              var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);
              if (msUntil <= 0) {
                return ImmediatePriority;
              }
              if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) {
                return UserBlockingPriority$2;
              }
              if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) {
                return NormalPriority;
              }

              // TODO: Handle LowPriority

              // Assume anything lower has idle priority
              return IdlePriority;
            }

            /**
             * Forked from fbjs/warning:
             * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
             *
             * Only change is we use console.warn instead of console.error,
             * and do nothing when 'console' is not supported.
             * This really simplifies the code.
             * ---
             * Similar to invariant but only logs a warning if the condition is not met.
             * This can be used to log issues in development environments in critical
             * paths. Removing the logging code for production environments will keep the
             * same logic and follow the same code paths.
             */

            var lowPriorityWarning = function() {};

            {
              var printWarning = function(format) {
                for (
                  var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1;
                  _key < _len;
                  _key++
                ) {
                  args[_key - 1] = arguments[_key];
                }

                var argIndex = 0;
                var message =
                  'Warning: ' +
                  format.replace(/%s/g, function() {
                    return args[argIndex++];
                  });
                if (typeof console !== 'undefined') {
                  console.warn(message);
                }
                try {
                  // --- Welcome to debugging React ---
                  // This error was thrown as a convenience so that you can use this stack
                  // to find the callsite that caused this warning to fire.
                  throw new Error(message);
                } catch (x) {}
              };

              lowPriorityWarning = function(condition, format) {
                if (format === undefined) {
                  throw new Error(
                    '`lowPriorityWarning(condition, format, ...args)` requires a warning ' +
                      'message argument',
                  );
                }
                if (!condition) {
                  for (
                    var _len2 = arguments.length,
                      args = Array(_len2 > 2 ? _len2 - 2 : 0),
                      _key2 = 2;
                    _key2 < _len2;
                    _key2++
                  ) {
                    args[_key2 - 2] = arguments[_key2];
                  }

                  printWarning.apply(undefined, [format].concat(args));
                }
              };
            }

            var lowPriorityWarning$1 = lowPriorityWarning;

            var ReactStrictModeWarnings = {
              recordUnsafeLifecycleWarnings: function(fiber, instance) {},
              flushPendingUnsafeLifecycleWarnings: function() {},
              recordLegacyContextWarning: function(fiber, instance) {},
              flushLegacyContextWarning: function() {},
              discardPendingWarnings: function() {},
            };

            {
              var findStrictRoot = function(fiber) {
                var maybeStrictRoot = null;

                var node = fiber;
                while (node !== null) {
                  if (node.mode & StrictMode) {
                    maybeStrictRoot = node;
                  }
                  node = node.return;
                }

                return maybeStrictRoot;
              };

              var setToSortedString = function(set) {
                var array = [];
                set.forEach(function(value) {
                  array.push(value);
                });
                return array.sort().join(', ');
              };

              var pendingComponentWillMountWarnings = [];
              var pendingUNSAFE_ComponentWillMountWarnings = [];
              var pendingComponentWillReceivePropsWarnings = [];
              var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              var pendingComponentWillUpdateWarnings = [];
              var pendingUNSAFE_ComponentWillUpdateWarnings = [];

              // Tracks components we have already warned about.
              var didWarnAboutUnsafeLifecycles = new Set();

              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
                // Dedup strategy: Warn once per component.
                if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                  return;
                }

                if (
                  typeof instance.componentWillMount === 'function' &&
                  // Don't warn about react-lifecycles-compat polyfilled components.
                  instance.componentWillMount.__suppressDeprecationWarning !== true
                ) {
                  pendingComponentWillMountWarnings.push(fiber);
                }

                if (
                  fiber.mode & StrictMode &&
                  typeof instance.UNSAFE_componentWillMount === 'function'
                ) {
                  pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
                }

                if (
                  typeof instance.componentWillReceiveProps === 'function' &&
                  instance.componentWillReceiveProps.__suppressDeprecationWarning !== true
                ) {
                  pendingComponentWillReceivePropsWarnings.push(fiber);
                }

                if (
                  fiber.mode & StrictMode &&
                  typeof instance.UNSAFE_componentWillReceiveProps === 'function'
                ) {
                  pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
                }

                if (
                  typeof instance.componentWillUpdate === 'function' &&
                  instance.componentWillUpdate.__suppressDeprecationWarning !== true
                ) {
                  pendingComponentWillUpdateWarnings.push(fiber);
                }

                if (
                  fiber.mode & StrictMode &&
                  typeof instance.UNSAFE_componentWillUpdate === 'function'
                ) {
                  pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
                }
              };

              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
                // We do an initial pass to gather component names
                var componentWillMountUniqueNames = new Set();
                if (pendingComponentWillMountWarnings.length > 0) {
                  pendingComponentWillMountWarnings.forEach(function(fiber) {
                    componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                    didWarnAboutUnsafeLifecycles.add(fiber.type);
                  });
                  pendingComponentWillMountWarnings = [];
                }

                var UNSAFE_componentWillMountUniqueNames = new Set();
                if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                  pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                    UNSAFE_componentWillMountUniqueNames.add(
                      getComponentName(fiber.type) || 'Component',
                    );
                    didWarnAboutUnsafeLifecycles.add(fiber.type);
                  });
                  pendingUNSAFE_ComponentWillMountWarnings = [];
                }

                var componentWillReceivePropsUniqueNames = new Set();
                if (pendingComponentWillReceivePropsWarnings.length > 0) {
                  pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                    componentWillReceivePropsUniqueNames.add(
                      getComponentName(fiber.type) || 'Component',
                    );
                    didWarnAboutUnsafeLifecycles.add(fiber.type);
                  });

                  pendingComponentWillReceivePropsWarnings = [];
                }

                var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
                if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                  pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                    UNSAFE_componentWillReceivePropsUniqueNames.add(
                      getComponentName(fiber.type) || 'Component',
                    );
                    didWarnAboutUnsafeLifecycles.add(fiber.type);
                  });

                  pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
                }

                var componentWillUpdateUniqueNames = new Set();
                if (pendingComponentWillUpdateWarnings.length > 0) {
                  pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                    componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                    didWarnAboutUnsafeLifecycles.add(fiber.type);
                  });

                  pendingComponentWillUpdateWarnings = [];
                }

                var UNSAFE_componentWillUpdateUniqueNames = new Set();
                if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                  pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                    UNSAFE_componentWillUpdateUniqueNames.add(
                      getComponentName(fiber.type) || 'Component',
                    );
                    didWarnAboutUnsafeLifecycles.add(fiber.type);
                  });

                  pendingUNSAFE_ComponentWillUpdateWarnings = [];
                }

                // Finally, we flush all the warnings
                // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'
                if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                  var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                  warningWithoutStack$1(
                    false,
                    'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' +
                      'See https://fb.me/react-async-component-lifecycle-hooks for details.\n\n' +
                      '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' +
                      '\nPlease update the following components: %s',
                    sortedNames,
                  );
                }

                if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                  var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                  warningWithoutStack$1(
                    false,
                    'Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' +
                      'and may indicate bugs in your code. ' +
                      'See https://fb.me/react-async-component-lifecycle-hooks for details.\n\n' +
                      '* Move data fetching code or side effects to componentDidUpdate.\n' +
                      "* If you're updating state whenever props change, " +
                      'refactor your code to use memoization techniques or move it to ' +
                      'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' +
                      '\nPlease update the following components: %s',
                    _sortedNames,
                  );
                }

                if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                  var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                  warningWithoutStack$1(
                    false,
                    'Using UNSAFE_componentWillUpdate in strict mode is not recommended ' +
                      'and may indicate bugs in your code. ' +
                      'See https://fb.me/react-async-component-lifecycle-hooks for details.\n\n' +
                      '* Move data fetching code or side effects to componentDidUpdate.\n' +
                      '\nPlease update the following components: %s',
                    _sortedNames2,
                  );
                }

                if (componentWillMountUniqueNames.size > 0) {
                  var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

                  lowPriorityWarning$1(
                    false,
                    'componentWillMount has been renamed, and is not recommended for use. ' +
                      'See https://fb.me/react-async-component-lifecycle-hooks for details.\n\n' +
                      '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' +
                      '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' +
                      'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' +
                      'To rename all deprecated lifecycles to their new names, you can run ' +
                      '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' +
                      '\nPlease update the following components: %s',
                    _sortedNames3,
                  );
                }

                if (componentWillReceivePropsUniqueNames.size > 0) {
                  var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

                  lowPriorityWarning$1(
                    false,
                    'componentWillReceiveProps has been renamed, and is not recommended for use. ' +
                      'See https://fb.me/react-async-component-lifecycle-hooks for details.\n\n' +
                      '* Move data fetching code or side effects to componentDidUpdate.\n' +
                      "* If you're updating state whenever props change, refactor your " +
                      'code to use memoization techniques or move it to ' +
                      'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' +
                      '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' +
                      'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' +
                      'To rename all deprecated lifecycles to their new names, you can run ' +
                      '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' +
                      '\nPlease update the following components: %s',
                    _sortedNames4,
                  );
                }

                if (componentWillUpdateUniqueNames.size > 0) {
                  var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

                  lowPriorityWarning$1(
                    false,
                    'componentWillUpdate has been renamed, and is not recommended for use. ' +
                      'See https://fb.me/react-async-component-lifecycle-hooks for details.\n\n' +
                      '* Move data fetching code or side effects to componentDidUpdate.\n' +
                      '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' +
                      'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' +
                      'To rename all deprecated lifecycles to their new names, you can run ' +
                      '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' +
                      '\nPlease update the following components: %s',
                    _sortedNames5,
                  );
                }
              };

              var pendingLegacyContextWarning = new Map();

              // Tracks components we have already warned about.
              var didWarnAboutLegacyContext = new Set();

              ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
                var strictRoot = findStrictRoot(fiber);
                if (strictRoot === null) {
                  warningWithoutStack$1(
                    false,
                    'Expected to find a StrictMode component in a strict mode tree. ' +
                      'This error is likely caused by a bug in React. Please file an issue.',
                  );
                  return;
                }

                // Dedup strategy: Warn once per component.
                if (didWarnAboutLegacyContext.has(fiber.type)) {
                  return;
                }

                var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

                if (
                  fiber.type.contextTypes != null ||
                  fiber.type.childContextTypes != null ||
                  (instance !== null && typeof instance.getChildContext === 'function')
                ) {
                  if (warningsForRoot === undefined) {
                    warningsForRoot = [];
                    pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                  }
                  warningsForRoot.push(fiber);
                }
              };

              ReactStrictModeWarnings.flushLegacyContextWarning = function() {
                pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                  var uniqueNames = new Set();
                  fiberArray.forEach(function(fiber) {
                    uniqueNames.add(getComponentName(fiber.type) || 'Component');
                    didWarnAboutLegacyContext.add(fiber.type);
                  });

                  var sortedNames = setToSortedString(uniqueNames);
                  var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);

                  warningWithoutStack$1(
                    false,
                    'Legacy context API has been detected within a strict-mode tree: %s' +
                      '\n\nThe old API will be supported in all 16.x releases, but applications ' +
                      'using it should migrate to the new version.' +
                      '\n\nPlease update the following components: %s' +
                      '\n\nLearn more about this warning here:' +
                      '\nhttps://fb.me/react-legacy-context',
                    strictRootComponentStack,
                    sortedNames,
                  );
                });
              };

              ReactStrictModeWarnings.discardPendingWarnings = function() {
                pendingComponentWillMountWarnings = [];
                pendingUNSAFE_ComponentWillMountWarnings = [];
                pendingComponentWillReceivePropsWarnings = [];
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
                pendingComponentWillUpdateWarnings = [];
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
                pendingLegacyContextWarning = new Map();
              };
            }

            // Resolves type to a family.

            // Used by React Refresh runtime through DevTools Global Hook.

            var resolveFamily = null;
            // $FlowFixMe Flow gets confused by a WeakSet feature check below.
            var failedBoundaries = null;

            var setRefreshHandler = function(handler) {
              {
                resolveFamily = handler;
              }
            };

            function resolveFunctionForHotReloading(type) {
              {
                if (resolveFamily === null) {
                  // Hot reloading is disabled.
                  return type;
                }
                var family = resolveFamily(type);
                if (family === undefined) {
                  return type;
                }
                // Use the latest known implementation.
                return family.current;
              }
            }

            function resolveClassForHotReloading(type) {
              // No implementation differences.
              return resolveFunctionForHotReloading(type);
            }

            function resolveForwardRefForHotReloading(type) {
              {
                if (resolveFamily === null) {
                  // Hot reloading is disabled.
                  return type;
                }
                var family = resolveFamily(type);
                if (family === undefined) {
                  // Check if we're dealing with a real forwardRef. Don't want to crash early.
                  if (type !== null && type !== undefined && typeof type.render === 'function') {
                    // ForwardRef is special because its resolved .type is an object,
                    // but it's possible that we only have its inner render function in the map.
                    // If that inner render function is different, we'll build a new forwardRef type.
                    var currentRender = resolveFunctionForHotReloading(type.render);
                    if (type.render !== currentRender) {
                      var syntheticType = {
                        $$typeof: REACT_FORWARD_REF_TYPE,
                        render: currentRender,
                      };
                      if (type.displayName !== undefined) {
                        syntheticType.displayName = type.displayName;
                      }
                      return syntheticType;
                    }
                  }
                  return type;
                }
                // Use the latest known implementation.
                return family.current;
              }
            }

            function isCompatibleFamilyForHotReloading(fiber, element) {
              {
                if (resolveFamily === null) {
                  // Hot reloading is disabled.
                  return false;
                }

                var prevType = fiber.elementType;
                var nextType = element.type;

                // If we got here, we know types aren't === equal.
                var needsCompareFamilies = false;

                var $$typeofNextType =
                  typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

                switch (fiber.tag) {
                  case ClassComponent: {
                    if (typeof nextType === 'function') {
                      needsCompareFamilies = true;
                    }
                    break;
                  }
                  case FunctionComponent: {
                    if (typeof nextType === 'function') {
                      needsCompareFamilies = true;
                    } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                      // We don't know the inner type yet.
                      // We're going to assume that the lazy inner type is stable,
                      // and so it is sufficient to avoid reconciling it away.
                      // We're not going to unwrap or actually use the new lazy type.
                      needsCompareFamilies = true;
                    }
                    break;
                  }
                  case ForwardRef: {
                    if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                      needsCompareFamilies = true;
                    } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                      needsCompareFamilies = true;
                    }
                    break;
                  }
                  case MemoComponent:
                  case SimpleMemoComponent: {
                    if ($$typeofNextType === REACT_MEMO_TYPE) {
                      // TODO: if it was but can no longer be simple,
                      // we shouldn't set this.
                      needsCompareFamilies = true;
                    } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                      needsCompareFamilies = true;
                    }
                    break;
                  }
                  default:
                    return false;
                }

                // Check if both types have a family and it's the same one.
                if (needsCompareFamilies) {
                  // Note: memo() and forwardRef() we'll compare outer rather than inner type.
                  // This means both of them need to be registered to preserve state.
                  // If we unwrapped and compared the inner types for wrappers instead,
                  // then we would risk falsely saying two separate memo(Foo)
                  // calls are equivalent because they wrap the same Foo function.
                  var prevFamily = resolveFamily(prevType);
                  if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
                    return true;
                  }
                }
                return false;
              }
            }

            function markFailedErrorBoundaryForHotReloading(fiber) {
              {
                if (resolveFamily === null) {
                  // Hot reloading is disabled.
                  return;
                }
                if (typeof WeakSet !== 'function') {
                  return;
                }
                if (failedBoundaries === null) {
                  failedBoundaries = new WeakSet();
                }
                failedBoundaries.add(fiber);
              }
            }

            var scheduleRefresh = function(root, update) {
              {
                if (resolveFamily === null) {
                  // Hot reloading is disabled.
                  return;
                }
                var _staleFamilies = update.staleFamilies,
                  _updatedFamilies = update.updatedFamilies;

                flushPassiveEffects();
                flushSync(function() {
                  scheduleFibersWithFamiliesRecursively(
                    root.current,
                    _updatedFamilies,
                    _staleFamilies,
                  );
                });
              }
            };

            var scheduleRoot = function(root, element) {
              {
                if (root.context !== emptyContextObject) {
                  // Super edge case: root has a legacy _renderSubtree context
                  // but we don't know the parentComponent so we can't pass it.
                  // Just ignore. We'll delete this with _renderSubtree code path later.
                  return;
                }
                flushPassiveEffects();
                updateContainerAtExpirationTime(element, root, null, Sync, null);
              }
            };

            function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
              {
                var alternate = fiber.alternate,
                  child = fiber.child,
                  sibling = fiber.sibling,
                  tag = fiber.tag,
                  type = fiber.type;

                var candidateType = null;
                switch (tag) {
                  case FunctionComponent:
                  case SimpleMemoComponent:
                  case ClassComponent:
                    candidateType = type;
                    break;
                  case ForwardRef:
                    candidateType = type.render;
                    break;
                  default:
                    break;
                }

                if (resolveFamily === null) {
                  throw new Error('Expected resolveFamily to be set during hot reload.');
                }

                var needsRender = false;
                var needsRemount = false;
                if (candidateType !== null) {
                  var family = resolveFamily(candidateType);
                  if (family !== undefined) {
                    if (staleFamilies.has(family)) {
                      needsRemount = true;
                    } else if (updatedFamilies.has(family)) {
                      needsRender = true;
                    }
                  }
                }
                if (failedBoundaries !== null) {
                  if (
                    failedBoundaries.has(fiber) ||
                    (alternate !== null && failedBoundaries.has(alternate))
                  ) {
                    needsRemount = true;
                  }
                }

                if (needsRemount) {
                  fiber._debugNeedsRemount = true;
                }
                if (needsRemount || needsRender) {
                  scheduleWork(fiber, Sync);
                }
                if (child !== null && !needsRemount) {
                  scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
                }
                if (sibling !== null) {
                  scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
                }
              }
            }

            var findHostInstancesForRefresh = function(root, families) {
              {
                var hostInstances = new Set();
                var types = new Set(
                  families.map(function(family) {
                    return family.current;
                  }),
                );
                findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
                return hostInstances;
              }
            };

            function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
              {
                var child = fiber.child,
                  sibling = fiber.sibling,
                  tag = fiber.tag,
                  type = fiber.type;

                var candidateType = null;
                switch (tag) {
                  case FunctionComponent:
                  case SimpleMemoComponent:
                  case ClassComponent:
                    candidateType = type;
                    break;
                  case ForwardRef:
                    candidateType = type.render;
                    break;
                  default:
                    break;
                }

                var didMatch = false;
                if (candidateType !== null) {
                  if (types.has(candidateType)) {
                    didMatch = true;
                  }
                }

                if (didMatch) {
                  // We have a match. This only drills down to the closest host components.
                  // There's no need to search deeper because for the purpose of giving
                  // visual feedback, "flashing" outermost parent rectangles is sufficient.
                  findHostInstancesForFiberShallowly(fiber, hostInstances);
                } else {
                  // If there's no match, maybe there will be one further down in the child tree.
                  if (child !== null) {
                    findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                  }
                }

                if (sibling !== null) {
                  findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
                }
              }
            }

            function findHostInstancesForFiberShallowly(fiber, hostInstances) {
              {
                var foundHostInstances = findChildHostInstancesForFiberShallowly(
                  fiber,
                  hostInstances,
                );
                if (foundHostInstances) {
                  return;
                }
                // If we didn't find any host children, fallback to closest host parent.
                var node = fiber;
                while (true) {
                  switch (node.tag) {
                    case HostComponent:
                      hostInstances.add(node.stateNode);
                      return;
                    case HostPortal:
                      hostInstances.add(node.stateNode.containerInfo);
                      return;
                    case HostRoot:
                      hostInstances.add(node.stateNode.containerInfo);
                      return;
                  }
                  if (node.return === null) {
                    throw new Error('Expected to reach root first.');
                  }
                  node = node.return;
                }
              }
            }

            function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
              {
                var node = fiber;
                var foundHostInstances = false;
                while (true) {
                  if (node.tag === HostComponent) {
                    // We got a match.
                    foundHostInstances = true;
                    hostInstances.add(node.stateNode);
                    // There may still be more, so keep searching.
                  } else if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                  }
                  if (node === fiber) {
                    return foundHostInstances;
                  }
                  while (node.sibling === null) {
                    if (node.return === null || node.return === fiber) {
                      return foundHostInstances;
                    }
                    node = node.return;
                  }
                  node.sibling.return = node.return;
                  node = node.sibling;
                }
              }
              return false;
            }

            function resolveDefaultProps(Component, baseProps) {
              if (Component && Component.defaultProps) {
                // Resolve default props. Taken from ReactElement
                var props = _assign({}, baseProps);
                var defaultProps = Component.defaultProps;
                for (var propName in defaultProps) {
                  if (props[propName] === undefined) {
                    props[propName] = defaultProps[propName];
                  }
                }
                return props;
              }
              return baseProps;
            }

            function readLazyComponentType(lazyComponent) {
              var status = lazyComponent._status;
              var result = lazyComponent._result;
              switch (status) {
                case Resolved: {
                  var Component = result;
                  return Component;
                }
                case Rejected: {
                  var error = result;
                  throw error;
                }
                case Pending: {
                  var thenable = result;
                  throw thenable;
                }
                default: {
                  lazyComponent._status = Pending;
                  var ctor = lazyComponent._ctor;
                  var _thenable = ctor();
                  _thenable.then(
                    function(moduleObject) {
                      if (lazyComponent._status === Pending) {
                        var defaultExport = moduleObject.default;
                        {
                          if (defaultExport === undefined) {
                            warning$1(
                              false,
                              'lazy: Expected the result of a dynamic import() call. ' +
                                'Instead received: %s\n\nYour code should look like: \n  ' +
                                "const MyComponent = lazy(() => import('./MyComponent'))",
                              moduleObject,
                            );
                          }
                        }
                        lazyComponent._status = Resolved;
                        lazyComponent._result = defaultExport;
                      }
                    },
                    function(error) {
                      if (lazyComponent._status === Pending) {
                        lazyComponent._status = Rejected;
                        lazyComponent._result = error;
                      }
                    },
                  );
                  // Handle synchronous thenables.
                  switch (lazyComponent._status) {
                    case Resolved:
                      return lazyComponent._result;
                    case Rejected:
                      throw lazyComponent._result;
                  }
                  lazyComponent._result = _thenable;
                  throw _thenable;
                }
              }
            }

            var valueCursor = createCursor(null);

            var rendererSigil = void 0;
            {
              // Use this to detect multiple renderers using the same context
              rendererSigil = {};
            }

            var currentlyRenderingFiber = null;
            var lastContextDependency = null;
            var lastContextWithAllBitsObserved = null;

            var isDisallowedContextReadInDEV = false;

            function resetContextDependencies() {
              // This is called right before React yields execution, to ensure `readContext`
              // cannot be called outside the render phase.
              currentlyRenderingFiber = null;
              lastContextDependency = null;
              lastContextWithAllBitsObserved = null;
              {
                isDisallowedContextReadInDEV = false;
              }
            }

            function enterDisallowedContextReadInDEV() {
              {
                isDisallowedContextReadInDEV = true;
              }
            }

            function exitDisallowedContextReadInDEV() {
              {
                isDisallowedContextReadInDEV = false;
              }
            }

            function pushProvider(providerFiber, nextValue) {
              var context = providerFiber.type._context;

              if (isPrimaryRenderer) {
                push(valueCursor, context._currentValue, providerFiber);

                context._currentValue = nextValue;
                {
                  !(
                    context._currentRenderer === undefined ||
                    context._currentRenderer === null ||
                    context._currentRenderer === rendererSigil
                  )
                    ? warningWithoutStack$1(
                        false,
                        'Detected multiple renderers concurrently rendering the ' +
                          'same context provider. This is currently unsupported.',
                      )
                    : void 0;
                  context._currentRenderer = rendererSigil;
                }
              } else {
                push(valueCursor, context._currentValue2, providerFiber);

                context._currentValue2 = nextValue;
                {
                  !(
                    context._currentRenderer2 === undefined ||
                    context._currentRenderer2 === null ||
                    context._currentRenderer2 === rendererSigil
                  )
                    ? warningWithoutStack$1(
                        false,
                        'Detected multiple renderers concurrently rendering the ' +
                          'same context provider. This is currently unsupported.',
                      )
                    : void 0;
                  context._currentRenderer2 = rendererSigil;
                }
              }
            }

            function popProvider(providerFiber) {
              var currentValue = valueCursor.current;

              pop(valueCursor, providerFiber);

              var context = providerFiber.type._context;
              if (isPrimaryRenderer) {
                context._currentValue = currentValue;
              } else {
                context._currentValue2 = currentValue;
              }
            }

            function calculateChangedBits(context, newValue, oldValue) {
              if (is(oldValue, newValue)) {
                // No change
                return 0;
              } else {
                var changedBits =
                  typeof context._calculateChangedBits === 'function'
                    ? context._calculateChangedBits(oldValue, newValue)
                    : MAX_SIGNED_31_BIT_INT;

                {
                  !((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits)
                    ? warning$1(
                        false,
                        'calculateChangedBits: Expected the return value to be a ' +
                          '31-bit integer. Instead received: %s',
                        changedBits,
                      )
                    : void 0;
                }
                return changedBits | 0;
              }
            }

            function scheduleWorkOnParentPath(parent, renderExpirationTime) {
              // Update the child expiration time of all the ancestors, including
              // the alternates.
              var node = parent;
              while (node !== null) {
                var alternate = node.alternate;
                if (node.childExpirationTime < renderExpirationTime) {
                  node.childExpirationTime = renderExpirationTime;
                  if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
                    alternate.childExpirationTime = renderExpirationTime;
                  }
                } else if (
                  alternate !== null &&
                  alternate.childExpirationTime < renderExpirationTime
                ) {
                  alternate.childExpirationTime = renderExpirationTime;
                } else {
                  // Neither alternate was updated, which means the rest of the
                  // ancestor path already has sufficient priority.
                  break;
                }
                node = node.return;
              }
            }

            function propagateContextChange(
              workInProgress,
              context,
              changedBits,
              renderExpirationTime,
            ) {
              var fiber = workInProgress.child;
              if (fiber !== null) {
                // Set the return pointer of the child to the work-in-progress fiber.
                fiber.return = workInProgress;
              }
              while (fiber !== null) {
                var nextFiber = void 0;

                // Visit this fiber.
                var list = fiber.dependencies;
                if (list !== null) {
                  nextFiber = fiber.child;

                  var dependency = list.firstContext;
                  while (dependency !== null) {
                    // Check if the context matches.
                    if (
                      dependency.context === context &&
                      (dependency.observedBits & changedBits) !== 0
                    ) {
                      // Match! Schedule an update on this fiber.

                      if (fiber.tag === ClassComponent) {
                        // Schedule a force update on the work-in-progress.
                        var update = createUpdate(renderExpirationTime, null);
                        update.tag = ForceUpdate;
                        // TODO: Because we don't have a work-in-progress, this will add the
                        // update to the current fiber, too, which means it will persist even if
                        // this render is thrown away. Since it's a race condition, not sure it's
                        // worth fixing.
                        enqueueUpdate(fiber, update);
                      }

                      if (fiber.expirationTime < renderExpirationTime) {
                        fiber.expirationTime = renderExpirationTime;
                      }
                      var alternate = fiber.alternate;
                      if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
                        alternate.expirationTime = renderExpirationTime;
                      }

                      scheduleWorkOnParentPath(fiber.return, renderExpirationTime);

                      // Mark the expiration time on the list, too.
                      if (list.expirationTime < renderExpirationTime) {
                        list.expirationTime = renderExpirationTime;
                      }

                      // Since we already found a match, we can stop traversing the
                      // dependency list.
                      break;
                    }
                    dependency = dependency.next;
                  }
                } else if (fiber.tag === ContextProvider) {
                  // Don't scan deeper if this is a matching provider
                  nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
                } else if (
                  enableSuspenseServerRenderer &&
                  fiber.tag === DehydratedSuspenseComponent
                ) {
                  // If a dehydrated suspense component is in this subtree, we don't know
                  // if it will have any context consumers in it. The best we can do is
                  // mark it as having updates on its children.
                  if (fiber.expirationTime < renderExpirationTime) {
                    fiber.expirationTime = renderExpirationTime;
                  }
                  var _alternate = fiber.alternate;
                  if (_alternate !== null && _alternate.expirationTime < renderExpirationTime) {
                    _alternate.expirationTime = renderExpirationTime;
                  }
                  // This is intentionally passing this fiber as the parent
                  // because we want to schedule this fiber as having work
                  // on its children. We'll use the childExpirationTime on
                  // this fiber to indicate that a context has changed.
                  scheduleWorkOnParentPath(fiber, renderExpirationTime);
                  nextFiber = fiber.sibling;
                } else {
                  // Traverse down.
                  nextFiber = fiber.child;
                }

                if (nextFiber !== null) {
                  // Set the return pointer of the child to the work-in-progress fiber.
                  nextFiber.return = fiber;
                } else {
                  // No child. Traverse to next sibling.
                  nextFiber = fiber;
                  while (nextFiber !== null) {
                    if (nextFiber === workInProgress) {
                      // We're back to the root of this subtree. Exit.
                      nextFiber = null;
                      break;
                    }
                    var sibling = nextFiber.sibling;
                    if (sibling !== null) {
                      // Set the return pointer of the sibling to the work-in-progress fiber.
                      sibling.return = nextFiber.return;
                      nextFiber = sibling;
                      break;
                    }
                    // No more siblings. Traverse up.
                    nextFiber = nextFiber.return;
                  }
                }
                fiber = nextFiber;
              }
            }

            function prepareToReadContext(workInProgress, renderExpirationTime) {
              currentlyRenderingFiber = workInProgress;
              lastContextDependency = null;
              lastContextWithAllBitsObserved = null;

              var dependencies = workInProgress.dependencies;
              if (dependencies !== null) {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (dependencies.expirationTime >= renderExpirationTime) {
                    // Context list has a pending update. Mark that this fiber performed work.
                    markWorkInProgressReceivedUpdate();
                  }
                  // Reset the work-in-progress list
                  dependencies.firstContext = null;
                }
              }
            }

            function readContext(context, observedBits) {
              {
                // This warning would fire if you read context inside a Hook like useMemo.
                // Unlike the class check below, it's not enforced in production for perf.
                !!isDisallowedContextReadInDEV
                  ? warning$1(
                      false,
                      'Context can only be read while React is rendering. ' +
                        'In classes, you can read it in the render method or getDerivedStateFromProps. ' +
                        'In function components, you can read it directly in the function body, but not ' +
                        'inside Hooks like useReducer() or useMemo().',
                    )
                  : void 0;
              }

              if (lastContextWithAllBitsObserved === context) {
                // Nothing to do. We already observe everything in this context.
              } else if (observedBits === false || observedBits === 0) {
                // Do not observe any updates.
              } else {
                var resolvedObservedBits = void 0; // Avoid deopting on observable arguments or heterogeneous types.
                if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
                  // Observe all updates.
                  lastContextWithAllBitsObserved = context;
                  resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
                } else {
                  resolvedObservedBits = observedBits;
                }

                var contextItem = {
                  context: context,
                  observedBits: resolvedObservedBits,
                  next: null,
                };

                if (lastContextDependency === null) {
                  (function() {
                    if (!(currentlyRenderingFiber !== null)) {
                      {
                        throw ReactError(
                          Error(
                            'Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().',
                          ),
                        );
                      }
                    }
                  })();

                  // This is the first dependency for this component. Create a new list.
                  lastContextDependency = contextItem;
                  currentlyRenderingFiber.dependencies = {
                    expirationTime: NoWork,
                    firstContext: contextItem,
                    responders: null,
                  };
                } else {
                  // Append a new context item.
                  lastContextDependency = lastContextDependency.next = contextItem;
                }
              }
              return isPrimaryRenderer ? context._currentValue : context._currentValue2;
            }

            // UpdateQueue is a linked list of prioritized updates.
            //
            // Like fibers, update queues come in pairs: a current queue, which represents
            // the visible state of the screen, and a work-in-progress queue, which can be
            // mutated and processed asynchronously before it is committed — a form of
            // double buffering. If a work-in-progress render is discarded before finishing,
            // we create a new work-in-progress by cloning the current queue.
            //
            // Both queues share a persistent, singly-linked list structure. To schedule an
            // update, we append it to the end of both queues. Each queue maintains a
            // pointer to first update in the persistent list that hasn't been processed.
            // The work-in-progress pointer always has a position equal to or greater than
            // the current queue, since we always work on that one. The current queue's
            // pointer is only updated during the commit phase, when we swap in the
            // work-in-progress.
            //
            // For example:
            //
            //   Current pointer:           A - B - C - D - E - F
            //   Work-in-progress pointer:              D - E - F
            //                                          ^
            //                                          The work-in-progress queue has
            //                                          processed more updates than current.
            //
            // The reason we append to both queues is because otherwise we might drop
            // updates without ever processing them. For example, if we only add updates to
            // the work-in-progress queue, some updates could be lost whenever a work-in
            // -progress render restarts by cloning from current. Similarly, if we only add
            // updates to the current queue, the updates will be lost whenever an already
            // in-progress queue commits and swaps with the current queue. However, by
            // adding to both queues, we guarantee that the update will be part of the next
            // work-in-progress. (And because the work-in-progress queue becomes the
            // current queue once it commits, there's no danger of applying the same
            // update twice.)
            //
            // Prioritization
            // --------------
            //
            // Updates are not sorted by priority, but by insertion; new updates are always
            // appended to the end of the list.
            //
            // The priority is still important, though. When processing the update queue
            // during the render phase, only the updates with sufficient priority are
            // included in the result. If we skip an update because it has insufficient
            // priority, it remains in the queue to be processed later, during a lower
            // priority render. Crucially, all updates subsequent to a skipped update also
            // remain in the queue *regardless of their priority*. That means high priority
            // updates are sometimes processed twice, at two separate priorities. We also
            // keep track of a base state, that represents the state before the first
            // update in the queue is applied.
            //
            // For example:
            //
            //   Given a base state of '', and the following queue of updates
            //
            //     A1 - B2 - C1 - D2
            //
            //   where the number indicates the priority, and the update is applied to the
            //   previous state by appending a letter, React will process these updates as
            //   two separate renders, one per distinct priority level:
            //
            //   First render, at priority 1:
            //     Base state: ''
            //     Updates: [A1, C1]
            //     Result state: 'AC'
            //
            //   Second render, at priority 2:
            //     Base state: 'A'            <-  The base state does not include C1,
            //                                    because B2 was skipped.
            //     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2
            //     Result state: 'ABCD'
            //
            // Because we process updates in insertion order, and rebase high priority
            // updates when preceding updates are skipped, the final result is deterministic
            // regardless of priority. Intermediate state may vary according to system
            // resources, but the final state is always the same.

            var UpdateState = 0;
            var ReplaceState = 1;
            var ForceUpdate = 2;
            var CaptureUpdate = 3;

            // Global state that is reset at the beginning of calling `processUpdateQueue`.
            // It should only be read right after calling `processUpdateQueue`, via
            // `checkHasForceUpdateAfterProcessing`.
            var hasForceUpdate = false;

            var didWarnUpdateInsideUpdate = void 0;
            var currentlyProcessingQueue = void 0;

            {
              didWarnUpdateInsideUpdate = false;
              currentlyProcessingQueue = null;
            }

            function createUpdateQueue(baseState) {
              var queue = {
                baseState: baseState,
                firstUpdate: null,
                lastUpdate: null,
                firstCapturedUpdate: null,
                lastCapturedUpdate: null,
                firstEffect: null,
                lastEffect: null,
                firstCapturedEffect: null,
                lastCapturedEffect: null,
              };
              return queue;
            }

            function cloneUpdateQueue(currentQueue) {
              var queue = {
                baseState: currentQueue.baseState,
                firstUpdate: currentQueue.firstUpdate,
                lastUpdate: currentQueue.lastUpdate,

                // TODO: With resuming, if we bail out and resuse the child tree, we should
                // keep these effects.
                firstCapturedUpdate: null,
                lastCapturedUpdate: null,

                firstEffect: null,
                lastEffect: null,

                firstCapturedEffect: null,
                lastCapturedEffect: null,
              };
              return queue;
            }

            function createUpdate(expirationTime, suspenseConfig) {
              var update = {
                expirationTime: expirationTime,
                suspenseConfig: suspenseConfig,

                tag: UpdateState,
                payload: null,
                callback: null,

                next: null,
                nextEffect: null,
              };
              {
                update.priority = getCurrentPriorityLevel();
              }
              return update;
            }

            function appendUpdateToQueue(queue, update) {
              // Append the update to the end of the list.
              if (queue.lastUpdate === null) {
                // Queue is empty
                queue.firstUpdate = queue.lastUpdate = update;
              } else {
                queue.lastUpdate.next = update;
                queue.lastUpdate = update;
              }
            }

            function enqueueUpdate(fiber, update) {
              // Update queues are created lazily.
              var alternate = fiber.alternate;
              var queue1 = void 0;
              var queue2 = void 0;
              if (alternate === null) {
                // There's only one fiber.
                queue1 = fiber.updateQueue;
                queue2 = null;
                if (queue1 === null) {
                  queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
                }
              } else {
                // There are two owners.
                queue1 = fiber.updateQueue;
                queue2 = alternate.updateQueue;
                if (queue1 === null) {
                  if (queue2 === null) {
                    // Neither fiber has an update queue. Create new ones.
                    queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
                    queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState);
                  } else {
                    // Only one fiber has an update queue. Clone to create a new one.
                    queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);
                  }
                } else {
                  if (queue2 === null) {
                    // Only one fiber has an update queue. Clone to create a new one.
                    queue2 = alternate.updateQueue = cloneUpdateQueue(queue1);
                  } else {
                    // Both owners have an update queue.
                  }
                }
              }
              if (queue2 === null || queue1 === queue2) {
                // There's only a single queue.
                appendUpdateToQueue(queue1, update);
              } else {
                // There are two queues. We need to append the update to both queues,
                // while accounting for the persistent structure of the list — we don't
                // want the same update to be added multiple times.
                if (queue1.lastUpdate === null || queue2.lastUpdate === null) {
                  // One of the queues is not empty. We must add the update to both queues.
                  appendUpdateToQueue(queue1, update);
                  appendUpdateToQueue(queue2, update);
                } else {
                  // Both queues are non-empty. The last update is the same in both lists,
                  // because of structural sharing. So, only append to one of the lists.
                  appendUpdateToQueue(queue1, update);
                  // But we still need to update the `lastUpdate` pointer of queue2.
                  queue2.lastUpdate = update;
                }
              }

              {
                if (
                  fiber.tag === ClassComponent &&
                  (currentlyProcessingQueue === queue1 ||
                    (queue2 !== null && currentlyProcessingQueue === queue2)) &&
                  !didWarnUpdateInsideUpdate
                ) {
                  warningWithoutStack$1(
                    false,
                    'An update (setState, replaceState, or forceUpdate) was scheduled ' +
                      'from inside an update function. Update functions should be pure, ' +
                      'with zero side-effects. Consider using componentDidUpdate or a ' +
                      'callback.',
                  );
                  didWarnUpdateInsideUpdate = true;
                }
              }
            }

            function enqueueCapturedUpdate(workInProgress, update) {
              // Captured updates go into a separate list, and only on the work-in-
              // progress queue.
              var workInProgressQueue = workInProgress.updateQueue;
              if (workInProgressQueue === null) {
                workInProgressQueue = workInProgress.updateQueue = createUpdateQueue(
                  workInProgress.memoizedState,
                );
              } else {
                // TODO: I put this here rather than createWorkInProgress so that we don't
                // clone the queue unnecessarily. There's probably a better way to
                // structure this.
                workInProgressQueue = ensureWorkInProgressQueueIsAClone(
                  workInProgress,
                  workInProgressQueue,
                );
              }

              // Append the update to the end of the list.
              if (workInProgressQueue.lastCapturedUpdate === null) {
                // This is the first render phase update
                workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update;
              } else {
                workInProgressQueue.lastCapturedUpdate.next = update;
                workInProgressQueue.lastCapturedUpdate = update;
              }
            }

            function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
              var current = workInProgress.alternate;
              if (current !== null) {
                // If the work-in-progress queue is equal to the current queue,
                // we need to clone it first.
                if (queue === current.updateQueue) {
                  queue = workInProgress.updateQueue = cloneUpdateQueue(queue);
                }
              }
              return queue;
            }

            function getStateFromUpdate(
              workInProgress,
              queue,
              update,
              prevState,
              nextProps,
              instance,
            ) {
              switch (update.tag) {
                case ReplaceState: {
                  var _payload = update.payload;
                  if (typeof _payload === 'function') {
                    // Updater function
                    {
                      enterDisallowedContextReadInDEV();
                      if (
                        debugRenderPhaseSideEffects ||
                        (debugRenderPhaseSideEffectsForStrictMode &&
                          workInProgress.mode & StrictMode)
                      ) {
                        _payload.call(instance, prevState, nextProps);
                      }
                    }
                    var nextState = _payload.call(instance, prevState, nextProps);
                    {
                      exitDisallowedContextReadInDEV();
                    }
                    return nextState;
                  }
                  // State object
                  return _payload;
                }
                case CaptureUpdate: {
                  workInProgress.effectTag =
                    (workInProgress.effectTag & ~ShouldCapture) | DidCapture;
                }
                // Intentional fallthrough
                case UpdateState: {
                  var _payload2 = update.payload;
                  var partialState = void 0;
                  if (typeof _payload2 === 'function') {
                    // Updater function
                    {
                      enterDisallowedContextReadInDEV();
                      if (
                        debugRenderPhaseSideEffects ||
                        (debugRenderPhaseSideEffectsForStrictMode &&
                          workInProgress.mode & StrictMode)
                      ) {
                        _payload2.call(instance, prevState, nextProps);
                      }
                    }
                    partialState = _payload2.call(instance, prevState, nextProps);
                    {
                      exitDisallowedContextReadInDEV();
                    }
                  } else {
                    // Partial state object
                    partialState = _payload2;
                  }
                  if (partialState === null || partialState === undefined) {
                    // Null and undefined are treated as no-ops.
                    return prevState;
                  }
                  // Merge the partial state and the previous state.
                  return _assign({}, prevState, partialState);
                }
                case ForceUpdate: {
                  hasForceUpdate = true;
                  return prevState;
                }
              }
              return prevState;
            }

            function processUpdateQueue(
              workInProgress,
              queue,
              props,
              instance,
              renderExpirationTime,
            ) {
              hasForceUpdate = false;

              queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);

              {
                currentlyProcessingQueue = queue;
              }

              // These values may change as we process the queue.
              var newBaseState = queue.baseState;
              var newFirstUpdate = null;
              var newExpirationTime = NoWork;

              // Iterate through the list of updates to compute the result.
              var update = queue.firstUpdate;
              var resultState = newBaseState;
              while (update !== null) {
                var updateExpirationTime = update.expirationTime;
                if (updateExpirationTime < renderExpirationTime) {
                  // This update does not have sufficient priority. Skip it.
                  if (newFirstUpdate === null) {
                    // This is the first skipped update. It will be the first update in
                    // the new list.
                    newFirstUpdate = update;
                    // Since this is the first update that was skipped, the current result
                    // is the new base state.
                    newBaseState = resultState;
                  }
                  // Since this update will remain in the list, update the remaining
                  // expiration time.
                  if (newExpirationTime < updateExpirationTime) {
                    newExpirationTime = updateExpirationTime;
                  }
                } else {
                  // This update does have sufficient priority.

                  // Mark the event time of this update as relevant to this render pass.
                  // TODO: This should ideally use the true event time of this update rather than
                  // its priority which is a derived and not reverseable value.
                  // TODO: We should skip this update if it was already committed but currently
                  // we have no way of detecting the difference between a committed and suspended
                  // update here.
                  markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig);

                  // Process it and compute a new result.
                  resultState = getStateFromUpdate(
                    workInProgress,
                    queue,
                    update,
                    resultState,
                    props,
                    instance,
                  );
                  var _callback = update.callback;
                  if (_callback !== null) {
                    workInProgress.effectTag |= Callback;
                    // Set this to null, in case it was mutated during an aborted render.
                    update.nextEffect = null;
                    if (queue.lastEffect === null) {
                      queue.firstEffect = queue.lastEffect = update;
                    } else {
                      queue.lastEffect.nextEffect = update;
                      queue.lastEffect = update;
                    }
                  }
                }
                // Continue to the next update.
                update = update.next;
              }

              // Separately, iterate though the list of captured updates.
              var newFirstCapturedUpdate = null;
              update = queue.firstCapturedUpdate;
              while (update !== null) {
                var _updateExpirationTime = update.expirationTime;
                if (_updateExpirationTime < renderExpirationTime) {
                  // This update does not have sufficient priority. Skip it.
                  if (newFirstCapturedUpdate === null) {
                    // This is the first skipped captured update. It will be the first
                    // update in the new list.
                    newFirstCapturedUpdate = update;
                    // If this is the first update that was skipped, the current result is
                    // the new base state.
                    if (newFirstUpdate === null) {
                      newBaseState = resultState;
                    }
                  }
                  // Since this update will remain in the list, update the remaining
                  // expiration time.
                  if (newExpirationTime < _updateExpirationTime) {
                    newExpirationTime = _updateExpirationTime;
                  }
                } else {
                  // This update does have sufficient priority. Process it and compute
                  // a new result.
                  resultState = getStateFromUpdate(
                    workInProgress,
                    queue,
                    update,
                    resultState,
                    props,
                    instance,
                  );
                  var _callback2 = update.callback;
                  if (_callback2 !== null) {
                    workInProgress.effectTag |= Callback;
                    // Set this to null, in case it was mutated during an aborted render.
                    update.nextEffect = null;
                    if (queue.lastCapturedEffect === null) {
                      queue.firstCapturedEffect = queue.lastCapturedEffect = update;
                    } else {
                      queue.lastCapturedEffect.nextEffect = update;
                      queue.lastCapturedEffect = update;
                    }
                  }
                }
                update = update.next;
              }

              if (newFirstUpdate === null) {
                queue.lastUpdate = null;
              }
              if (newFirstCapturedUpdate === null) {
                queue.lastCapturedUpdate = null;
              } else {
                workInProgress.effectTag |= Callback;
              }
              if (newFirstUpdate === null && newFirstCapturedUpdate === null) {
                // We processed every update, without skipping. That means the new base
                // state is the same as the result state.
                newBaseState = resultState;
              }

              queue.baseState = newBaseState;
              queue.firstUpdate = newFirstUpdate;
              queue.firstCapturedUpdate = newFirstCapturedUpdate;

              // Set the remaining expiration time to be whatever is remaining in the queue.
              // This should be fine because the only two other things that contribute to
              // expiration time are props and context. We're already in the middle of the
              // begin phase by the time we start processing the queue, so we've already
              // dealt with the props. Context in components that specify
              // shouldComponentUpdate is tricky; but we'll have to account for
              // that regardless.
              workInProgress.expirationTime = newExpirationTime;
              workInProgress.memoizedState = resultState;

              {
                currentlyProcessingQueue = null;
              }
            }

            function callCallback(callback, context) {
              (function() {
                if (!(typeof callback === 'function')) {
                  {
                    throw ReactError(
                      Error(
                        'Invalid argument passed as callback. Expected a function. Instead received: ' +
                          callback,
                      ),
                    );
                  }
                }
              })();
              callback.call(context);
            }

            function resetHasForceUpdateBeforeProcessing() {
              hasForceUpdate = false;
            }

            function checkHasForceUpdateAfterProcessing() {
              return hasForceUpdate;
            }

            function commitUpdateQueue(
              finishedWork,
              finishedQueue,
              instance,
              renderExpirationTime,
            ) {
              // If the finished render included captured updates, and there are still
              // lower priority updates left over, we need to keep the captured updates
              // in the queue so that they are rebased and not dropped once we process the
              // queue again at the lower priority.
              if (finishedQueue.firstCapturedUpdate !== null) {
                // Join the captured update list to the end of the normal list.
                if (finishedQueue.lastUpdate !== null) {
                  finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate;
                  finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate;
                }
                // Clear the list of captured updates.
                finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null;
              }

              // Commit the effects
              commitUpdateEffects(finishedQueue.firstEffect, instance);
              finishedQueue.firstEffect = finishedQueue.lastEffect = null;

              commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
              finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
            }

            function commitUpdateEffects(effect, instance) {
              while (effect !== null) {
                var _callback3 = effect.callback;
                if (_callback3 !== null) {
                  effect.callback = null;
                  callCallback(_callback3, instance);
                }
                effect = effect.nextEffect;
              }
            }

            var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;

            function requestCurrentSuspenseConfig() {
              return ReactCurrentBatchConfig.suspense;
            }

            var fakeInternalInstance = {};
            var isArray$1 = Array.isArray;

            // React.Component uses a shared frozen object by default.
            // We'll use it to determine whether we need to initialize legacy refs.
            var emptyRefsObject = new React.Component().refs;

            var didWarnAboutStateAssignmentForComponent = void 0;
            var didWarnAboutUninitializedState = void 0;
            var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = void 0;
            var didWarnAboutLegacyLifecyclesAndDerivedState = void 0;
            var didWarnAboutUndefinedDerivedState = void 0;
            var warnOnUndefinedDerivedState = void 0;
            var warnOnInvalidCallback$1 = void 0;
            var didWarnAboutDirectlyAssigningPropsToState = void 0;
            var didWarnAboutContextTypeAndContextTypes = void 0;
            var didWarnAboutInvalidateContextType = void 0;

            {
              didWarnAboutStateAssignmentForComponent = new Set();
              didWarnAboutUninitializedState = new Set();
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
              didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
              didWarnAboutDirectlyAssigningPropsToState = new Set();
              didWarnAboutUndefinedDerivedState = new Set();
              didWarnAboutContextTypeAndContextTypes = new Set();
              didWarnAboutInvalidateContextType = new Set();

              var didWarnOnInvalidCallback = new Set();

              warnOnInvalidCallback$1 = function(callback, callerName) {
                if (callback === null || typeof callback === 'function') {
                  return;
                }
                var key = callerName + '_' + callback;
                if (!didWarnOnInvalidCallback.has(key)) {
                  didWarnOnInvalidCallback.add(key);
                  warningWithoutStack$1(
                    false,
                    '%s(...): Expected the last optional `callback` argument to be a ' +
                      'function. Instead received: %s.',
                    callerName,
                    callback,
                  );
                }
              };

              warnOnUndefinedDerivedState = function(type, partialState) {
                if (partialState === undefined) {
                  var componentName = getComponentName(type) || 'Component';
                  if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                    didWarnAboutUndefinedDerivedState.add(componentName);
                    warningWithoutStack$1(
                      false,
                      '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' +
                        'You have returned undefined.',
                      componentName,
                    );
                  }
                }
              };

              // This is so gross but it's at least non-critical and can be removed if
              // it causes problems. This is meant to give a nicer error message for
              // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
              // ...)) which otherwise throws a "_processChildContext is not a function"
              // exception.
              Object.defineProperty(fakeInternalInstance, '_processChildContext', {
                enumerable: false,
                value: function() {
                  (function() {
                    {
                      {
                        throw ReactError(
                          Error(
                            "_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).",
                          ),
                        );
                      }
                    }
                  })();
                },
              });
              Object.freeze(fakeInternalInstance);
            }

            function applyDerivedStateFromProps(
              workInProgress,
              ctor,
              getDerivedStateFromProps,
              nextProps,
            ) {
              var prevState = workInProgress.memoizedState;

              {
                if (
                  debugRenderPhaseSideEffects ||
                  (debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode)
                ) {
                  // Invoke the function an extra time to help detect side-effects.
                  getDerivedStateFromProps(nextProps, prevState);
                }
              }

              var partialState = getDerivedStateFromProps(nextProps, prevState);

              {
                warnOnUndefinedDerivedState(ctor, partialState);
              }
              // Merge the partial state and the previous state.
              var memoizedState =
                partialState === null || partialState === undefined
                  ? prevState
                  : _assign({}, prevState, partialState);
              workInProgress.memoizedState = memoizedState;

              // Once the update queue is empty, persist the derived state onto the
              // base state.
              var updateQueue = workInProgress.updateQueue;
              if (updateQueue !== null && workInProgress.expirationTime === NoWork) {
                updateQueue.baseState = memoizedState;
              }
            }

            var classComponentUpdater = {
              isMounted: isMounted,
              enqueueSetState: function(inst, payload, callback) {
                var fiber = get(inst);
                var currentTime = requestCurrentTime();
                var suspenseConfig = requestCurrentSuspenseConfig();
                var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);

                var update = createUpdate(expirationTime, suspenseConfig);
                update.payload = payload;
                if (callback !== undefined && callback !== null) {
                  {
                    warnOnInvalidCallback$1(callback, 'setState');
                  }
                  update.callback = callback;
                }

                if (revertPassiveEffectsChange) {
                  flushPassiveEffects();
                }
                enqueueUpdate(fiber, update);
                scheduleWork(fiber, expirationTime);
              },
              enqueueReplaceState: function(inst, payload, callback) {
                var fiber = get(inst);
                var currentTime = requestCurrentTime();
                var suspenseConfig = requestCurrentSuspenseConfig();
                var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);

                var update = createUpdate(expirationTime, suspenseConfig);
                update.tag = ReplaceState;
                update.payload = payload;

                if (callback !== undefined && callback !== null) {
                  {
                    warnOnInvalidCallback$1(callback, 'replaceState');
                  }
                  update.callback = callback;
                }

                if (revertPassiveEffectsChange) {
                  flushPassiveEffects();
                }
                enqueueUpdate(fiber, update);
                scheduleWork(fiber, expirationTime);
              },
              enqueueForceUpdate: function(inst, callback) {
                var fiber = get(inst);
                var currentTime = requestCurrentTime();
                var suspenseConfig = requestCurrentSuspenseConfig();
                var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);

                var update = createUpdate(expirationTime, suspenseConfig);
                update.tag = ForceUpdate;

                if (callback !== undefined && callback !== null) {
                  {
                    warnOnInvalidCallback$1(callback, 'forceUpdate');
                  }
                  update.callback = callback;
                }

                if (revertPassiveEffectsChange) {
                  flushPassiveEffects();
                }
                enqueueUpdate(fiber, update);
                scheduleWork(fiber, expirationTime);
              },
            };

            function checkShouldComponentUpdate(
              workInProgress,
              ctor,
              oldProps,
              newProps,
              oldState,
              newState,
              nextContext,
            ) {
              var instance = workInProgress.stateNode;
              if (typeof instance.shouldComponentUpdate === 'function') {
                startPhaseTimer(workInProgress, 'shouldComponentUpdate');
                var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                stopPhaseTimer();

                {
                  !(shouldUpdate !== undefined)
                    ? warningWithoutStack$1(
                        false,
                        '%s.shouldComponentUpdate(): Returned undefined instead of a ' +
                          'boolean value. Make sure to return true or false.',
                        getComponentName(ctor) || 'Component',
                      )
                    : void 0;
                }

                return shouldUpdate;
              }

              if (ctor.prototype && ctor.prototype.isPureReactComponent) {
                return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
              }

              return true;
            }

            function checkClassInstance(workInProgress, ctor, newProps) {
              var instance = workInProgress.stateNode;
              {
                var name = getComponentName(ctor) || 'Component';
                var renderPresent = instance.render;

                if (!renderPresent) {
                  if (ctor.prototype && typeof ctor.prototype.render === 'function') {
                    warningWithoutStack$1(
                      false,
                      '%s(...): No `render` method found on the returned component ' +
                        'instance: did you accidentally return an object from the constructor?',
                      name,
                    );
                  } else {
                    warningWithoutStack$1(
                      false,
                      '%s(...): No `render` method found on the returned component ' +
                        'instance: you may have forgotten to define `render`.',
                      name,
                    );
                  }
                }

                var noGetInitialStateOnES6 =
                  !instance.getInitialState ||
                  instance.getInitialState.isReactClassApproved ||
                  instance.state;
                !noGetInitialStateOnES6
                  ? warningWithoutStack$1(
                      false,
                      'getInitialState was defined on %s, a plain JavaScript class. ' +
                        'This is only supported for classes created using React.createClass. ' +
                        'Did you mean to define a state property instead?',
                      name,
                    )
                  : void 0;
                var noGetDefaultPropsOnES6 =
                  !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
                !noGetDefaultPropsOnES6
                  ? warningWithoutStack$1(
                      false,
                      'getDefaultProps was defined on %s, a plain JavaScript class. ' +
                        'This is only supported for classes created using React.createClass. ' +
                        'Use a static property to define defaultProps instead.',
                      name,
                    )
                  : void 0;
                var noInstancePropTypes = !instance.propTypes;
                !noInstancePropTypes
                  ? warningWithoutStack$1(
                      false,
                      'propTypes was defined as an instance property on %s. Use a static ' +
                        'property to define propTypes instead.',
                      name,
                    )
                  : void 0;
                var noInstanceContextType = !instance.contextType;
                !noInstanceContextType
                  ? warningWithoutStack$1(
                      false,
                      'contextType was defined as an instance property on %s. Use a static ' +
                        'property to define contextType instead.',
                      name,
                    )
                  : void 0;

                if (disableLegacyContext) {
                  if (ctor.childContextTypes) {
                    warningWithoutStack$1(
                      false,
                      '%s uses the legacy childContextTypes API which is no longer supported. ' +
                        'Use React.createContext() instead.',
                      name,
                    );
                  }
                  if (ctor.contextTypes) {
                    warningWithoutStack$1(
                      false,
                      '%s uses the legacy contextTypes API which is no longer supported. ' +
                        'Use React.createContext() with static contextType instead.',
                      name,
                    );
                  }
                } else {
                  var noInstanceContextTypes = !instance.contextTypes;
                  !noInstanceContextTypes
                    ? warningWithoutStack$1(
                        false,
                        'contextTypes was defined as an instance property on %s. Use a static ' +
                          'property to define contextTypes instead.',
                        name,
                      )
                    : void 0;

                  if (
                    ctor.contextType &&
                    ctor.contextTypes &&
                    !didWarnAboutContextTypeAndContextTypes.has(ctor)
                  ) {
                    didWarnAboutContextTypeAndContextTypes.add(ctor);
                    warningWithoutStack$1(
                      false,
                      '%s declares both contextTypes and contextType static properties. ' +
                        'The legacy contextTypes property will be ignored.',
                      name,
                    );
                  }
                }

                var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
                !noComponentShouldUpdate
                  ? warningWithoutStack$1(
                      false,
                      '%s has a method called ' +
                        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
                        'The name is phrased as a question because the function is ' +
                        'expected to return a value.',
                      name,
                    )
                  : void 0;
                if (
                  ctor.prototype &&
                  ctor.prototype.isPureReactComponent &&
                  typeof instance.shouldComponentUpdate !== 'undefined'
                ) {
                  warningWithoutStack$1(
                    false,
                    '%s has a method called shouldComponentUpdate(). ' +
                      'shouldComponentUpdate should not be used when extending React.PureComponent. ' +
                      'Please extend React.Component if shouldComponentUpdate is used.',
                    getComponentName(ctor) || 'A pure component',
                  );
                }
                var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
                !noComponentDidUnmount
                  ? warningWithoutStack$1(
                      false,
                      '%s has a method called ' +
                        'componentDidUnmount(). But there is no such lifecycle method. ' +
                        'Did you mean componentWillUnmount()?',
                      name,
                    )
                  : void 0;
                var noComponentDidReceiveProps =
                  typeof instance.componentDidReceiveProps !== 'function';
                !noComponentDidReceiveProps
                  ? warningWithoutStack$1(
                      false,
                      '%s has a method called ' +
                        'componentDidReceiveProps(). But there is no such lifecycle method. ' +
                        'If you meant to update the state in response to changing props, ' +
                        'use componentWillReceiveProps(). If you meant to fetch data or ' +
                        'run side-effects or mutations after React has updated the UI, use componentDidUpdate().',
                      name,
                    )
                  : void 0;
                var noComponentWillRecieveProps =
                  typeof instance.componentWillRecieveProps !== 'function';
                !noComponentWillRecieveProps
                  ? warningWithoutStack$1(
                      false,
                      '%s has a method called ' +
                        'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
                      name,
                    )
                  : void 0;
                var noUnsafeComponentWillRecieveProps =
                  typeof instance.UNSAFE_componentWillRecieveProps !== 'function';
                !noUnsafeComponentWillRecieveProps
                  ? warningWithoutStack$1(
                      false,
                      '%s has a method called ' +
                        'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?',
                      name,
                    )
                  : void 0;
                var hasMutatedProps = instance.props !== newProps;
                !(instance.props === undefined || !hasMutatedProps)
                  ? warningWithoutStack$1(
                      false,
                      '%s(...): When calling super() in `%s`, make sure to pass ' +
                        "up the same props that your component's constructor was passed.",
                      name,
                      name,
                    )
                  : void 0;
                var noInstanceDefaultProps = !instance.defaultProps;
                !noInstanceDefaultProps
                  ? warningWithoutStack$1(
                      false,
                      'Setting defaultProps as an instance property on %s is not supported and will be ignored.' +
                        ' Instead, define defaultProps as a static property on %s.',
                      name,
                      name,
                    )
                  : void 0;

                if (
                  typeof instance.getSnapshotBeforeUpdate === 'function' &&
                  typeof instance.componentDidUpdate !== 'function' &&
                  !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)
                ) {
                  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                  warningWithoutStack$1(
                    false,
                    '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' +
                      'This component defines getSnapshotBeforeUpdate() only.',
                    getComponentName(ctor),
                  );
                }

                var noInstanceGetDerivedStateFromProps =
                  typeof instance.getDerivedStateFromProps !== 'function';
                !noInstanceGetDerivedStateFromProps
                  ? warningWithoutStack$1(
                      false,
                      '%s: getDerivedStateFromProps() is defined as an instance method ' +
                        'and will be ignored. Instead, declare it as a static method.',
                      name,
                    )
                  : void 0;
                var noInstanceGetDerivedStateFromCatch =
                  typeof instance.getDerivedStateFromError !== 'function';
                !noInstanceGetDerivedStateFromCatch
                  ? warningWithoutStack$1(
                      false,
                      '%s: getDerivedStateFromError() is defined as an instance method ' +
                        'and will be ignored. Instead, declare it as a static method.',
                      name,
                    )
                  : void 0;
                var noStaticGetSnapshotBeforeUpdate =
                  typeof ctor.getSnapshotBeforeUpdate !== 'function';
                !noStaticGetSnapshotBeforeUpdate
                  ? warningWithoutStack$1(
                      false,
                      '%s: getSnapshotBeforeUpdate() is defined as a static method ' +
                        'and will be ignored. Instead, declare it as an instance method.',
                      name,
                    )
                  : void 0;
                var _state = instance.state;
                if (_state && (typeof _state !== 'object' || isArray$1(_state))) {
                  warningWithoutStack$1(false, '%s.state: must be set to an object or null', name);
                }
                if (typeof instance.getChildContext === 'function') {
                  !(typeof ctor.childContextTypes === 'object')
                    ? warningWithoutStack$1(
                        false,
                        '%s.getChildContext(): childContextTypes must be defined in order to ' +
                          'use getChildContext().',
                        name,
                      )
                    : void 0;
                }
              }
            }

            function adoptClassInstance(workInProgress, instance) {
              instance.updater = classComponentUpdater;
              workInProgress.stateNode = instance;
              // The instance needs access to the fiber so that it can schedule updates
              set(instance, workInProgress);
              {
                instance._reactInternalInstance = fakeInternalInstance;
              }
            }

            function constructClassInstance(workInProgress, ctor, props, renderExpirationTime) {
              var isLegacyContextConsumer = false;
              var unmaskedContext = emptyContextObject;
              var context = emptyContextObject;
              var contextType = ctor.contextType;

              {
                if ('contextType' in ctor) {
                  var isValid =
                    // Allow null for conditional declaration
                    contextType === null ||
                    (contextType !== undefined &&
                      contextType.$$typeof === REACT_CONTEXT_TYPE &&
                      contextType._context === undefined); // Not a <Context.Consumer>

                  if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                    didWarnAboutInvalidateContextType.add(ctor);

                    var addendum = '';
                    if (contextType === undefined) {
                      addendum =
                        ' However, it is set to undefined. ' +
                        'This can be caused by a typo or by mixing up named and default imports. ' +
                        'This can also happen due to a circular dependency, so ' +
                        'try moving the createContext() call to a separate file.';
                    } else if (typeof contextType !== 'object') {
                      addendum = ' However, it is set to a ' + typeof contextType + '.';
                    } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                      addendum = ' Did you accidentally pass the Context.Provider instead?';
                    } else if (contextType._context !== undefined) {
                      // <Context.Consumer>
                      addendum = ' Did you accidentally pass the Context.Consumer instead?';
                    } else {
                      addendum =
                        ' However, it is set to an object with keys {' +
                        Object.keys(contextType).join(', ') +
                        '}.';
                    }
                    warningWithoutStack$1(
                      false,
                      '%s defines an invalid contextType. ' +
                        'contextType should point to the Context object returned by React.createContext().%s',
                      getComponentName(ctor) || 'Component',
                      addendum,
                    );
                  }
                }
              }

              if (typeof contextType === 'object' && contextType !== null) {
                context = readContext(contextType);
              } else if (!disableLegacyContext) {
                unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
                var contextTypes = ctor.contextTypes;
                isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
                context = isLegacyContextConsumer
                  ? getMaskedContext(workInProgress, unmaskedContext)
                  : emptyContextObject;
              }

              // Instantiate twice to help detect side-effects.
              {
                if (
                  debugRenderPhaseSideEffects ||
                  (debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode)
                ) {
                  new ctor(props, context); // eslint-disable-line no-new
                }
              }

              var instance = new ctor(props, context);
              var state = (workInProgress.memoizedState =
                instance.state !== null && instance.state !== undefined ? instance.state : null);
              adoptClassInstance(workInProgress, instance);

              {
                if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
                  var componentName = getComponentName(ctor) || 'Component';
                  if (!didWarnAboutUninitializedState.has(componentName)) {
                    didWarnAboutUninitializedState.add(componentName);
                    warningWithoutStack$1(
                      false,
                      '`%s` uses `getDerivedStateFromProps` but its initial state is ' +
                        '%s. This is not recommended. Instead, define the initial state by ' +
                        'assigning an object to `this.state` in the constructor of `%s`. ' +
                        'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.',
                      componentName,
                      instance.state === null ? 'null' : 'undefined',
                      componentName,
                    );
                  }
                }

                // If new component APIs are defined, "unsafe" lifecycles won't be called.
                // Warn about these lifecycles if they are present.
                // Don't warn about react-lifecycles-compat polyfilled methods though.
                if (
                  typeof ctor.getDerivedStateFromProps === 'function' ||
                  typeof instance.getSnapshotBeforeUpdate === 'function'
                ) {
                  var foundWillMountName = null;
                  var foundWillReceivePropsName = null;
                  var foundWillUpdateName = null;
                  if (
                    typeof instance.componentWillMount === 'function' &&
                    instance.componentWillMount.__suppressDeprecationWarning !== true
                  ) {
                    foundWillMountName = 'componentWillMount';
                  } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
                    foundWillMountName = 'UNSAFE_componentWillMount';
                  }
                  if (
                    typeof instance.componentWillReceiveProps === 'function' &&
                    instance.componentWillReceiveProps.__suppressDeprecationWarning !== true
                  ) {
                    foundWillReceivePropsName = 'componentWillReceiveProps';
                  } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
                    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
                  }
                  if (
                    typeof instance.componentWillUpdate === 'function' &&
                    instance.componentWillUpdate.__suppressDeprecationWarning !== true
                  ) {
                    foundWillUpdateName = 'componentWillUpdate';
                  } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
                    foundWillUpdateName = 'UNSAFE_componentWillUpdate';
                  }
                  if (
                    foundWillMountName !== null ||
                    foundWillReceivePropsName !== null ||
                    foundWillUpdateName !== null
                  ) {
                    var _componentName = getComponentName(ctor) || 'Component';
                    var newApiName =
                      typeof ctor.getDerivedStateFromProps === 'function'
                        ? 'getDerivedStateFromProps()'
                        : 'getSnapshotBeforeUpdate()';
                    if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                      didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                      warningWithoutStack$1(
                        false,
                        'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' +
                          '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' +
                          'The above lifecycles should be removed. Learn more about this warning here:\n' +
                          'https://fb.me/react-async-component-lifecycle-hooks',
                        _componentName,
                        newApiName,
                        foundWillMountName !== null ? '\n  ' + foundWillMountName : '',
                        foundWillReceivePropsName !== null
                          ? '\n  ' + foundWillReceivePropsName
                          : '',
                        foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '',
                      );
                    }
                  }
                }
              }

              // Cache unmasked context so we can avoid recreating masked context unless necessary.
              // ReactFiberContext usually updates this cache but can't for newly-created instances.
              if (isLegacyContextConsumer) {
                cacheContext(workInProgress, unmaskedContext, context);
              }

              return instance;
            }

            function callComponentWillMount(workInProgress, instance) {
              startPhaseTimer(workInProgress, 'componentWillMount');
              var oldState = instance.state;

              if (typeof instance.componentWillMount === 'function') {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === 'function') {
                instance.UNSAFE_componentWillMount();
              }

              stopPhaseTimer();

              if (oldState !== instance.state) {
                {
                  warningWithoutStack$1(
                    false,
                    '%s.componentWillMount(): Assigning directly to this.state is ' +
                      "deprecated (except inside a component's " +
                      'constructor). Use setState instead.',
                    getComponentName(workInProgress.type) || 'Component',
                  );
                }
                classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
              }
            }

            function callComponentWillReceiveProps(
              workInProgress,
              instance,
              newProps,
              nextContext,
            ) {
              var oldState = instance.state;
              startPhaseTimer(workInProgress, 'componentWillReceiveProps');
              if (typeof instance.componentWillReceiveProps === 'function') {
                instance.componentWillReceiveProps(newProps, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
                instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
              }
              stopPhaseTimer();

              if (instance.state !== oldState) {
                {
                  var componentName = getComponentName(workInProgress.type) || 'Component';
                  if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                    didWarnAboutStateAssignmentForComponent.add(componentName);
                    warningWithoutStack$1(
                      false,
                      '%s.componentWillReceiveProps(): Assigning directly to ' +
                        "this.state is deprecated (except inside a component's " +
                        'constructor). Use setState instead.',
                      componentName,
                    );
                  }
                }
                classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
              }
            }

            // Invokes the mount life-cycles on a previously never rendered instance.
            function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
              {
                checkClassInstance(workInProgress, ctor, newProps);
              }

              var instance = workInProgress.stateNode;
              instance.props = newProps;
              instance.state = workInProgress.memoizedState;
              instance.refs = emptyRefsObject;

              var contextType = ctor.contextType;
              if (typeof contextType === 'object' && contextType !== null) {
                instance.context = readContext(contextType);
              } else if (disableLegacyContext) {
                instance.context = emptyContextObject;
              } else {
                var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
                instance.context = getMaskedContext(workInProgress, unmaskedContext);
              }

              {
                if (instance.state === newProps) {
                  var componentName = getComponentName(ctor) || 'Component';
                  if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                    didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                    warningWithoutStack$1(
                      false,
                      '%s: It is not recommended to assign props directly to state ' +
                        "because updates to props won't be reflected in state. " +
                        'In most cases, it is better to use props directly.',
                      componentName,
                    );
                  }
                }

                if (workInProgress.mode & StrictMode) {
                  ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
                }

                if (warnAboutDeprecatedLifecycles) {
                  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
                }
              }

              var updateQueue = workInProgress.updateQueue;
              if (updateQueue !== null) {
                processUpdateQueue(
                  workInProgress,
                  updateQueue,
                  newProps,
                  instance,
                  renderExpirationTime,
                );
                instance.state = workInProgress.memoizedState;
              }

              var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
              if (typeof getDerivedStateFromProps === 'function') {
                applyDerivedStateFromProps(
                  workInProgress,
                  ctor,
                  getDerivedStateFromProps,
                  newProps,
                );
                instance.state = workInProgress.memoizedState;
              }

              // In order to support react-lifecycles-compat polyfilled components,
              // Unsafe lifecycles should not be invoked for components using the new APIs.
              if (
                typeof ctor.getDerivedStateFromProps !== 'function' &&
                typeof instance.getSnapshotBeforeUpdate !== 'function' &&
                (typeof instance.UNSAFE_componentWillMount === 'function' ||
                  typeof instance.componentWillMount === 'function')
              ) {
                callComponentWillMount(workInProgress, instance);
                // If we had additional state updates during this life-cycle, let's
                // process them now.
                updateQueue = workInProgress.updateQueue;
                if (updateQueue !== null) {
                  processUpdateQueue(
                    workInProgress,
                    updateQueue,
                    newProps,
                    instance,
                    renderExpirationTime,
                  );
                  instance.state = workInProgress.memoizedState;
                }
              }

              if (typeof instance.componentDidMount === 'function') {
                workInProgress.effectTag |= Update;
              }
            }

            function resumeMountClassInstance(
              workInProgress,
              ctor,
              newProps,
              renderExpirationTime,
            ) {
              var instance = workInProgress.stateNode;

              var oldProps = workInProgress.memoizedProps;
              instance.props = oldProps;

              var oldContext = instance.context;
              var contextType = ctor.contextType;
              var nextContext = emptyContextObject;
              if (typeof contextType === 'object' && contextType !== null) {
                nextContext = readContext(contextType);
              } else if (!disableLegacyContext) {
                var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
                nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
              }

              var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
              var hasNewLifecycles =
                typeof getDerivedStateFromProps === 'function' ||
                typeof instance.getSnapshotBeforeUpdate === 'function';

              // Note: During these life-cycles, instance.props/instance.state are what
              // ever the previously attempted to render - not the "current". However,
              // during componentDidUpdate we pass the "current" props.

              // In order to support react-lifecycles-compat polyfilled components,
              // Unsafe lifecycles should not be invoked for components using the new APIs.
              if (
                !hasNewLifecycles &&
                (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||
                  typeof instance.componentWillReceiveProps === 'function')
              ) {
                if (oldProps !== newProps || oldContext !== nextContext) {
                  callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
                }
              }

              resetHasForceUpdateBeforeProcessing();

              var oldState = workInProgress.memoizedState;
              var newState = (instance.state = oldState);
              var updateQueue = workInProgress.updateQueue;
              if (updateQueue !== null) {
                processUpdateQueue(
                  workInProgress,
                  updateQueue,
                  newProps,
                  instance,
                  renderExpirationTime,
                );
                newState = workInProgress.memoizedState;
              }
              if (
                oldProps === newProps &&
                oldState === newState &&
                !hasContextChanged() &&
                !checkHasForceUpdateAfterProcessing()
              ) {
                // If an update was already in progress, we should schedule an Update
                // effect even though we're bailing out, so that cWU/cDU are called.
                if (typeof instance.componentDidMount === 'function') {
                  workInProgress.effectTag |= Update;
                }
                return false;
              }

              if (typeof getDerivedStateFromProps === 'function') {
                applyDerivedStateFromProps(
                  workInProgress,
                  ctor,
                  getDerivedStateFromProps,
                  newProps,
                );
                newState = workInProgress.memoizedState;
              }

              var shouldUpdate =
                checkHasForceUpdateAfterProcessing() ||
                checkShouldComponentUpdate(
                  workInProgress,
                  ctor,
                  oldProps,
                  newProps,
                  oldState,
                  newState,
                  nextContext,
                );

              if (shouldUpdate) {
                // In order to support react-lifecycles-compat polyfilled components,
                // Unsafe lifecycles should not be invoked for components using the new APIs.
                if (
                  !hasNewLifecycles &&
                  (typeof instance.UNSAFE_componentWillMount === 'function' ||
                    typeof instance.componentWillMount === 'function')
                ) {
                  startPhaseTimer(workInProgress, 'componentWillMount');
                  if (typeof instance.componentWillMount === 'function') {
                    instance.componentWillMount();
                  }
                  if (typeof instance.UNSAFE_componentWillMount === 'function') {
                    instance.UNSAFE_componentWillMount();
                  }
                  stopPhaseTimer();
                }
                if (typeof instance.componentDidMount === 'function') {
                  workInProgress.effectTag |= Update;
                }
              } else {
                // If an update was already in progress, we should schedule an Update
                // effect even though we're bailing out, so that cWU/cDU are called.
                if (typeof instance.componentDidMount === 'function') {
                  workInProgress.effectTag |= Update;
                }

                // If shouldComponentUpdate returned false, we should still update the
                // memoized state to indicate that this work can be reused.
                workInProgress.memoizedProps = newProps;
                workInProgress.memoizedState = newState;
              }

              // Update the existing instance's state, props, and context pointers even
              // if shouldComponentUpdate returns false.
              instance.props = newProps;
              instance.state = newState;
              instance.context = nextContext;

              return shouldUpdate;
            }

            // Invokes the update life-cycles and returns false if it shouldn't rerender.
            function updateClassInstance(
              current,
              workInProgress,
              ctor,
              newProps,
              renderExpirationTime,
            ) {
              var instance = workInProgress.stateNode;

              var oldProps = workInProgress.memoizedProps;
              instance.props =
                workInProgress.type === workInProgress.elementType
                  ? oldProps
                  : resolveDefaultProps(workInProgress.type, oldProps);

              var oldContext = instance.context;
              var contextType = ctor.contextType;
              var nextContext = emptyContextObject;
              if (typeof contextType === 'object' && contextType !== null) {
                nextContext = readContext(contextType);
              } else if (!disableLegacyContext) {
                var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
                nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
              }

              var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
              var hasNewLifecycles =
                typeof getDerivedStateFromProps === 'function' ||
                typeof instance.getSnapshotBeforeUpdate === 'function';

              // Note: During these life-cycles, instance.props/instance.state are what
              // ever the previously attempted to render - not the "current". However,
              // during componentDidUpdate we pass the "current" props.

              // In order to support react-lifecycles-compat polyfilled components,
              // Unsafe lifecycles should not be invoked for components using the new APIs.
              if (
                !hasNewLifecycles &&
                (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||
                  typeof instance.componentWillReceiveProps === 'function')
              ) {
                if (oldProps !== newProps || oldContext !== nextContext) {
                  callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
                }
              }

              resetHasForceUpdateBeforeProcessing();

              var oldState = workInProgress.memoizedState;
              var newState = (instance.state = oldState);
              var updateQueue = workInProgress.updateQueue;
              if (updateQueue !== null) {
                processUpdateQueue(
                  workInProgress,
                  updateQueue,
                  newProps,
                  instance,
                  renderExpirationTime,
                );
                newState = workInProgress.memoizedState;
              }

              if (
                oldProps === newProps &&
                oldState === newState &&
                !hasContextChanged() &&
                !checkHasForceUpdateAfterProcessing()
              ) {
                // If an update was already in progress, we should schedule an Update
                // effect even though we're bailing out, so that cWU/cDU are called.
                if (typeof instance.componentDidUpdate === 'function') {
                  if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                    workInProgress.effectTag |= Update;
                  }
                }
                if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                  if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                    workInProgress.effectTag |= Snapshot;
                  }
                }
                return false;
              }

              if (typeof getDerivedStateFromProps === 'function') {
                applyDerivedStateFromProps(
                  workInProgress,
                  ctor,
                  getDerivedStateFromProps,
                  newProps,
                );
                newState = workInProgress.memoizedState;
              }

              var shouldUpdate =
                checkHasForceUpdateAfterProcessing() ||
                checkShouldComponentUpdate(
                  workInProgress,
                  ctor,
                  oldProps,
                  newProps,
                  oldState,
                  newState,
                  nextContext,
                );

              if (shouldUpdate) {
                // In order to support react-lifecycles-compat polyfilled components,
                // Unsafe lifecycles should not be invoked for components using the new APIs.
                if (
                  !hasNewLifecycles &&
                  (typeof instance.UNSAFE_componentWillUpdate === 'function' ||
                    typeof instance.componentWillUpdate === 'function')
                ) {
                  startPhaseTimer(workInProgress, 'componentWillUpdate');
                  if (typeof instance.componentWillUpdate === 'function') {
                    instance.componentWillUpdate(newProps, newState, nextContext);
                  }
                  if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
                    instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                  }
                  stopPhaseTimer();
                }
                if (typeof instance.componentDidUpdate === 'function') {
                  workInProgress.effectTag |= Update;
                }
                if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                  workInProgress.effectTag |= Snapshot;
                }
              } else {
                // If an update was already in progress, we should schedule an Update
                // effect even though we're bailing out, so that cWU/cDU are called.
                if (typeof instance.componentDidUpdate === 'function') {
                  if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                    workInProgress.effectTag |= Update;
                  }
                }
                if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                  if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                    workInProgress.effectTag |= Snapshot;
                  }
                }

                // If shouldComponentUpdate returned false, we should still update the
                // memoized props/state to indicate that this work can be reused.
                workInProgress.memoizedProps = newProps;
                workInProgress.memoizedState = newState;
              }

              // Update the existing instance's state, props, and context pointers even
              // if shouldComponentUpdate returns false.
              instance.props = newProps;
              instance.state = newState;
              instance.context = nextContext;

              return shouldUpdate;
            }

            var didWarnAboutMaps = void 0;
            var didWarnAboutGenerators = void 0;
            var didWarnAboutStringRefInStrictMode = void 0;
            var ownerHasKeyUseWarning = void 0;
            var ownerHasFunctionTypeWarning = void 0;
            var warnForMissingKey = function(child) {};

            {
              didWarnAboutMaps = false;
              didWarnAboutGenerators = false;
              didWarnAboutStringRefInStrictMode = {};

              /**
               * Warn if there's no key explicitly set on dynamic arrays of children or
               * object keys are not valid. This allows us to keep track of children between
               * updates.
               */
              ownerHasKeyUseWarning = {};
              ownerHasFunctionTypeWarning = {};

              warnForMissingKey = function(child) {
                if (child === null || typeof child !== 'object') {
                  return;
                }
                if (!child._store || child._store.validated || child.key != null) {
                  return;
                }
                (function() {
                  if (!(typeof child._store === 'object')) {
                    {
                      throw ReactError(
                        Error(
                          'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.',
                        ),
                      );
                    }
                  }
                })();
                child._store.validated = true;

                var currentComponentErrorInfo =
                  'Each child in a list should have a unique ' +
                  '"key" prop. See https://fb.me/react-warning-keys for ' +
                  'more information.' +
                  getCurrentFiberStackInDev();
                if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                  return;
                }
                ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

                warning$1(
                  false,
                  'Each child in a list should have a unique ' +
                    '"key" prop. See https://fb.me/react-warning-keys for ' +
                    'more information.',
                );
              };
            }

            var isArray = Array.isArray;

            function coerceRef(returnFiber, current$$1, element) {
              var mixedRef = element.ref;
              if (
                mixedRef !== null &&
                typeof mixedRef !== 'function' &&
                typeof mixedRef !== 'object'
              ) {
                {
                  if (returnFiber.mode & StrictMode) {
                    var componentName = getComponentName(returnFiber.type) || 'Component';
                    if (!didWarnAboutStringRefInStrictMode[componentName]) {
                      warningWithoutStack$1(
                        false,
                        'A string ref, "%s", has been found within a strict mode tree. ' +
                          'String refs are a source of potential bugs and should be avoided. ' +
                          'We recommend using createRef() instead.' +
                          '\n%s' +
                          '\n\nLearn more about using refs safely here:' +
                          '\nhttps://fb.me/react-strict-mode-string-ref',
                        mixedRef,
                        getStackByFiberInDevAndProd(returnFiber),
                      );
                      didWarnAboutStringRefInStrictMode[componentName] = true;
                    }
                  }
                }

                if (element._owner) {
                  var owner = element._owner;
                  var inst = void 0;
                  if (owner) {
                    var ownerFiber = owner;
                    (function() {
                      if (!(ownerFiber.tag === ClassComponent)) {
                        {
                          throw ReactError(
                            Error(
                              'Function components cannot have refs. Did you mean to use React.forwardRef()?',
                            ),
                          );
                        }
                      }
                    })();
                    inst = ownerFiber.stateNode;
                  }
                  (function() {
                    if (!inst) {
                      {
                        throw ReactError(
                          Error(
                            'Missing owner for string ref ' +
                              mixedRef +
                              '. This error is likely caused by a bug in React. Please file an issue.',
                          ),
                        );
                      }
                    }
                  })();
                  var stringRef = '' + mixedRef;
                  // Check if previous string ref matches new string ref
                  if (
                    current$$1 !== null &&
                    current$$1.ref !== null &&
                    typeof current$$1.ref === 'function' &&
                    current$$1.ref._stringRef === stringRef
                  ) {
                    return current$$1.ref;
                  }
                  var ref = function(value) {
                    var refs = inst.refs;
                    if (refs === emptyRefsObject) {
                      // This is a lazy pooled frozen object, so we need to initialize.
                      refs = inst.refs = {};
                    }
                    if (value === null) {
                      delete refs[stringRef];
                    } else {
                      refs[stringRef] = value;
                    }
                  };
                  ref._stringRef = stringRef;
                  return ref;
                } else {
                  (function() {
                    if (!(typeof mixedRef === 'string')) {
                      {
                        throw ReactError(
                          Error(
                            'Expected ref to be a function, a string, an object returned by React.createRef(), or null.',
                          ),
                        );
                      }
                    }
                  })();
                  (function() {
                    if (!element._owner) {
                      {
                        throw ReactError(
                          Error(
                            'Element ref was specified as a string (' +
                              mixedRef +
                              ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.",
                          ),
                        );
                      }
                    }
                  })();
                }
              }
              return mixedRef;
            }

            function throwOnInvalidObjectType(returnFiber, newChild) {
              if (returnFiber.type !== 'textarea') {
                var addendum = '';
                {
                  addendum =
                    ' If you meant to render a collection of children, use an array ' +
                    'instead.' +
                    getCurrentFiberStackInDev();
                }
                (function() {
                  {
                    {
                      throw ReactError(
                        Error(
                          'Objects are not valid as a React child (found: ' +
                            (Object.prototype.toString.call(newChild) === '[object Object]'
                              ? 'object with keys {' + Object.keys(newChild).join(', ') + '}'
                              : newChild) +
                            ').' +
                            addendum,
                        ),
                      );
                    }
                  }
                })();
              }
            }

            function warnOnFunctionType() {
              var currentComponentErrorInfo =
                'Functions are not valid as a React child. This may happen if ' +
                'you return a Component instead of <Component /> from render. ' +
                'Or maybe you meant to call this function rather than return it.' +
                getCurrentFiberStackInDev();

              if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;

              warning$1(
                false,
                'Functions are not valid as a React child. This may happen if ' +
                  'you return a Component instead of <Component /> from render. ' +
                  'Or maybe you meant to call this function rather than return it.',
              );
            }

            // This wrapper function exists because I expect to clone the code in each path
            // to be able to optimize each path individually by branching early. This needs
            // a compiler or we can do it manually. Helpers that don't need this branching
            // live outside of this function.
            function ChildReconciler(shouldTrackSideEffects) {
              function deleteChild(returnFiber, childToDelete) {
                if (!shouldTrackSideEffects) {
                  // Noop.
                  return;
                }
                // Deletions are added in reversed order so we add it to the front.
                // At this point, the return fiber's effect list is empty except for
                // deletions, so we can just append the deletion to the list. The remaining
                // effects aren't added until the complete phase. Once we implement
                // resuming, this may not be true.
                var last = returnFiber.lastEffect;
                if (last !== null) {
                  last.nextEffect = childToDelete;
                  returnFiber.lastEffect = childToDelete;
                } else {
                  returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
                }
                childToDelete.nextEffect = null;
                childToDelete.effectTag = Deletion;
              }

              function deleteRemainingChildren(returnFiber, currentFirstChild) {
                if (!shouldTrackSideEffects) {
                  // Noop.
                  return null;
                }

                // TODO: For the shouldClone case, this could be micro-optimized a bit by
                // assuming that after the first child we've already added everything.
                var childToDelete = currentFirstChild;
                while (childToDelete !== null) {
                  deleteChild(returnFiber, childToDelete);
                  childToDelete = childToDelete.sibling;
                }
                return null;
              }

              function mapRemainingChildren(returnFiber, currentFirstChild) {
                // Add the remaining children to a temporary map so that we can find them by
                // keys quickly. Implicit (null) keys get added to this set with their index
                var existingChildren = new Map();

                var existingChild = currentFirstChild;
                while (existingChild !== null) {
                  if (existingChild.key !== null) {
                    existingChildren.set(existingChild.key, existingChild);
                  } else {
                    existingChildren.set(existingChild.index, existingChild);
                  }
                  existingChild = existingChild.sibling;
                }
                return existingChildren;
              }

              function useFiber(fiber, pendingProps, expirationTime) {
                // We currently set sibling to null and index to 0 here because it is easy
                // to forget to do before returning it. E.g. for the single child case.
                var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
                clone.index = 0;
                clone.sibling = null;
                return clone;
              }

              function placeChild(newFiber, lastPlacedIndex, newIndex) {
                newFiber.index = newIndex;
                if (!shouldTrackSideEffects) {
                  // Noop.
                  return lastPlacedIndex;
                }
                var current$$1 = newFiber.alternate;
                if (current$$1 !== null) {
                  var oldIndex = current$$1.index;
                  if (oldIndex < lastPlacedIndex) {
                    // This is a move.
                    newFiber.effectTag = Placement;
                    return lastPlacedIndex;
                  } else {
                    // This item can stay in place.
                    return oldIndex;
                  }
                } else {
                  // This is an insertion.
                  newFiber.effectTag = Placement;
                  return lastPlacedIndex;
                }
              }

              function placeSingleChild(newFiber) {
                // This is simpler for the single child case. We only need to do a
                // placement for inserting new children.
                if (shouldTrackSideEffects && newFiber.alternate === null) {
                  newFiber.effectTag = Placement;
                }
                return newFiber;
              }

              function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
                if (current$$1 === null || current$$1.tag !== HostText) {
                  // Insert
                  var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
                  created.return = returnFiber;
                  return created;
                } else {
                  // Update
                  var existing = useFiber(current$$1, textContent, expirationTime);
                  existing.return = returnFiber;
                  return existing;
                }
              }

              function updateElement(returnFiber, current$$1, element, expirationTime) {
                if (
                  current$$1 !== null &&
                  (current$$1.elementType === element.type ||
                    // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(current$$1, element))
                ) {
                  // Move based on index
                  var existing = useFiber(current$$1, element.props, expirationTime);
                  existing.ref = coerceRef(returnFiber, current$$1, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                } else {
                  // Insert
                  var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
                  created.ref = coerceRef(returnFiber, current$$1, element);
                  created.return = returnFiber;
                  return created;
                }
              }

              function updatePortal(returnFiber, current$$1, portal, expirationTime) {
                if (
                  current$$1 === null ||
                  current$$1.tag !== HostPortal ||
                  current$$1.stateNode.containerInfo !== portal.containerInfo ||
                  current$$1.stateNode.implementation !== portal.implementation
                ) {
                  // Insert
                  var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
                  created.return = returnFiber;
                  return created;
                } else {
                  // Update
                  var existing = useFiber(current$$1, portal.children || [], expirationTime);
                  existing.return = returnFiber;
                  return existing;
                }
              }

              function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
                if (current$$1 === null || current$$1.tag !== Fragment) {
                  // Insert
                  var created = createFiberFromFragment(
                    fragment,
                    returnFiber.mode,
                    expirationTime,
                    key,
                  );
                  created.return = returnFiber;
                  return created;
                } else {
                  // Update
                  var existing = useFiber(current$$1, fragment, expirationTime);
                  existing.return = returnFiber;
                  return existing;
                }
              }

              function createChild(returnFiber, newChild, expirationTime) {
                if (typeof newChild === 'string' || typeof newChild === 'number') {
                  // Text nodes don't have keys. If the previous node is implicitly keyed
                  // we can continue to replace it without aborting even if it is not a text
                  // node.
                  var created = createFiberFromText(
                    '' + newChild,
                    returnFiber.mode,
                    expirationTime,
                  );
                  created.return = returnFiber;
                  return created;
                }

                if (typeof newChild === 'object' && newChild !== null) {
                  switch (newChild.$$typeof) {
                    case REACT_ELEMENT_TYPE: {
                      var _created = createFiberFromElement(
                        newChild,
                        returnFiber.mode,
                        expirationTime,
                      );
                      _created.ref = coerceRef(returnFiber, null, newChild);
                      _created.return = returnFiber;
                      return _created;
                    }
                    case REACT_PORTAL_TYPE: {
                      var _created2 = createFiberFromPortal(
                        newChild,
                        returnFiber.mode,
                        expirationTime,
                      );
                      _created2.return = returnFiber;
                      return _created2;
                    }
                  }

                  if (isArray(newChild) || getIteratorFn(newChild)) {
                    var _created3 = createFiberFromFragment(
                      newChild,
                      returnFiber.mode,
                      expirationTime,
                      null,
                    );
                    _created3.return = returnFiber;
                    return _created3;
                  }

                  throwOnInvalidObjectType(returnFiber, newChild);
                }

                {
                  if (typeof newChild === 'function') {
                    warnOnFunctionType();
                  }
                }

                return null;
              }

              function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
                // Update the fiber if the keys match, otherwise return null.

                var key = oldFiber !== null ? oldFiber.key : null;

                if (typeof newChild === 'string' || typeof newChild === 'number') {
                  // Text nodes don't have keys. If the previous node is implicitly keyed
                  // we can continue to replace it without aborting even if it is not a text
                  // node.
                  if (key !== null) {
                    return null;
                  }
                  return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
                }

                if (typeof newChild === 'object' && newChild !== null) {
                  switch (newChild.$$typeof) {
                    case REACT_ELEMENT_TYPE: {
                      if (newChild.key === key) {
                        if (newChild.type === REACT_FRAGMENT_TYPE) {
                          return updateFragment(
                            returnFiber,
                            oldFiber,
                            newChild.props.children,
                            expirationTime,
                            key,
                          );
                        }
                        return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                      } else {
                        return null;
                      }
                    }
                    case REACT_PORTAL_TYPE: {
                      if (newChild.key === key) {
                        return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                      } else {
                        return null;
                      }
                    }
                  }

                  if (isArray(newChild) || getIteratorFn(newChild)) {
                    if (key !== null) {
                      return null;
                    }

                    return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
                  }

                  throwOnInvalidObjectType(returnFiber, newChild);
                }

                {
                  if (typeof newChild === 'function') {
                    warnOnFunctionType();
                  }
                }

                return null;
              }

              function updateFromMap(
                existingChildren,
                returnFiber,
                newIdx,
                newChild,
                expirationTime,
              ) {
                if (typeof newChild === 'string' || typeof newChild === 'number') {
                  // Text nodes don't have keys, so we neither have to check the old nor
                  // new node for the key. If both are text nodes, they match.
                  var matchedFiber = existingChildren.get(newIdx) || null;
                  return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
                }

                if (typeof newChild === 'object' && newChild !== null) {
                  switch (newChild.$$typeof) {
                    case REACT_ELEMENT_TYPE: {
                      var _matchedFiber =
                        existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                      if (newChild.type === REACT_FRAGMENT_TYPE) {
                        return updateFragment(
                          returnFiber,
                          _matchedFiber,
                          newChild.props.children,
                          expirationTime,
                          newChild.key,
                        );
                      }
                      return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
                    }
                    case REACT_PORTAL_TYPE: {
                      var _matchedFiber2 =
                        existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                      return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
                    }
                  }

                  if (isArray(newChild) || getIteratorFn(newChild)) {
                    var _matchedFiber3 = existingChildren.get(newIdx) || null;
                    return updateFragment(
                      returnFiber,
                      _matchedFiber3,
                      newChild,
                      expirationTime,
                      null,
                    );
                  }

                  throwOnInvalidObjectType(returnFiber, newChild);
                }

                {
                  if (typeof newChild === 'function') {
                    warnOnFunctionType();
                  }
                }

                return null;
              }

              /**
               * Warns if there is a duplicate or missing key
               */
              function warnOnInvalidKey(child, knownKeys) {
                {
                  if (typeof child !== 'object' || child === null) {
                    return knownKeys;
                  }
                  switch (child.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      warnForMissingKey(child);
                      var key = child.key;
                      if (typeof key !== 'string') {
                        break;
                      }
                      if (knownKeys === null) {
                        knownKeys = new Set();
                        knownKeys.add(key);
                        break;
                      }
                      if (!knownKeys.has(key)) {
                        knownKeys.add(key);
                        break;
                      }
                      warning$1(
                        false,
                        'Encountered two children with the same key, `%s`. ' +
                          'Keys should be unique so that components maintain their identity ' +
                          'across updates. Non-unique keys may cause children to be ' +
                          'duplicated and/or omitted — the behavior is unsupported and ' +
                          'could change in a future version.',
                        key,
                      );
                      break;
                    default:
                      break;
                  }
                }
                return knownKeys;
              }

              function reconcileChildrenArray(
                returnFiber,
                currentFirstChild,
                newChildren,
                expirationTime,
              ) {
                // This algorithm can't optimize by searching from both ends since we
                // don't have backpointers on fibers. I'm trying to see how far we can get
                // with that model. If it ends up not being worth the tradeoffs, we can
                // add it later.

                // Even with a two ended optimization, we'd want to optimize for the case
                // where there are few changes and brute force the comparison instead of
                // going for the Map. It'd like to explore hitting that path first in
                // forward-only mode and only go for the Map once we notice that we need
                // lots of look ahead. This doesn't handle reversal as well as two ended
                // search but that's unusual. Besides, for the two ended optimization to
                // work on Iterables, we'd need to copy the whole set.

                // In this first iteration, we'll just live with hitting the bad case
                // (adding everything to a Map) in for every insert/move.

                // If you change this code, also update reconcileChildrenIterator() which
                // uses the same algorithm.

                {
                  // First, validate keys.
                  var knownKeys = null;
                  for (var i = 0; i < newChildren.length; i++) {
                    var child = newChildren[i];
                    knownKeys = warnOnInvalidKey(child, knownKeys);
                  }
                }

                var resultingFirstChild = null;
                var previousNewFiber = null;

                var oldFiber = currentFirstChild;
                var lastPlacedIndex = 0;
                var newIdx = 0;
                var nextOldFiber = null;
                for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                  if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                  } else {
                    nextOldFiber = oldFiber.sibling;
                  }
                  var newFiber = updateSlot(
                    returnFiber,
                    oldFiber,
                    newChildren[newIdx],
                    expirationTime,
                  );
                  if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) {
                      oldFiber = nextOldFiber;
                    }
                    break;
                  }
                  if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) {
                      // We matched the slot, but we didn't reuse the existing fiber, so we
                      // need to delete the existing child.
                      deleteChild(returnFiber, oldFiber);
                    }
                  }
                  lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = newFiber;
                  } else {
                    // TODO: Defer siblings if we're not at the right index for this slot.
                    // I.e. if we had null values before, then we want to defer this
                    // for each null value. However, we also don't want to call updateSlot
                    // with the previous one.
                    previousNewFiber.sibling = newFiber;
                  }
                  previousNewFiber = newFiber;
                  oldFiber = nextOldFiber;
                }

                if (newIdx === newChildren.length) {
                  // We've reached the end of the new children. We can delete the rest.
                  deleteRemainingChildren(returnFiber, oldFiber);
                  return resultingFirstChild;
                }

                if (oldFiber === null) {
                  // If we don't have any more existing children we can choose a fast path
                  // since the rest will all be insertions.
                  for (; newIdx < newChildren.length; newIdx++) {
                    var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
                    if (_newFiber === null) {
                      continue;
                    }
                    lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) {
                      // TODO: Move out of the loop. This only happens for the first run.
                      resultingFirstChild = _newFiber;
                    } else {
                      previousNewFiber.sibling = _newFiber;
                    }
                    previousNewFiber = _newFiber;
                  }
                  return resultingFirstChild;
                }

                // Add all children to a key map for quick lookups.
                var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

                // Keep scanning and use the map to restore deleted items as moves.
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber2 = updateFromMap(
                    existingChildren,
                    returnFiber,
                    newIdx,
                    newChildren[newIdx],
                    expirationTime,
                  );
                  if (_newFiber2 !== null) {
                    if (shouldTrackSideEffects) {
                      if (_newFiber2.alternate !== null) {
                        // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                      }
                    }
                    lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) {
                      resultingFirstChild = _newFiber2;
                    } else {
                      previousNewFiber.sibling = _newFiber2;
                    }
                    previousNewFiber = _newFiber2;
                  }
                }

                if (shouldTrackSideEffects) {
                  // Any existing children that weren't consumed above were deleted. We need
                  // to add them to the deletion list.
                  existingChildren.forEach(function(child) {
                    return deleteChild(returnFiber, child);
                  });
                }

                return resultingFirstChild;
              }

              function reconcileChildrenIterator(
                returnFiber,
                currentFirstChild,
                newChildrenIterable,
                expirationTime,
              ) {
                // This is the same implementation as reconcileChildrenArray(),
                // but using the iterator instead.

                var iteratorFn = getIteratorFn(newChildrenIterable);
                (function() {
                  if (!(typeof iteratorFn === 'function')) {
                    {
                      throw ReactError(
                        Error(
                          'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.',
                        ),
                      );
                    }
                  }
                })();

                {
                  // We don't support rendering Generators because it's a mutation.
                  // See https://github.com/facebook/react/issues/12995
                  if (
                    typeof Symbol === 'function' &&
                    // $FlowFixMe Flow doesn't know about toStringTag
                    newChildrenIterable[Symbol.toStringTag] === 'Generator'
                  ) {
                    !didWarnAboutGenerators
                      ? warning$1(
                          false,
                          'Using Generators as children is unsupported and will likely yield ' +
                            'unexpected results because enumerating a generator mutates it. ' +
                            'You may convert it to an array with `Array.from()` or the ' +
                            '`[...spread]` operator before rendering. Keep in mind ' +
                            'you might need to polyfill these features for older browsers.',
                        )
                      : void 0;
                    didWarnAboutGenerators = true;
                  }

                  // Warn about using Maps as children
                  if (newChildrenIterable.entries === iteratorFn) {
                    !didWarnAboutMaps
                      ? warning$1(
                          false,
                          'Using Maps as children is unsupported and will likely yield ' +
                            'unexpected results. Convert it to a sequence/iterable of keyed ' +
                            'ReactElements instead.',
                        )
                      : void 0;
                    didWarnAboutMaps = true;
                  }

                  // First, validate keys.
                  // We'll get a different iterator later for the main pass.
                  var _newChildren = iteratorFn.call(newChildrenIterable);
                  if (_newChildren) {
                    var knownKeys = null;
                    var _step = _newChildren.next();
                    for (; !_step.done; _step = _newChildren.next()) {
                      var child = _step.value;
                      knownKeys = warnOnInvalidKey(child, knownKeys);
                    }
                  }
                }

                var newChildren = iteratorFn.call(newChildrenIterable);
                (function() {
                  if (!(newChildren != null)) {
                    {
                      throw ReactError(Error('An iterable object provided no iterator.'));
                    }
                  }
                })();

                var resultingFirstChild = null;
                var previousNewFiber = null;

                var oldFiber = currentFirstChild;
                var lastPlacedIndex = 0;
                var newIdx = 0;
                var nextOldFiber = null;

                var step = newChildren.next();
                for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                  if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                  } else {
                    nextOldFiber = oldFiber.sibling;
                  }
                  var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
                  if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) {
                      oldFiber = nextOldFiber;
                    }
                    break;
                  }
                  if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) {
                      // We matched the slot, but we didn't reuse the existing fiber, so we
                      // need to delete the existing child.
                      deleteChild(returnFiber, oldFiber);
                    }
                  }
                  lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = newFiber;
                  } else {
                    // TODO: Defer siblings if we're not at the right index for this slot.
                    // I.e. if we had null values before, then we want to defer this
                    // for each null value. However, we also don't want to call updateSlot
                    // with the previous one.
                    previousNewFiber.sibling = newFiber;
                  }
                  previousNewFiber = newFiber;
                  oldFiber = nextOldFiber;
                }

                if (step.done) {
                  // We've reached the end of the new children. We can delete the rest.
                  deleteRemainingChildren(returnFiber, oldFiber);
                  return resultingFirstChild;
                }

                if (oldFiber === null) {
                  // If we don't have any more existing children we can choose a fast path
                  // since the rest will all be insertions.
                  for (; !step.done; newIdx++, step = newChildren.next()) {
                    var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
                    if (_newFiber3 === null) {
                      continue;
                    }
                    lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) {
                      // TODO: Move out of the loop. This only happens for the first run.
                      resultingFirstChild = _newFiber3;
                    } else {
                      previousNewFiber.sibling = _newFiber3;
                    }
                    previousNewFiber = _newFiber3;
                  }
                  return resultingFirstChild;
                }

                // Add all children to a key map for quick lookups.
                var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

                // Keep scanning and use the map to restore deleted items as moves.
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber4 = updateFromMap(
                    existingChildren,
                    returnFiber,
                    newIdx,
                    step.value,
                    expirationTime,
                  );
                  if (_newFiber4 !== null) {
                    if (shouldTrackSideEffects) {
                      if (_newFiber4.alternate !== null) {
                        // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                      }
                    }
                    lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) {
                      resultingFirstChild = _newFiber4;
                    } else {
                      previousNewFiber.sibling = _newFiber4;
                    }
                    previousNewFiber = _newFiber4;
                  }
                }

                if (shouldTrackSideEffects) {
                  // Any existing children that weren't consumed above were deleted. We need
                  // to add them to the deletion list.
                  existingChildren.forEach(function(child) {
                    return deleteChild(returnFiber, child);
                  });
                }

                return resultingFirstChild;
              }

              function reconcileSingleTextNode(
                returnFiber,
                currentFirstChild,
                textContent,
                expirationTime,
              ) {
                // There's no need to check for keys on text nodes since we don't have a
                // way to define them.
                if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                  // We already have an existing node so let's just update it and delete
                  // the rest.
                  deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                  var existing = useFiber(currentFirstChild, textContent, expirationTime);
                  existing.return = returnFiber;
                  return existing;
                }
                // The existing first child is not a text node so we need to create one
                // and delete the existing ones.
                deleteRemainingChildren(returnFiber, currentFirstChild);
                var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
                created.return = returnFiber;
                return created;
              }

              function reconcileSingleElement(
                returnFiber,
                currentFirstChild,
                element,
                expirationTime,
              ) {
                var key = element.key;
                var child = currentFirstChild;
                while (child !== null) {
                  // TODO: If key === null and child.key === null, then this only applies to
                  // the first item in the list.
                  if (child.key === key) {
                    if (
                      child.tag === Fragment
                        ? element.type === REACT_FRAGMENT_TYPE
                        : child.elementType === element.type ||
                          // Keep this check inline so it only runs on the false path:
                          isCompatibleFamilyForHotReloading(child, element)
                    ) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(
                        child,
                        element.type === REACT_FRAGMENT_TYPE
                          ? element.props.children
                          : element.props,
                        expirationTime,
                      );
                      existing.ref = coerceRef(returnFiber, child, element);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    } else {
                      deleteRemainingChildren(returnFiber, child);
                      break;
                    }
                  } else {
                    deleteChild(returnFiber, child);
                  }
                  child = child.sibling;
                }

                if (element.type === REACT_FRAGMENT_TYPE) {
                  var created = createFiberFromFragment(
                    element.props.children,
                    returnFiber.mode,
                    expirationTime,
                    element.key,
                  );
                  created.return = returnFiber;
                  return created;
                } else {
                  var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);
                  _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                  _created4.return = returnFiber;
                  return _created4;
                }
              }

              function reconcileSinglePortal(
                returnFiber,
                currentFirstChild,
                portal,
                expirationTime,
              ) {
                var key = portal.key;
                var child = currentFirstChild;
                while (child !== null) {
                  // TODO: If key === null and child.key === null, then this only applies to
                  // the first item in the list.
                  if (child.key === key) {
                    if (
                      child.tag === HostPortal &&
                      child.stateNode.containerInfo === portal.containerInfo &&
                      child.stateNode.implementation === portal.implementation
                    ) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, portal.children || [], expirationTime);
                      existing.return = returnFiber;
                      return existing;
                    } else {
                      deleteRemainingChildren(returnFiber, child);
                      break;
                    }
                  } else {
                    deleteChild(returnFiber, child);
                  }
                  child = child.sibling;
                }

                var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
                created.return = returnFiber;
                return created;
              }

              // This API will tag the children with the side-effect of the reconciliation
              // itself. They will be added to the side-effect list as we pass through the
              // children and the parent.
              function reconcileChildFibers(
                returnFiber,
                currentFirstChild,
                newChild,
                expirationTime,
              ) {
                // This function is not recursive.
                // If the top level item is an array, we treat it as a set of children,
                // not as a fragment. Nested arrays on the other hand will be treated as
                // fragment nodes. Recursion happens at the normal flow.

                // Handle top level unkeyed fragments as if they were arrays.
                // This leads to an ambiguity between <>{[...]}</> and <>...</>.
                // We treat the ambiguous cases above the same.
                var isUnkeyedTopLevelFragment =
                  typeof newChild === 'object' &&
                  newChild !== null &&
                  newChild.type === REACT_FRAGMENT_TYPE &&
                  newChild.key === null;
                if (isUnkeyedTopLevelFragment) {
                  newChild = newChild.props.children;
                }

                // Handle object types
                var isObject = typeof newChild === 'object' && newChild !== null;

                if (isObject) {
                  switch (newChild.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                      return placeSingleChild(
                        reconcileSingleElement(
                          returnFiber,
                          currentFirstChild,
                          newChild,
                          expirationTime,
                        ),
                      );
                    case REACT_PORTAL_TYPE:
                      return placeSingleChild(
                        reconcileSinglePortal(
                          returnFiber,
                          currentFirstChild,
                          newChild,
                          expirationTime,
                        ),
                      );
                  }
                }

                if (typeof newChild === 'string' || typeof newChild === 'number') {
                  return placeSingleChild(
                    reconcileSingleTextNode(
                      returnFiber,
                      currentFirstChild,
                      '' + newChild,
                      expirationTime,
                    ),
                  );
                }

                if (isArray(newChild)) {
                  return reconcileChildrenArray(
                    returnFiber,
                    currentFirstChild,
                    newChild,
                    expirationTime,
                  );
                }

                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(
                    returnFiber,
                    currentFirstChild,
                    newChild,
                    expirationTime,
                  );
                }

                if (isObject) {
                  throwOnInvalidObjectType(returnFiber, newChild);
                }

                {
                  if (typeof newChild === 'function') {
                    warnOnFunctionType();
                  }
                }
                if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
                  // If the new child is undefined, and the return fiber is a composite
                  // component, throw an error. If Fiber return types are disabled,
                  // we already threw above.
                  switch (returnFiber.tag) {
                    case ClassComponent: {
                      {
                        var instance = returnFiber.stateNode;
                        if (instance.render._isMockFunction) {
                          // We allow auto-mocks to proceed as if they're returning null.
                          break;
                        }
                      }
                    }
                    // Intentionally fall through to the next case, which handles both
                    // functions and classes
                    // eslint-disable-next-lined no-fallthrough
                    case FunctionComponent: {
                      var Component = returnFiber.type;
                      (function() {
                        {
                          {
                            throw ReactError(
                              Error(
                                (Component.displayName || Component.name || 'Component') +
                                  '(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.',
                              ),
                            );
                          }
                        }
                      })();
                    }
                  }
                }

                // Remaining cases are all treated as empty.
                return deleteRemainingChildren(returnFiber, currentFirstChild);
              }

              return reconcileChildFibers;
            }

            var reconcileChildFibers = ChildReconciler(true);
            var mountChildFibers = ChildReconciler(false);

            function cloneChildFibers(current$$1, workInProgress) {
              (function() {
                if (!(current$$1 === null || workInProgress.child === current$$1.child)) {
                  {
                    throw ReactError(Error('Resuming work not yet implemented.'));
                  }
                }
              })();

              if (workInProgress.child === null) {
                return;
              }

              var currentChild = workInProgress.child;
              var newChild = createWorkInProgress(
                currentChild,
                currentChild.pendingProps,
                currentChild.expirationTime,
              );
              workInProgress.child = newChild;

              newChild.return = workInProgress;
              while (currentChild.sibling !== null) {
                currentChild = currentChild.sibling;
                newChild = newChild.sibling = createWorkInProgress(
                  currentChild,
                  currentChild.pendingProps,
                  currentChild.expirationTime,
                );
                newChild.return = workInProgress;
              }
              newChild.sibling = null;
            }

            // Reset a workInProgress child set to prepare it for a second pass.
            function resetChildFibers(workInProgress, renderExpirationTime) {
              var child = workInProgress.child;
              while (child !== null) {
                resetWorkInProgress(child, renderExpirationTime);
                child = child.sibling;
              }
            }

            var NO_CONTEXT = {};

            var contextStackCursor$1 = createCursor(NO_CONTEXT);
            var contextFiberStackCursor = createCursor(NO_CONTEXT);
            var rootInstanceStackCursor = createCursor(NO_CONTEXT);

            function requiredContext(c) {
              (function() {
                if (!(c !== NO_CONTEXT)) {
                  {
                    throw ReactError(
                      Error(
                        'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.',
                      ),
                    );
                  }
                }
              })();
              return c;
            }

            function getRootHostContainer() {
              var rootInstance = requiredContext(rootInstanceStackCursor.current);
              return rootInstance;
            }

            function pushHostContainer(fiber, nextRootInstance) {
              // Push current root instance onto the stack;
              // This allows us to reset root when portals are popped.
              push(rootInstanceStackCursor, nextRootInstance, fiber);
              // Track the context and the Fiber that provided it.
              // This enables us to pop only Fibers that provide unique contexts.
              push(contextFiberStackCursor, fiber, fiber);

              // Finally, we need to push the host context to the stack.
              // However, we can't just call getRootHostContext() and push it because
              // we'd have a different number of entries on the stack depending on
              // whether getRootHostContext() throws somewhere in renderer code or not.
              // So we push an empty value first. This lets us safely unwind on errors.
              push(contextStackCursor$1, NO_CONTEXT, fiber);
              var nextRootContext = getRootHostContext(nextRootInstance);
              // Now that we know this function doesn't throw, replace it.
              pop(contextStackCursor$1, fiber);
              push(contextStackCursor$1, nextRootContext, fiber);
            }

            function popHostContainer(fiber) {
              pop(contextStackCursor$1, fiber);
              pop(contextFiberStackCursor, fiber);
              pop(rootInstanceStackCursor, fiber);
            }

            function getHostContext() {
              var context = requiredContext(contextStackCursor$1.current);
              return context;
            }

            function pushHostContext(fiber) {
              var rootInstance = requiredContext(rootInstanceStackCursor.current);
              var context = requiredContext(contextStackCursor$1.current);
              var nextContext = getChildHostContext(context, fiber.type, rootInstance);

              // Don't push this Fiber's context unless it's unique.
              if (context === nextContext) {
                return;
              }

              // Track the context and the Fiber that provided it.
              // This enables us to pop only Fibers that provide unique contexts.
              push(contextFiberStackCursor, fiber, fiber);
              push(contextStackCursor$1, nextContext, fiber);
            }

            function popHostContext(fiber) {
              // Do not pop unless this Fiber provided the current context.
              // pushHostContext() only pushes Fibers that provide unique contexts.
              if (contextFiberStackCursor.current !== fiber) {
                return;
              }

              pop(contextStackCursor$1, fiber);
              pop(contextFiberStackCursor, fiber);
            }

            var DefaultSuspenseContext = 0;

            // The Suspense Context is split into two parts. The lower bits is
            // inherited deeply down the subtree. The upper bits only affect
            // this immediate suspense boundary and gets reset each new
            // boundary or suspense list.
            var SubtreeSuspenseContextMask = 1;

            // Subtree Flags:

            // InvisibleParentSuspenseContext indicates that one of our parent Suspense
            // boundaries is not currently showing visible main content.
            // Either because it is already showing a fallback or is not mounted at all.
            // We can use this to determine if it is desirable to trigger a fallback at
            // the parent. If not, then we might need to trigger undesirable boundaries
            // and/or suspend the commit to avoid hiding the parent content.
            var InvisibleParentSuspenseContext = 1;

            // Shallow Flags:

            // ForceSuspenseFallback can be used by SuspenseList to force newly added
            // items into their fallback state during one of the render passes.
            var ForceSuspenseFallback = 2;

            var suspenseStackCursor = createCursor(DefaultSuspenseContext);

            function hasSuspenseContext(parentContext, flag) {
              return (parentContext & flag) !== 0;
            }

            function setDefaultShallowSuspenseContext(parentContext) {
              return parentContext & SubtreeSuspenseContextMask;
            }

            function setShallowSuspenseContext(parentContext, shallowContext) {
              return (parentContext & SubtreeSuspenseContextMask) | shallowContext;
            }

            function addSubtreeSuspenseContext(parentContext, subtreeContext) {
              return parentContext | subtreeContext;
            }

            function pushSuspenseContext(fiber, newContext) {
              push(suspenseStackCursor, newContext, fiber);
            }

            function popSuspenseContext(fiber) {
              pop(suspenseStackCursor, fiber);
            }

            // TODO: This is now an empty object. Should we switch this to a boolean?
            // Alternatively we can make this use an effect tag similar to SuspenseList.

            function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
              // If it was the primary children that just suspended, capture and render the
              var nextState = workInProgress.memoizedState;
              if (nextState !== null) {
                return false;
              }
              var props = workInProgress.memoizedProps;
              // In order to capture, the Suspense component must have a fallback prop.
              if (props.fallback === undefined) {
                return false;
              }
              // Regular boundaries always capture.
              if (props.unstable_avoidThisFallback !== true) {
                return true;
              }
              // If it's a boundary we should avoid, then we prefer to bubble up to the
              // parent boundary if it is currently invisible.
              if (hasInvisibleParent) {
                return false;
              }
              // If the parent is not able to handle it, we must handle it.
              return true;
            }

            function findFirstSuspended(row) {
              var node = row;
              while (node !== null) {
                if (node.tag === SuspenseComponent) {
                  var state = node.memoizedState;
                  if (state !== null) {
                    return node;
                  }
                } else if (
                  node.tag === SuspenseListComponent &&
                  // revealOrder undefined can't be trusted because it don't
                  // keep track of whether it suspended or not.
                  node.memoizedProps.revealOrder !== undefined
                ) {
                  var didSuspend = (node.effectTag & DidCapture) !== NoEffect;
                  if (didSuspend) {
                    return node;
                  }
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === row) {
                  return null;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === row) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
              return null;
            }

            var NoEffect$1 = /*             */ 0;
            var UnmountSnapshot = /*      */ 2;
            var UnmountMutation = /*      */ 4;
            var MountMutation = /*        */ 8;
            var UnmountLayout = /*        */ 16;
            var MountLayout = /*          */ 32;
            var MountPassive = /*         */ 64;
            var UnmountPassive = /*       */ 128;

            var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;

            var didWarnAboutMismatchedHooksForComponent = void 0;
            {
              didWarnAboutMismatchedHooksForComponent = new Set();
            }

            // These are set right before calling the component.
            var renderExpirationTime$1 = NoWork;
            // The work-in-progress fiber. I've named it differently to distinguish it from
            // the work-in-progress hook.
            var currentlyRenderingFiber$1 = null;

            // Hooks are stored as a linked list on the fiber's memoizedState field. The
            // current hook list is the list that belongs to the current fiber. The
            // work-in-progress hook list is a new list that will be added to the
            // work-in-progress fiber.
            var currentHook = null;
            var nextCurrentHook = null;
            var firstWorkInProgressHook = null;
            var workInProgressHook = null;
            var nextWorkInProgressHook = null;

            var remainingExpirationTime = NoWork;
            var componentUpdateQueue = null;
            var sideEffectTag = 0;

            // Updates scheduled during render will trigger an immediate re-render at the
            // end of the current pass. We can't store these updates on the normal queue,
            // because if the work is aborted, they should be discarded. Because this is
            // a relatively rare case, we also don't want to add an additional field to
            // either the hook or queue object types. So we store them in a lazily create
            // map of queue -> render-phase updates, which are discarded once the component
            // completes without re-rendering.

            // Whether an update was scheduled during the currently executing render pass.
            var didScheduleRenderPhaseUpdate = false;
            // Lazily created map of render-phase updates
            var renderPhaseUpdates = null;
            // Counter to prevent infinite loops.
            var numberOfReRenders = 0;
            var RE_RENDER_LIMIT = 25;

            // In DEV, this is the name of the currently executing primitive hook
            var currentHookNameInDev = null;

            // In DEV, this list ensures that hooks are called in the same order between renders.
            // The list stores the order of hooks used during the initial render (mount).
            // Subsequent renders (updates) reference this list.
            var hookTypesDev = null;
            var hookTypesUpdateIndexDev = -1;

            // In DEV, this tracks whether currently rendering component needs to ignore
            // the dependencies for Hooks that need them (e.g. useEffect or useMemo).
            // When true, such Hooks will always be "remounted". Only used during hot reload.
            var ignorePreviousDependencies = false;

            function mountHookTypesDev() {
              {
                var hookName = currentHookNameInDev;

                if (hookTypesDev === null) {
                  hookTypesDev = [hookName];
                } else {
                  hookTypesDev.push(hookName);
                }
              }
            }

            function updateHookTypesDev() {
              {
                var hookName = currentHookNameInDev;

                if (hookTypesDev !== null) {
                  hookTypesUpdateIndexDev++;
                  if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                    warnOnHookMismatchInDev(hookName);
                  }
                }
              }
            }

            function checkDepsAreArrayDev(deps) {
              {
                if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
                  // Verify deps, but only on mount to avoid extra checks.
                  // It's unlikely their type would change as usually you define them inline.
                  warning$1(
                    false,
                    '%s received a final argument that is not an array (instead, received `%s`). When ' +
                      'specified, the final argument must be an array.',
                    currentHookNameInDev,
                    typeof deps,
                  );
                }
              }
            }

            function warnOnHookMismatchInDev(currentHookName) {
              {
                var componentName = getComponentName(currentlyRenderingFiber$1.type);
                if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                  didWarnAboutMismatchedHooksForComponent.add(componentName);

                  if (hookTypesDev !== null) {
                    var table = '';

                    var secondColumnStart = 30;

                    for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                      var oldHookName = hookTypesDev[i];
                      var newHookName =
                        i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;

                      var row = i + 1 + '. ' + oldHookName;

                      // Extra space so second column lines up
                      // lol @ IE not supporting String#repeat
                      while (row.length < secondColumnStart) {
                        row += ' ';
                      }

                      row += newHookName + '\n';

                      table += row;
                    }

                    warning$1(
                      false,
                      'React has detected a change in the order of Hooks called by %s. ' +
                        'This will lead to bugs and errors if not fixed. ' +
                        'For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n' +
                        '   Previous render            Next render\n' +
                        '   ------------------------------------------------------\n' +
                        '%s' +
                        '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n',
                      componentName,
                      table,
                    );
                  }
                }
              }
            }

            function throwInvalidHookError() {
              (function() {
                {
                  {
                    throw ReactError(
                      Error(
                        'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.',
                      ),
                    );
                  }
                }
              })();
            }

            function areHookInputsEqual(nextDeps, prevDeps) {
              {
                if (ignorePreviousDependencies) {
                  // Only true when this component is being hot reloaded.
                  return false;
                }
              }

              if (prevDeps === null) {
                {
                  warning$1(
                    false,
                    '%s received a final argument during this render, but not during ' +
                      'the previous render. Even though the final argument is optional, ' +
                      'its type cannot change between renders.',
                    currentHookNameInDev,
                  );
                }
                return false;
              }

              {
                // Don't bother comparing lengths in prod because these arrays should be
                // passed inline.
                if (nextDeps.length !== prevDeps.length) {
                  warning$1(
                    false,
                    'The final argument passed to %s changed size between renders. The ' +
                      'order and size of this array must remain constant.\n\n' +
                      'Previous: %s\n' +
                      'Incoming: %s',
                    currentHookNameInDev,
                    '[' + prevDeps.join(', ') + ']',
                    '[' + nextDeps.join(', ') + ']',
                  );
                }
              }
              for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
                if (is(nextDeps[i], prevDeps[i])) {
                  continue;
                }
                return false;
              }
              return true;
            }

            function renderWithHooks(
              current,
              workInProgress,
              Component,
              props,
              refOrContext,
              nextRenderExpirationTime,
            ) {
              renderExpirationTime$1 = nextRenderExpirationTime;
              currentlyRenderingFiber$1 = workInProgress;
              nextCurrentHook = current !== null ? current.memoizedState : null;

              {
                hookTypesDev = current !== null ? current._debugHookTypes : null;
                hookTypesUpdateIndexDev = -1;
                // Used for hot reloading:
                ignorePreviousDependencies =
                  current !== null && current.type !== workInProgress.type;
              }

              // The following should have already been reset
              // currentHook = null;
              // workInProgressHook = null;

              // remainingExpirationTime = NoWork;
              // componentUpdateQueue = null;

              // didScheduleRenderPhaseUpdate = false;
              // renderPhaseUpdates = null;
              // numberOfReRenders = 0;
              // sideEffectTag = 0;

              // TODO Warn if no hooks are used at all during mount, then some are used during update.
              // Currently we will identify the update render as a mount because nextCurrentHook === null.
              // This is tricky because it's valid for certain types of components (e.g. React.lazy)

              // Using nextCurrentHook to differentiate between mount/update only works if at least one stateful hook is used.
              // Non-stateful hooks (e.g. context) don't get added to memoizedState,
              // so nextCurrentHook would be null during updates and mounts.
              {
                if (nextCurrentHook !== null) {
                  ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
                } else if (hookTypesDev !== null) {
                  // This dispatcher handles an edge case where a component is updating,
                  // but no stateful hooks have been used.
                  // We want to match the production code behavior (which will use HooksDispatcherOnMount),
                  // but with the extra DEV validation to ensure hooks ordering hasn't changed.
                  // This dispatcher does that.
                  ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
                } else {
                  ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
                }
              }

              var children = Component(props, refOrContext);

              if (didScheduleRenderPhaseUpdate) {
                do {
                  didScheduleRenderPhaseUpdate = false;
                  numberOfReRenders += 1;

                  // Start over from the beginning of the list
                  nextCurrentHook = current !== null ? current.memoizedState : null;
                  nextWorkInProgressHook = firstWorkInProgressHook;

                  currentHook = null;
                  workInProgressHook = null;
                  componentUpdateQueue = null;

                  {
                    // Also validate hook order for cascading updates.
                    hookTypesUpdateIndexDev = -1;
                  }

                  ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;

                  children = Component(props, refOrContext);
                } while (didScheduleRenderPhaseUpdate);

                renderPhaseUpdates = null;
                numberOfReRenders = 0;
              }

              // We can assume the previous dispatcher is always this one, since we set it
              // at the beginning of the render phase and there's no re-entrancy.
              ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

              var renderedWork = currentlyRenderingFiber$1;

              renderedWork.memoizedState = firstWorkInProgressHook;
              renderedWork.expirationTime = remainingExpirationTime;
              renderedWork.updateQueue = componentUpdateQueue;
              renderedWork.effectTag |= sideEffectTag;

              {
                renderedWork._debugHookTypes = hookTypesDev;
              }

              // This check uses currentHook so that it works the same in DEV and prod bundles.
              // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
              var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;

              renderExpirationTime$1 = NoWork;
              currentlyRenderingFiber$1 = null;

              currentHook = null;
              nextCurrentHook = null;
              firstWorkInProgressHook = null;
              workInProgressHook = null;
              nextWorkInProgressHook = null;

              {
                currentHookNameInDev = null;
                hookTypesDev = null;
                hookTypesUpdateIndexDev = -1;
              }

              remainingExpirationTime = NoWork;
              componentUpdateQueue = null;
              sideEffectTag = 0;

              // These were reset above
              // didScheduleRenderPhaseUpdate = false;
              // renderPhaseUpdates = null;
              // numberOfReRenders = 0;

              (function() {
                if (!!didRenderTooFewHooks) {
                  {
                    throw ReactError(
                      Error(
                        'Rendered fewer hooks than expected. This may be caused by an accidental early return statement.',
                      ),
                    );
                  }
                }
              })();

              return children;
            }

            function bailoutHooks(current, workInProgress, expirationTime) {
              workInProgress.updateQueue = current.updateQueue;
              workInProgress.effectTag &= ~(Passive | Update);
              if (current.expirationTime <= expirationTime) {
                current.expirationTime = NoWork;
              }
            }

            function resetHooks() {
              // We can assume the previous dispatcher is always this one, since we set it
              // at the beginning of the render phase and there's no re-entrancy.
              ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

              // This is used to reset the state of this module when a component throws.
              // It's also called inside mountIndeterminateComponent if we determine the
              // component is a module-style component.
              renderExpirationTime$1 = NoWork;
              currentlyRenderingFiber$1 = null;

              currentHook = null;
              nextCurrentHook = null;
              firstWorkInProgressHook = null;
              workInProgressHook = null;
              nextWorkInProgressHook = null;

              {
                hookTypesDev = null;
                hookTypesUpdateIndexDev = -1;

                currentHookNameInDev = null;
              }

              remainingExpirationTime = NoWork;
              componentUpdateQueue = null;
              sideEffectTag = 0;

              didScheduleRenderPhaseUpdate = false;
              renderPhaseUpdates = null;
              numberOfReRenders = 0;
            }

            function mountWorkInProgressHook() {
              var hook = {
                memoizedState: null,

                baseState: null,
                queue: null,
                baseUpdate: null,

                next: null,
              };

              if (workInProgressHook === null) {
                // This is the first hook in the list
                firstWorkInProgressHook = workInProgressHook = hook;
              } else {
                // Append to the end of the list
                workInProgressHook = workInProgressHook.next = hook;
              }
              return workInProgressHook;
            }

            function updateWorkInProgressHook() {
              // This function is used both for updates and for re-renders triggered by a
              // render phase update. It assumes there is either a current hook we can
              // clone, or a work-in-progress hook from a previous render pass that we can
              // use as a base. When we reach the end of the base list, we must switch to
              // the dispatcher used for mounts.
              if (nextWorkInProgressHook !== null) {
                // There's already a work-in-progress. Reuse it.
                workInProgressHook = nextWorkInProgressHook;
                nextWorkInProgressHook = workInProgressHook.next;

                currentHook = nextCurrentHook;
                nextCurrentHook = currentHook !== null ? currentHook.next : null;
              } else {
                // Clone from the current hook.
                (function() {
                  if (!(nextCurrentHook !== null)) {
                    {
                      throw ReactError(
                        Error('Rendered more hooks than during the previous render.'),
                      );
                    }
                  }
                })();
                currentHook = nextCurrentHook;

                var newHook = {
                  memoizedState: currentHook.memoizedState,

                  baseState: currentHook.baseState,
                  queue: currentHook.queue,
                  baseUpdate: currentHook.baseUpdate,

                  next: null,
                };

                if (workInProgressHook === null) {
                  // This is the first hook in the list.
                  workInProgressHook = firstWorkInProgressHook = newHook;
                } else {
                  // Append to the end of the list.
                  workInProgressHook = workInProgressHook.next = newHook;
                }
                nextCurrentHook = currentHook.next;
              }
              return workInProgressHook;
            }

            function createFunctionComponentUpdateQueue() {
              return {
                lastEffect: null,
              };
            }

            function basicStateReducer(state, action) {
              return typeof action === 'function' ? action(state) : action;
            }

            function mountReducer(reducer, initialArg, init) {
              var hook = mountWorkInProgressHook();
              var initialState = void 0;
              if (init !== undefined) {
                initialState = init(initialArg);
              } else {
                initialState = initialArg;
              }
              hook.memoizedState = hook.baseState = initialState;
              var queue = (hook.queue = {
                last: null,
                dispatch: null,
                lastRenderedReducer: reducer,
                lastRenderedState: initialState,
              });
              var dispatch = (queue.dispatch = dispatchAction.bind(
                null,
                // Flow doesn't know this is non-null, but we do.
                currentlyRenderingFiber$1,
                queue,
              ));
              return [hook.memoizedState, dispatch];
            }

            function updateReducer(reducer, initialArg, init) {
              var hook = updateWorkInProgressHook();
              var queue = hook.queue;
              (function() {
                if (!(queue !== null)) {
                  {
                    throw ReactError(
                      Error(
                        'Should have a queue. This is likely a bug in React. Please file an issue.',
                      ),
                    );
                  }
                }
              })();

              queue.lastRenderedReducer = reducer;

              if (numberOfReRenders > 0) {
                // This is a re-render. Apply the new render phase updates to the previous
                var _dispatch = queue.dispatch;
                if (renderPhaseUpdates !== null) {
                  // Render phase updates are stored in a map of queue -> linked list
                  var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
                  if (firstRenderPhaseUpdate !== undefined) {
                    renderPhaseUpdates.delete(queue);
                    var newState = hook.memoizedState;
                    var update = firstRenderPhaseUpdate;
                    do {
                      // Process this render phase update. We don't have to check the
                      // priority because it will always be the same as the current
                      // render's.
                      var _action = update.action;
                      newState = reducer(newState, _action);
                      update = update.next;
                    } while (update !== null);

                    // Mark that the fiber performed work, but only if the new state is
                    // different from the current state.
                    if (!is(newState, hook.memoizedState)) {
                      markWorkInProgressReceivedUpdate();
                    }

                    hook.memoizedState = newState;
                    // Don't persist the state accumulated from the render phase updates to
                    // the base state unless the queue is empty.
                    // TODO: Not sure if this is the desired semantics, but it's what we
                    // do for gDSFP. I can't remember why.
                    if (hook.baseUpdate === queue.last) {
                      hook.baseState = newState;
                    }

                    queue.lastRenderedState = newState;

                    return [newState, _dispatch];
                  }
                }
                return [hook.memoizedState, _dispatch];
              }

              // The last update in the entire queue
              var last = queue.last;
              // The last update that is part of the base state.
              var baseUpdate = hook.baseUpdate;
              var baseState = hook.baseState;

              // Find the first unprocessed update.
              var first = void 0;
              if (baseUpdate !== null) {
                if (last !== null) {
                  // For the first update, the queue is a circular linked list where
                  // `queue.last.next = queue.first`. Once the first update commits, and
                  // the `baseUpdate` is no longer empty, we can unravel the list.
                  last.next = null;
                }
                first = baseUpdate.next;
              } else {
                first = last !== null ? last.next : null;
              }
              if (first !== null) {
                var _newState = baseState;
                var newBaseState = null;
                var newBaseUpdate = null;
                var prevUpdate = baseUpdate;
                var _update = first;
                var didSkip = false;
                do {
                  var updateExpirationTime = _update.expirationTime;
                  if (updateExpirationTime < renderExpirationTime$1) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    if (!didSkip) {
                      didSkip = true;
                      newBaseUpdate = prevUpdate;
                      newBaseState = _newState;
                    }
                    // Update the remaining priority in the queue.
                    if (updateExpirationTime > remainingExpirationTime) {
                      remainingExpirationTime = updateExpirationTime;
                    }
                  } else {
                    // This update does have sufficient priority.

                    // Mark the event time of this update as relevant to this render pass.
                    // TODO: This should ideally use the true event time of this update rather than
                    // its priority which is a derived and not reverseable value.
                    // TODO: We should skip this update if it was already committed but currently
                    // we have no way of detecting the difference between a committed and suspended
                    // update here.
                    markRenderEventTimeAndConfig(updateExpirationTime, _update.suspenseConfig);

                    // Process this update.
                    if (_update.eagerReducer === reducer) {
                      // If this update was processed eagerly, and its reducer matches the
                      // current reducer, we can use the eagerly computed state.
                      _newState = _update.eagerState;
                    } else {
                      var _action2 = _update.action;
                      _newState = reducer(_newState, _action2);
                    }
                  }
                  prevUpdate = _update;
                  _update = _update.next;
                } while (_update !== null && _update !== first);

                if (!didSkip) {
                  newBaseUpdate = prevUpdate;
                  newBaseState = _newState;
                }

                // Mark that the fiber performed work, but only if the new state is
                // different from the current state.
                if (!is(_newState, hook.memoizedState)) {
                  markWorkInProgressReceivedUpdate();
                }

                hook.memoizedState = _newState;
                hook.baseUpdate = newBaseUpdate;
                hook.baseState = newBaseState;

                queue.lastRenderedState = _newState;
              }

              var dispatch = queue.dispatch;
              return [hook.memoizedState, dispatch];
            }

            function mountState(initialState) {
              var hook = mountWorkInProgressHook();
              if (typeof initialState === 'function') {
                initialState = initialState();
              }
              hook.memoizedState = hook.baseState = initialState;
              var queue = (hook.queue = {
                last: null,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: initialState,
              });
              var dispatch = (queue.dispatch = dispatchAction.bind(
                null,
                // Flow doesn't know this is non-null, but we do.
                currentlyRenderingFiber$1,
                queue,
              ));
              return [hook.memoizedState, dispatch];
            }

            function updateState(initialState) {
              return updateReducer(basicStateReducer, initialState);
            }

            function pushEffect(tag, create, destroy, deps) {
              var effect = {
                tag: tag,
                create: create,
                destroy: destroy,
                deps: deps,
                // Circular
                next: null,
              };
              if (componentUpdateQueue === null) {
                componentUpdateQueue = createFunctionComponentUpdateQueue();
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var _lastEffect = componentUpdateQueue.lastEffect;
                if (_lastEffect === null) {
                  componentUpdateQueue.lastEffect = effect.next = effect;
                } else {
                  var firstEffect = _lastEffect.next;
                  _lastEffect.next = effect;
                  effect.next = firstEffect;
                  componentUpdateQueue.lastEffect = effect;
                }
              }
              return effect;
            }

            function mountRef(initialValue) {
              var hook = mountWorkInProgressHook();
              var ref = { current: initialValue };
              {
                Object.seal(ref);
              }
              hook.memoizedState = ref;
              return ref;
            }

            function updateRef(initialValue) {
              var hook = updateWorkInProgressHook();
              return hook.memoizedState;
            }

            function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
              var hook = mountWorkInProgressHook();
              var nextDeps = deps === undefined ? null : deps;
              sideEffectTag |= fiberEffectTag;
              hook.memoizedState = pushEffect(hookEffectTag, create, undefined, nextDeps);
            }

            function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
              var hook = updateWorkInProgressHook();
              var nextDeps = deps === undefined ? null : deps;
              var destroy = undefined;

              if (currentHook !== null) {
                var prevEffect = currentHook.memoizedState;
                destroy = prevEffect.destroy;
                if (nextDeps !== null) {
                  var prevDeps = prevEffect.deps;
                  if (areHookInputsEqual(nextDeps, prevDeps)) {
                    pushEffect(NoEffect$1, create, destroy, nextDeps);
                    return;
                  }
                }
              }

              sideEffectTag |= fiberEffectTag;
              hook.memoizedState = pushEffect(hookEffectTag, create, destroy, nextDeps);
            }

            function mountEffect(create, deps) {
              {
                // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
                if ('undefined' !== typeof jest) {
                  warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
                }
              }
              return mountEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
            }

            function updateEffect(create, deps) {
              {
                // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
                if ('undefined' !== typeof jest) {
                  warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
                }
              }
              return updateEffectImpl(
                Update | Passive,
                UnmountPassive | MountPassive,
                create,
                deps,
              );
            }

            function mountLayoutEffect(create, deps) {
              return mountEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
            }

            function updateLayoutEffect(create, deps) {
              return updateEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
            }

            function imperativeHandleEffect(create, ref) {
              if (typeof ref === 'function') {
                var refCallback = ref;
                var _inst = create();
                refCallback(_inst);
                return function() {
                  refCallback(null);
                };
              } else if (ref !== null && ref !== undefined) {
                var refObject = ref;
                {
                  !refObject.hasOwnProperty('current')
                    ? warning$1(
                        false,
                        'Expected useImperativeHandle() first argument to either be a ' +
                          'ref callback or React.createRef() object. Instead received: %s.',
                        'an object with keys {' + Object.keys(refObject).join(', ') + '}',
                      )
                    : void 0;
                }
                var _inst2 = create();
                refObject.current = _inst2;
                return function() {
                  refObject.current = null;
                };
              }
            }

            function mountImperativeHandle(ref, create, deps) {
              {
                !(typeof create === 'function')
                  ? warning$1(
                      false,
                      'Expected useImperativeHandle() second argument to be a function ' +
                        'that creates a handle. Instead received: %s.',
                      create !== null ? typeof create : 'null',
                    )
                  : void 0;
              }

              // TODO: If deps are provided, should we skip comparing the ref itself?
              var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;

              return mountEffectImpl(
                Update,
                UnmountMutation | MountLayout,
                imperativeHandleEffect.bind(null, create, ref),
                effectDeps,
              );
            }

            function updateImperativeHandle(ref, create, deps) {
              {
                !(typeof create === 'function')
                  ? warning$1(
                      false,
                      'Expected useImperativeHandle() second argument to be a function ' +
                        'that creates a handle. Instead received: %s.',
                      create !== null ? typeof create : 'null',
                    )
                  : void 0;
              }

              // TODO: If deps are provided, should we skip comparing the ref itself?
              var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;

              return updateEffectImpl(
                Update,
                UnmountMutation | MountLayout,
                imperativeHandleEffect.bind(null, create, ref),
                effectDeps,
              );
            }

            function mountDebugValue(value, formatterFn) {
              // This hook is normally a no-op.
              // The react-debug-hooks package injects its own implementation
              // so that e.g. DevTools can display custom hook values.
            }

            var updateDebugValue = mountDebugValue;

            function mountCallback(callback, deps) {
              var hook = mountWorkInProgressHook();
              var nextDeps = deps === undefined ? null : deps;
              hook.memoizedState = [callback, nextDeps];
              return callback;
            }

            function updateCallback(callback, deps) {
              var hook = updateWorkInProgressHook();
              var nextDeps = deps === undefined ? null : deps;
              var prevState = hook.memoizedState;
              if (prevState !== null) {
                if (nextDeps !== null) {
                  var prevDeps = prevState[1];
                  if (areHookInputsEqual(nextDeps, prevDeps)) {
                    return prevState[0];
                  }
                }
              }
              hook.memoizedState = [callback, nextDeps];
              return callback;
            }

            function mountMemo(nextCreate, deps) {
              var hook = mountWorkInProgressHook();
              var nextDeps = deps === undefined ? null : deps;
              var nextValue = nextCreate();
              hook.memoizedState = [nextValue, nextDeps];
              return nextValue;
            }

            function updateMemo(nextCreate, deps) {
              var hook = updateWorkInProgressHook();
              var nextDeps = deps === undefined ? null : deps;
              var prevState = hook.memoizedState;
              if (prevState !== null) {
                // Assume these are defined. If they're not, areHookInputsEqual will warn.
                if (nextDeps !== null) {
                  var prevDeps = prevState[1];
                  if (areHookInputsEqual(nextDeps, prevDeps)) {
                    return prevState[0];
                  }
                }
              }
              var nextValue = nextCreate();
              hook.memoizedState = [nextValue, nextDeps];
              return nextValue;
            }

            function dispatchAction(fiber, queue, action) {
              (function() {
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                  {
                    throw ReactError(
                      Error(
                        'Too many re-renders. React limits the number of renders to prevent an infinite loop.',
                      ),
                    );
                  }
                }
              })();

              {
                !(arguments.length <= 3)
                  ? warning$1(
                      false,
                      "State updates from the useState() and useReducer() Hooks don't support the " +
                        'second callback argument. To execute a side effect after ' +
                        'rendering, declare it in the component body with useEffect().',
                    )
                  : void 0;
              }

              var alternate = fiber.alternate;
              if (
                fiber === currentlyRenderingFiber$1 ||
                (alternate !== null && alternate === currentlyRenderingFiber$1)
              ) {
                // This is a render phase update. Stash it in a lazily-created map of
                // queue -> linked list of updates. After this render pass, we'll restart
                // and apply the stashed updates on top of the work-in-progress hook.
                didScheduleRenderPhaseUpdate = true;
                var update = {
                  expirationTime: renderExpirationTime$1,
                  suspenseConfig: null,
                  action: action,
                  eagerReducer: null,
                  eagerState: null,
                  next: null,
                };
                {
                  update.priority = getCurrentPriorityLevel();
                }
                if (renderPhaseUpdates === null) {
                  renderPhaseUpdates = new Map();
                }
                var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
                if (firstRenderPhaseUpdate === undefined) {
                  renderPhaseUpdates.set(queue, update);
                } else {
                  // Append the update to the end of the list.
                  var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
                  while (lastRenderPhaseUpdate.next !== null) {
                    lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
                  }
                  lastRenderPhaseUpdate.next = update;
                }
              } else {
                if (revertPassiveEffectsChange) {
                  flushPassiveEffects();
                }

                var currentTime = requestCurrentTime();
                var _suspenseConfig = requestCurrentSuspenseConfig();
                var _expirationTime = computeExpirationForFiber(
                  currentTime,
                  fiber,
                  _suspenseConfig,
                );

                var _update2 = {
                  expirationTime: _expirationTime,
                  suspenseConfig: _suspenseConfig,
                  action: action,
                  eagerReducer: null,
                  eagerState: null,
                  next: null,
                };

                {
                  _update2.priority = getCurrentPriorityLevel();
                }

                // Append the update to the end of the list.
                var _last = queue.last;
                if (_last === null) {
                  // This is the first update. Create a circular list.
                  _update2.next = _update2;
                } else {
                  var first = _last.next;
                  if (first !== null) {
                    // Still circular.
                    _update2.next = first;
                  }
                  _last.next = _update2;
                }
                queue.last = _update2;

                if (
                  fiber.expirationTime === NoWork &&
                  (alternate === null || alternate.expirationTime === NoWork)
                ) {
                  // The queue is currently empty, which means we can eagerly compute the
                  // next state before entering the render phase. If the new state is the
                  // same as the current state, we may be able to bail out entirely.
                  var _lastRenderedReducer = queue.lastRenderedReducer;
                  if (_lastRenderedReducer !== null) {
                    var prevDispatcher = void 0;
                    {
                      prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    }
                    try {
                      var currentState = queue.lastRenderedState;
                      var _eagerState = _lastRenderedReducer(currentState, action);
                      // Stash the eagerly computed state, and the reducer used to compute
                      // it, on the update object. If the reducer hasn't changed by the
                      // time we enter the render phase, then the eager state can be used
                      // without calling the reducer again.
                      _update2.eagerReducer = _lastRenderedReducer;
                      _update2.eagerState = _eagerState;
                      if (is(_eagerState, currentState)) {
                        // Fast path. We can bail out without scheduling React to re-render.
                        // It's still possible that we'll need to rebase this update later,
                        // if the component re-renders for a different reason and by that
                        // time the reducer has changed.
                        return;
                      }
                    } catch (error) {
                      // Suppress the error. It will throw again in the render phase.
                    } finally {
                      {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    }
                  }
                }
                {
                  // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
                  if ('undefined' !== typeof jest) {
                    warnIfNotScopedWithMatchingAct(fiber);
                    warnIfNotCurrentlyActingUpdatesInDev(fiber);
                  }
                }
                scheduleWork(fiber, _expirationTime);
              }
            }

            var ContextOnlyDispatcher = {
              readContext: readContext,

              useCallback: throwInvalidHookError,
              useContext: throwInvalidHookError,
              useEffect: throwInvalidHookError,
              useImperativeHandle: throwInvalidHookError,
              useLayoutEffect: throwInvalidHookError,
              useMemo: throwInvalidHookError,
              useReducer: throwInvalidHookError,
              useRef: throwInvalidHookError,
              useState: throwInvalidHookError,
              useDebugValue: throwInvalidHookError,
              useResponder: throwInvalidHookError,
            };

            var HooksDispatcherOnMountInDEV = null;
            var HooksDispatcherOnMountWithHookTypesInDEV = null;
            var HooksDispatcherOnUpdateInDEV = null;
            var InvalidNestedHooksDispatcherOnMountInDEV = null;
            var InvalidNestedHooksDispatcherOnUpdateInDEV = null;

            {
              var warnInvalidContextAccess = function() {
                warning$1(
                  false,
                  'Context can only be read while React is rendering. ' +
                    'In classes, you can read it in the render method or getDerivedStateFromProps. ' +
                    'In function components, you can read it directly in the function body, but not ' +
                    'inside Hooks like useReducer() or useMemo().',
                );
              };

              var warnInvalidHookAccess = function() {
                warning$1(
                  false,
                  'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' +
                    'You can only call Hooks at the top level of your React function. ' +
                    'For more information, see ' +
                    'https://fb.me/rules-of-hooks',
                );
              };

              HooksDispatcherOnMountInDEV = {
                readContext: function(context, observedBits) {
                  return readContext(context, observedBits);
                },
                useCallback: function(callback, deps) {
                  currentHookNameInDev = 'useCallback';
                  mountHookTypesDev();
                  checkDepsAreArrayDev(deps);
                  return mountCallback(callback, deps);
                },
                useContext: function(context, observedBits) {
                  currentHookNameInDev = 'useContext';
                  mountHookTypesDev();
                  return readContext(context, observedBits);
                },
                useEffect: function(create, deps) {
                  currentHookNameInDev = 'useEffect';
                  mountHookTypesDev();
                  checkDepsAreArrayDev(deps);
                  return mountEffect(create, deps);
                },
                useImperativeHandle: function(ref, create, deps) {
                  currentHookNameInDev = 'useImperativeHandle';
                  mountHookTypesDev();
                  checkDepsAreArrayDev(deps);
                  return mountImperativeHandle(ref, create, deps);
                },
                useLayoutEffect: function(create, deps) {
                  currentHookNameInDev = 'useLayoutEffect';
                  mountHookTypesDev();
                  checkDepsAreArrayDev(deps);
                  return mountLayoutEffect(create, deps);
                },
                useMemo: function(create, deps) {
                  currentHookNameInDev = 'useMemo';
                  mountHookTypesDev();
                  checkDepsAreArrayDev(deps);
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                  try {
                    return mountMemo(create, deps);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useReducer: function(reducer, initialArg, init) {
                  currentHookNameInDev = 'useReducer';
                  mountHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                  try {
                    return mountReducer(reducer, initialArg, init);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useRef: function(initialValue) {
                  currentHookNameInDev = 'useRef';
                  mountHookTypesDev();
                  return mountRef(initialValue);
                },
                useState: function(initialState) {
                  currentHookNameInDev = 'useState';
                  mountHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                  try {
                    return mountState(initialState);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useDebugValue: function(value, formatterFn) {
                  currentHookNameInDev = 'useDebugValue';
                  mountHookTypesDev();
                  return mountDebugValue(value, formatterFn);
                },
                useResponder: function(responder, props) {
                  currentHookNameInDev = 'useResponder';
                  mountHookTypesDev();
                  return createResponderListener(responder, props);
                },
              };

              HooksDispatcherOnMountWithHookTypesInDEV = {
                readContext: function(context, observedBits) {
                  return readContext(context, observedBits);
                },
                useCallback: function(callback, deps) {
                  currentHookNameInDev = 'useCallback';
                  updateHookTypesDev();
                  return mountCallback(callback, deps);
                },
                useContext: function(context, observedBits) {
                  currentHookNameInDev = 'useContext';
                  updateHookTypesDev();
                  return readContext(context, observedBits);
                },
                useEffect: function(create, deps) {
                  currentHookNameInDev = 'useEffect';
                  updateHookTypesDev();
                  return mountEffect(create, deps);
                },
                useImperativeHandle: function(ref, create, deps) {
                  currentHookNameInDev = 'useImperativeHandle';
                  updateHookTypesDev();
                  return mountImperativeHandle(ref, create, deps);
                },
                useLayoutEffect: function(create, deps) {
                  currentHookNameInDev = 'useLayoutEffect';
                  updateHookTypesDev();
                  return mountLayoutEffect(create, deps);
                },
                useMemo: function(create, deps) {
                  currentHookNameInDev = 'useMemo';
                  updateHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                  try {
                    return mountMemo(create, deps);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useReducer: function(reducer, initialArg, init) {
                  currentHookNameInDev = 'useReducer';
                  updateHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                  try {
                    return mountReducer(reducer, initialArg, init);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useRef: function(initialValue) {
                  currentHookNameInDev = 'useRef';
                  updateHookTypesDev();
                  return mountRef(initialValue);
                },
                useState: function(initialState) {
                  currentHookNameInDev = 'useState';
                  updateHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                  try {
                    return mountState(initialState);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useDebugValue: function(value, formatterFn) {
                  currentHookNameInDev = 'useDebugValue';
                  updateHookTypesDev();
                  return mountDebugValue(value, formatterFn);
                },
                useResponder: function(responder, props) {
                  currentHookNameInDev = 'useResponder';
                  updateHookTypesDev();
                  return createResponderListener(responder, props);
                },
              };

              HooksDispatcherOnUpdateInDEV = {
                readContext: function(context, observedBits) {
                  return readContext(context, observedBits);
                },
                useCallback: function(callback, deps) {
                  currentHookNameInDev = 'useCallback';
                  updateHookTypesDev();
                  return updateCallback(callback, deps);
                },
                useContext: function(context, observedBits) {
                  currentHookNameInDev = 'useContext';
                  updateHookTypesDev();
                  return readContext(context, observedBits);
                },
                useEffect: function(create, deps) {
                  currentHookNameInDev = 'useEffect';
                  updateHookTypesDev();
                  return updateEffect(create, deps);
                },
                useImperativeHandle: function(ref, create, deps) {
                  currentHookNameInDev = 'useImperativeHandle';
                  updateHookTypesDev();
                  return updateImperativeHandle(ref, create, deps);
                },
                useLayoutEffect: function(create, deps) {
                  currentHookNameInDev = 'useLayoutEffect';
                  updateHookTypesDev();
                  return updateLayoutEffect(create, deps);
                },
                useMemo: function(create, deps) {
                  currentHookNameInDev = 'useMemo';
                  updateHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  try {
                    return updateMemo(create, deps);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useReducer: function(reducer, initialArg, init) {
                  currentHookNameInDev = 'useReducer';
                  updateHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  try {
                    return updateReducer(reducer, initialArg, init);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useRef: function(initialValue) {
                  currentHookNameInDev = 'useRef';
                  updateHookTypesDev();
                  return updateRef(initialValue);
                },
                useState: function(initialState) {
                  currentHookNameInDev = 'useState';
                  updateHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  try {
                    return updateState(initialState);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useDebugValue: function(value, formatterFn) {
                  currentHookNameInDev = 'useDebugValue';
                  updateHookTypesDev();
                  return updateDebugValue(value, formatterFn);
                },
                useResponder: function(responder, props) {
                  currentHookNameInDev = 'useResponder';
                  updateHookTypesDev();
                  return createResponderListener(responder, props);
                },
              };

              InvalidNestedHooksDispatcherOnMountInDEV = {
                readContext: function(context, observedBits) {
                  warnInvalidContextAccess();
                  return readContext(context, observedBits);
                },
                useCallback: function(callback, deps) {
                  currentHookNameInDev = 'useCallback';
                  warnInvalidHookAccess();
                  mountHookTypesDev();
                  return mountCallback(callback, deps);
                },
                useContext: function(context, observedBits) {
                  currentHookNameInDev = 'useContext';
                  warnInvalidHookAccess();
                  mountHookTypesDev();
                  return readContext(context, observedBits);
                },
                useEffect: function(create, deps) {
                  currentHookNameInDev = 'useEffect';
                  warnInvalidHookAccess();
                  mountHookTypesDev();
                  return mountEffect(create, deps);
                },
                useImperativeHandle: function(ref, create, deps) {
                  currentHookNameInDev = 'useImperativeHandle';
                  warnInvalidHookAccess();
                  mountHookTypesDev();
                  return mountImperativeHandle(ref, create, deps);
                },
                useLayoutEffect: function(create, deps) {
                  currentHookNameInDev = 'useLayoutEffect';
                  warnInvalidHookAccess();
                  mountHookTypesDev();
                  return mountLayoutEffect(create, deps);
                },
                useMemo: function(create, deps) {
                  currentHookNameInDev = 'useMemo';
                  warnInvalidHookAccess();
                  mountHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                  try {
                    return mountMemo(create, deps);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useReducer: function(reducer, initialArg, init) {
                  currentHookNameInDev = 'useReducer';
                  warnInvalidHookAccess();
                  mountHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                  try {
                    return mountReducer(reducer, initialArg, init);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useRef: function(initialValue) {
                  currentHookNameInDev = 'useRef';
                  warnInvalidHookAccess();
                  mountHookTypesDev();
                  return mountRef(initialValue);
                },
                useState: function(initialState) {
                  currentHookNameInDev = 'useState';
                  warnInvalidHookAccess();
                  mountHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                  try {
                    return mountState(initialState);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useDebugValue: function(value, formatterFn) {
                  currentHookNameInDev = 'useDebugValue';
                  warnInvalidHookAccess();
                  mountHookTypesDev();
                  return mountDebugValue(value, formatterFn);
                },
                useResponder: function(responder, props) {
                  currentHookNameInDev = 'useResponder';
                  warnInvalidHookAccess();
                  mountHookTypesDev();
                  return createResponderListener(responder, props);
                },
              };

              InvalidNestedHooksDispatcherOnUpdateInDEV = {
                readContext: function(context, observedBits) {
                  warnInvalidContextAccess();
                  return readContext(context, observedBits);
                },
                useCallback: function(callback, deps) {
                  currentHookNameInDev = 'useCallback';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return updateCallback(callback, deps);
                },
                useContext: function(context, observedBits) {
                  currentHookNameInDev = 'useContext';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return readContext(context, observedBits);
                },
                useEffect: function(create, deps) {
                  currentHookNameInDev = 'useEffect';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return updateEffect(create, deps);
                },
                useImperativeHandle: function(ref, create, deps) {
                  currentHookNameInDev = 'useImperativeHandle';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return updateImperativeHandle(ref, create, deps);
                },
                useLayoutEffect: function(create, deps) {
                  currentHookNameInDev = 'useLayoutEffect';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return updateLayoutEffect(create, deps);
                },
                useMemo: function(create, deps) {
                  currentHookNameInDev = 'useMemo';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  try {
                    return updateMemo(create, deps);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useReducer: function(reducer, initialArg, init) {
                  currentHookNameInDev = 'useReducer';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  try {
                    return updateReducer(reducer, initialArg, init);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useRef: function(initialValue) {
                  currentHookNameInDev = 'useRef';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return updateRef(initialValue);
                },
                useState: function(initialState) {
                  currentHookNameInDev = 'useState';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  try {
                    return updateState(initialState);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useDebugValue: function(value, formatterFn) {
                  currentHookNameInDev = 'useDebugValue';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return updateDebugValue(value, formatterFn);
                },
                useResponder: function(responder, props) {
                  currentHookNameInDev = 'useResponder';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return createResponderListener(responder, props);
                },
              };
            }

            // Intentionally not named imports because Rollup would use dynamic dispatch for
            // CommonJS interop named imports.
            var now$1 = Scheduler.unstable_now;

            var commitTime = 0;
            var profilerStartTime = -1;

            function getCommitTime() {
              return commitTime;
            }

            function recordCommitTime() {
              if (!enableProfilerTimer) {
                return;
              }
              commitTime = now$1();
            }

            function startProfilerTimer(fiber) {
              if (!enableProfilerTimer) {
                return;
              }

              profilerStartTime = now$1();

              if (fiber.actualStartTime < 0) {
                fiber.actualStartTime = now$1();
              }
            }

            function stopProfilerTimerIfRunning(fiber) {
              if (!enableProfilerTimer) {
                return;
              }
              profilerStartTime = -1;
            }

            function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
              if (!enableProfilerTimer) {
                return;
              }

              if (profilerStartTime >= 0) {
                var elapsedTime = now$1() - profilerStartTime;
                fiber.actualDuration += elapsedTime;
                if (overrideBaseTime) {
                  fiber.selfBaseDuration = elapsedTime;
                }
                profilerStartTime = -1;
              }
            }

            // The deepest Fiber on the stack involved in a hydration context.
            // This may have been an insertion or a hydration.
            var hydrationParentFiber = null;
            var nextHydratableInstance = null;
            var isHydrating = false;

            function enterHydrationState(fiber) {
              if (!supportsHydration) {
                return false;
              }

              var parentInstance = fiber.stateNode.containerInfo;
              nextHydratableInstance = getFirstHydratableChild(parentInstance);
              hydrationParentFiber = fiber;
              isHydrating = true;
              return true;
            }

            function reenterHydrationStateFromDehydratedSuspenseInstance(fiber) {
              if (!supportsHydration) {
                return false;
              }

              var suspenseInstance = fiber.stateNode;
              nextHydratableInstance = getNextHydratableSibling(suspenseInstance);
              popToNextHostParent(fiber);
              isHydrating = true;
              return true;
            }

            function deleteHydratableInstance(returnFiber, instance) {
              {
                switch (returnFiber.tag) {
                  case HostRoot:
                    didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                    break;
                  case HostComponent:
                    didNotHydrateInstance(
                      returnFiber.type,
                      returnFiber.memoizedProps,
                      returnFiber.stateNode,
                      instance,
                    );
                    break;
                }
              }

              var childToDelete = createFiberFromHostInstanceForDeletion();
              childToDelete.stateNode = instance;
              childToDelete.return = returnFiber;
              childToDelete.effectTag = Deletion;

              // This might seem like it belongs on progressedFirstDeletion. However,
              // these children are not part of the reconciliation list of children.
              // Even if we abort and rereconcile the children, that will try to hydrate
              // again and the nodes are still in the host tree so these will be
              // recreated.
              if (returnFiber.lastEffect !== null) {
                returnFiber.lastEffect.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
              }
            }

            function insertNonHydratedInstance(returnFiber, fiber) {
              fiber.effectTag |= Placement;
              {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    switch (fiber.tag) {
                      case HostComponent:
                        var type = fiber.type;
                        var props = fiber.pendingProps;
                        didNotFindHydratableContainerInstance(parentContainer, type, props);
                        break;
                      case HostText:
                        var text = fiber.pendingProps;
                        didNotFindHydratableContainerTextInstance(parentContainer, text);
                        break;
                      case SuspenseComponent:
                        break;
                    }
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type = fiber.type;
                        var _props = fiber.pendingProps;
                        didNotFindHydratableInstance(
                          parentType,
                          parentProps,
                          parentInstance,
                          _type,
                          _props,
                        );
                        break;
                      case HostText:
                        var _text = fiber.pendingProps;
                        didNotFindHydratableTextInstance(
                          parentType,
                          parentProps,
                          parentInstance,
                          _text,
                        );
                        break;
                      case SuspenseComponent:
                        didNotFindHydratableSuspenseInstance(
                          parentType,
                          parentProps,
                          parentInstance,
                        );
                        break;
                    }
                    break;
                  }
                  default:
                    return;
                }
              }
            }

            function tryHydrate(fiber, nextInstance) {
              switch (fiber.tag) {
                case HostComponent: {
                  var type = fiber.type;
                  var props = fiber.pendingProps;
                  var instance = canHydrateInstance(nextInstance, type, props);
                  if (instance !== null) {
                    fiber.stateNode = instance;
                    return true;
                  }
                  return false;
                }
                case HostText: {
                  var text = fiber.pendingProps;
                  var textInstance = canHydrateTextInstance(nextInstance, text);
                  if (textInstance !== null) {
                    fiber.stateNode = textInstance;
                    return true;
                  }
                  return false;
                }
                case SuspenseComponent: {
                  if (enableSuspenseServerRenderer) {
                    var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                    if (suspenseInstance !== null) {
                      // Downgrade the tag to a dehydrated component until we've hydrated it.
                      fiber.tag = DehydratedSuspenseComponent;
                      fiber.stateNode = suspenseInstance;
                      return true;
                    }
                  }
                  return false;
                }
                default:
                  return false;
              }
            }

            function tryToClaimNextHydratableInstance(fiber) {
              if (!isHydrating) {
                return;
              }
              var nextInstance = nextHydratableInstance;
              if (!nextInstance) {
                // Nothing to hydrate. Make it an insertion.
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              var firstAttemptedInstance = nextInstance;
              if (!tryHydrate(fiber, nextInstance)) {
                // If we can't hydrate this instance let's try the next one.
                // We use this as a heuristic. It's based on intuition and not data so it
                // might be flawed or unnecessary.
                nextInstance = getNextHydratableSibling(firstAttemptedInstance);
                if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                  // Nothing to hydrate. Make it an insertion.
                  insertNonHydratedInstance(hydrationParentFiber, fiber);
                  isHydrating = false;
                  hydrationParentFiber = fiber;
                  return;
                }
                // We matched the next one, we'll now assume that the first one was
                // superfluous and we'll delete it. Since we can't eagerly delete it
                // we'll have to schedule a deletion. To do that, this node needs a dummy
                // fiber associated with it.
                deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
              }
              hydrationParentFiber = fiber;
              nextHydratableInstance = getFirstHydratableChild(nextInstance);
            }

            function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
              if (!supportsHydration) {
                (function() {
                  {
                    {
                      throw ReactError(
                        Error(
                          'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.',
                        ),
                      );
                    }
                  }
                })();
              }

              var instance = fiber.stateNode;
              var updatePayload = hydrateInstance(
                instance,
                fiber.type,
                fiber.memoizedProps,
                rootContainerInstance,
                hostContext,
                fiber,
              );
              // TODO: Type this specific to this type of component.
              fiber.updateQueue = updatePayload;
              // If the update payload indicates that there is a change or if there
              // is a new ref we mark this as an update.
              if (updatePayload !== null) {
                return true;
              }
              return false;
            }

            function prepareToHydrateHostTextInstance(fiber) {
              if (!supportsHydration) {
                (function() {
                  {
                    {
                      throw ReactError(
                        Error(
                          'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.',
                        ),
                      );
                    }
                  }
                })();
              }

              var textInstance = fiber.stateNode;
              var textContent = fiber.memoizedProps;
              var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
              {
                if (shouldUpdate) {
                  // We assume that prepareToHydrateHostTextInstance is called in a context where the
                  // hydration parent is the parent host component of this host text.
                  var returnFiber = hydrationParentFiber;
                  if (returnFiber !== null) {
                    switch (returnFiber.tag) {
                      case HostRoot: {
                        var parentContainer = returnFiber.stateNode.containerInfo;
                        didNotMatchHydratedContainerTextInstance(
                          parentContainer,
                          textInstance,
                          textContent,
                        );
                        break;
                      }
                      case HostComponent: {
                        var parentType = returnFiber.type;
                        var parentProps = returnFiber.memoizedProps;
                        var parentInstance = returnFiber.stateNode;
                        didNotMatchHydratedTextInstance(
                          parentType,
                          parentProps,
                          parentInstance,
                          textInstance,
                          textContent,
                        );
                        break;
                      }
                    }
                  }
                }
              }
              return shouldUpdate;
            }

            function skipPastDehydratedSuspenseInstance(fiber) {
              if (!supportsHydration) {
                (function() {
                  {
                    {
                      throw ReactError(
                        Error(
                          'Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.',
                        ),
                      );
                    }
                  }
                })();
              }
              var suspenseInstance = fiber.stateNode;
              (function() {
                if (!suspenseInstance) {
                  {
                    throw ReactError(
                      Error(
                        'Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.',
                      ),
                    );
                  }
                }
              })();
              nextHydratableInstance = getNextHydratableInstanceAfterSuspenseInstance(
                suspenseInstance,
              );
            }

            function popToNextHostParent(fiber) {
              var parent = fiber.return;
              while (
                parent !== null &&
                parent.tag !== HostComponent &&
                parent.tag !== HostRoot &&
                parent.tag !== DehydratedSuspenseComponent
              ) {
                parent = parent.return;
              }
              hydrationParentFiber = parent;
            }

            function popHydrationState(fiber) {
              if (!supportsHydration) {
                return false;
              }
              if (fiber !== hydrationParentFiber) {
                // We're deeper than the current hydration context, inside an inserted
                // tree.
                return false;
              }
              if (!isHydrating) {
                // If we're not currently hydrating but we're in a hydration context, then
                // we were an insertion and now need to pop up reenter hydration of our
                // siblings.
                popToNextHostParent(fiber);
                isHydrating = true;
                return false;
              }

              var type = fiber.type;

              // If we have any remaining hydratable nodes, we need to delete them now.
              // We only do this deeper than head and body since they tend to have random
              // other nodes in them. We also ignore components with pure text content in
              // side of them.
              // TODO: Better heuristic.
              if (
                fiber.tag !== HostComponent ||
                (type !== 'head' &&
                  type !== 'body' &&
                  !shouldSetTextContent(type, fiber.memoizedProps))
              ) {
                var nextInstance = nextHydratableInstance;
                while (nextInstance) {
                  deleteHydratableInstance(fiber, nextInstance);
                  nextInstance = getNextHydratableSibling(nextInstance);
                }
              }

              popToNextHostParent(fiber);
              nextHydratableInstance = hydrationParentFiber
                ? getNextHydratableSibling(fiber.stateNode)
                : null;
              return true;
            }

            function resetHydrationState() {
              if (!supportsHydration) {
                return;
              }

              hydrationParentFiber = null;
              nextHydratableInstance = null;
              isHydrating = false;
            }

            var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;

            var didReceiveUpdate = false;

            var didWarnAboutBadClass = void 0;
            var didWarnAboutModulePatternComponent = void 0;
            var didWarnAboutContextTypeOnFunctionComponent = void 0;
            var didWarnAboutGetDerivedStateOnFunctionComponent = void 0;
            var didWarnAboutFunctionRefs = void 0;
            var didWarnAboutReassigningProps = void 0;
            var didWarnAboutMaxDuration = void 0;
            var didWarnAboutRevealOrder = void 0;
            var didWarnAboutTailOptions = void 0;
            var didWarnAboutDefaultPropsOnFunctionComponent = void 0;

            {
              didWarnAboutBadClass = {};
              didWarnAboutModulePatternComponent = {};
              didWarnAboutContextTypeOnFunctionComponent = {};
              didWarnAboutGetDerivedStateOnFunctionComponent = {};
              didWarnAboutFunctionRefs = {};
              didWarnAboutReassigningProps = false;
              didWarnAboutMaxDuration = false;
              didWarnAboutRevealOrder = {};
              didWarnAboutTailOptions = {};
              didWarnAboutDefaultPropsOnFunctionComponent = {};
            }

            function reconcileChildren(
              current$$1,
              workInProgress,
              nextChildren,
              renderExpirationTime,
            ) {
              if (current$$1 === null) {
                // If this is a fresh new component that hasn't been rendered yet, we
                // won't update its child set by applying minimal side-effects. Instead,
                // we will add them all to the child before it gets rendered. That means
                // we can optimize this reconciliation pass by not tracking side-effects.
                workInProgress.child = mountChildFibers(
                  workInProgress,
                  null,
                  nextChildren,
                  renderExpirationTime,
                );
              } else {
                // If the current child is the same as the work in progress, it means that
                // we haven't yet started any work on these children. Therefore, we use
                // the clone algorithm to create a copy of all the current children.

                // If we had any progressed work already, that is invalid at this point so
                // let's throw it out.
                workInProgress.child = reconcileChildFibers(
                  workInProgress,
                  current$$1.child,
                  nextChildren,
                  renderExpirationTime,
                );
              }
            }

            function forceUnmountCurrentAndReconcile(
              current$$1,
              workInProgress,
              nextChildren,
              renderExpirationTime,
            ) {
              // This function is fork of reconcileChildren. It's used in cases where we
              // want to reconcile without matching against the existing set. This has the
              // effect of all current children being unmounted; even if the type and key
              // are the same, the old child is unmounted and a new child is created.
              //
              // To do this, we're going to go through the reconcile algorithm twice. In
              // the first pass, we schedule a deletion for all the current children by
              // passing null.
              workInProgress.child = reconcileChildFibers(
                workInProgress,
                current$$1.child,
                null,
                renderExpirationTime,
              );
              // In the second pass, we mount the new children. The trick here is that we
              // pass null in place of where we usually pass the current child set. This has
              // the effect of remounting all children regardless of whether their their
              // identity matches.
              workInProgress.child = reconcileChildFibers(
                workInProgress,
                null,
                nextChildren,
                renderExpirationTime,
              );
            }

            function updateForwardRef(
              current$$1,
              workInProgress,
              Component,
              nextProps,
              renderExpirationTime,
            ) {
              // TODO: current can be non-null here even if the component
              // hasn't yet mounted. This happens after the first render suspends.
              // We'll need to figure out if this is fine or can cause issues.

              {
                if (workInProgress.type !== workInProgress.elementType) {
                  // Lazy component props can't be validated in createElement
                  // because they're only guaranteed to be resolved here.
                  var innerPropTypes = Component.propTypes;
                  if (innerPropTypes) {
                    checkPropTypes(
                      innerPropTypes,
                      nextProps, // Resolved props
                      'prop',
                      getComponentName(Component),
                      getCurrentFiberStackInDev,
                    );
                  }
                }
              }

              var render = Component.render;
              var ref = workInProgress.ref;

              // The rest is a fork of updateFunctionComponent
              var nextChildren = void 0;
              prepareToReadContext(workInProgress, renderExpirationTime);
              {
                ReactCurrentOwner$3.current = workInProgress;
                setCurrentPhase('render');
                nextChildren = renderWithHooks(
                  current$$1,
                  workInProgress,
                  render,
                  nextProps,
                  ref,
                  renderExpirationTime,
                );
                if (
                  debugRenderPhaseSideEffects ||
                  (debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode)
                ) {
                  // Only double-render components with Hooks
                  if (workInProgress.memoizedState !== null) {
                    nextChildren = renderWithHooks(
                      current$$1,
                      workInProgress,
                      render,
                      nextProps,
                      ref,
                      renderExpirationTime,
                    );
                  }
                }
                setCurrentPhase(null);
              }

              if (current$$1 !== null && !didReceiveUpdate) {
                bailoutHooks(current$$1, workInProgress, renderExpirationTime);
                return bailoutOnAlreadyFinishedWork(
                  current$$1,
                  workInProgress,
                  renderExpirationTime,
                );
              }

              // React DevTools reads this flag.
              workInProgress.effectTag |= PerformedWork;
              reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
              return workInProgress.child;
            }

            function updateMemoComponent(
              current$$1,
              workInProgress,
              Component,
              nextProps,
              updateExpirationTime,
              renderExpirationTime,
            ) {
              if (current$$1 === null) {
                var type = Component.type;
                if (
                  isSimpleFunctionComponent(type) &&
                  Component.compare === null &&
                  // SimpleMemoComponent codepath doesn't resolve outer props either.
                  Component.defaultProps === undefined
                ) {
                  var resolvedType = type;
                  {
                    resolvedType = resolveFunctionForHotReloading(type);
                  }
                  // If this is a plain function component without default props,
                  // and with only the default shallow comparison, we upgrade it
                  // to a SimpleMemoComponent to allow fast path updates.
                  workInProgress.tag = SimpleMemoComponent;
                  workInProgress.type = resolvedType;
                  {
                    validateFunctionComponentInDev(workInProgress, type);
                  }
                  return updateSimpleMemoComponent(
                    current$$1,
                    workInProgress,
                    resolvedType,
                    nextProps,
                    updateExpirationTime,
                    renderExpirationTime,
                  );
                }
                {
                  var innerPropTypes = type.propTypes;
                  if (innerPropTypes) {
                    // Inner memo component props aren't currently validated in createElement.
                    // We could move it there, but we'd still need this for lazy code path.
                    checkPropTypes(
                      innerPropTypes,
                      nextProps, // Resolved props
                      'prop',
                      getComponentName(type),
                      getCurrentFiberStackInDev,
                    );
                  }
                }
                var child = createFiberFromTypeAndProps(
                  Component.type,
                  null,
                  nextProps,
                  null,
                  workInProgress.mode,
                  renderExpirationTime,
                );
                child.ref = workInProgress.ref;
                child.return = workInProgress;
                workInProgress.child = child;
                return child;
              }
              {
                var _type = Component.type;
                var _innerPropTypes = _type.propTypes;
                if (_innerPropTypes) {
                  // Inner memo component props aren't currently validated in createElement.
                  // We could move it there, but we'd still need this for lazy code path.
                  checkPropTypes(
                    _innerPropTypes,
                    nextProps, // Resolved props
                    'prop',
                    getComponentName(_type),
                    getCurrentFiberStackInDev,
                  );
                }
              }
              var currentChild = current$$1.child; // This is always exactly one child
              if (updateExpirationTime < renderExpirationTime) {
                // This will be the props with resolved defaultProps,
                // unlike current.memoizedProps which will be the unresolved ones.
                var prevProps = currentChild.memoizedProps;
                // Default to shallow comparison
                var compare = Component.compare;
                compare = compare !== null ? compare : shallowEqual;
                if (compare(prevProps, nextProps) && current$$1.ref === workInProgress.ref) {
                  return bailoutOnAlreadyFinishedWork(
                    current$$1,
                    workInProgress,
                    renderExpirationTime,
                  );
                }
              }
              // React DevTools reads this flag.
              workInProgress.effectTag |= PerformedWork;
              var newChild = createWorkInProgress(currentChild, nextProps, renderExpirationTime);
              newChild.ref = workInProgress.ref;
              newChild.return = workInProgress;
              workInProgress.child = newChild;
              return newChild;
            }

            function updateSimpleMemoComponent(
              current$$1,
              workInProgress,
              Component,
              nextProps,
              updateExpirationTime,
              renderExpirationTime,
            ) {
              // TODO: current can be non-null here even if the component
              // hasn't yet mounted. This happens when the inner render suspends.
              // We'll need to figure out if this is fine or can cause issues.

              {
                if (workInProgress.type !== workInProgress.elementType) {
                  // Lazy component props can't be validated in createElement
                  // because they're only guaranteed to be resolved here.
                  var outerMemoType = workInProgress.elementType;
                  if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                    // We warn when you define propTypes on lazy()
                    // so let's just skip over it to find memo() outer wrapper.
                    // Inner props for memo are validated later.
                    outerMemoType = refineResolvedLazyComponent(outerMemoType);
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
                      'prop',
                      getComponentName(outerMemoType),
                      getCurrentFiberStackInDev,
                    );
                  }
                  // Inner propTypes will be validated in the function component path.
                }
              }
              if (current$$1 !== null) {
                var prevProps = current$$1.memoizedProps;
                if (
                  shallowEqual(prevProps, nextProps) &&
                  current$$1.ref === workInProgress.ref &&
                  // Prevent bailout if the implementation changed due to hot reload:
                  workInProgress.type === current$$1.type
                ) {
                  didReceiveUpdate = false;
                  if (updateExpirationTime < renderExpirationTime) {
                    return bailoutOnAlreadyFinishedWork(
                      current$$1,
                      workInProgress,
                      renderExpirationTime,
                    );
                  }
                }
              }
              return updateFunctionComponent(
                current$$1,
                workInProgress,
                Component,
                nextProps,
                renderExpirationTime,
              );
            }

            function updateFragment(current$$1, workInProgress, renderExpirationTime) {
              var nextChildren = workInProgress.pendingProps;
              reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
              return workInProgress.child;
            }

            function updateMode(current$$1, workInProgress, renderExpirationTime) {
              var nextChildren = workInProgress.pendingProps.children;
              reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
              return workInProgress.child;
            }

            function updateProfiler(current$$1, workInProgress, renderExpirationTime) {
              if (enableProfilerTimer) {
                workInProgress.effectTag |= Update;
              }
              var nextProps = workInProgress.pendingProps;
              var nextChildren = nextProps.children;
              reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
              return workInProgress.child;
            }

            function markRef(current$$1, workInProgress) {
              var ref = workInProgress.ref;
              if (
                (current$$1 === null && ref !== null) ||
                (current$$1 !== null && current$$1.ref !== ref)
              ) {
                // Schedule a Ref effect
                workInProgress.effectTag |= Ref;
              }
            }

            function updateFunctionComponent(
              current$$1,
              workInProgress,
              Component,
              nextProps,
              renderExpirationTime,
            ) {
              {
                if (workInProgress.type !== workInProgress.elementType) {
                  // Lazy component props can't be validated in createElement
                  // because they're only guaranteed to be resolved here.
                  var innerPropTypes = Component.propTypes;
                  if (innerPropTypes) {
                    checkPropTypes(
                      innerPropTypes,
                      nextProps, // Resolved props
                      'prop',
                      getComponentName(Component),
                      getCurrentFiberStackInDev,
                    );
                  }
                }
              }

              var context = void 0;
              if (!disableLegacyContext) {
                var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
                context = getMaskedContext(workInProgress, unmaskedContext);
              }

              var nextChildren = void 0;
              prepareToReadContext(workInProgress, renderExpirationTime);
              {
                ReactCurrentOwner$3.current = workInProgress;
                setCurrentPhase('render');
                nextChildren = renderWithHooks(
                  current$$1,
                  workInProgress,
                  Component,
                  nextProps,
                  context,
                  renderExpirationTime,
                );
                if (
                  debugRenderPhaseSideEffects ||
                  (debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode)
                ) {
                  // Only double-render components with Hooks
                  if (workInProgress.memoizedState !== null) {
                    nextChildren = renderWithHooks(
                      current$$1,
                      workInProgress,
                      Component,
                      nextProps,
                      context,
                      renderExpirationTime,
                    );
                  }
                }
                setCurrentPhase(null);
              }

              if (current$$1 !== null && !didReceiveUpdate) {
                bailoutHooks(current$$1, workInProgress, renderExpirationTime);
                return bailoutOnAlreadyFinishedWork(
                  current$$1,
                  workInProgress,
                  renderExpirationTime,
                );
              }

              // React DevTools reads this flag.
              workInProgress.effectTag |= PerformedWork;
              reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
              return workInProgress.child;
            }

            function updateClassComponent(
              current$$1,
              workInProgress,
              Component,
              nextProps,
              renderExpirationTime,
            ) {
              {
                if (workInProgress.type !== workInProgress.elementType) {
                  // Lazy component props can't be validated in createElement
                  // because they're only guaranteed to be resolved here.
                  var innerPropTypes = Component.propTypes;
                  if (innerPropTypes) {
                    checkPropTypes(
                      innerPropTypes,
                      nextProps, // Resolved props
                      'prop',
                      getComponentName(Component),
                      getCurrentFiberStackInDev,
                    );
                  }
                }
              }

              // Push context providers early to prevent context stack mismatches.
              // During mounting we don't know the child context yet as the instance doesn't exist.
              // We will invalidate the child context in finishClassComponent() right after rendering.
              var hasContext = void 0;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress);
              } else {
                hasContext = false;
              }
              prepareToReadContext(workInProgress, renderExpirationTime);

              var instance = workInProgress.stateNode;
              var shouldUpdate = void 0;
              if (instance === null) {
                if (current$$1 !== null) {
                  // An class component without an instance only mounts if it suspended
                  // inside a non- concurrent tree, in an inconsistent state. We want to
                  // tree it like a new mount, even though an empty version of it already
                  // committed. Disconnect the alternate pointers.
                  current$$1.alternate = null;
                  workInProgress.alternate = null;
                  // Since this is conceptually a new fiber, schedule a Placement effect
                  workInProgress.effectTag |= Placement;
                }
                // In the initial pass we might need to construct the instance.
                constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
                mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
                shouldUpdate = true;
              } else if (current$$1 === null) {
                // In a resume, we'll already have an instance we can reuse.
                shouldUpdate = resumeMountClassInstance(
                  workInProgress,
                  Component,
                  nextProps,
                  renderExpirationTime,
                );
              } else {
                shouldUpdate = updateClassInstance(
                  current$$1,
                  workInProgress,
                  Component,
                  nextProps,
                  renderExpirationTime,
                );
              }
              var nextUnitOfWork = finishClassComponent(
                current$$1,
                workInProgress,
                Component,
                shouldUpdate,
                hasContext,
                renderExpirationTime,
              );
              {
                var inst = workInProgress.stateNode;
                if (inst.props !== nextProps) {
                  !didWarnAboutReassigningProps
                    ? warning$1(
                        false,
                        'It looks like %s is reassigning its own `this.props` while rendering. ' +
                          'This is not supported and can lead to confusing bugs.',
                        getComponentName(workInProgress.type) || 'a component',
                      )
                    : void 0;
                  didWarnAboutReassigningProps = true;
                }
              }
              return nextUnitOfWork;
            }

            function finishClassComponent(
              current$$1,
              workInProgress,
              Component,
              shouldUpdate,
              hasContext,
              renderExpirationTime,
            ) {
              // Refs should update even if shouldComponentUpdate returns false
              markRef(current$$1, workInProgress);

              var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;

              if (!shouldUpdate && !didCaptureError) {
                // Context providers should defer to sCU for rendering
                if (hasContext) {
                  invalidateContextProvider(workInProgress, Component, false);
                }

                return bailoutOnAlreadyFinishedWork(
                  current$$1,
                  workInProgress,
                  renderExpirationTime,
                );
              }

              var instance = workInProgress.stateNode;

              // Rerender
              ReactCurrentOwner$3.current = workInProgress;
              var nextChildren = void 0;
              if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
                // If we captured an error, but getDerivedStateFrom catch is not defined,
                // unmount all the children. componentDidCatch will schedule an update to
                // re-render a fallback. This is temporary until we migrate everyone to
                // the new API.
                // TODO: Warn in a future release.
                nextChildren = null;

                if (enableProfilerTimer) {
                  stopProfilerTimerIfRunning(workInProgress);
                }
              } else {
                {
                  setCurrentPhase('render');
                  nextChildren = instance.render();
                  if (
                    debugRenderPhaseSideEffects ||
                    (debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode)
                  ) {
                    instance.render();
                  }
                  setCurrentPhase(null);
                }
              }

              // React DevTools reads this flag.
              workInProgress.effectTag |= PerformedWork;
              if (current$$1 !== null && didCaptureError) {
                // If we're recovering from an error, reconcile without reusing any of
                // the existing children. Conceptually, the normal children and the children
                // that are shown on error are two different sets, so we shouldn't reuse
                // normal children even if their identities match.
                forceUnmountCurrentAndReconcile(
                  current$$1,
                  workInProgress,
                  nextChildren,
                  renderExpirationTime,
                );
              } else {
                reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
              }

              // Memoize state using the values we just used to render.
              // TODO: Restructure so we never read values from the instance.
              workInProgress.memoizedState = instance.state;

              // The context might have changed so we need to recalculate it.
              if (hasContext) {
                invalidateContextProvider(workInProgress, Component, true);
              }

              return workInProgress.child;
            }

            function pushHostRootContext(workInProgress) {
              var root = workInProgress.stateNode;
              if (root.pendingContext) {
                pushTopLevelContextObject(
                  workInProgress,
                  root.pendingContext,
                  root.pendingContext !== root.context,
                );
              } else if (root.context) {
                // Should always be set
                pushTopLevelContextObject(workInProgress, root.context, false);
              }
              pushHostContainer(workInProgress, root.containerInfo);
            }

            function updateHostRoot(current$$1, workInProgress, renderExpirationTime) {
              pushHostRootContext(workInProgress);
              var updateQueue = workInProgress.updateQueue;
              (function() {
                if (!(updateQueue !== null)) {
                  {
                    throw ReactError(
                      Error(
                        'If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.',
                      ),
                    );
                  }
                }
              })();
              var nextProps = workInProgress.pendingProps;
              var prevState = workInProgress.memoizedState;
              var prevChildren = prevState !== null ? prevState.element : null;
              processUpdateQueue(
                workInProgress,
                updateQueue,
                nextProps,
                null,
                renderExpirationTime,
              );
              var nextState = workInProgress.memoizedState;
              // Caution: React DevTools currently depends on this property
              // being called "element".
              var nextChildren = nextState.element;
              if (nextChildren === prevChildren) {
                // If the state is the same as before, that's a bailout because we had
                // no work that expires at this time.
                resetHydrationState();
                return bailoutOnAlreadyFinishedWork(
                  current$$1,
                  workInProgress,
                  renderExpirationTime,
                );
              }
              var root = workInProgress.stateNode;
              if (
                (current$$1 === null || current$$1.child === null) &&
                root.hydrate &&
                enterHydrationState(workInProgress)
              ) {
                // If we don't have any current children this might be the first pass.
                // We always try to hydrate. If this isn't a hydration pass there won't
                // be any children to hydrate which is effectively the same thing as
                // not hydrating.

                // This is a bit of a hack. We track the host root as a placement to
                // know that we're currently in a mounting state. That way isMounted
                // works as expected. We must reset this before committing.
                // TODO: Delete this when we delete isMounted and findDOMNode.
                workInProgress.effectTag |= Placement;

                // Ensure that children mount into this root without tracking
                // side-effects. This ensures that we don't store Placement effects on
                // nodes that will be hydrated.
                workInProgress.child = mountChildFibers(
                  workInProgress,
                  null,
                  nextChildren,
                  renderExpirationTime,
                );
              } else {
                // Otherwise reset hydration state in case we aborted and resumed another
                // root.
                reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
                resetHydrationState();
              }
              return workInProgress.child;
            }

            function updateHostComponent(current$$1, workInProgress, renderExpirationTime) {
              pushHostContext(workInProgress);

              if (current$$1 === null) {
                tryToClaimNextHydratableInstance(workInProgress);
              }

              var type = workInProgress.type;
              var nextProps = workInProgress.pendingProps;
              var prevProps = current$$1 !== null ? current$$1.memoizedProps : null;

              var nextChildren = nextProps.children;
              var isDirectTextChild = shouldSetTextContent(type, nextProps);

              if (isDirectTextChild) {
                // We special case a direct text child of a host node. This is a common
                // case. We won't handle it as a reified child. We will instead handle
                // this in the host environment that also have access to this prop. That
                // avoids allocating another HostText fiber and traversing it.
                nextChildren = null;
              } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
                // If we're switching from a direct text child to a normal child, or to
                // empty, we need to schedule the text content to be reset.
                workInProgress.effectTag |= ContentReset;
              }

              markRef(current$$1, workInProgress);

              // Check the host config to see if the children are offscreen/hidden.
              if (
                workInProgress.mode & ConcurrentMode &&
                renderExpirationTime !== Never &&
                shouldDeprioritizeSubtree(type, nextProps)
              ) {
                if (enableSchedulerTracing) {
                  markSpawnedWork(Never);
                }
                // Schedule this fiber to re-render at offscreen priority. Then bailout.
                workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
                return null;
              }

              reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
              return workInProgress.child;
            }

            function updateHostText(current$$1, workInProgress) {
              if (current$$1 === null) {
                tryToClaimNextHydratableInstance(workInProgress);
              }
              // Nothing to do here. This is terminal. We'll do the completion step
              // immediately after.
              return null;
            }

            function mountLazyComponent(
              _current,
              workInProgress,
              elementType,
              updateExpirationTime,
              renderExpirationTime,
            ) {
              if (_current !== null) {
                // An lazy component only mounts if it suspended inside a non-
                // concurrent tree, in an inconsistent state. We want to treat it like
                // a new mount, even though an empty version of it already committed.
                // Disconnect the alternate pointers.
                _current.alternate = null;
                workInProgress.alternate = null;
                // Since this is conceptually a new fiber, schedule a Placement effect
                workInProgress.effectTag |= Placement;
              }

              var props = workInProgress.pendingProps;
              // We can't start a User Timing measurement with correct label yet.
              // Cancel and resume right after we know the tag.
              cancelWorkTimer(workInProgress);
              var Component = readLazyComponentType(elementType);
              // Store the unwrapped component in the type.
              workInProgress.type = Component;
              var resolvedTag = (workInProgress.tag = resolveLazyComponentTag(Component));
              startWorkTimer(workInProgress);
              var resolvedProps = resolveDefaultProps(Component, props);
              var child = void 0;
              switch (resolvedTag) {
                case FunctionComponent: {
                  {
                    validateFunctionComponentInDev(workInProgress, Component);
                    workInProgress.type = Component = resolveFunctionForHotReloading(Component);
                  }
                  child = updateFunctionComponent(
                    null,
                    workInProgress,
                    Component,
                    resolvedProps,
                    renderExpirationTime,
                  );
                  break;
                }
                case ClassComponent: {
                  {
                    workInProgress.type = Component = resolveClassForHotReloading(Component);
                  }
                  child = updateClassComponent(
                    null,
                    workInProgress,
                    Component,
                    resolvedProps,
                    renderExpirationTime,
                  );
                  break;
                }
                case ForwardRef: {
                  {
                    workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
                  }
                  child = updateForwardRef(
                    null,
                    workInProgress,
                    Component,
                    resolvedProps,
                    renderExpirationTime,
                  );
                  break;
                }
                case MemoComponent: {
                  {
                    if (workInProgress.type !== workInProgress.elementType) {
                      var outerPropTypes = Component.propTypes;
                      if (outerPropTypes) {
                        checkPropTypes(
                          outerPropTypes,
                          resolvedProps, // Resolved for outer only
                          'prop',
                          getComponentName(Component),
                          getCurrentFiberStackInDev,
                        );
                      }
                    }
                  }
                  child = updateMemoComponent(
                    null,
                    workInProgress,
                    Component,
                    resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
                    updateExpirationTime,
                    renderExpirationTime,
                  );
                  break;
                }
                default: {
                  var hint = '';
                  {
                    if (
                      Component !== null &&
                      typeof Component === 'object' &&
                      Component.$$typeof === REACT_LAZY_TYPE
                    ) {
                      hint = ' Did you wrap a component in React.lazy() more than once?';
                    }
                  }
                  // This message intentionally doesn't mention ForwardRef or MemoComponent
                  // because the fact that it's a separate type of work is an
                  // implementation detail.
                  (function() {
                    {
                      {
                        throw ReactError(
                          Error(
                            'Element type is invalid. Received a promise that resolves to: ' +
                              Component +
                              '. Lazy element type must resolve to a class or function.' +
                              hint,
                          ),
                        );
                      }
                    }
                  })();
                }
              }
              return child;
            }

            function mountIncompleteClassComponent(
              _current,
              workInProgress,
              Component,
              nextProps,
              renderExpirationTime,
            ) {
              if (_current !== null) {
                // An incomplete component only mounts if it suspended inside a non-
                // concurrent tree, in an inconsistent state. We want to treat it like
                // a new mount, even though an empty version of it already committed.
                // Disconnect the alternate pointers.
                _current.alternate = null;
                workInProgress.alternate = null;
                // Since this is conceptually a new fiber, schedule a Placement effect
                workInProgress.effectTag |= Placement;
              }

              // Promote the fiber to a class and try rendering again.
              workInProgress.tag = ClassComponent;

              // The rest of this function is a fork of `updateClassComponent`

              // Push context providers early to prevent context stack mismatches.
              // During mounting we don't know the child context yet as the instance doesn't exist.
              // We will invalidate the child context in finishClassComponent() right after rendering.
              var hasContext = void 0;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress);
              } else {
                hasContext = false;
              }
              prepareToReadContext(workInProgress, renderExpirationTime);

              constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
              mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);

              return finishClassComponent(
                null,
                workInProgress,
                Component,
                true,
                hasContext,
                renderExpirationTime,
              );
            }

            function mountIndeterminateComponent(
              _current,
              workInProgress,
              Component,
              renderExpirationTime,
            ) {
              if (_current !== null) {
                // An indeterminate component only mounts if it suspended inside a non-
                // concurrent tree, in an inconsistent state. We want to treat it like
                // a new mount, even though an empty version of it already committed.
                // Disconnect the alternate pointers.
                _current.alternate = null;
                workInProgress.alternate = null;
                // Since this is conceptually a new fiber, schedule a Placement effect
                workInProgress.effectTag |= Placement;
              }

              var props = workInProgress.pendingProps;
              var context = void 0;
              if (!disableLegacyContext) {
                var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
                context = getMaskedContext(workInProgress, unmaskedContext);
              }

              prepareToReadContext(workInProgress, renderExpirationTime);
              var value = void 0;

              {
                if (Component.prototype && typeof Component.prototype.render === 'function') {
                  var componentName = getComponentName(Component) || 'Unknown';

                  if (!didWarnAboutBadClass[componentName]) {
                    warningWithoutStack$1(
                      false,
                      "The <%s /> component appears to have a render method, but doesn't extend React.Component. " +
                        'This is likely to cause errors. Change %s to extend React.Component instead.',
                      componentName,
                      componentName,
                    );
                    didWarnAboutBadClass[componentName] = true;
                  }
                }

                if (workInProgress.mode & StrictMode) {
                  ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
                }

                ReactCurrentOwner$3.current = workInProgress;
                value = renderWithHooks(
                  null,
                  workInProgress,
                  Component,
                  props,
                  context,
                  renderExpirationTime,
                );
              }
              // React DevTools reads this flag.
              workInProgress.effectTag |= PerformedWork;

              if (
                typeof value === 'object' &&
                value !== null &&
                typeof value.render === 'function' &&
                value.$$typeof === undefined
              ) {
                {
                  var _componentName = getComponentName(Component) || 'Unknown';
                  if (!didWarnAboutModulePatternComponent[_componentName]) {
                    warningWithoutStack$1(
                      false,
                      'The <%s /> component appears to be a function component that returns a class instance. ' +
                        'Change %s to a class that extends React.Component instead. ' +
                        "If you can't use a class try assigning the prototype on the function as a workaround. " +
                        "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " +
                        'cannot be called with `new` by React.',
                      _componentName,
                      _componentName,
                      _componentName,
                    );
                    didWarnAboutModulePatternComponent[_componentName] = true;
                  }
                }

                // Proceed under the assumption that this is a class instance
                workInProgress.tag = ClassComponent;

                // Throw out any hooks that were used.
                resetHooks();

                // Push context providers early to prevent context stack mismatches.
                // During mounting we don't know the child context yet as the instance doesn't exist.
                // We will invalidate the child context in finishClassComponent() right after rendering.
                var hasContext = false;
                if (isContextProvider(Component)) {
                  hasContext = true;
                  pushContextProvider(workInProgress);
                } else {
                  hasContext = false;
                }

                workInProgress.memoizedState =
                  value.state !== null && value.state !== undefined ? value.state : null;

                var getDerivedStateFromProps = Component.getDerivedStateFromProps;
                if (typeof getDerivedStateFromProps === 'function') {
                  applyDerivedStateFromProps(
                    workInProgress,
                    Component,
                    getDerivedStateFromProps,
                    props,
                  );
                }

                adoptClassInstance(workInProgress, value);
                mountClassInstance(workInProgress, Component, props, renderExpirationTime);
                return finishClassComponent(
                  null,
                  workInProgress,
                  Component,
                  true,
                  hasContext,
                  renderExpirationTime,
                );
              } else {
                // Proceed under the assumption that this is a function component
                workInProgress.tag = FunctionComponent;
                {
                  if (disableLegacyContext && Component.contextTypes) {
                    warningWithoutStack$1(
                      false,
                      '%s uses the legacy contextTypes API which is no longer supported. ' +
                        'Use React.createContext() with React.useContext() instead.',
                      getComponentName(Component) || 'Unknown',
                    );
                  }

                  if (
                    debugRenderPhaseSideEffects ||
                    (debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode)
                  ) {
                    // Only double-render components with Hooks
                    if (workInProgress.memoizedState !== null) {
                      value = renderWithHooks(
                        null,
                        workInProgress,
                        Component,
                        props,
                        context,
                        renderExpirationTime,
                      );
                    }
                  }
                }
                reconcileChildren(null, workInProgress, value, renderExpirationTime);
                {
                  validateFunctionComponentInDev(workInProgress, Component);
                }
                return workInProgress.child;
              }
            }

            function validateFunctionComponentInDev(workInProgress, Component) {
              if (Component) {
                !!Component.childContextTypes
                  ? warningWithoutStack$1(
                      false,
                      '%s(...): childContextTypes cannot be defined on a function component.',
                      Component.displayName || Component.name || 'Component',
                    )
                  : void 0;
              }
              if (workInProgress.ref !== null) {
                var info = '';
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += '\n\nCheck the render method of `' + ownerName + '`.';
                }

                var warningKey = ownerName || workInProgress._debugID || '';
                var debugSource = workInProgress._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  warning$1(
                    false,
                    'Function components cannot be given refs. ' +
                      'Attempts to access this ref will fail. ' +
                      'Did you mean to use React.forwardRef()?%s',
                    info,
                  );
                }
              }

              if (
                warnAboutDefaultPropsOnFunctionComponents &&
                Component.defaultProps !== undefined
              ) {
                var componentName = getComponentName(Component) || 'Unknown';

                if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                  warningWithoutStack$1(
                    false,
                    '%s: Support for defaultProps will be removed from function components ' +
                      'in a future major release. Use JavaScript default parameters instead.',
                    componentName,
                  );
                  didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                }
              }

              if (typeof Component.getDerivedStateFromProps === 'function') {
                var _componentName2 = getComponentName(Component) || 'Unknown';

                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
                  warningWithoutStack$1(
                    false,
                    '%s: Function components do not support getDerivedStateFromProps.',
                    _componentName2,
                  );
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
                }
              }

              if (typeof Component.contextType === 'object' && Component.contextType !== null) {
                var _componentName3 = getComponentName(Component) || 'Unknown';

                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
                  warningWithoutStack$1(
                    false,
                    '%s: Function components do not support contextType.',
                    _componentName3,
                  );
                  didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
                }
              }
            }

            // TODO: This is now an empty object. Should we just make it a boolean?
            var SUSPENDED_MARKER = {};

            function shouldRemainOnFallback(suspenseContext, current$$1, workInProgress) {
              // If the context is telling us that we should show a fallback, and we're not
              // already showing content, then we should show the fallback instead.
              return (
                hasSuspenseContext(suspenseContext, ForceSuspenseFallback) &&
                (current$$1 === null || current$$1.memoizedState !== null)
              );
            }

            function updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
              var mode = workInProgress.mode;
              var nextProps = workInProgress.pendingProps;

              // This is used by DevTools to force a boundary to suspend.
              {
                if (shouldSuspend(workInProgress)) {
                  workInProgress.effectTag |= DidCapture;
                }
              }

              var suspenseContext = suspenseStackCursor.current;

              var nextState = null;
              var nextDidTimeout = false;

              if (
                (workInProgress.effectTag & DidCapture) !== NoEffect ||
                shouldRemainOnFallback(suspenseContext, current$$1, workInProgress)
              ) {
                // Something in this boundary's subtree already suspended. Switch to
                // rendering the fallback children.
                nextState = SUSPENDED_MARKER;
                nextDidTimeout = true;
                workInProgress.effectTag &= ~DidCapture;
              } else {
                // Attempting the main content
                if (current$$1 === null || current$$1.memoizedState !== null) {
                  // This is a new mount or this boundary is already showing a fallback state.
                  // Mark this subtree context as having at least one invisible parent that could
                  // handle the fallback state.
                  // Boundaries without fallbacks or should be avoided are not considered since
                  // they cannot handle preferred fallback states.
                  if (
                    nextProps.fallback !== undefined &&
                    nextProps.unstable_avoidThisFallback !== true
                  ) {
                    suspenseContext = addSubtreeSuspenseContext(
                      suspenseContext,
                      InvisibleParentSuspenseContext,
                    );
                  }
                }
              }

              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);

              pushSuspenseContext(workInProgress, suspenseContext);

              {
                if ('maxDuration' in nextProps) {
                  if (!didWarnAboutMaxDuration) {
                    didWarnAboutMaxDuration = true;
                    warning$1(
                      false,
                      'maxDuration has been removed from React. ' + 'Remove the maxDuration prop.',
                    );
                  }
                }
              }

              // This next part is a bit confusing. If the children timeout, we switch to
              // showing the fallback children in place of the "primary" children.
              // However, we don't want to delete the primary children because then their
              // state will be lost (both the React state and the host state, e.g.
              // uncontrolled form inputs). Instead we keep them mounted and hide them.
              // Both the fallback children AND the primary children are rendered at the
              // same time. Once the primary children are un-suspended, we can delete
              // the fallback children — don't need to preserve their state.
              //
              // The two sets of children are siblings in the host environment, but
              // semantically, for purposes of reconciliation, they are two separate sets.
              // So we store them using two fragment fibers.
              //
              // However, we want to avoid allocating extra fibers for every placeholder.
              // They're only necessary when the children time out, because that's the
              // only time when both sets are mounted.
              //
              // So, the extra fragment fibers are only used if the children time out.
              // Otherwise, we render the primary children directly. This requires some
              // custom reconciliation logic to preserve the state of the primary
              // children. It's essentially a very basic form of re-parenting.

              // `child` points to the child fiber. In the normal case, this is the first
              // fiber of the primary children set. In the timed-out case, it's a
              // a fragment fiber containing the primary children.
              var child = void 0;
              // `next` points to the next fiber React should render. In the normal case,
              // it's the same as `child`: the first fiber of the primary children set.
              // In the timed-out case, it's a fragment fiber containing the *fallback*
              // children -- we skip over the primary children entirely.
              var next = void 0;
              if (current$$1 === null) {
                if (enableSuspenseServerRenderer) {
                  // If we're currently hydrating, try to hydrate this boundary.
                  // But only if this has a fallback.
                  if (nextProps.fallback !== undefined) {
                    tryToClaimNextHydratableInstance(workInProgress);
                    // This could've changed the tag if this was a dehydrated suspense component.
                    if (workInProgress.tag === DehydratedSuspenseComponent) {
                      popSuspenseContext(workInProgress);
                      return updateDehydratedSuspenseComponent(
                        null,
                        workInProgress,
                        renderExpirationTime,
                      );
                    }
                  }
                }

                // This is the initial mount. This branch is pretty simple because there's
                // no previous state that needs to be preserved.
                if (nextDidTimeout) {
                  // Mount separate fragments for primary and fallback children.
                  var nextFallbackChildren = nextProps.fallback;
                  var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
                  primaryChildFragment.return = workInProgress;

                  if ((workInProgress.mode & BatchedMode) === NoMode) {
                    // Outside of batched mode, we commit the effects from the
                    var progressedState = workInProgress.memoizedState;
                    var progressedPrimaryChild =
                      progressedState !== null ? workInProgress.child.child : workInProgress.child;
                    primaryChildFragment.child = progressedPrimaryChild;
                    var progressedChild = progressedPrimaryChild;
                    while (progressedChild !== null) {
                      progressedChild.return = primaryChildFragment;
                      progressedChild = progressedChild.sibling;
                    }
                  }

                  var fallbackChildFragment = createFiberFromFragment(
                    nextFallbackChildren,
                    mode,
                    renderExpirationTime,
                    null,
                  );
                  fallbackChildFragment.return = workInProgress;
                  primaryChildFragment.sibling = fallbackChildFragment;
                  child = primaryChildFragment;
                  // Skip the primary children, and continue working on the
                  // fallback children.
                  next = fallbackChildFragment;
                } else {
                  // Mount the primary children without an intermediate fragment fiber.
                  var nextPrimaryChildren = nextProps.children;
                  child = next = mountChildFibers(
                    workInProgress,
                    null,
                    nextPrimaryChildren,
                    renderExpirationTime,
                  );
                }
              } else {
                // This is an update. This branch is more complicated because we need to
                // ensure the state of the primary children is preserved.
                var prevState = current$$1.memoizedState;
                var prevDidTimeout = prevState !== null;
                if (prevDidTimeout) {
                  // The current tree already timed out. That means each child set is
                  var currentPrimaryChildFragment = current$$1.child;
                  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
                  if (nextDidTimeout) {
                    // Still timed out. Reuse the current primary children by cloning
                    // its fragment. We're going to skip over these entirely.
                    var _nextFallbackChildren = nextProps.fallback;
                    var _primaryChildFragment = createWorkInProgress(
                      currentPrimaryChildFragment,
                      currentPrimaryChildFragment.pendingProps,
                      NoWork,
                    );
                    _primaryChildFragment.return = workInProgress;

                    if ((workInProgress.mode & BatchedMode) === NoMode) {
                      // Outside of batched mode, we commit the effects from the
                      var _progressedState = workInProgress.memoizedState;
                      var _progressedPrimaryChild =
                        _progressedState !== null
                          ? workInProgress.child.child
                          : workInProgress.child;
                      if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
                        _primaryChildFragment.child = _progressedPrimaryChild;
                        var _progressedChild = _progressedPrimaryChild;
                        while (_progressedChild !== null) {
                          _progressedChild.return = _primaryChildFragment;
                          _progressedChild = _progressedChild.sibling;
                        }
                      }
                    }

                    // Because primaryChildFragment is a new fiber that we're inserting as the
                    // parent of a new tree, we need to set its treeBaseDuration.
                    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
                      // treeBaseDuration is the sum of all the child tree base durations.
                      var treeBaseDuration = 0;
                      var hiddenChild = _primaryChildFragment.child;
                      while (hiddenChild !== null) {
                        treeBaseDuration += hiddenChild.treeBaseDuration;
                        hiddenChild = hiddenChild.sibling;
                      }
                      _primaryChildFragment.treeBaseDuration = treeBaseDuration;
                    }

                    // Clone the fallback child fragment, too. These we'll continue
                    // working on.
                    var _fallbackChildFragment = createWorkInProgress(
                      currentFallbackChildFragment,
                      _nextFallbackChildren,
                      currentFallbackChildFragment.expirationTime,
                    );
                    _fallbackChildFragment.return = workInProgress;
                    _primaryChildFragment.sibling = _fallbackChildFragment;
                    child = _primaryChildFragment;
                    _primaryChildFragment.childExpirationTime = NoWork;
                    // Skip the primary children, and continue working on the
                    // fallback children.
                    next = _fallbackChildFragment;
                  } else {
                    // No longer suspended. Switch back to showing the primary children,
                    // and remove the intermediate fragment fiber.
                    var _nextPrimaryChildren = nextProps.children;
                    var currentPrimaryChild = currentPrimaryChildFragment.child;
                    var primaryChild = reconcileChildFibers(
                      workInProgress,
                      currentPrimaryChild,
                      _nextPrimaryChildren,
                      renderExpirationTime,
                    );

                    // If this render doesn't suspend, we need to delete the fallback
                    // children. Wait until the complete phase, after we've confirmed the
                    // fallback is no longer needed.
                    // TODO: Would it be better to store the fallback fragment on
                    // the stateNode?

                    // Continue rendering the children, like we normally do.
                    child = next = primaryChild;
                  }
                } else {
                  // The current tree has not already timed out. That means the primary
                  // children are not wrapped in a fragment fiber.
                  var _currentPrimaryChild = current$$1.child;
                  if (nextDidTimeout) {
                    // Timed out. Wrap the children in a fragment fiber to keep them
                    // separate from the fallback children.
                    var _nextFallbackChildren2 = nextProps.fallback;
                    var _primaryChildFragment2 = createFiberFromFragment(
                      // It shouldn't matter what the pending props are because we aren't
                      // going to render this fragment.
                      null,
                      mode,
                      NoWork,
                      null,
                    );
                    _primaryChildFragment2.return = workInProgress;
                    _primaryChildFragment2.child = _currentPrimaryChild;
                    if (_currentPrimaryChild !== null) {
                      _currentPrimaryChild.return = _primaryChildFragment2;
                    }

                    // Even though we're creating a new fiber, there are no new children,
                    // because we're reusing an already mounted tree. So we don't need to
                    // schedule a placement.
                    // primaryChildFragment.effectTag |= Placement;

                    if ((workInProgress.mode & BatchedMode) === NoMode) {
                      // Outside of batched mode, we commit the effects from the
                      var _progressedState2 = workInProgress.memoizedState;
                      var _progressedPrimaryChild2 =
                        _progressedState2 !== null
                          ? workInProgress.child.child
                          : workInProgress.child;
                      _primaryChildFragment2.child = _progressedPrimaryChild2;
                      var _progressedChild2 = _progressedPrimaryChild2;
                      while (_progressedChild2 !== null) {
                        _progressedChild2.return = _primaryChildFragment2;
                        _progressedChild2 = _progressedChild2.sibling;
                      }
                    }

                    // Because primaryChildFragment is a new fiber that we're inserting as the
                    // parent of a new tree, we need to set its treeBaseDuration.
                    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
                      // treeBaseDuration is the sum of all the child tree base durations.
                      var _treeBaseDuration = 0;
                      var _hiddenChild = _primaryChildFragment2.child;
                      while (_hiddenChild !== null) {
                        _treeBaseDuration += _hiddenChild.treeBaseDuration;
                        _hiddenChild = _hiddenChild.sibling;
                      }
                      _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
                    }

                    // Create a fragment from the fallback children, too.
                    var _fallbackChildFragment2 = createFiberFromFragment(
                      _nextFallbackChildren2,
                      mode,
                      renderExpirationTime,
                      null,
                    );
                    _fallbackChildFragment2.return = workInProgress;
                    _primaryChildFragment2.sibling = _fallbackChildFragment2;
                    _fallbackChildFragment2.effectTag |= Placement;
                    child = _primaryChildFragment2;
                    _primaryChildFragment2.childExpirationTime = NoWork;
                    // Skip the primary children, and continue working on the
                    // fallback children.
                    next = _fallbackChildFragment2;
                  } else {
                    // Still haven't timed out.  Continue rendering the children, like we
                    // normally do.
                    var _nextPrimaryChildren2 = nextProps.children;
                    next = child = reconcileChildFibers(
                      workInProgress,
                      _currentPrimaryChild,
                      _nextPrimaryChildren2,
                      renderExpirationTime,
                    );
                  }
                }
                workInProgress.stateNode = current$$1.stateNode;
              }

              workInProgress.memoizedState = nextState;
              workInProgress.child = child;
              return next;
            }

            function retrySuspenseComponentWithoutHydrating(
              current$$1,
              workInProgress,
              renderExpirationTime,
            ) {
              // Detach from the current dehydrated boundary.
              current$$1.alternate = null;
              workInProgress.alternate = null;

              // Insert a deletion in the effect list.
              var returnFiber = workInProgress.return;
              (function() {
                if (!(returnFiber !== null)) {
                  {
                    throw ReactError(
                      Error(
                        'Suspense boundaries are never on the root. This is probably a bug in React.',
                      ),
                    );
                  }
                }
              })();
              var last = returnFiber.lastEffect;
              if (last !== null) {
                last.nextEffect = current$$1;
                returnFiber.lastEffect = current$$1;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = current$$1;
              }
              current$$1.nextEffect = null;
              current$$1.effectTag = Deletion;

              popSuspenseContext(workInProgress);

              // Upgrade this work in progress to a real Suspense component.
              workInProgress.tag = SuspenseComponent;
              workInProgress.stateNode = null;
              workInProgress.memoizedState = null;
              // This is now an insertion.
              workInProgress.effectTag |= Placement;
              // Retry as a real Suspense component.
              return updateSuspenseComponent(null, workInProgress, renderExpirationTime);
            }

            function updateDehydratedSuspenseComponent(
              current$$1,
              workInProgress,
              renderExpirationTime,
            ) {
              pushSuspenseContext(
                workInProgress,
                setDefaultShallowSuspenseContext(suspenseStackCursor.current),
              );
              var suspenseInstance = workInProgress.stateNode;
              if (current$$1 === null) {
                // During the first pass, we'll bail out and not drill into the children.
                // Instead, we'll leave the content in place and try to hydrate it later.
                if (isSuspenseInstanceFallback(suspenseInstance)) {
                  // This is a client-only boundary. Since we won't get any content from the server
                  // for this, we need to schedule that at a higher priority based on when it would
                  // have timed out. In theory we could render it in this pass but it would have the
                  // wrong priority associated with it and will prevent hydration of parent path.
                  // Instead, we'll leave work left on it to render it in a separate commit.

                  // TODO This time should be the time at which the server rendered response that is
                  // a parent to this boundary was displayed. However, since we currently don't have
                  // a protocol to transfer that time, we'll just estimate it by using the current
                  // time. This will mean that Suspense timeouts are slightly shifted to later than
                  // they should be.
                  var serverDisplayTime = requestCurrentTime();
                  // Schedule a normal pri update to render this content.
                  workInProgress.expirationTime = computeAsyncExpiration(serverDisplayTime);
                } else {
                  // We'll continue hydrating the rest at offscreen priority since we'll already
                  // be showing the right content coming from the server, it is no rush.
                  workInProgress.expirationTime = Never;
                }
                return null;
              }
              if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
                // Something suspended. Leave the existing children in place.
                // TODO: In non-concurrent mode, should we commit the nodes we have hydrated so far?
                workInProgress.child = null;
                return null;
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                // This boundary is in a permanent fallback state. In this case, we'll never
                // get an update and we'll never be able to hydrate the final content. Let's just try the
                // client side render instead.
                return retrySuspenseComponentWithoutHydrating(
                  current$$1,
                  workInProgress,
                  renderExpirationTime,
                );
              }
              // We use childExpirationTime to indicate that a child might depend on context, so if
              // any context has changed, we need to treat is as if the input might have changed.
              var hasContextChanged$$1 = current$$1.childExpirationTime >= renderExpirationTime;
              if (didReceiveUpdate || hasContextChanged$$1) {
                // This boundary has changed since the first render. This means that we are now unable to
                // hydrate it. We might still be able to hydrate it using an earlier expiration time but
                // during this render we can't. Instead, we're going to delete the whole subtree and
                // instead inject a new real Suspense boundary to take its place, which may render content
                // or fallback. The real Suspense boundary will suspend for a while so we have some time
                // to ensure it can produce real content, but all state and pending events will be lost.
                return retrySuspenseComponentWithoutHydrating(
                  current$$1,
                  workInProgress,
                  renderExpirationTime,
                );
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                // This component is still pending more data from the server, so we can't hydrate its
                // content. We treat it as if this component suspended itself. It might seem as if
                // we could just try to render it client-side instead. However, this will perform a
                // lot of unnecessary work and is unlikely to complete since it often will suspend
                // on missing data anyway. Additionally, the server might be able to render more
                // than we can on the client yet. In that case we'd end up with more fallback states
                // on the client than if we just leave it alone. If the server times out or errors
                // these should update this boundary to the permanent Fallback state instead.
                // Mark it as having captured (i.e. suspended).
                workInProgress.effectTag |= DidCapture;
                // Leave the children in place. I.e. empty.
                workInProgress.child = null;
                // Register a callback to retry this boundary once the server has sent the result.
                registerSuspenseInstanceRetry(
                  suspenseInstance,
                  retryTimedOutBoundary.bind(null, current$$1),
                );
                return null;
              } else {
                // This is the first attempt.
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress);
                var nextProps = workInProgress.pendingProps;
                var nextChildren = nextProps.children;
                workInProgress.child = mountChildFibers(
                  workInProgress,
                  null,
                  nextChildren,
                  renderExpirationTime,
                );
                return workInProgress.child;
              }
            }

            function propagateSuspenseContextChange(
              workInProgress,
              firstChild,
              renderExpirationTime,
            ) {
              // Mark any Suspense boundaries with fallbacks as having work to do.
              // If they were previously forced into fallbacks, they may now be able
              // to unblock.
              var node = firstChild;
              while (node !== null) {
                if (node.tag === SuspenseComponent) {
                  var state = node.memoizedState;
                  if (state !== null) {
                    if (node.expirationTime < renderExpirationTime) {
                      node.expirationTime = renderExpirationTime;
                    }
                    var alternate = node.alternate;
                    if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
                      alternate.expirationTime = renderExpirationTime;
                    }
                    scheduleWorkOnParentPath(node.return, renderExpirationTime);
                  }
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }

            function findLastContentRow(firstChild) {
              // This is going to find the last row among these children that is already
              // showing content on the screen, as opposed to being in fallback state or
              // new. If a row has multiple Suspense boundaries, any of them being in the
              // fallback state, counts as the whole row being in a fallback state.
              // Note that the "rows" will be workInProgress, but any nested children
              // will still be current since we haven't rendered them yet. The mounted
              // order may not be the same as the new order. We use the new order.
              var row = firstChild;
              var lastContentRow = null;
              while (row !== null) {
                var currentRow = row.alternate;
                // New rows can't be content rows.
                if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                  lastContentRow = row;
                }
                row = row.sibling;
              }
              return lastContentRow;
            }

            function validateRevealOrder(revealOrder) {
              {
                if (
                  revealOrder !== undefined &&
                  revealOrder !== 'forwards' &&
                  revealOrder !== 'backwards' &&
                  revealOrder !== 'together' &&
                  !didWarnAboutRevealOrder[revealOrder]
                ) {
                  didWarnAboutRevealOrder[revealOrder] = true;
                  if (typeof revealOrder === 'string') {
                    switch (revealOrder.toLowerCase()) {
                      case 'together':
                      case 'forwards':
                      case 'backwards': {
                        warning$1(
                          false,
                          '"%s" is not a valid value for revealOrder on <SuspenseList />. ' +
                            'Use lowercase "%s" instead.',
                          revealOrder,
                          revealOrder.toLowerCase(),
                        );
                        break;
                      }
                      case 'forward':
                      case 'backward': {
                        warning$1(
                          false,
                          '"%s" is not a valid value for revealOrder on <SuspenseList />. ' +
                            'React uses the -s suffix in the spelling. Use "%ss" instead.',
                          revealOrder,
                          revealOrder.toLowerCase(),
                        );
                        break;
                      }
                      default:
                        warning$1(
                          false,
                          '"%s" is not a supported revealOrder on <SuspenseList />. ' +
                            'Did you mean "together", "forwards" or "backwards"?',
                          revealOrder,
                        );
                        break;
                    }
                  } else {
                    warning$1(
                      false,
                      '%s is not a supported value for revealOrder on <SuspenseList />. ' +
                        'Did you mean "together", "forwards" or "backwards"?',
                      revealOrder,
                    );
                  }
                }
              }
            }

            function validateTailOptions(tailMode, revealOrder) {
              {
                if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
                  if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
                    didWarnAboutTailOptions[tailMode] = true;
                    warning$1(
                      false,
                      '"%s" is not a supported value for tail on <SuspenseList />. ' +
                        'Did you mean "collapsed" or "hidden"?',
                      tailMode,
                    );
                  } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
                    didWarnAboutTailOptions[tailMode] = true;
                    warning$1(
                      false,
                      '<SuspenseList tail="%s" /> is only valid if revealOrder is ' +
                        '"forwards" or "backwards". ' +
                        'Did you mean to specify revealOrder="forwards"?',
                      tailMode,
                    );
                  }
                }
              }
            }

            function validateSuspenseListNestedChild(childSlot, index) {
              {
                var isArray = Array.isArray(childSlot);
                var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';
                if (isArray || isIterable) {
                  var type = isArray ? 'array' : 'iterable';
                  warning$1(
                    false,
                    'A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' +
                      'an additional SuspenseList to configure its revealOrder: ' +
                      '<SuspenseList revealOrder=...> ... ' +
                      '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' +
                      '</SuspenseList>',
                    type,
                    index,
                    type,
                  );
                  return false;
                }
              }
              return true;
            }

            function validateSuspenseListChildren(children, revealOrder) {
              {
                if (
                  (revealOrder === 'forwards' || revealOrder === 'backwards') &&
                  children !== undefined &&
                  children !== null &&
                  children !== false
                ) {
                  if (Array.isArray(children)) {
                    for (var i = 0; i < children.length; i++) {
                      if (!validateSuspenseListNestedChild(children[i], i)) {
                        return;
                      }
                    }
                  } else {
                    var iteratorFn = getIteratorFn(children);
                    if (typeof iteratorFn === 'function') {
                      var childrenIterator = iteratorFn.call(children);
                      if (childrenIterator) {
                        var step = childrenIterator.next();
                        var _i = 0;
                        for (; !step.done; step = childrenIterator.next()) {
                          if (!validateSuspenseListNestedChild(step.value, _i)) {
                            return;
                          }
                          _i++;
                        }
                      }
                    } else {
                      warning$1(
                        false,
                        'A single row was passed to a <SuspenseList revealOrder="%s" />. ' +
                          'This is not useful since it needs multiple rows. ' +
                          'Did you mean to pass multiple children or an array?',
                        revealOrder,
                      );
                    }
                  }
                }
              }
            }

            function initSuspenseListRenderState(
              workInProgress,
              isBackwards,
              tail,
              lastContentRow,
              tailMode,
            ) {
              var renderState = workInProgress.memoizedState;
              if (renderState === null) {
                workInProgress.memoizedState = {
                  isBackwards: isBackwards,
                  rendering: null,
                  last: lastContentRow,
                  tail: tail,
                  tailExpiration: 0,
                  tailMode: tailMode,
                };
              } else {
                // We can reuse the existing object from previous renders.
                renderState.isBackwards = isBackwards;
                renderState.rendering = null;
                renderState.last = lastContentRow;
                renderState.tail = tail;
                renderState.tailExpiration = 0;
                renderState.tailMode = tailMode;
              }
            }

            // This can end up rendering this component multiple passes.
            // The first pass splits the children fibers into two sets. A head and tail.
            // We first render the head. If anything is in fallback state, we do another
            // pass through beginWork to rerender all children (including the tail) with
            // the force suspend context. If the first render didn't have anything in
            // in fallback state. Then we render each row in the tail one-by-one.
            // That happens in the completeWork phase without going back to beginWork.
            function updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime) {
              var nextProps = workInProgress.pendingProps;
              var revealOrder = nextProps.revealOrder;
              var tailMode = nextProps.tail;
              var newChildren = nextProps.children;

              validateRevealOrder(revealOrder);
              validateTailOptions(tailMode, revealOrder);
              validateSuspenseListChildren(newChildren, revealOrder);

              reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);

              var suspenseContext = suspenseStackCursor.current;

              var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
              if (shouldForceFallback) {
                suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                workInProgress.effectTag |= DidCapture;
              } else {
                var didSuspendBefore =
                  current$$1 !== null && (current$$1.effectTag & DidCapture) !== NoEffect;
                if (didSuspendBefore) {
                  // If we previously forced a fallback, we need to schedule work
                  // on any nested boundaries to let them know to try to render
                  // again. This is the same as context updating.
                  propagateSuspenseContextChange(
                    workInProgress,
                    workInProgress.child,
                    renderExpirationTime,
                  );
                }
                suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
              }
              pushSuspenseContext(workInProgress, suspenseContext);

              if ((workInProgress.mode & BatchedMode) === NoMode) {
                // Outside of batched mode, SuspenseList doesn't work so we just
                // use make it a noop by treating it as the default revealOrder.
                workInProgress.memoizedState = null;
              } else {
                switch (revealOrder) {
                  case 'forwards': {
                    var lastContentRow = findLastContentRow(workInProgress.child);
                    var tail = void 0;
                    if (lastContentRow === null) {
                      // The whole list is part of the tail.
                      // TODO: We could fast path by just rendering the tail now.
                      tail = workInProgress.child;
                      workInProgress.child = null;
                    } else {
                      // Disconnect the tail rows after the content row.
                      // We're going to render them separately later.
                      tail = lastContentRow.sibling;
                      lastContentRow.sibling = null;
                    }
                    initSuspenseListRenderState(
                      workInProgress,
                      false, // isBackwards
                      tail,
                      lastContentRow,
                      tailMode,
                    );
                    break;
                  }
                  case 'backwards': {
                    // We're going to find the first row that has existing content.
                    // At the same time we're going to reverse the list of everything
                    // we pass in the meantime. That's going to be our tail in reverse
                    // order.
                    var _tail = null;
                    var row = workInProgress.child;
                    workInProgress.child = null;
                    while (row !== null) {
                      var currentRow = row.alternate;
                      // New rows can't be content rows.
                      if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                        // This is the beginning of the main content.
                        workInProgress.child = row;
                        break;
                      }
                      var nextRow = row.sibling;
                      row.sibling = _tail;
                      _tail = row;
                      row = nextRow;
                    }
                    // TODO: If workInProgress.child is null, we can continue on the tail immediately.
                    initSuspenseListRenderState(
                      workInProgress,
                      true, // isBackwards
                      _tail,
                      null, // last
                      tailMode,
                    );
                    break;
                  }
                  case 'together': {
                    initSuspenseListRenderState(
                      workInProgress,
                      false, // isBackwards
                      null, // tail
                      null, // last
                      undefined,
                    );
                    break;
                  }
                  default: {
                    // The default reveal order is the same as not having
                    // a boundary.
                    workInProgress.memoizedState = null;
                  }
                }
              }
              return workInProgress.child;
            }

            function updatePortalComponent(current$$1, workInProgress, renderExpirationTime) {
              pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
              var nextChildren = workInProgress.pendingProps;
              if (current$$1 === null) {
                // Portals are special because we don't append the children during mount
                // but at commit. Therefore we need to track insertions which the normal
                // flow doesn't do during mount. This doesn't happen at the root because
                // the root always starts with a "current" with a null child.
                // TODO: Consider unifying this with how the root works.
                workInProgress.child = reconcileChildFibers(
                  workInProgress,
                  null,
                  nextChildren,
                  renderExpirationTime,
                );
              } else {
                reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
              }
              return workInProgress.child;
            }

            function updateContextProvider(current$$1, workInProgress, renderExpirationTime) {
              var providerType = workInProgress.type;
              var context = providerType._context;

              var newProps = workInProgress.pendingProps;
              var oldProps = workInProgress.memoizedProps;

              var newValue = newProps.value;

              {
                var providerPropTypes = workInProgress.type.propTypes;

                if (providerPropTypes) {
                  checkPropTypes(
                    providerPropTypes,
                    newProps,
                    'prop',
                    'Context.Provider',
                    getCurrentFiberStackInDev,
                  );
                }
              }

              pushProvider(workInProgress, newValue);

              if (oldProps !== null) {
                var oldValue = oldProps.value;
                var changedBits = calculateChangedBits(context, newValue, oldValue);
                if (changedBits === 0) {
                  // No change. Bailout early if children are the same.
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(
                      current$$1,
                      workInProgress,
                      renderExpirationTime,
                    );
                  }
                } else {
                  // The context value changed. Search for matching consumers and schedule
                  // them to update.
                  propagateContextChange(
                    workInProgress,
                    context,
                    changedBits,
                    renderExpirationTime,
                  );
                }
              }

              var newChildren = newProps.children;
              reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
              return workInProgress.child;
            }

            var hasWarnedAboutUsingContextAsConsumer = false;

            function updateContextConsumer(current$$1, workInProgress, renderExpirationTime) {
              var context = workInProgress.type;
              // The logic below for Context differs depending on PROD or DEV mode. In
              // DEV mode, we create a separate object for Context.Consumer that acts
              // like a proxy to Context. This proxy object adds unnecessary code in PROD
              // so we use the old behaviour (Context.Consumer references Context) to
              // reduce size and overhead. The separate object references context via
              // a property called "_context", which also gives us the ability to check
              // in DEV mode if this property exists or not and warn if it does not.
              {
                if (context._context === undefined) {
                  // This may be because it's a Context (rather than a Consumer).
                  // Or it may be because it's older React where they're the same thing.
                  // We only want to warn if we're sure it's a new React.
                  if (context !== context.Consumer) {
                    if (!hasWarnedAboutUsingContextAsConsumer) {
                      hasWarnedAboutUsingContextAsConsumer = true;
                      warning$1(
                        false,
                        'Rendering <Context> directly is not supported and will be removed in ' +
                          'a future major release. Did you mean to render <Context.Consumer> instead?',
                      );
                    }
                  }
                } else {
                  context = context._context;
                }
              }
              var newProps = workInProgress.pendingProps;
              var render = newProps.children;

              {
                !(typeof render === 'function')
                  ? warningWithoutStack$1(
                      false,
                      'A context consumer was rendered with multiple children, or a child ' +
                        "that isn't a function. A context consumer expects a single child " +
                        'that is a function. If you did pass a function, make sure there ' +
                        'is no trailing or leading whitespace around it.',
                    )
                  : void 0;
              }

              prepareToReadContext(workInProgress, renderExpirationTime);
              var newValue = readContext(context, newProps.unstable_observedBits);
              var newChildren = void 0;
              {
                ReactCurrentOwner$3.current = workInProgress;
                setCurrentPhase('render');
                newChildren = render(newValue);
                setCurrentPhase(null);
              }

              // React DevTools reads this flag.
              workInProgress.effectTag |= PerformedWork;
              reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
              return workInProgress.child;
            }

            function updateFundamentalComponent$1(
              current$$1,
              workInProgress,
              renderExpirationTime,
            ) {
              var fundamentalImpl = workInProgress.type.impl;
              if (fundamentalImpl.reconcileChildren === false) {
                return null;
              }
              var nextProps = workInProgress.pendingProps;
              var nextChildren = nextProps.children;

              reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
              return workInProgress.child;
            }

            function markWorkInProgressReceivedUpdate() {
              didReceiveUpdate = true;
            }

            function bailoutOnAlreadyFinishedWork(
              current$$1,
              workInProgress,
              renderExpirationTime,
            ) {
              cancelWorkTimer(workInProgress);

              if (current$$1 !== null) {
                // Reuse previous dependencies
                workInProgress.dependencies = current$$1.dependencies;
              }

              if (enableProfilerTimer) {
                // Don't update "base" render times for bailouts.
                stopProfilerTimerIfRunning(workInProgress);
              }

              // Check if the children have any pending work.
              var childExpirationTime = workInProgress.childExpirationTime;
              if (childExpirationTime < renderExpirationTime) {
                // The children don't have any work either. We can skip them.
                // TODO: Once we add back resuming, we should check if the children are
                // a work-in-progress set. If so, we need to transfer their effects.
                return null;
              } else {
                // This fiber doesn't have work, but its subtree does. Clone the child
                // fibers and continue.
                cloneChildFibers(current$$1, workInProgress);
                return workInProgress.child;
              }
            }

            function remountFiber(current$$1, oldWorkInProgress, newWorkInProgress) {
              {
                var returnFiber = oldWorkInProgress.return;
                if (returnFiber === null) {
                  throw new Error('Cannot swap the root fiber.');
                }

                // Disconnect from the old current.
                // It will get deleted.
                current$$1.alternate = null;
                oldWorkInProgress.alternate = null;

                // Connect to the new tree.
                newWorkInProgress.index = oldWorkInProgress.index;
                newWorkInProgress.sibling = oldWorkInProgress.sibling;
                newWorkInProgress.return = oldWorkInProgress.return;
                newWorkInProgress.ref = oldWorkInProgress.ref;

                // Replace the child/sibling pointers above it.
                if (oldWorkInProgress === returnFiber.child) {
                  returnFiber.child = newWorkInProgress;
                } else {
                  var prevSibling = returnFiber.child;
                  if (prevSibling === null) {
                    throw new Error('Expected parent to have a child.');
                  }
                  while (prevSibling.sibling !== oldWorkInProgress) {
                    prevSibling = prevSibling.sibling;
                    if (prevSibling === null) {
                      throw new Error('Expected to find the previous sibling.');
                    }
                  }
                  prevSibling.sibling = newWorkInProgress;
                }

                // Delete the old fiber and place the new one.
                // Since the old fiber is disconnected, we have to schedule it manually.
                var last = returnFiber.lastEffect;
                if (last !== null) {
                  last.nextEffect = current$$1;
                  returnFiber.lastEffect = current$$1;
                } else {
                  returnFiber.firstEffect = returnFiber.lastEffect = current$$1;
                }
                current$$1.nextEffect = null;
                current$$1.effectTag = Deletion;

                newWorkInProgress.effectTag |= Placement;

                // Restart work from the new fiber.
                return newWorkInProgress;
              }
            }

            function beginWork$1(current$$1, workInProgress, renderExpirationTime) {
              var updateExpirationTime = workInProgress.expirationTime;

              {
                if (workInProgress._debugNeedsRemount && current$$1 !== null) {
                  // This will restart the begin phase with a new fiber.
                  return remountFiber(
                    current$$1,
                    workInProgress,
                    createFiberFromTypeAndProps(
                      workInProgress.type,
                      workInProgress.key,
                      workInProgress.pendingProps,
                      workInProgress._debugOwner || null,
                      workInProgress.mode,
                      workInProgress.expirationTime,
                    ),
                  );
                }
              }

              if (current$$1 !== null) {
                var oldProps = current$$1.memoizedProps;
                var newProps = workInProgress.pendingProps;

                if (
                  oldProps !== newProps ||
                  hasContextChanged() ||
                  // Force a re-render if the implementation changed due to hot reload:
                  workInProgress.type !== current$$1.type
                ) {
                  // If props or context changed, mark the fiber as having performed work.
                  // This may be unset if the props are determined to be equal later (memo).
                  didReceiveUpdate = true;
                } else if (updateExpirationTime < renderExpirationTime) {
                  didReceiveUpdate = false;
                  // This fiber does not have any pending work. Bailout without entering
                  // the begin phase. There's still some bookkeeping we that needs to be done
                  // in this optimized path, mostly pushing stuff onto the stack.
                  switch (workInProgress.tag) {
                    case HostRoot:
                      pushHostRootContext(workInProgress);
                      resetHydrationState();
                      break;
                    case HostComponent:
                      pushHostContext(workInProgress);
                      if (
                        workInProgress.mode & ConcurrentMode &&
                        renderExpirationTime !== Never &&
                        shouldDeprioritizeSubtree(workInProgress.type, newProps)
                      ) {
                        if (enableSchedulerTracing) {
                          markSpawnedWork(Never);
                        }
                        // Schedule this fiber to re-render at offscreen priority. Then bailout.
                        workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
                        return null;
                      }
                      break;
                    case ClassComponent: {
                      var Component = workInProgress.type;
                      if (isContextProvider(Component)) {
                        pushContextProvider(workInProgress);
                      }
                      break;
                    }
                    case HostPortal:
                      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                      break;
                    case ContextProvider: {
                      var newValue = workInProgress.memoizedProps.value;
                      pushProvider(workInProgress, newValue);
                      break;
                    }
                    case Profiler:
                      if (enableProfilerTimer) {
                        workInProgress.effectTag |= Update;
                      }
                      break;
                    case SuspenseComponent: {
                      var state = workInProgress.memoizedState;
                      var didTimeout = state !== null;
                      if (didTimeout) {
                        // If this boundary is currently timed out, we need to decide
                        // whether to retry the primary children, or to skip over it and
                        // go straight to the fallback. Check the priority of the primary
                        var primaryChildFragment = workInProgress.child;
                        var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;
                        if (
                          primaryChildExpirationTime !== NoWork &&
                          primaryChildExpirationTime >= renderExpirationTime
                        ) {
                          // The primary children have pending work. Use the normal path
                          // to attempt to render the primary children again.
                          return updateSuspenseComponent(
                            current$$1,
                            workInProgress,
                            renderExpirationTime,
                          );
                        } else {
                          pushSuspenseContext(
                            workInProgress,
                            setDefaultShallowSuspenseContext(suspenseStackCursor.current),
                          );
                          // The primary children do not have pending work with sufficient
                          // priority. Bailout.
                          var child = bailoutOnAlreadyFinishedWork(
                            current$$1,
                            workInProgress,
                            renderExpirationTime,
                          );
                          if (child !== null) {
                            // The fallback children have pending work. Skip over the
                            // primary children and work on the fallback.
                            return child.sibling;
                          } else {
                            return null;
                          }
                        }
                      } else {
                        pushSuspenseContext(
                          workInProgress,
                          setDefaultShallowSuspenseContext(suspenseStackCursor.current),
                        );
                      }
                      break;
                    }
                    case DehydratedSuspenseComponent: {
                      if (enableSuspenseServerRenderer) {
                        pushSuspenseContext(
                          workInProgress,
                          setDefaultShallowSuspenseContext(suspenseStackCursor.current),
                        );
                        // We know that this component will suspend again because if it has
                        // been unsuspended it has committed as a regular Suspense component.
                        // If it needs to be retried, it should have work scheduled on it.
                        workInProgress.effectTag |= DidCapture;
                      }
                      break;
                    }
                    case SuspenseListComponent: {
                      var didSuspendBefore = (current$$1.effectTag & DidCapture) !== NoEffect;

                      var hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;

                      if (didSuspendBefore) {
                        if (hasChildWork) {
                          // If something was in fallback state last time, and we have all the
                          // same children then we're still in progressive loading state.
                          // Something might get unblocked by state updates or retries in the
                          // tree which will affect the tail. So we need to use the normal
                          // path to compute the correct tail.
                          return updateSuspenseListComponent(
                            current$$1,
                            workInProgress,
                            renderExpirationTime,
                          );
                        }
                        // If none of the children had any work, that means that none of
                        // them got retried so they'll still be blocked in the same way
                        // as before. We can fast bail out.
                        workInProgress.effectTag |= DidCapture;
                      }

                      // If nothing suspended before and we're rendering the same children,
                      // then the tail doesn't matter. Anything new that suspends will work
                      // in the "together" mode, so we can continue from the state we had.
                      var renderState = workInProgress.memoizedState;
                      if (renderState !== null) {
                        // Reset to the "together" mode in case we've started a different
                        // update in the past but didn't complete it.
                        renderState.rendering = null;
                        renderState.tail = null;
                      }
                      pushSuspenseContext(workInProgress, suspenseStackCursor.current);

                      if (hasChildWork) {
                        break;
                      } else {
                        // If none of the children had any work, that means that none of
                        // them got retried so they'll still be blocked in the same way
                        // as before. We can fast bail out.
                        return null;
                      }
                    }
                  }
                  return bailoutOnAlreadyFinishedWork(
                    current$$1,
                    workInProgress,
                    renderExpirationTime,
                  );
                }
              } else {
                didReceiveUpdate = false;
              }

              // Before entering the begin phase, clear the expiration time.
              workInProgress.expirationTime = NoWork;

              switch (workInProgress.tag) {
                case IndeterminateComponent: {
                  return mountIndeterminateComponent(
                    current$$1,
                    workInProgress,
                    workInProgress.type,
                    renderExpirationTime,
                  );
                }
                case LazyComponent: {
                  var elementType = workInProgress.elementType;
                  return mountLazyComponent(
                    current$$1,
                    workInProgress,
                    elementType,
                    updateExpirationTime,
                    renderExpirationTime,
                  );
                }
                case FunctionComponent: {
                  var _Component = workInProgress.type;
                  var unresolvedProps = workInProgress.pendingProps;
                  var resolvedProps =
                    workInProgress.elementType === _Component
                      ? unresolvedProps
                      : resolveDefaultProps(_Component, unresolvedProps);
                  return updateFunctionComponent(
                    current$$1,
                    workInProgress,
                    _Component,
                    resolvedProps,
                    renderExpirationTime,
                  );
                }
                case ClassComponent: {
                  var _Component2 = workInProgress.type;
                  var _unresolvedProps = workInProgress.pendingProps;
                  var _resolvedProps =
                    workInProgress.elementType === _Component2
                      ? _unresolvedProps
                      : resolveDefaultProps(_Component2, _unresolvedProps);
                  return updateClassComponent(
                    current$$1,
                    workInProgress,
                    _Component2,
                    _resolvedProps,
                    renderExpirationTime,
                  );
                }
                case HostRoot:
                  return updateHostRoot(current$$1, workInProgress, renderExpirationTime);
                case HostComponent:
                  return updateHostComponent(current$$1, workInProgress, renderExpirationTime);
                case HostText:
                  return updateHostText(current$$1, workInProgress);
                case SuspenseComponent:
                  return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
                case HostPortal:
                  return updatePortalComponent(current$$1, workInProgress, renderExpirationTime);
                case ForwardRef: {
                  var type = workInProgress.type;
                  var _unresolvedProps2 = workInProgress.pendingProps;
                  var _resolvedProps2 =
                    workInProgress.elementType === type
                      ? _unresolvedProps2
                      : resolveDefaultProps(type, _unresolvedProps2);
                  return updateForwardRef(
                    current$$1,
                    workInProgress,
                    type,
                    _resolvedProps2,
                    renderExpirationTime,
                  );
                }
                case Fragment:
                  return updateFragment(current$$1, workInProgress, renderExpirationTime);
                case Mode:
                  return updateMode(current$$1, workInProgress, renderExpirationTime);
                case Profiler:
                  return updateProfiler(current$$1, workInProgress, renderExpirationTime);
                case ContextProvider:
                  return updateContextProvider(current$$1, workInProgress, renderExpirationTime);
                case ContextConsumer:
                  return updateContextConsumer(current$$1, workInProgress, renderExpirationTime);
                case MemoComponent: {
                  var _type2 = workInProgress.type;
                  var _unresolvedProps3 = workInProgress.pendingProps;
                  // Resolve outer props first, then resolve inner props.
                  var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                  {
                    if (workInProgress.type !== workInProgress.elementType) {
                      var outerPropTypes = _type2.propTypes;
                      if (outerPropTypes) {
                        checkPropTypes(
                          outerPropTypes,
                          _resolvedProps3, // Resolved for outer only
                          'prop',
                          getComponentName(_type2),
                          getCurrentFiberStackInDev,
                        );
                      }
                    }
                  }
                  _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                  return updateMemoComponent(
                    current$$1,
                    workInProgress,
                    _type2,
                    _resolvedProps3,
                    updateExpirationTime,
                    renderExpirationTime,
                  );
                }
                case SimpleMemoComponent: {
                  return updateSimpleMemoComponent(
                    current$$1,
                    workInProgress,
                    workInProgress.type,
                    workInProgress.pendingProps,
                    updateExpirationTime,
                    renderExpirationTime,
                  );
                }
                case IncompleteClassComponent: {
                  var _Component3 = workInProgress.type;
                  var _unresolvedProps4 = workInProgress.pendingProps;
                  var _resolvedProps4 =
                    workInProgress.elementType === _Component3
                      ? _unresolvedProps4
                      : resolveDefaultProps(_Component3, _unresolvedProps4);
                  return mountIncompleteClassComponent(
                    current$$1,
                    workInProgress,
                    _Component3,
                    _resolvedProps4,
                    renderExpirationTime,
                  );
                }
                case DehydratedSuspenseComponent: {
                  if (enableSuspenseServerRenderer) {
                    return updateDehydratedSuspenseComponent(
                      current$$1,
                      workInProgress,
                      renderExpirationTime,
                    );
                  }
                  break;
                }
                case SuspenseListComponent: {
                  return updateSuspenseListComponent(
                    current$$1,
                    workInProgress,
                    renderExpirationTime,
                  );
                }
                case FundamentalComponent: {
                  if (enableFundamentalAPI) {
                    return updateFundamentalComponent$1(
                      current$$1,
                      workInProgress,
                      renderExpirationTime,
                    );
                  }
                  break;
                }
              }
              (function() {
                {
                  {
                    throw ReactError(
                      Error(
                        'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.',
                      ),
                    );
                  }
                }
              })();
            }

            function createFundamentalStateInstance(currentFiber, props, impl, state) {
              return {
                currentFiber: currentFiber,
                impl: impl,
                instance: null,
                prevProps: null,
                props: props,
                state: state,
              };
            }

            var emptyObject = {};
            var isArray$2 = Array.isArray;

            function markUpdate(workInProgress) {
              // Tag the fiber with an update effect. This turns a Placement into
              // a PlacementAndUpdate.
              workInProgress.effectTag |= Update;
            }

            function markRef$1(workInProgress) {
              workInProgress.effectTag |= Ref;
            }

            var appendAllChildren = void 0;
            var updateHostContainer = void 0;
            var updateHostComponent$1 = void 0;
            var updateHostText$1 = void 0;
            if (supportsMutation) {
              // Mutation mode

              appendAllChildren = function(
                parent,
                workInProgress,
                needsVisibilityToggle,
                isHidden,
              ) {
                // We only have the top Fiber that was created but we need recurse down its
                // children to find all the terminal nodes.
                var node = workInProgress.child;
                while (node !== null) {
                  if (node.tag === HostComponent || node.tag === HostText) {
                    appendInitialChild(parent, node.stateNode);
                  } else if (node.tag === FundamentalComponent) {
                    appendInitialChild(parent, node.stateNode.instance);
                  } else if (node.tag === HostPortal) {
                    // If we have a portal child, then we don't want to traverse
                    // down its children. Instead, we'll get insertions from each child in
                    // the portal directly.
                  } else if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                  }
                  if (node === workInProgress) {
                    return;
                  }
                  while (node.sibling === null) {
                    if (node.return === null || node.return === workInProgress) {
                      return;
                    }
                    node = node.return;
                  }
                  node.sibling.return = node.return;
                  node = node.sibling;
                }
              };

              updateHostContainer = function(workInProgress) {
                // Noop
              };
              updateHostComponent$1 = function(
                current,
                workInProgress,
                type,
                newProps,
                rootContainerInstance,
              ) {
                // If we have an alternate, that means this is an update and we need to
                // schedule a side-effect to do the updates.
                var oldProps = current.memoizedProps;
                if (oldProps === newProps) {
                  // In mutation mode, this is sufficient for a bailout because
                  // we won't touch this node even if children changed.
                  return;
                }

                // If we get updated because one of our children updated, we don't
                // have newProps so we'll have to reuse them.
                // TODO: Split the update API as separate for the props vs. children.
                // Even better would be if children weren't special cased at all tho.
                var instance = workInProgress.stateNode;
                var currentHostContext = getHostContext();
                // TODO: Experiencing an error where oldProps is null. Suggests a host
                // component is hitting the resume path. Figure out why. Possibly
                // related to `hidden`.
                var updatePayload = prepareUpdate(
                  instance,
                  type,
                  oldProps,
                  newProps,
                  rootContainerInstance,
                  currentHostContext,
                );
                // TODO: Type this specific to this type of component.
                workInProgress.updateQueue = updatePayload;
                // If the update payload indicates that there is a change or if there
                // is a new ref we mark this as an update. All the work is done in commitWork.
                if (updatePayload) {
                  markUpdate(workInProgress);
                }
              };
              updateHostText$1 = function(current, workInProgress, oldText, newText) {
                // If the text differs, mark it as an update. All the work in done in commitWork.
                if (oldText !== newText) {
                  markUpdate(workInProgress);
                }
              };
            } else if (supportsPersistence) {
              // Persistent host tree mode

              appendAllChildren = function(
                parent,
                workInProgress,
                needsVisibilityToggle,
                isHidden,
              ) {
                // We only have the top Fiber that was created but we need recurse down its
                // children to find all the terminal nodes.
                var node = workInProgress.child;
                while (node !== null) {
                  // eslint-disable-next-line no-labels
                  branches: if (node.tag === HostComponent) {
                    var instance = node.stateNode;
                    if (needsVisibilityToggle && isHidden) {
                      // This child is inside a timed out tree. Hide it.
                      var props = node.memoizedProps;
                      var type = node.type;
                      instance = cloneHiddenInstance(instance, type, props, node);
                    }
                    appendInitialChild(parent, instance);
                  } else if (node.tag === HostText) {
                    var _instance = node.stateNode;
                    if (needsVisibilityToggle && isHidden) {
                      // This child is inside a timed out tree. Hide it.
                      var text = node.memoizedProps;
                      _instance = cloneHiddenTextInstance(_instance, text, node);
                    }
                    appendInitialChild(parent, _instance);
                  } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {
                    var _instance2 = node.stateNode.instance;
                    if (needsVisibilityToggle && isHidden) {
                      // This child is inside a timed out tree. Hide it.
                      var _props = node.memoizedProps;
                      var _type = node.type;
                      _instance2 = cloneHiddenInstance(_instance2, _type, _props, node);
                    }
                    appendInitialChild(parent, _instance2);
                  } else if (node.tag === HostPortal) {
                    // If we have a portal child, then we don't want to traverse
                    // down its children. Instead, we'll get insertions from each child in
                    // the portal directly.
                  } else if (node.tag === SuspenseComponent) {
                    if ((node.effectTag & Update) !== NoEffect) {
                      // Need to toggle the visibility of the primary children.
                      var newIsHidden = node.memoizedState !== null;
                      if (newIsHidden) {
                        var primaryChildParent = node.child;
                        if (primaryChildParent !== null) {
                          if (primaryChildParent.child !== null) {
                            primaryChildParent.child.return = primaryChildParent;
                            appendAllChildren(parent, primaryChildParent, true, newIsHidden);
                          }
                          var fallbackChildParent = primaryChildParent.sibling;
                          if (fallbackChildParent !== null) {
                            fallbackChildParent.return = node;
                            node = fallbackChildParent;
                            continue;
                          }
                        }
                      }
                    }
                    if (node.child !== null) {
                      // Continue traversing like normal
                      node.child.return = node;
                      node = node.child;
                      continue;
                    }
                  } else if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                  }
                  // $FlowFixMe This is correct but Flow is confused by the labeled break.
                  node = node;
                  if (node === workInProgress) {
                    return;
                  }
                  while (node.sibling === null) {
                    if (node.return === null || node.return === workInProgress) {
                      return;
                    }
                    node = node.return;
                  }
                  node.sibling.return = node.return;
                  node = node.sibling;
                }
              };

              // An unfortunate fork of appendAllChildren because we have two different parent types.
              var appendAllChildrenToContainer = function(
                containerChildSet,
                workInProgress,
                needsVisibilityToggle,
                isHidden,
              ) {
                // We only have the top Fiber that was created but we need recurse down its
                // children to find all the terminal nodes.
                var node = workInProgress.child;
                while (node !== null) {
                  // eslint-disable-next-line no-labels
                  branches: if (node.tag === HostComponent) {
                    var instance = node.stateNode;
                    if (needsVisibilityToggle && isHidden) {
                      // This child is inside a timed out tree. Hide it.
                      var props = node.memoizedProps;
                      var type = node.type;
                      instance = cloneHiddenInstance(instance, type, props, node);
                    }
                    appendChildToContainerChildSet(containerChildSet, instance);
                  } else if (node.tag === HostText) {
                    var _instance3 = node.stateNode;
                    if (needsVisibilityToggle && isHidden) {
                      // This child is inside a timed out tree. Hide it.
                      var text = node.memoizedProps;
                      _instance3 = cloneHiddenTextInstance(_instance3, text, node);
                    }
                    appendChildToContainerChildSet(containerChildSet, _instance3);
                  } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {
                    var _instance4 = node.stateNode.instance;
                    if (needsVisibilityToggle && isHidden) {
                      // This child is inside a timed out tree. Hide it.
                      var _props2 = node.memoizedProps;
                      var _type2 = node.type;
                      _instance4 = cloneHiddenInstance(_instance4, _type2, _props2, node);
                    }
                    appendChildToContainerChildSet(containerChildSet, _instance4);
                  } else if (node.tag === HostPortal) {
                    // If we have a portal child, then we don't want to traverse
                    // down its children. Instead, we'll get insertions from each child in
                    // the portal directly.
                  } else if (node.tag === SuspenseComponent) {
                    if ((node.effectTag & Update) !== NoEffect) {
                      // Need to toggle the visibility of the primary children.
                      var newIsHidden = node.memoizedState !== null;
                      if (newIsHidden) {
                        var primaryChildParent = node.child;
                        if (primaryChildParent !== null) {
                          if (primaryChildParent.child !== null) {
                            primaryChildParent.child.return = primaryChildParent;
                            appendAllChildrenToContainer(
                              containerChildSet,
                              primaryChildParent,
                              true,
                              newIsHidden,
                            );
                          }
                          var fallbackChildParent = primaryChildParent.sibling;
                          if (fallbackChildParent !== null) {
                            fallbackChildParent.return = node;
                            node = fallbackChildParent;
                            continue;
                          }
                        }
                      }
                    }
                    if (node.child !== null) {
                      // Continue traversing like normal
                      node.child.return = node;
                      node = node.child;
                      continue;
                    }
                  } else if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                  }
                  // $FlowFixMe This is correct but Flow is confused by the labeled break.
                  node = node;
                  if (node === workInProgress) {
                    return;
                  }
                  while (node.sibling === null) {
                    if (node.return === null || node.return === workInProgress) {
                      return;
                    }
                    node = node.return;
                  }
                  node.sibling.return = node.return;
                  node = node.sibling;
                }
              };
              updateHostContainer = function(workInProgress) {
                var portalOrRoot = workInProgress.stateNode;
                var childrenUnchanged = workInProgress.firstEffect === null;
                if (childrenUnchanged) {
                  // No changes, just reuse the existing instance.
                } else {
                  var container = portalOrRoot.containerInfo;
                  var newChildSet = createContainerChildSet(container);
                  // If children might have changed, we have to add them all to the set.
                  appendAllChildrenToContainer(newChildSet, workInProgress, false, false);
                  portalOrRoot.pendingChildren = newChildSet;
                  // Schedule an update on the container to swap out the container.
                  markUpdate(workInProgress);
                  finalizeContainerChildren(container, newChildSet);
                }
              };
              updateHostComponent$1 = function(
                current,
                workInProgress,
                type,
                newProps,
                rootContainerInstance,
              ) {
                var currentInstance = current.stateNode;
                var oldProps = current.memoizedProps;
                // If there are no effects associated with this node, then none of our children had any updates.
                // This guarantees that we can reuse all of them.
                var childrenUnchanged = workInProgress.firstEffect === null;
                if (childrenUnchanged && oldProps === newProps) {
                  // No changes, just reuse the existing instance.
                  // Note that this might release a previous clone.
                  workInProgress.stateNode = currentInstance;
                  return;
                }
                var recyclableInstance = workInProgress.stateNode;
                var currentHostContext = getHostContext();
                var updatePayload = null;
                if (oldProps !== newProps) {
                  updatePayload = prepareUpdate(
                    recyclableInstance,
                    type,
                    oldProps,
                    newProps,
                    rootContainerInstance,
                    currentHostContext,
                  );
                }
                if (childrenUnchanged && updatePayload === null) {
                  // No changes, just reuse the existing instance.
                  // Note that this might release a previous clone.
                  workInProgress.stateNode = currentInstance;
                  return;
                }
                var newInstance = cloneInstance(
                  currentInstance,
                  updatePayload,
                  type,
                  oldProps,
                  newProps,
                  workInProgress,
                  childrenUnchanged,
                  recyclableInstance,
                );
                if (
                  finalizeInitialChildren(
                    newInstance,
                    type,
                    newProps,
                    rootContainerInstance,
                    currentHostContext,
                  )
                ) {
                  markUpdate(workInProgress);
                }
                workInProgress.stateNode = newInstance;
                if (childrenUnchanged) {
                  // If there are no other effects in this tree, we need to flag this node as having one.
                  // Even though we're not going to use it for anything.
                  // Otherwise parents won't know that there are new children to propagate upwards.
                  markUpdate(workInProgress);
                } else {
                  // If children might have changed, we have to add them all to the set.
                  appendAllChildren(newInstance, workInProgress, false, false);
                }
              };
              updateHostText$1 = function(current, workInProgress, oldText, newText) {
                if (oldText !== newText) {
                  // If the text content differs, we'll create a new text instance for it.
                  var rootContainerInstance = getRootHostContainer();
                  var currentHostContext = getHostContext();
                  workInProgress.stateNode = createTextInstance(
                    newText,
                    rootContainerInstance,
                    currentHostContext,
                    workInProgress,
                  );
                  // We'll have to mark it as having an effect, even though we won't use the effect for anything.
                  // This lets the parents know that at least one of their children has changed.
                  markUpdate(workInProgress);
                }
              };
            } else {
              // No host operations
              updateHostContainer = function(workInProgress) {
                // Noop
              };
              updateHostComponent$1 = function(
                current,
                workInProgress,
                type,
                newProps,
                rootContainerInstance,
              ) {
                // Noop
              };
              updateHostText$1 = function(current, workInProgress, oldText, newText) {
                // Noop
              };
            }

            function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
              switch (renderState.tailMode) {
                case 'hidden': {
                  // Any insertions at the end of the tail list after this point
                  // should be invisible. If there are already mounted boundaries
                  // anything before them are not considered for collapsing.
                  // Therefore we need to go through the whole tail to find if
                  // there are any.
                  var tailNode = renderState.tail;
                  var lastTailNode = null;
                  while (tailNode !== null) {
                    if (tailNode.alternate !== null) {
                      lastTailNode = tailNode;
                    }
                    tailNode = tailNode.sibling;
                  }
                  // Next we're simply going to delete all insertions after the
                  // last rendered item.
                  if (lastTailNode === null) {
                    // All remaining items in the tail are insertions.
                    renderState.tail = null;
                  } else {
                    // Detach the insertion after the last node that was already
                    // inserted.
                    lastTailNode.sibling = null;
                  }
                  break;
                }
                case 'collapsed': {
                  // Any insertions at the end of the tail list after this point
                  // should be invisible. If there are already mounted boundaries
                  // anything before them are not considered for collapsing.
                  // Therefore we need to go through the whole tail to find if
                  // there are any.
                  var _tailNode = renderState.tail;
                  var _lastTailNode = null;
                  while (_tailNode !== null) {
                    if (_tailNode.alternate !== null) {
                      _lastTailNode = _tailNode;
                    }
                    _tailNode = _tailNode.sibling;
                  }
                  // Next we're simply going to delete all insertions after the
                  // last rendered item.
                  if (_lastTailNode === null) {
                    // All remaining items in the tail are insertions.
                    if (!hasRenderedATailFallback && renderState.tail !== null) {
                      // We suspended during the head. We want to show at least one
                      // row at the tail. So we'll keep on and cut off the rest.
                      renderState.tail.sibling = null;
                    } else {
                      renderState.tail = null;
                    }
                  } else {
                    // Detach the insertion after the last node that was already
                    // inserted.
                    _lastTailNode.sibling = null;
                  }
                  break;
                }
              }
            }

            function completeWork(current, workInProgress, renderExpirationTime) {
              var newProps = workInProgress.pendingProps;

              switch (workInProgress.tag) {
                case IndeterminateComponent:
                  break;
                case LazyComponent:
                  break;
                case SimpleMemoComponent:
                case FunctionComponent:
                  break;
                case ClassComponent: {
                  var Component = workInProgress.type;
                  if (isContextProvider(Component)) {
                    popContext(workInProgress);
                  }
                  break;
                }
                case HostRoot: {
                  popHostContainer(workInProgress);
                  popTopLevelContextObject(workInProgress);
                  var fiberRoot = workInProgress.stateNode;
                  if (fiberRoot.pendingContext) {
                    fiberRoot.context = fiberRoot.pendingContext;
                    fiberRoot.pendingContext = null;
                  }
                  if (current === null || current.child === null) {
                    // If we hydrated, pop so that we can delete any remaining children
                    // that weren't hydrated.
                    popHydrationState(workInProgress);
                    // This resets the hacky state to fix isMounted before committing.
                    // TODO: Delete this when we delete isMounted and findDOMNode.
                    workInProgress.effectTag &= ~Placement;
                  }
                  updateHostContainer(workInProgress);
                  break;
                }
                case HostComponent: {
                  popHostContext(workInProgress);
                  var rootContainerInstance = getRootHostContainer();
                  var type = workInProgress.type;
                  if (current !== null && workInProgress.stateNode != null) {
                    updateHostComponent$1(
                      current,
                      workInProgress,
                      type,
                      newProps,
                      rootContainerInstance,
                    );

                    if (enableFlareAPI) {
                      var prevListeners = current.memoizedProps.listeners;
                      var nextListeners = newProps.listeners;
                      var instance = workInProgress.stateNode;
                      if (prevListeners !== nextListeners) {
                        updateEventListeners(
                          nextListeners,
                          instance,
                          rootContainerInstance,
                          workInProgress,
                        );
                      }
                    }

                    if (current.ref !== workInProgress.ref) {
                      markRef$1(workInProgress);
                    }
                  } else {
                    if (!newProps) {
                      (function() {
                        if (!(workInProgress.stateNode !== null)) {
                          {
                            throw ReactError(
                              Error(
                                'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.',
                              ),
                            );
                          }
                        }
                      })();
                      // This can happen when we abort work.
                      break;
                    }

                    var currentHostContext = getHostContext();
                    // TODO: Move createInstance to beginWork and keep it on a context
                    // "stack" as the parent. Then append children as we go in beginWork
                    // or completeWork depending on we want to add then top->down or
                    // bottom->up. Top->down is faster in IE11.
                    var wasHydrated = popHydrationState(workInProgress);
                    if (wasHydrated) {
                      // TODO: Move this and createInstance step into the beginPhase
                      // to consolidate.
                      if (
                        prepareToHydrateHostInstance(
                          workInProgress,
                          rootContainerInstance,
                          currentHostContext,
                        )
                      ) {
                        // If changes to the hydrated node needs to be applied at the
                        // commit-phase we mark this as such.
                        markUpdate(workInProgress);
                      }
                    } else {
                      var _instance5 = createInstance(
                        type,
                        newProps,
                        rootContainerInstance,
                        currentHostContext,
                        workInProgress,
                      );

                      appendAllChildren(_instance5, workInProgress, false, false);

                      if (enableFlareAPI) {
                        var listeners = newProps.listeners;
                        if (listeners != null) {
                          updateEventListeners(
                            listeners,
                            _instance5,
                            rootContainerInstance,
                            workInProgress,
                          );
                        }
                      }

                      // Certain renderers require commit-time effects for initial mount.
                      // (eg DOM renderer supports auto-focus for certain elements).
                      // Make sure such renderers get scheduled for later work.
                      if (
                        finalizeInitialChildren(
                          _instance5,
                          type,
                          newProps,
                          rootContainerInstance,
                          currentHostContext,
                        )
                      ) {
                        markUpdate(workInProgress);
                      }
                      workInProgress.stateNode = _instance5;
                    }

                    if (workInProgress.ref !== null) {
                      // If there is a ref on a host node we need to schedule a callback
                      markRef$1(workInProgress);
                    }
                  }
                  break;
                }
                case HostText: {
                  var newText = newProps;
                  if (current && workInProgress.stateNode != null) {
                    var oldText = current.memoizedProps;
                    // If we have an alternate, that means this is an update and we need
                    // to schedule a side-effect to do the updates.
                    updateHostText$1(current, workInProgress, oldText, newText);
                  } else {
                    if (typeof newText !== 'string') {
                      (function() {
                        if (!(workInProgress.stateNode !== null)) {
                          {
                            throw ReactError(
                              Error(
                                'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.',
                              ),
                            );
                          }
                        }
                      })();
                      // This can happen when we abort work.
                    }
                    var _rootContainerInstance = getRootHostContainer();
                    var _currentHostContext = getHostContext();
                    var _wasHydrated = popHydrationState(workInProgress);
                    if (_wasHydrated) {
                      if (prepareToHydrateHostTextInstance(workInProgress)) {
                        markUpdate(workInProgress);
                      }
                    } else {
                      workInProgress.stateNode = createTextInstance(
                        newText,
                        _rootContainerInstance,
                        _currentHostContext,
                        workInProgress,
                      );
                    }
                  }
                  break;
                }
                case ForwardRef:
                  break;
                case SuspenseComponent: {
                  popSuspenseContext(workInProgress);
                  var nextState = workInProgress.memoizedState;
                  if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
                    // Something suspended. Re-render with the fallback children.
                    workInProgress.expirationTime = renderExpirationTime;
                    // Do not reset the effect list.
                    return workInProgress;
                  }

                  var nextDidTimeout = nextState !== null;
                  var prevDidTimeout = false;
                  if (current === null) {
                    // In cases where we didn't find a suitable hydration boundary we never
                    // downgraded this to a DehydratedSuspenseComponent, but we still need to
                    // pop the hydration state since we might be inside the insertion tree.
                    popHydrationState(workInProgress);
                  } else {
                    var prevState = current.memoizedState;
                    prevDidTimeout = prevState !== null;
                    if (!nextDidTimeout && prevState !== null) {
                      // We just switched from the fallback to the normal children.
                      // Delete the fallback.
                      // TODO: Would it be better to store the fallback fragment on
                      var currentFallbackChild = current.child.sibling;
                      if (currentFallbackChild !== null) {
                        // Deletions go at the beginning of the return fiber's effect list
                        var first = workInProgress.firstEffect;
                        if (first !== null) {
                          workInProgress.firstEffect = currentFallbackChild;
                          currentFallbackChild.nextEffect = first;
                        } else {
                          workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
                          currentFallbackChild.nextEffect = null;
                        }
                        currentFallbackChild.effectTag = Deletion;
                      }
                    }
                  }

                  if (nextDidTimeout && !prevDidTimeout) {
                    // If this subtreee is running in batched mode we can suspend,
                    // otherwise we won't suspend.
                    // TODO: This will still suspend a synchronous tree if anything
                    // in the concurrent tree already suspended during this render.
                    // This is a known bug.
                    if ((workInProgress.mode & BatchedMode) !== NoMode) {
                      // TODO: Move this back to throwException because this is too late
                      // if this is a large tree which is common for initial loads. We
                      // don't know if we should restart a render or not until we get
                      // this marker, and this is too late.
                      // If this render already had a ping or lower pri updates,
                      // and this is the first time we know we're going to suspend we
                      // should be able to immediately restart from within throwException.
                      var hasInvisibleChildContext =
                        current === null &&
                        workInProgress.memoizedProps.unstable_avoidThisFallback !== true;
                      if (
                        hasInvisibleChildContext ||
                        hasSuspenseContext(
                          suspenseStackCursor.current,
                          InvisibleParentSuspenseContext,
                        )
                      ) {
                        // If this was in an invisible tree or a new render, then showing
                        // this boundary is ok.
                        renderDidSuspend();
                      } else {
                        // Otherwise, we're going to have to hide content so we should
                        // suspend for longer if possible.
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }

                  if (supportsPersistence) {
                    // TODO: Only schedule updates if not prevDidTimeout.
                    if (nextDidTimeout) {
                      // If this boundary just timed out, schedule an effect to attach a
                      // retry listener to the proimse. This flag is also used to hide the
                      // primary children.
                      workInProgress.effectTag |= Update;
                    }
                  }
                  if (supportsMutation) {
                    // TODO: Only schedule updates if these values are non equal, i.e. it changed.
                    if (nextDidTimeout || prevDidTimeout) {
                      // If this boundary just timed out, schedule an effect to attach a
                      // retry listener to the proimse. This flag is also used to hide the
                      // primary children. In mutation mode, we also need the flag to
                      // *unhide* children that were previously hidden, so check if the
                      // is currently timed out, too.
                      workInProgress.effectTag |= Update;
                    }
                  }
                  if (
                    enableSuspenseCallback &&
                    workInProgress.updateQueue !== null &&
                    workInProgress.memoizedProps.suspenseCallback != null
                  ) {
                    // Always notify the callback
                    workInProgress.effectTag |= Update;
                  }
                  break;
                }
                case Fragment:
                  break;
                case Mode:
                  break;
                case Profiler:
                  break;
                case HostPortal:
                  popHostContainer(workInProgress);
                  updateHostContainer(workInProgress);
                  break;
                case ContextProvider:
                  // Pop provider fiber
                  popProvider(workInProgress);
                  break;
                case ContextConsumer:
                  break;
                case MemoComponent:
                  break;
                case IncompleteClassComponent: {
                  // Same as class component case. I put it down here so that the tags are
                  // sequential to ensure this switch is compiled to a jump table.
                  var _Component = workInProgress.type;
                  if (isContextProvider(_Component)) {
                    popContext(workInProgress);
                  }
                  break;
                }
                case DehydratedSuspenseComponent: {
                  if (enableSuspenseServerRenderer) {
                    popSuspenseContext(workInProgress);
                    if (current === null) {
                      var _wasHydrated2 = popHydrationState(workInProgress);
                      (function() {
                        if (!_wasHydrated2) {
                          {
                            throw ReactError(
                              Error(
                                'A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.',
                              ),
                            );
                          }
                        }
                      })();
                      if (enableSchedulerTracing) {
                        markSpawnedWork(Never);
                      }
                      skipPastDehydratedSuspenseInstance(workInProgress);
                    } else if ((workInProgress.effectTag & DidCapture) === NoEffect) {
                      // This boundary did not suspend so it's now hydrated.
                      // To handle any future suspense cases, we're going to now upgrade it
                      // to a Suspense component. We detach it from the existing current fiber.
                      current.alternate = null;
                      workInProgress.alternate = null;
                      workInProgress.tag = SuspenseComponent;
                      workInProgress.memoizedState = null;
                      workInProgress.stateNode = null;
                    }
                  }
                  break;
                }
                case SuspenseListComponent: {
                  popSuspenseContext(workInProgress);

                  var renderState = workInProgress.memoizedState;

                  if (renderState === null) {
                    // We're running in the default, "independent" mode. We don't do anything
                    // in this mode.
                    break;
                  }

                  var didSuspendAlready = (workInProgress.effectTag & DidCapture) !== NoEffect;

                  var renderedTail = renderState.rendering;
                  if (renderedTail === null) {
                    // We just rendered the head.
                    if (!didSuspendAlready) {
                      // This is the first pass. We need to figure out if anything is still
                      // suspended in the rendered set.

                      // If new content unsuspended, but there's still some content that
                      // didn't. Then we need to do a second pass that forces everything
                      // to keep showing their fallbacks.

                      // We might be suspended if something in this render pass suspended, or
                      // something in the previous committed pass suspended. Otherwise,
                      // there's no chance so we can skip the expensive call to
                      // findFirstSuspended.
                      var cannotBeSuspended =
                        renderHasNotSuspendedYet() &&
                        (current === null || (current.effectTag & DidCapture) === NoEffect);
                      if (!cannotBeSuspended) {
                        var row = workInProgress.child;
                        while (row !== null) {
                          var suspended = findFirstSuspended(row);
                          if (suspended !== null) {
                            didSuspendAlready = true;
                            workInProgress.effectTag |= DidCapture;
                            cutOffTailIfNeeded(renderState, false);

                            // If this is a newly suspended tree, it might not get committed as
                            // part of the second pass. In that case nothing will subscribe to
                            // its thennables. Instead, we'll transfer its thennables to the
                            // SuspenseList so that it can retry if they resolve.
                            // There might be multiple of these in the list but since we're
                            // going to wait for all of them anyway, it doesn't really matter
                            // which ones gets to ping. In theory we could get clever and keep
                            // track of how many dependencies remain but it gets tricky because
                            // in the meantime, we can add/remove/change items and dependencies.
                            // We might bail out of the loop before finding any but that
                            // doesn't matter since that means that the other boundaries that
                            // we did find already has their listeners attached.
                            var newThennables = suspended.updateQueue;
                            if (newThennables !== null) {
                              workInProgress.updateQueue = newThennables;
                              workInProgress.effectTag |= Update;
                            }

                            // Rerender the whole list, but this time, we'll force fallbacks
                            // to stay in place.
                            // Reset the effect list before doing the second pass since that's now invalid.
                            workInProgress.firstEffect = workInProgress.lastEffect = null;
                            // Reset the child fibers to their original state.
                            resetChildFibers(workInProgress, renderExpirationTime);

                            // Set up the Suspense Context to force suspense and immediately
                            // rerender the children.
                            pushSuspenseContext(
                              workInProgress,
                              setShallowSuspenseContext(
                                suspenseStackCursor.current,
                                ForceSuspenseFallback,
                              ),
                            );
                            return workInProgress.child;
                          }
                          row = row.sibling;
                        }
                      }
                    } else {
                      cutOffTailIfNeeded(renderState, false);
                    }
                    // Next we're going to render the tail.
                  } else {
                    // Append the rendered row to the child list.
                    if (!didSuspendAlready) {
                      var _suspended = findFirstSuspended(renderedTail);
                      if (_suspended !== null) {
                        workInProgress.effectTag |= DidCapture;
                        didSuspendAlready = true;
                        cutOffTailIfNeeded(renderState, true);
                        // This might have been modified.
                        if (renderState.tail === null && renderState.tailMode === 'hidden') {
                          // We need to delete the row we just rendered.
                          // Ensure we transfer the update queue to the parent.
                          var _newThennables = _suspended.updateQueue;
                          if (_newThennables !== null) {
                            workInProgress.updateQueue = _newThennables;
                            workInProgress.effectTag |= Update;
                          }
                          // Reset the effect list to what it w as before we rendered this
                          // child. The nested children have already appended themselves.
                          var lastEffect = (workInProgress.lastEffect = renderState.lastEffect);
                          // Remove any effects that were appended after this point.
                          if (lastEffect !== null) {
                            lastEffect.nextEffect = null;
                          }
                          // We're done.
                          return null;
                        }
                      } else if (
                        now() > renderState.tailExpiration &&
                        renderExpirationTime > Never
                      ) {
                        // We have now passed our CPU deadline and we'll just give up further
                        // attempts to render the main content and only render fallbacks.
                        // The assumption is that this is usually faster.
                        workInProgress.effectTag |= DidCapture;
                        didSuspendAlready = true;

                        cutOffTailIfNeeded(renderState, false);

                        // Since nothing actually suspended, there will nothing to ping this
                        // to get it started back up to attempt the next item. If we can show
                        // them, then they really have the same priority as this render.
                        // So we'll pick it back up the very next render pass once we've had
                        // an opportunity to yield for paint.

                        var nextPriority = renderExpirationTime - 1;
                        workInProgress.expirationTime = workInProgress.childExpirationTime = nextPriority;
                        if (enableSchedulerTracing) {
                          markSpawnedWork(nextPriority);
                        }
                      }
                    }
                    if (renderState.isBackwards) {
                      // The effect list of the backwards tail will have been added
                      // to the end. This breaks the guarantee that life-cycles fire in
                      // sibling order but that isn't a strong guarantee promised by React.
                      // Especially since these might also just pop in during future commits.
                      // Append to the beginning of the list.
                      renderedTail.sibling = workInProgress.child;
                      workInProgress.child = renderedTail;
                    } else {
                      var previousSibling = renderState.last;
                      if (previousSibling !== null) {
                        previousSibling.sibling = renderedTail;
                      } else {
                        workInProgress.child = renderedTail;
                      }
                      renderState.last = renderedTail;
                    }
                  }

                  if (renderState.tail !== null) {
                    // We still have tail rows to render.
                    if (renderState.tailExpiration === 0) {
                      // Heuristic for how long we're willing to spend rendering rows
                      // until we just give up and show what we have so far.
                      var TAIL_EXPIRATION_TIMEOUT_MS = 500;
                      renderState.tailExpiration = now() + TAIL_EXPIRATION_TIMEOUT_MS;
                    }
                    // Pop a row.
                    var next = renderState.tail;
                    renderState.rendering = next;
                    renderState.tail = next.sibling;
                    renderState.lastEffect = workInProgress.lastEffect;
                    next.sibling = null;

                    // Restore the context.
                    // TODO: We can probably just avoid popping it instead and only
                    // setting it the first time we go from not suspended to suspended.
                    var suspenseContext = suspenseStackCursor.current;
                    if (didSuspendAlready) {
                      suspenseContext = setShallowSuspenseContext(
                        suspenseContext,
                        ForceSuspenseFallback,
                      );
                    } else {
                      suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                    }
                    pushSuspenseContext(workInProgress, suspenseContext);
                    // Do a pass over the next row.
                    return next;
                  }
                  break;
                }
                case FundamentalComponent: {
                  if (enableFundamentalAPI) {
                    var fundamentalImpl = workInProgress.type.impl;
                    var fundamentalInstance = workInProgress.stateNode;

                    if (fundamentalInstance === null) {
                      var getInitialState = fundamentalImpl.getInitialState;
                      var fundamentalState = void 0;
                      if (getInitialState !== undefined) {
                        fundamentalState = getInitialState(newProps);
                      }
                      fundamentalInstance = workInProgress.stateNode = createFundamentalStateInstance(
                        workInProgress,
                        newProps,
                        fundamentalImpl,
                        fundamentalState || {},
                      );
                      var _instance6 = getFundamentalComponentInstance(fundamentalInstance);
                      fundamentalInstance.instance = _instance6;
                      if (fundamentalImpl.reconcileChildren === false) {
                        return null;
                      }
                      appendAllChildren(_instance6, workInProgress, false, false);
                      mountFundamentalComponent(fundamentalInstance);
                    } else {
                      // We fire update in commit phase
                      var prevProps = fundamentalInstance.props;
                      fundamentalInstance.prevProps = prevProps;
                      fundamentalInstance.props = newProps;
                      fundamentalInstance.currentFiber = workInProgress;
                      if (supportsPersistence) {
                        var _instance7 = cloneFundamentalInstance(fundamentalInstance);
                        fundamentalInstance.instance = _instance7;
                        appendAllChildren(_instance7, workInProgress, false, false);
                      }
                      var shouldUpdate = shouldUpdateFundamentalComponent(fundamentalInstance);
                      if (shouldUpdate) {
                        markUpdate(workInProgress);
                      }
                    }
                  }
                  break;
                }
                default:
                  (function() {
                    {
                      {
                        throw ReactError(
                          Error(
                            'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.',
                          ),
                        );
                      }
                    }
                  })();
              }

              return null;
            }

            function mountEventResponder$1(
              responder,
              responderProps,
              instance,
              rootContainerInstance,
              fiber,
              respondersMap,
            ) {
              var responderState = emptyObject;
              var getInitialState = responder.getInitialState;
              if (getInitialState !== null) {
                responderState = getInitialState(responderProps);
              }
              var responderInstance = createResponderInstance(
                responder,
                responderProps,
                responderState,
                instance,
                fiber,
              );
              mountResponderInstance(
                responder,
                responderInstance,
                responderProps,
                responderState,
                instance,
                rootContainerInstance,
              );
              respondersMap.set(responder, responderInstance);
            }

            function updateEventListener(
              listener,
              fiber,
              visistedResponders,
              respondersMap,
              instance,
              rootContainerInstance,
            ) {
              var responder = void 0;
              var props = void 0;

              if (listener) {
                responder = listener.responder;
                props = listener.props;
              }
              (function() {
                if (!(responder && responder.$$typeof === REACT_RESPONDER_TYPE)) {
                  {
                    throw ReactError(
                      Error(
                        'An invalid value was used as an event listener. Expect one or many event listeners created via React.unstable_useResponer().',
                      ),
                    );
                  }
                }
              })();
              var listenerProps = props;
              if (visistedResponders.has(responder)) {
                // show warning
                {
                  warning$1(
                    false,
                    'Duplicate event responder "%s" found in event listeners. ' +
                      'Event listeners passed to elements cannot use the same event responder more than once.',
                    responder.displayName,
                  );
                }
                return;
              }
              visistedResponders.add(responder);
              var responderInstance = respondersMap.get(responder);

              if (responderInstance === undefined) {
                // Mount
                mountEventResponder$1(
                  responder,
                  listenerProps,
                  instance,
                  rootContainerInstance,
                  fiber,
                  respondersMap,
                );
              } else {
                // Update
                responderInstance.props = listenerProps;
                responderInstance.fiber = fiber;
              }
            }

            function updateEventListeners(listeners, instance, rootContainerInstance, fiber) {
              var visistedResponders = new Set();
              var dependencies = fiber.dependencies;
              if (listeners != null) {
                if (dependencies === null) {
                  dependencies = fiber.dependencies = {
                    expirationTime: NoWork,
                    firstContext: null,
                    responders: new Map(),
                  };
                }
                var respondersMap = dependencies.responders;
                if (respondersMap === null) {
                  respondersMap = new Map();
                }
                if (isArray$2(listeners)) {
                  for (var i = 0, length = listeners.length; i < length; i++) {
                    var listener = listeners[i];
                    updateEventListener(
                      listener,
                      fiber,
                      visistedResponders,
                      respondersMap,
                      instance,
                      rootContainerInstance,
                    );
                  }
                } else {
                  updateEventListener(
                    listeners,
                    fiber,
                    visistedResponders,
                    respondersMap,
                    instance,
                    rootContainerInstance,
                  );
                }
              }
              if (dependencies !== null) {
                var _respondersMap = dependencies.responders;
                if (_respondersMap !== null) {
                  // Unmount
                  var mountedResponders = Array.from(_respondersMap.keys());
                  for (var _i = 0, _length = mountedResponders.length; _i < _length; _i++) {
                    var mountedResponder = mountedResponders[_i];
                    if (!visistedResponders.has(mountedResponder)) {
                      var responderInstance = _respondersMap.get(mountedResponder);
                      unmountResponderInstance(responderInstance);
                      _respondersMap.delete(mountedResponder);
                    }
                  }
                }
              }
            }

            function unwindWork(workInProgress, renderExpirationTime) {
              switch (workInProgress.tag) {
                case ClassComponent: {
                  var Component = workInProgress.type;
                  if (isContextProvider(Component)) {
                    popContext(workInProgress);
                  }
                  var effectTag = workInProgress.effectTag;
                  if (effectTag & ShouldCapture) {
                    workInProgress.effectTag = (effectTag & ~ShouldCapture) | DidCapture;
                    return workInProgress;
                  }
                  return null;
                }
                case HostRoot: {
                  popHostContainer(workInProgress);
                  popTopLevelContextObject(workInProgress);
                  var _effectTag = workInProgress.effectTag;
                  (function() {
                    if (!((_effectTag & DidCapture) === NoEffect)) {
                      {
                        throw ReactError(
                          Error(
                            'The root failed to unmount after an error. This is likely a bug in React. Please file an issue.',
                          ),
                        );
                      }
                    }
                  })();
                  workInProgress.effectTag = (_effectTag & ~ShouldCapture) | DidCapture;
                  return workInProgress;
                }
                case HostComponent: {
                  // TODO: popHydrationState
                  popHostContext(workInProgress);
                  return null;
                }
                case SuspenseComponent: {
                  popSuspenseContext(workInProgress);
                  var _effectTag2 = workInProgress.effectTag;
                  if (_effectTag2 & ShouldCapture) {
                    workInProgress.effectTag = (_effectTag2 & ~ShouldCapture) | DidCapture;
                    // Captured a suspense effect. Re-render the boundary.
                    return workInProgress;
                  }
                  return null;
                }
                case DehydratedSuspenseComponent: {
                  if (enableSuspenseServerRenderer) {
                    // TODO: popHydrationState
                    popSuspenseContext(workInProgress);
                    var _effectTag3 = workInProgress.effectTag;
                    if (_effectTag3 & ShouldCapture) {
                      workInProgress.effectTag = (_effectTag3 & ~ShouldCapture) | DidCapture;
                      // Captured a suspense effect. Re-render the boundary.
                      return workInProgress;
                    }
                  }
                  return null;
                }
                case SuspenseListComponent: {
                  popSuspenseContext(workInProgress);
                  // SuspenseList doesn't actually catch anything. It should've been
                  // caught by a nested boundary. If not, it should bubble through.
                  return null;
                }
                case HostPortal:
                  popHostContainer(workInProgress);
                  return null;
                case ContextProvider:
                  popProvider(workInProgress);
                  return null;
                default:
                  return null;
              }
            }

            function unwindInterruptedWork(interruptedWork) {
              switch (interruptedWork.tag) {
                case ClassComponent: {
                  var childContextTypes = interruptedWork.type.childContextTypes;
                  if (childContextTypes !== null && childContextTypes !== undefined) {
                    popContext(interruptedWork);
                  }
                  break;
                }
                case HostRoot: {
                  popHostContainer(interruptedWork);
                  popTopLevelContextObject(interruptedWork);
                  break;
                }
                case HostComponent: {
                  popHostContext(interruptedWork);
                  break;
                }
                case HostPortal:
                  popHostContainer(interruptedWork);
                  break;
                case SuspenseComponent:
                  popSuspenseContext(interruptedWork);
                  break;
                case DehydratedSuspenseComponent:
                  if (enableSuspenseServerRenderer) {
                    // TODO: popHydrationState
                    popSuspenseContext(interruptedWork);
                  }
                  break;
                case SuspenseListComponent:
                  popSuspenseContext(interruptedWork);
                  break;
                case ContextProvider:
                  popProvider(interruptedWork);
                  break;
                default:
                  break;
              }
            }

            function createCapturedValue(value, source) {
              // If the value is an error, call this function immediately after it is thrown
              // so the stack is accurate.
              return {
                value: value,
                source: source,
                stack: getStackByFiberInDevAndProd(source),
              };
            }

            // This module is forked in different environments.
            // By default, return `true` to log errors to the console.
            // Forks can return `false` if this isn't desirable.
            function showErrorDialog(capturedError) {
              return true;
            }

            function logCapturedError(capturedError) {
              var logError = showErrorDialog(capturedError);

              // Allow injected showErrorDialog() to prevent default console.error logging.
              // This enables renderers like ReactNative to better manage redbox behavior.
              if (logError === false) {
                return;
              }

              var error = capturedError.error;
              {
                var componentName = capturedError.componentName,
                  componentStack = capturedError.componentStack,
                  errorBoundaryName = capturedError.errorBoundaryName,
                  errorBoundaryFound = capturedError.errorBoundaryFound,
                  willRetry = capturedError.willRetry;

                // Browsers support silencing uncaught errors by calling
                // `preventDefault()` in window `error` handler.
                // We record this information as an expando on the error.

                if (error != null && error._suppressLogging) {
                  if (errorBoundaryFound && willRetry) {
                    // The error is recoverable and was silenced.
                    // Ignore it and don't print the stack addendum.
                    // This is handy for testing error boundaries without noise.
                    return;
                  }
                  // The error is fatal. Since the silencing might have
                  // been accidental, we'll surface it anyway.
                  // However, the browser would have silenced the original error
                  // so we'll print it first, and then print the stack addendum.
                  console.error(error);
                  // For a more detailed description of this block, see:
                  // https://github.com/facebook/react/pull/13384
                }

                var componentNameMessage = componentName
                  ? 'The above error occurred in the <' + componentName + '> component:'
                  : 'The above error occurred in one of your React components:';

                var errorBoundaryMessage = void 0;
                // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.
                if (errorBoundaryFound && errorBoundaryName) {
                  if (willRetry) {
                    errorBoundaryMessage =
                      'React will try to recreate this component tree from scratch ' +
                      ('using the error boundary you provided, ' + errorBoundaryName + '.');
                  } else {
                    errorBoundaryMessage =
                      'This error was initially handled by the error boundary ' +
                      errorBoundaryName +
                      '.\n' +
                      'Recreating the tree from scratch failed so React will unmount the tree.';
                  }
                } else {
                  errorBoundaryMessage =
                    'Consider adding an error boundary to your tree to customize error handling behavior.\n' +
                    'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
                }
                var combinedMessage =
                  '' + componentNameMessage + componentStack + '\n\n' + ('' + errorBoundaryMessage);

                // In development, we provide our own message with just the component stack.
                // We don't include the original error message and JS stack because the browser
                // has already printed it. Even if the application swallows the error, it is still
                // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
                console.error(combinedMessage);
              }
            }

            var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
            {
              didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
            }

            var PossiblyWeakSet$1 = typeof WeakSet === 'function' ? WeakSet : Set;

            function logError(boundary, errorInfo) {
              var source = errorInfo.source;
              var stack = errorInfo.stack;
              if (stack === null && source !== null) {
                stack = getStackByFiberInDevAndProd(source);
              }

              var capturedError = {
                componentName: source !== null ? getComponentName(source.type) : null,
                componentStack: stack !== null ? stack : '',
                error: errorInfo.value,
                errorBoundary: null,
                errorBoundaryName: null,
                errorBoundaryFound: false,
                willRetry: false,
              };

              if (boundary !== null && boundary.tag === ClassComponent) {
                capturedError.errorBoundary = boundary.stateNode;
                capturedError.errorBoundaryName = getComponentName(boundary.type);
                capturedError.errorBoundaryFound = true;
                capturedError.willRetry = true;
              }

              try {
                logCapturedError(capturedError);
              } catch (e) {
                // This method must not throw, or React internal state will get messed up.
                // If console.error is overridden, or logCapturedError() shows a dialog that throws,
                // we want to report this error outside of the normal stack as a last resort.
                // https://github.com/facebook/react/issues/13188
                setTimeout(function() {
                  throw e;
                });
              }
            }

            var callComponentWillUnmountWithTimer = function(current$$1, instance) {
              startPhaseTimer(current$$1, 'componentWillUnmount');
              instance.props = current$$1.memoizedProps;
              instance.state = current$$1.memoizedState;
              instance.componentWillUnmount();
              stopPhaseTimer();
            };

            // Capture errors so they don't interrupt unmounting.
            function safelyCallComponentWillUnmount(current$$1, instance) {
              {
                invokeGuardedCallback(
                  null,
                  callComponentWillUnmountWithTimer,
                  null,
                  current$$1,
                  instance,
                );
                if (hasCaughtError()) {
                  var unmountError = clearCaughtError();
                  captureCommitPhaseError(current$$1, unmountError);
                }
              }
            }

            function safelyDetachRef(current$$1) {
              var ref = current$$1.ref;
              if (ref !== null) {
                if (typeof ref === 'function') {
                  {
                    invokeGuardedCallback(null, ref, null, null);
                    if (hasCaughtError()) {
                      var refError = clearCaughtError();
                      captureCommitPhaseError(current$$1, refError);
                    }
                  }
                } else {
                  ref.current = null;
                }
              }
            }

            function safelyCallDestroy(current$$1, destroy) {
              {
                invokeGuardedCallback(null, destroy, null);
                if (hasCaughtError()) {
                  var error = clearCaughtError();
                  captureCommitPhaseError(current$$1, error);
                }
              }
            }

            function commitBeforeMutationLifeCycles(current$$1, finishedWork) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  commitHookEffectList(UnmountSnapshot, NoEffect$1, finishedWork);
                  return;
                }
                case ClassComponent: {
                  if (finishedWork.effectTag & Snapshot) {
                    if (current$$1 !== null) {
                      var prevProps = current$$1.memoizedProps;
                      var prevState = current$$1.memoizedState;
                      startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
                      var instance = finishedWork.stateNode;
                      // We could update instance props and state here,
                      // but instead we rely on them being set during last render.
                      // TODO: revisit this when we implement resuming.
                      {
                        if (
                          finishedWork.type === finishedWork.elementType &&
                          !didWarnAboutReassigningProps
                        ) {
                          !(instance.props === finishedWork.memoizedProps)
                            ? warning$1(
                                false,
                                'Expected %s props to match memoized props before ' +
                                  'getSnapshotBeforeUpdate. ' +
                                  'This might either be because of a bug in React, or because ' +
                                  'a component reassigns its own `this.props`. ' +
                                  'Please file an issue.',
                                getComponentName(finishedWork.type) || 'instance',
                              )
                            : void 0;
                          !(instance.state === finishedWork.memoizedState)
                            ? warning$1(
                                false,
                                'Expected %s state to match memoized state before ' +
                                  'getSnapshotBeforeUpdate. ' +
                                  'This might either be because of a bug in React, or because ' +
                                  'a component reassigns its own `this.props`. ' +
                                  'Please file an issue.',
                                getComponentName(finishedWork.type) || 'instance',
                              )
                            : void 0;
                        }
                      }
                      var snapshot = instance.getSnapshotBeforeUpdate(
                        finishedWork.elementType === finishedWork.type
                          ? prevProps
                          : resolveDefaultProps(finishedWork.type, prevProps),
                        prevState,
                      );
                      {
                        var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                        if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                          didWarnSet.add(finishedWork.type);
                          warningWithoutStack$1(
                            false,
                            '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' +
                              'must be returned. You have returned undefined.',
                            getComponentName(finishedWork.type),
                          );
                        }
                      }
                      instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                      stopPhaseTimer();
                    }
                  }
                  return;
                }
                case HostRoot:
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  // Nothing to do for these component types
                  return;
                default: {
                  (function() {
                    {
                      {
                        throw ReactError(
                          Error(
                            'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.',
                          ),
                        );
                      }
                    }
                  })();
                }
              }
            }

            function commitHookEffectList(unmountTag, mountTag, finishedWork) {
              var updateQueue = finishedWork.updateQueue;
              var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
              if (lastEffect !== null) {
                var firstEffect = lastEffect.next;
                var effect = firstEffect;
                do {
                  if ((effect.tag & unmountTag) !== NoEffect$1) {
                    // Unmount
                    var destroy = effect.destroy;
                    effect.destroy = undefined;
                    if (destroy !== undefined) {
                      destroy();
                    }
                  }
                  if ((effect.tag & mountTag) !== NoEffect$1) {
                    // Mount
                    var create = effect.create;
                    effect.destroy = create();

                    {
                      var _destroy = effect.destroy;
                      if (_destroy !== undefined && typeof _destroy !== 'function') {
                        var addendum = void 0;
                        if (_destroy === null) {
                          addendum =
                            ' You returned null. If your effect does not require clean ' +
                            'up, return undefined (or nothing).';
                        } else if (typeof _destroy.then === 'function') {
                          addendum =
                            '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' +
                            'Instead, write the async function inside your effect ' +
                            'and call it immediately:\n\n' +
                            'useEffect(() => {\n' +
                            '  async function fetchData() {\n' +
                            '    // You can await here\n' +
                            '    const response = await MyAPI.getData(someId);\n' +
                            '    // ...\n' +
                            '  }\n' +
                            '  fetchData();\n' +
                            "}, [someId]); // Or [] if effect doesn't need props or state\n\n" +
                            'Learn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching';
                        } else {
                          addendum = ' You returned: ' + _destroy;
                        }
                        warningWithoutStack$1(
                          false,
                          'An effect function must not return anything besides a function, ' +
                            'which is used for clean-up.%s%s',
                          addendum,
                          getStackByFiberInDevAndProd(finishedWork),
                        );
                      }
                    }
                  }
                  effect = effect.next;
                } while (effect !== firstEffect);
              }
            }

            function commitPassiveHookEffects(finishedWork) {
              if ((finishedWork.effectTag & Passive) !== NoEffect) {
                switch (finishedWork.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    commitHookEffectList(UnmountPassive, NoEffect$1, finishedWork);
                    commitHookEffectList(NoEffect$1, MountPassive, finishedWork);
                    break;
                  }
                  default:
                    break;
                }
              }
            }

            function commitLifeCycles(
              finishedRoot,
              current$$1,
              finishedWork,
              committedExpirationTime,
            ) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  commitHookEffectList(UnmountLayout, MountLayout, finishedWork);
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.effectTag & Update) {
                    if (current$$1 === null) {
                      startPhaseTimer(finishedWork, 'componentDidMount');
                      // We could update instance props and state here,
                      // but instead we rely on them being set during last render.
                      // TODO: revisit this when we implement resuming.
                      {
                        if (
                          finishedWork.type === finishedWork.elementType &&
                          !didWarnAboutReassigningProps
                        ) {
                          !(instance.props === finishedWork.memoizedProps)
                            ? warning$1(
                                false,
                                'Expected %s props to match memoized props before ' +
                                  'componentDidMount. ' +
                                  'This might either be because of a bug in React, or because ' +
                                  'a component reassigns its own `this.props`. ' +
                                  'Please file an issue.',
                                getComponentName(finishedWork.type) || 'instance',
                              )
                            : void 0;
                          !(instance.state === finishedWork.memoizedState)
                            ? warning$1(
                                false,
                                'Expected %s state to match memoized state before ' +
                                  'componentDidMount. ' +
                                  'This might either be because of a bug in React, or because ' +
                                  'a component reassigns its own `this.props`. ' +
                                  'Please file an issue.',
                                getComponentName(finishedWork.type) || 'instance',
                              )
                            : void 0;
                        }
                      }
                      instance.componentDidMount();
                      stopPhaseTimer();
                    } else {
                      var prevProps =
                        finishedWork.elementType === finishedWork.type
                          ? current$$1.memoizedProps
                          : resolveDefaultProps(finishedWork.type, current$$1.memoizedProps);
                      var prevState = current$$1.memoizedState;
                      startPhaseTimer(finishedWork, 'componentDidUpdate');
                      // We could update instance props and state here,
                      // but instead we rely on them being set during last render.
                      // TODO: revisit this when we implement resuming.
                      {
                        if (
                          finishedWork.type === finishedWork.elementType &&
                          !didWarnAboutReassigningProps
                        ) {
                          !(instance.props === finishedWork.memoizedProps)
                            ? warning$1(
                                false,
                                'Expected %s props to match memoized props before ' +
                                  'componentDidUpdate. ' +
                                  'This might either be because of a bug in React, or because ' +
                                  'a component reassigns its own `this.props`. ' +
                                  'Please file an issue.',
                                getComponentName(finishedWork.type) || 'instance',
                              )
                            : void 0;
                          !(instance.state === finishedWork.memoizedState)
                            ? warning$1(
                                false,
                                'Expected %s state to match memoized state before ' +
                                  'componentDidUpdate. ' +
                                  'This might either be because of a bug in React, or because ' +
                                  'a component reassigns its own `this.props`. ' +
                                  'Please file an issue.',
                                getComponentName(finishedWork.type) || 'instance',
                              )
                            : void 0;
                        }
                      }
                      instance.componentDidUpdate(
                        prevProps,
                        prevState,
                        instance.__reactInternalSnapshotBeforeUpdate,
                      );
                      stopPhaseTimer();
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (
                        finishedWork.type === finishedWork.elementType &&
                        !didWarnAboutReassigningProps
                      ) {
                        !(instance.props === finishedWork.memoizedProps)
                          ? warning$1(
                              false,
                              'Expected %s props to match memoized props before ' +
                                'processing the update queue. ' +
                                'This might either be because of a bug in React, or because ' +
                                'a component reassigns its own `this.props`. ' +
                                'Please file an issue.',
                              getComponentName(finishedWork.type) || 'instance',
                            )
                          : void 0;
                        !(instance.state === finishedWork.memoizedState)
                          ? warning$1(
                              false,
                              'Expected %s state to match memoized state before ' +
                                'processing the update queue. ' +
                                'This might either be because of a bug in React, or because ' +
                                'a component reassigns its own `this.props`. ' +
                                'Please file an issue.',
                              getComponentName(finishedWork.type) || 'instance',
                            )
                          : void 0;
                      }
                    }
                    // We could update instance props and state here,
                    // but instead we rely on them being set during last render.
                    // TODO: revisit this when we implement resuming.
                    commitUpdateQueue(finishedWork, updateQueue, instance, committedExpirationTime);
                  }
                  return;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(
                      finishedWork,
                      _updateQueue,
                      _instance,
                      committedExpirationTime,
                    );
                  }
                  return;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;

                  // Renderers may schedule work to be done after host components are mounted
                  // (eg DOM renderer may schedule auto-focus for inputs and form controls).
                  // These effects should only be committed when components are first mounted,
                  // aka when there is no current/alternate.
                  if (current$$1 === null && finishedWork.effectTag & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props, finishedWork);
                  }

                  return;
                }
                case HostText: {
                  // We have no life-cycles associated with text.
                  return;
                }
                case HostPortal: {
                  // We have no life-cycles associated with portals.
                  return;
                }
                case Profiler: {
                  if (enableProfilerTimer) {
                    var onRender = finishedWork.memoizedProps.onRender;

                    if (typeof onRender === 'function') {
                      if (enableSchedulerTracing) {
                        onRender(
                          finishedWork.memoizedProps.id,
                          current$$1 === null ? 'mount' : 'update',
                          finishedWork.actualDuration,
                          finishedWork.treeBaseDuration,
                          finishedWork.actualStartTime,
                          getCommitTime(),
                          finishedRoot.memoizedInteractions,
                        );
                      } else {
                        onRender(
                          finishedWork.memoizedProps.id,
                          current$$1 === null ? 'mount' : 'update',
                          finishedWork.actualDuration,
                          finishedWork.treeBaseDuration,
                          finishedWork.actualStartTime,
                          getCommitTime(),
                        );
                      }
                    }
                  }
                  return;
                }
                case SuspenseComponent:
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case FundamentalComponent:
                  return;
                default: {
                  (function() {
                    {
                      {
                        throw ReactError(
                          Error(
                            'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.',
                          ),
                        );
                      }
                    }
                  })();
                }
              }
            }

            function hideOrUnhideAllChildren(finishedWork, isHidden) {
              if (supportsMutation) {
                // We only have the top Fiber that was inserted but we need to recurse down its
                var node = finishedWork;
                while (true) {
                  if (node.tag === HostComponent) {
                    var instance = node.stateNode;
                    if (isHidden) {
                      hideInstance(instance);
                    } else {
                      unhideInstance(node.stateNode, node.memoizedProps);
                    }
                  } else if (node.tag === HostText) {
                    var _instance3 = node.stateNode;
                    if (isHidden) {
                      hideTextInstance(_instance3);
                    } else {
                      unhideTextInstance(_instance3, node.memoizedProps);
                    }
                  } else if (node.tag === SuspenseComponent && node.memoizedState !== null) {
                    // Found a nested Suspense component that timed out. Skip over the
                    var fallbackChildFragment = node.child.sibling;
                    fallbackChildFragment.return = node;
                    node = fallbackChildFragment;
                    continue;
                  } else if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                  }
                  if (node === finishedWork) {
                    return;
                  }
                  while (node.sibling === null) {
                    if (node.return === null || node.return === finishedWork) {
                      return;
                    }
                    node = node.return;
                  }
                  node.sibling.return = node.return;
                  node = node.sibling;
                }
              }
            }

            function commitAttachRef(finishedWork) {
              var ref = finishedWork.ref;
              if (ref !== null) {
                var instance = finishedWork.stateNode;
                var instanceToUse = void 0;
                switch (finishedWork.tag) {
                  case HostComponent:
                    instanceToUse = getPublicInstance(instance);
                    break;
                  default:
                    instanceToUse = instance;
                }
                if (typeof ref === 'function') {
                  ref(instanceToUse);
                } else {
                  {
                    if (!ref.hasOwnProperty('current')) {
                      warningWithoutStack$1(
                        false,
                        'Unexpected ref object provided for %s. ' +
                          'Use either a ref-setter function or React.createRef().%s',
                        getComponentName(finishedWork.type),
                        getStackByFiberInDevAndProd(finishedWork),
                      );
                    }
                  }

                  ref.current = instanceToUse;
                }
              }
            }

            function commitDetachRef(current$$1) {
              var currentRef = current$$1.ref;
              if (currentRef !== null) {
                if (typeof currentRef === 'function') {
                  currentRef(null);
                } else {
                  currentRef.current = null;
                }
              }
            }

            // User-originating errors (lifecycles and refs) should not interrupt
            // deletion, so don't let them throw. Host-originating errors should
            // interrupt deletion, so it's okay
            function commitUnmount(current$$1, renderPriorityLevel) {
              onCommitUnmount(current$$1);

              switch (current$$1.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  var updateQueue = current$$1.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;

                      // When the owner fiber is deleted, the destroy function of a passive
                      // effect hook is called during the synchronous commit phase. This is
                      // a concession to implementation complexity. Calling it in the
                      // passive effect phase (like they usually are, when dependencies
                      // change during an update) would require either traversing the
                      // children of the deleted fiber again, or including unmount effects
                      // as part of the fiber effect list.
                      //
                      // Because this is during the sync commit phase, we need to change
                      // the priority.
                      //
                      // TODO: Reconsider this implementation trade off.
                      var priorityLevel =
                        renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
                      runWithPriority$2(priorityLevel, function() {
                        var effect = firstEffect;
                        do {
                          var destroy = effect.destroy;
                          if (destroy !== undefined) {
                            safelyCallDestroy(current$$1, destroy);
                          }
                          effect = effect.next;
                        } while (effect !== firstEffect);
                      });
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(current$$1);
                  var instance = current$$1.stateNode;
                  if (typeof instance.componentWillUnmount === 'function') {
                    safelyCallComponentWillUnmount(current$$1, instance);
                  }
                  return;
                }
                case HostComponent: {
                  if (enableFlareAPI) {
                    var dependencies = current$$1.dependencies;

                    if (dependencies !== null) {
                      var respondersMap = dependencies.responders;
                      if (respondersMap !== null) {
                        var responderInstances = Array.from(respondersMap.values());
                        for (var i = 0, length = responderInstances.length; i < length; i++) {
                          var responderInstance = responderInstances[i];
                          unmountResponderInstance(responderInstance);
                        }
                        dependencies.responders = null;
                      }
                    }
                  }
                  safelyDetachRef(current$$1);
                  return;
                }
                case HostPortal: {
                  // TODO: this is recursive.
                  // We are also not using this parent because
                  // the portal will get pushed immediately.
                  if (supportsMutation) {
                    unmountHostComponents(current$$1, renderPriorityLevel);
                  } else if (supportsPersistence) {
                    emptyPortalContainer(current$$1);
                  }
                  return;
                }
                case FundamentalComponent: {
                  if (enableFundamentalAPI) {
                    var fundamentalInstance = current$$1.stateNode;
                    if (fundamentalInstance !== null) {
                      unmountFundamentalComponent(fundamentalInstance);
                      current$$1.stateNode = null;
                    }
                  }
                }
              }
            }

            function commitNestedUnmounts(root, renderPriorityLevel) {
              // While we're inside a removed host node we don't want to call
              // removeChild on the inner nodes because they're removed by the top
              // call anyway. We also want to call componentWillUnmount on all
              // composites before this host node is removed from the tree. Therefore
              var node = root;
              while (true) {
                commitUnmount(node, renderPriorityLevel);
                // Visit children because they may contain more composite or host nodes.
                // Skip portals because commitUnmount() currently visits them recursively.
                if (
                  node.child !== null &&
                  // If we use mutation we drill down into portals using commitUnmount above.
                  // If we don't use mutation we drill down into portals here instead.
                  (!supportsMutation || node.tag !== HostPortal)
                ) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === root) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === root) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }

            function detachFiber(current$$1) {
              // Cut off the return pointers to disconnect it from the tree. Ideally, we
              // should clear the child pointer of the parent alternate to let this
              // get GC:ed but we don't know which for sure which parent is the current
              // one so we'll settle for GC:ing the subtree of this child. This child
              // itself will be GC:ed when the parent updates the next time.
              current$$1.return = null;
              current$$1.child = null;
              current$$1.memoizedState = null;
              current$$1.updateQueue = null;
              current$$1.dependencies = null;
              var alternate = current$$1.alternate;
              if (alternate !== null) {
                alternate.return = null;
                alternate.child = null;
                alternate.memoizedState = null;
                alternate.updateQueue = null;
                alternate.dependencies = null;
              }
            }

            function emptyPortalContainer(current$$1) {
              if (!supportsPersistence) {
                return;
              }

              var portal = current$$1.stateNode;
              var containerInfo = portal.containerInfo;

              var emptyChildSet = createContainerChildSet(containerInfo);
              replaceContainerChildren(containerInfo, emptyChildSet);
            }

            function commitContainer(finishedWork) {
              if (!supportsPersistence) {
                return;
              }

              switch (finishedWork.tag) {
                case ClassComponent:
                case HostComponent:
                case HostText:
                case FundamentalComponent: {
                  return;
                }
                case HostRoot:
                case HostPortal: {
                  var portalOrRoot = finishedWork.stateNode;
                  var containerInfo = portalOrRoot.containerInfo,
                    _pendingChildren = portalOrRoot.pendingChildren;

                  replaceContainerChildren(containerInfo, _pendingChildren);
                  return;
                }
                default: {
                  (function() {
                    {
                      {
                        throw ReactError(
                          Error(
                            'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.',
                          ),
                        );
                      }
                    }
                  })();
                }
              }
            }

            function getHostParentFiber(fiber) {
              var parent = fiber.return;
              while (parent !== null) {
                if (isHostParent(parent)) {
                  return parent;
                }
                parent = parent.return;
              }
              (function() {
                {
                  {
                    throw ReactError(
                      Error(
                        'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.',
                      ),
                    );
                  }
                }
              })();
            }

            function isHostParent(fiber) {
              return (
                fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal
              );
            }

            function getHostSibling(fiber) {
              // We're going to search forward into the tree until we find a sibling host
              // node. Unfortunately, if multiple insertions are done in a row we have to
              // search past them. This leads to exponential search for the next sibling.
              var node = fiber;
              siblings: while (true) {
                // If we didn't find anything, let's try the next sibling.
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    // If we pop out of the root or hit the parent the fiber we are the
                    // last sibling.
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (
                  node.tag !== HostComponent &&
                  node.tag !== HostText &&
                  node.tag !== DehydratedSuspenseComponent
                ) {
                  // If it is not host node and, we might have a host node inside it.
                  // Try to search down until we find one.
                  if (node.effectTag & Placement) {
                    // If we don't have a child, try the siblings instead.
                    continue siblings;
                  }
                  // If we don't have a child, try the siblings instead.
                  // We also skip portals because they are not part of this host tree.
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                // Check if this host node is stable or about to be placed.
                if (!(node.effectTag & Placement)) {
                  // Found it!
                  return node.stateNode;
                }
              }
            }

            function commitPlacement(finishedWork) {
              if (!supportsMutation) {
                return;
              }

              // Recursively insert all host nodes into the parent.
              var parentFiber = getHostParentFiber(finishedWork);

              // Note: these two variables *must* always be updated together.
              var parent = void 0;
              var isContainer = void 0;
              var parentStateNode = parentFiber.stateNode;
              switch (parentFiber.tag) {
                case HostComponent:
                  parent = parentStateNode;
                  isContainer = false;
                  break;
                case HostRoot:
                  parent = parentStateNode.containerInfo;
                  isContainer = true;
                  break;
                case HostPortal:
                  parent = parentStateNode.containerInfo;
                  isContainer = true;
                  break;
                case FundamentalComponent:
                  if (enableFundamentalAPI) {
                    parent = parentStateNode.instance;
                    isContainer = false;
                  }
                // eslint-disable-next-line-no-fallthrough
                default:
                  (function() {
                    {
                      {
                        throw ReactError(
                          Error(
                            'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.',
                          ),
                        );
                      }
                    }
                  })();
              }
              if (parentFiber.effectTag & ContentReset) {
                // Reset the text content of the parent before doing any insertions
                resetTextContent(parent);
                // Clear ContentReset from the effect tag
                parentFiber.effectTag &= ~ContentReset;
              }

              var before = getHostSibling(finishedWork);
              // We only have the top Fiber that was inserted but we need to recurse down its
              // children to find all the terminal nodes.
              var node = finishedWork;
              while (true) {
                var isHost = node.tag === HostComponent || node.tag === HostText;
                if (isHost || node.tag === FundamentalComponent) {
                  var stateNode = isHost ? node.stateNode : node.stateNode.instance;
                  if (before) {
                    if (isContainer) {
                      insertInContainerBefore(parent, stateNode, before);
                    } else {
                      insertBefore(parent, stateNode, before);
                    }
                  } else {
                    if (isContainer) {
                      appendChildToContainer(parent, stateNode);
                    } else {
                      appendChild(parent, stateNode);
                    }
                  }
                } else if (node.tag === HostPortal) {
                  // If the insertion itself is a portal, then we don't want to traverse
                  // down its children. Instead, we'll get insertions from each child in
                  // the portal directly.
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }

            function unmountHostComponents(current$$1, renderPriorityLevel) {
              // We only have the top Fiber that was deleted but we need to recurse down its
              var node = current$$1;

              // Each iteration, currentParent is populated with node's host parent if not
              // currentParentIsValid.
              var currentParentIsValid = false;

              // Note: these two variables *must* always be updated together.
              var currentParent = void 0;
              var currentParentIsContainer = void 0;

              while (true) {
                if (!currentParentIsValid) {
                  var parent = node.return;
                  findParent: while (true) {
                    (function() {
                      if (!(parent !== null)) {
                        {
                          throw ReactError(
                            Error(
                              'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.',
                            ),
                          );
                        }
                      }
                    })();
                    var parentStateNode = parent.stateNode;
                    switch (parent.tag) {
                      case HostComponent:
                        currentParent = parentStateNode;
                        currentParentIsContainer = false;
                        break findParent;
                      case HostRoot:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                      case HostPortal:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                      case FundamentalComponent:
                        if (enableFundamentalAPI) {
                          currentParent = parentStateNode.instance;
                          currentParentIsContainer = false;
                        }
                    }
                    parent = parent.return;
                  }
                  currentParentIsValid = true;
                }

                if (node.tag === HostComponent || node.tag === HostText) {
                  commitNestedUnmounts(node, renderPriorityLevel);
                  // After all the children have unmounted, it is now safe to remove the
                  // node from the tree.
                  if (currentParentIsContainer) {
                    removeChildFromContainer(currentParent, node.stateNode);
                  } else {
                    removeChild(currentParent, node.stateNode);
                  }
                  // Don't visit children because we already visited them.
                } else if (node.tag === FundamentalComponent) {
                  var fundamentalNode = node.stateNode.instance;
                  commitNestedUnmounts(node, renderPriorityLevel);
                  // After all the children have unmounted, it is now safe to remove the
                  // node from the tree.
                  if (currentParentIsContainer) {
                    removeChildFromContainer(currentParent, fundamentalNode);
                  } else {
                    removeChild(currentParent, fundamentalNode);
                  }
                } else if (
                  enableSuspenseServerRenderer &&
                  node.tag === DehydratedSuspenseComponent
                ) {
                  // Delete the dehydrated suspense boundary and all of its content.
                  if (currentParentIsContainer) {
                    clearSuspenseBoundaryFromContainer(currentParent, node.stateNode);
                  } else {
                    clearSuspenseBoundary(currentParent, node.stateNode);
                  }
                } else if (node.tag === HostPortal) {
                  if (node.child !== null) {
                    // When we go into a portal, it becomes the parent to remove from.
                    // We will reassign it back when we pop the portal on the way up.
                    currentParent = node.stateNode.containerInfo;
                    currentParentIsContainer = true;
                    // Visit children because portals might contain host components.
                    node.child.return = node;
                    node = node.child;
                    continue;
                  }
                } else {
                  commitUnmount(node, renderPriorityLevel);
                  // Visit children because we may find more host components below.
                  if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                  }
                }
                if (node === current$$1) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === current$$1) {
                    return;
                  }
                  node = node.return;
                  if (node.tag === HostPortal) {
                    // When we go out of the portal, we need to restore the parent.
                    // Since we don't keep a stack of them, we will search for it.
                    currentParentIsValid = false;
                  }
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }

            function commitDeletion(current$$1, renderPriorityLevel) {
              if (supportsMutation) {
                // Recursively delete all host nodes from the parent.
                // Detach refs and call componentWillUnmount() on the whole subtree.
                unmountHostComponents(current$$1, renderPriorityLevel);
              } else {
                // Detach refs and call componentWillUnmount() on the whole subtree.
                commitNestedUnmounts(current$$1, renderPriorityLevel);
              }
              detachFiber(current$$1);
            }

            function commitWork(current$$1, finishedWork) {
              if (!supportsMutation) {
                switch (finishedWork.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case MemoComponent:
                  case SimpleMemoComponent: {
                    // Note: We currently never use MountMutation, but useLayout uses
                    // UnmountMutation.
                    commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
                    return;
                  }
                  case Profiler: {
                    return;
                  }
                  case SuspenseComponent: {
                    commitSuspenseComponent(finishedWork);
                    attachSuspenseRetryListeners(finishedWork);
                    return;
                  }
                  case SuspenseListComponent: {
                    attachSuspenseRetryListeners(finishedWork);
                    return;
                  }
                }

                commitContainer(finishedWork);
                return;
              }

              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  // Note: We currently never use MountMutation, but useLayout uses
                  // UnmountMutation.
                  commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
                  return;
                }
                case ClassComponent: {
                  return;
                }
                case HostComponent: {
                  var instance = finishedWork.stateNode;
                  if (instance != null) {
                    // Commit the work prepared earlier.
                    var newProps = finishedWork.memoizedProps;
                    // For hydration we reuse the update path but we treat the oldProps
                    // as the newProps. The updatePayload will contain the real change in
                    // this case.
                    var oldProps = current$$1 !== null ? current$$1.memoizedProps : newProps;
                    var type = finishedWork.type;
                    // TODO: Type the updateQueue to be specific to host components.
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) {
                      commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
                    }
                  }
                  return;
                }
                case HostText: {
                  (function() {
                    if (!(finishedWork.stateNode !== null)) {
                      {
                        throw ReactError(
                          Error(
                            'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.',
                          ),
                        );
                      }
                    }
                  })();
                  var textInstance = finishedWork.stateNode;
                  var newText = finishedWork.memoizedProps;
                  // For hydration we reuse the update path but we treat the oldProps
                  // as the newProps. The updatePayload will contain the real change in
                  // this case.
                  var oldText = current$$1 !== null ? current$$1.memoizedProps : newText;
                  commitTextUpdate(textInstance, oldText, newText);
                  return;
                }
                case HostRoot: {
                  return;
                }
                case Profiler: {
                  return;
                }
                case SuspenseComponent: {
                  commitSuspenseComponent(finishedWork);
                  attachSuspenseRetryListeners(finishedWork);
                  return;
                }
                case SuspenseListComponent: {
                  attachSuspenseRetryListeners(finishedWork);
                  return;
                }
                case IncompleteClassComponent: {
                  return;
                }
                case FundamentalComponent: {
                  if (enableFundamentalAPI) {
                    var fundamentalInstance = finishedWork.stateNode;
                    updateFundamentalComponent(fundamentalInstance);
                  }
                  return;
                }
                default: {
                  (function() {
                    {
                      {
                        throw ReactError(
                          Error(
                            'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.',
                          ),
                        );
                      }
                    }
                  })();
                }
              }
            }

            function commitSuspenseComponent(finishedWork) {
              var newState = finishedWork.memoizedState;

              var newDidTimeout = void 0;
              var primaryChildParent = finishedWork;
              if (newState === null) {
                newDidTimeout = false;
              } else {
                newDidTimeout = true;
                primaryChildParent = finishedWork.child;
                markCommitTimeOfFallback();
              }

              if (supportsMutation && primaryChildParent !== null) {
                hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
              }

              if (enableSuspenseCallback && newState !== null) {
                var suspenseCallback = finishedWork.memoizedProps.suspenseCallback;
                if (typeof suspenseCallback === 'function') {
                  var thenables = finishedWork.updateQueue;
                  if (thenables !== null) {
                    suspenseCallback(new Set(thenables));
                  }
                } else {
                  if (suspenseCallback !== undefined) {
                    warning$1(false, 'Unexpected type for suspenseCallback.');
                  }
                }
              }
            }

            function attachSuspenseRetryListeners(finishedWork) {
              // If this boundary just timed out, then it will have a set of thenables.
              // For each thenable, attach a listener so that when it resolves, React
              var thenables = finishedWork.updateQueue;
              if (thenables !== null) {
                finishedWork.updateQueue = null;
                var retryCache = finishedWork.stateNode;
                if (retryCache === null) {
                  retryCache = finishedWork.stateNode = new PossiblyWeakSet$1();
                }
                thenables.forEach(function(thenable) {
                  // Memoize using the boundary fiber to prevent redundant listeners.
                  var retry = resolveRetryThenable.bind(null, finishedWork, thenable);
                  if (!retryCache.has(thenable)) {
                    if (enableSchedulerTracing) {
                      retry = tracing.unstable_wrap(retry);
                    }
                    retryCache.add(thenable);
                    thenable.then(retry, retry);
                  }
                });
              }
            }

            function commitResetTextContent(current$$1) {
              if (!supportsMutation) {
                return;
              }
              resetTextContent(current$$1.stateNode);
            }

            var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
            var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;

            function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
              var update = createUpdate(expirationTime, null);
              // Unmount the root by rendering null.
              update.tag = CaptureUpdate;
              // Caution: React DevTools currently depends on this property
              // being called "element".
              update.payload = { element: null };
              var error = errorInfo.value;
              update.callback = function() {
                onUncaughtError(error);
                logError(fiber, errorInfo);
              };
              return update;
            }

            function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
              var update = createUpdate(expirationTime, null);
              update.tag = CaptureUpdate;
              var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
              if (typeof getDerivedStateFromError === 'function') {
                var error = errorInfo.value;
                update.payload = function() {
                  logError(fiber, errorInfo);
                  return getDerivedStateFromError(error);
                };
              }

              var inst = fiber.stateNode;
              if (inst !== null && typeof inst.componentDidCatch === 'function') {
                update.callback = function callback() {
                  {
                    markFailedErrorBoundaryForHotReloading(fiber);
                  }
                  if (typeof getDerivedStateFromError !== 'function') {
                    // To preserve the preexisting retry behavior of error boundaries,
                    // we keep track of which ones already failed during this batch.
                    // This gets reset before we yield back to the browser.
                    // TODO: Warn in strict mode if getDerivedStateFromError is
                    // not defined.
                    markLegacyErrorBoundaryAsFailed(this);

                    // Only log here if componentDidCatch is the only error boundary method defined
                    logError(fiber, errorInfo);
                  }
                  var error = errorInfo.value;
                  var stack = errorInfo.stack;
                  this.componentDidCatch(error, {
                    componentStack: stack !== null ? stack : '',
                  });
                  {
                    if (typeof getDerivedStateFromError !== 'function') {
                      // If componentDidCatch is the only error boundary method defined,
                      // then it needs to call setState to recover from errors.
                      // If no state update is scheduled then the boundary will swallow the error.
                      !(fiber.expirationTime === Sync)
                        ? warningWithoutStack$1(
                            false,
                            '%s: Error boundaries should implement getDerivedStateFromError(). ' +
                              'In that method, return a state update to display an error message or fallback UI.',
                            getComponentName(fiber.type) || 'Unknown',
                          )
                        : void 0;
                    }
                  }
                };
              } else {
                update.callback = function() {
                  markFailedErrorBoundaryForHotReloading(fiber);
                };
              }
              return update;
            }

            function attachPingListener(root, renderExpirationTime, thenable) {
              // Attach a listener to the promise to "ping" the root and retry. But
              // only if one does not already exist for the current render expiration
              // time (which acts like a "thread ID" here).
              var pingCache = root.pingCache;
              var threadIDs = void 0;
              if (pingCache === null) {
                pingCache = root.pingCache = new PossiblyWeakMap$1();
                threadIDs = new Set();
                pingCache.set(thenable, threadIDs);
              } else {
                threadIDs = pingCache.get(thenable);
                if (threadIDs === undefined) {
                  threadIDs = new Set();
                  pingCache.set(thenable, threadIDs);
                }
              }
              if (!threadIDs.has(renderExpirationTime)) {
                // Memoize using the thread ID to prevent redundant listeners.
                threadIDs.add(renderExpirationTime);
                var ping = pingSuspendedRoot.bind(null, root, thenable, renderExpirationTime);
                if (enableSchedulerTracing) {
                  ping = tracing.unstable_wrap(ping);
                }
                thenable.then(ping, ping);
              }
            }

            function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
              // The source fiber did not complete.
              sourceFiber.effectTag |= Incomplete;
              // Its effect list is no longer valid.
              sourceFiber.firstEffect = sourceFiber.lastEffect = null;

              if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
                // This is a thenable.
                var thenable = value;

                checkForWrongSuspensePriorityInDEV(sourceFiber);

                var hasInvisibleParentBoundary = hasSuspenseContext(
                  suspenseStackCursor.current,
                  InvisibleParentSuspenseContext,
                );

                // Schedule the nearest Suspense to re-render the timed out view.
                var _workInProgress = returnFiber;
                do {
                  if (
                    _workInProgress.tag === SuspenseComponent &&
                    shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)
                  ) {
                    // Found the nearest boundary.

                    // Stash the promise on the boundary fiber. If the boundary times out, we'll
                    var thenables = _workInProgress.updateQueue;
                    if (thenables === null) {
                      var updateQueue = new Set();
                      updateQueue.add(thenable);
                      _workInProgress.updateQueue = updateQueue;
                    } else {
                      thenables.add(thenable);
                    }

                    // If the boundary is outside of batched mode, we should *not*
                    // suspend the commit. Pretend as if the suspended component rendered
                    // null and keep rendering. In the commit phase, we'll schedule a
                    // subsequent synchronous update to re-render the Suspense.
                    //
                    // Note: It doesn't matter whether the component that suspended was
                    // inside a batched mode tree. If the Suspense is outside of it, we
                    // should *not* suspend the commit.
                    if ((_workInProgress.mode & BatchedMode) === NoMode) {
                      _workInProgress.effectTag |= DidCapture;

                      // We're going to commit this fiber even though it didn't complete.
                      // But we shouldn't call any lifecycle methods or callbacks. Remove
                      // all lifecycle effect tags.
                      sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);

                      if (sourceFiber.tag === ClassComponent) {
                        var currentSourceFiber = sourceFiber.alternate;
                        if (currentSourceFiber === null) {
                          // This is a new mount. Change the tag so it's not mistaken for a
                          // completed class component. For example, we should not call
                          // componentWillUnmount if it is deleted.
                          sourceFiber.tag = IncompleteClassComponent;
                        } else {
                          // When we try rendering again, we should not reuse the current fiber,
                          // since it's known to be in an inconsistent state. Use a force update to
                          // prevent a bail out.
                          var update = createUpdate(Sync, null);
                          update.tag = ForceUpdate;
                          enqueueUpdate(sourceFiber, update);
                        }
                      }

                      // The source fiber did not complete. Mark it with Sync priority to
                      // indicate that it still has pending work.
                      sourceFiber.expirationTime = Sync;

                      // Exit without suspending.
                      return;
                    }

                    // Confirmed that the boundary is in a concurrent mode tree. Continue
                    // with the normal suspend path.
                    //
                    // After this we'll use a set of heuristics to determine whether this
                    // render pass will run to completion or restart or "suspend" the commit.
                    // The actual logic for this is spread out in different places.
                    //
                    // This first principle is that if we're going to suspend when we complete
                    // a root, then we should also restart if we get an update or ping that
                    // might unsuspend it, and vice versa. The only reason to suspend is
                    // because you think you might want to restart before committing. However,
                    // it doesn't make sense to restart only while in the period we're suspended.
                    //
                    // Restarting too aggressively is also not good because it starves out any
                    // intermediate loading state. So we use heuristics to determine when.

                    // Suspense Heuristics
                    //
                    // If nothing threw a Promise or all the same fallbacks are already showing,
                    // then don't suspend/restart.
                    //
                    // If this is an initial render of a new tree of Suspense boundaries and
                    // those trigger a fallback, then don't suspend/restart. We want to ensure
                    // that we can show the initial loading state as quickly as possible.
                    //
                    // If we hit a "Delayed" case, such as when we'd switch from content back into
                    // a fallback, then we should always suspend/restart. SuspenseConfig applies to
                    // this case. If none is defined, JND is used instead.
                    //
                    // If we're already showing a fallback and it gets "retried", allowing us to show
                    // another level, but there's still an inner boundary that would show a fallback,
                    // then we suspend/restart for 500ms since the last time we showed a fallback
                    // anywhere in the tree. This effectively throttles progressive loading into a
                    // consistent train of commits. This also gives us an opportunity to restart to
                    // get to the completed state slightly earlier.
                    //
                    // If there's ambiguity due to batching it's resolved in preference of:
                    // 1) "delayed", 2) "initial render", 3) "retry".
                    //
                    // We want to ensure that a "busy" state doesn't get force committed. We want to
                    // ensure that new initial loading states can commit as soon as possible.

                    attachPingListener(root, renderExpirationTime, thenable);

                    _workInProgress.effectTag |= ShouldCapture;
                    _workInProgress.expirationTime = renderExpirationTime;

                    return;
                  } else if (
                    enableSuspenseServerRenderer &&
                    _workInProgress.tag === DehydratedSuspenseComponent
                  ) {
                    attachPingListener(root, renderExpirationTime, thenable);

                    // Since we already have a current fiber, we can eagerly add a retry listener.
                    var retryCache = _workInProgress.memoizedState;
                    if (retryCache === null) {
                      retryCache = _workInProgress.memoizedState = new PossiblyWeakSet();
                      var current$$1 = _workInProgress.alternate;
                      (function() {
                        if (!current$$1) {
                          {
                            throw ReactError(
                              Error(
                                'A dehydrated suspense boundary must commit before trying to render. This is probably a bug in React.',
                              ),
                            );
                          }
                        }
                      })();
                      current$$1.memoizedState = retryCache;
                    }
                    // Memoize using the boundary fiber to prevent redundant listeners.
                    if (!retryCache.has(thenable)) {
                      retryCache.add(thenable);
                      var retry = resolveRetryThenable.bind(null, _workInProgress, thenable);
                      if (enableSchedulerTracing) {
                        retry = tracing.unstable_wrap(retry);
                      }
                      thenable.then(retry, retry);
                    }
                    _workInProgress.effectTag |= ShouldCapture;
                    _workInProgress.expirationTime = renderExpirationTime;
                    return;
                  }
                  // This boundary already captured during this render. Continue to the next
                  // boundary.
                  _workInProgress = _workInProgress.return;
                } while (_workInProgress !== null);
                // No boundary was found. Fallthrough to error mode.
                // TODO: Use invariant so the message is stripped in prod?
                value = new Error(
                  (getComponentName(sourceFiber.type) || 'A React component') +
                    ' suspended while rendering, but no fallback UI was specified.\n' +
                    '\n' +
                    'Add a <Suspense fallback=...> component higher in the tree to ' +
                    'provide a loading indicator or placeholder to display.' +
                    getStackByFiberInDevAndProd(sourceFiber),
                );
              }

              // We didn't find a boundary that could handle this type of exception. Start
              // over and traverse parent path again, this time treating the exception
              // as an error.
              renderDidError();
              value = createCapturedValue(value, sourceFiber);
              var workInProgress = returnFiber;
              do {
                switch (workInProgress.tag) {
                  case HostRoot: {
                    var _errorInfo = value;
                    workInProgress.effectTag |= ShouldCapture;
                    workInProgress.expirationTime = renderExpirationTime;
                    var _update = createRootErrorUpdate(
                      workInProgress,
                      _errorInfo,
                      renderExpirationTime,
                    );
                    enqueueCapturedUpdate(workInProgress, _update);
                    return;
                  }
                  case ClassComponent:
                    // Capture and retry
                    var errorInfo = value;
                    var ctor = workInProgress.type;
                    var instance = workInProgress.stateNode;
                    if (
                      (workInProgress.effectTag & DidCapture) === NoEffect &&
                      (typeof ctor.getDerivedStateFromError === 'function' ||
                        (instance !== null &&
                          typeof instance.componentDidCatch === 'function' &&
                          !isAlreadyFailedLegacyErrorBoundary(instance)))
                    ) {
                      workInProgress.effectTag |= ShouldCapture;
                      workInProgress.expirationTime = renderExpirationTime;
                      // Schedule the error boundary to re-render using updated state
                      var _update2 = createClassErrorUpdate(
                        workInProgress,
                        errorInfo,
                        renderExpirationTime,
                      );
                      enqueueCapturedUpdate(workInProgress, _update2);
                      return;
                    }
                    break;
                  default:
                    break;
                }
                workInProgress = workInProgress.return;
              } while (workInProgress !== null);
            }

            // The scheduler is imported here *only* to detect whether it's been mocked
            // DEV stuff
            var ceil = Math.ceil;

            var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
            var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;
            var IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;

            var NoContext = /*                    */ 0;
            var BatchedContext = /*               */ 1;
            var EventContext = /*                 */ 2;
            var DiscreteEventContext = /*         */ 4;
            var LegacyUnbatchedContext = /*       */ 8;
            var RenderContext = /*                */ 16;
            var CommitContext = /*                */ 32;

            var RootIncomplete = 0;
            var RootErrored = 1;
            var RootSuspended = 2;
            var RootSuspendedWithDelay = 3;
            var RootCompleted = 4;

            // Describes where we are in the React execution stack
            var executionContext = NoContext;
            // The root we're working on
            var workInProgressRoot = null;
            // The fiber we're working on
            var workInProgress = null;
            // The expiration time we're rendering
            var renderExpirationTime = NoWork;
            // Whether to root completed, errored, suspended, etc.
            var workInProgressRootExitStatus = RootIncomplete;
            // Most recent event time among processed updates during this render.
            // This is conceptually a time stamp but expressed in terms of an ExpirationTime
            // because we deal mostly with expiration times in the hot path, so this avoids
            // the conversion happening in the hot path.
            var workInProgressRootLatestProcessedExpirationTime = Sync;
            var workInProgressRootLatestSuspenseTimeout = Sync;
            var workInProgressRootCanSuspendUsingConfig = null;
            // If we're pinged while rendering we don't always restart immediately.
            // This flag determines if it might be worthwhile to restart if an opportunity
            // happens latere.
            var workInProgressRootHasPendingPing = false;
            // The most recent time we committed a fallback. This lets us ensure a train
            // model where we don't commit new loading states in too quick succession.
            var globalMostRecentFallbackTime = 0;
            var FALLBACK_THROTTLE_MS = 500;

            var nextEffect = null;
            var hasUncaughtError = false;
            var firstUncaughtError = null;
            var legacyErrorBoundariesThatAlreadyFailed = null;

            var rootDoesHavePassiveEffects = false;
            var rootWithPendingPassiveEffects = null;
            var pendingPassiveEffectsRenderPriority = NoPriority;
            var pendingPassiveEffectsExpirationTime = NoWork;

            var rootsWithPendingDiscreteUpdates = null;

            // Use these to prevent an infinite loop of nested updates
            var NESTED_UPDATE_LIMIT = 50;
            var nestedUpdateCount = 0;
            var rootWithNestedUpdates = null;

            var NESTED_PASSIVE_UPDATE_LIMIT = 50;
            var nestedPassiveUpdateCount = 0;

            var interruptedBy = null;

            // Marks the need to reschedule pending interactions at these expiration times
            // during the commit phase. This enables them to be traced across components
            // that spawn new work during render. E.g. hidden boundaries, suspended SSR
            // hydration or SuspenseList.
            var spawnedWorkDuringRender = null;

            // Expiration times are computed by adding to the current time (the start
            // time). However, if two updates are scheduled within the same event, we
            // should treat their start times as simultaneous, even if the actual clock
            // time has advanced between the first and second call.

            // In other words, because expiration times determine how updates are batched,
            // we want all updates of like priority that occur within the same event to
            // receive the same expiration time. Otherwise we get tearing.
            var currentEventTime = NoWork;

            function requestCurrentTime() {
              if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
                // We're inside React, so it's fine to read the actual time.
                return msToExpirationTime(now());
              }
              // We're not inside React, so we may be in the middle of a browser event.
              if (currentEventTime !== NoWork) {
                // Use the same start time for all updates until we enter React again.
                return currentEventTime;
              }
              // This is the first update since React yielded. Compute a new start time.
              currentEventTime = msToExpirationTime(now());
              return currentEventTime;
            }

            function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
              var mode = fiber.mode;
              if ((mode & BatchedMode) === NoMode) {
                return Sync;
              }

              var priorityLevel = getCurrentPriorityLevel();
              if ((mode & ConcurrentMode) === NoMode) {
                return priorityLevel === ImmediatePriority ? Sync : Batched;
              }

              if ((executionContext & RenderContext) !== NoContext) {
                // Use whatever time we're already rendering
                return renderExpirationTime;
              }

              var expirationTime = void 0;
              if (suspenseConfig !== null) {
                // Compute an expiration time based on the Suspense timeout.
                expirationTime = computeSuspenseExpiration(
                  currentTime,
                  suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION,
                );
              } else {
                // Compute an expiration time based on the Scheduler priority.
                switch (priorityLevel) {
                  case ImmediatePriority:
                    expirationTime = Sync;
                    break;
                  case UserBlockingPriority$2:
                    // TODO: Rename this to computeUserBlockingExpiration
                    expirationTime = computeInteractiveExpiration(currentTime);
                    break;
                  case NormalPriority:
                  case LowPriority:
                    // TODO: Handle LowPriority
                    // TODO: Rename this to... something better.
                    expirationTime = computeAsyncExpiration(currentTime);
                    break;
                  case IdlePriority:
                    expirationTime = Never;
                    break;
                  default:
                    (function() {
                      {
                        {
                          throw ReactError(Error('Expected a valid priority level'));
                        }
                      }
                    })();
                }
              }

              // If we're in the middle of rendering a tree, do not update at the same
              // expiration time that is already rendering.
              // TODO: We shouldn't have to do this if the update is on a different root.
              // Refactor computeExpirationForFiber + scheduleUpdate so we have access to
              // the root when we check for this condition.
              if (workInProgressRoot !== null && expirationTime === renderExpirationTime) {
                // This is a trick to move this update into a separate batch
                expirationTime -= 1;
              }

              return expirationTime;
            }

            var lastUniqueAsyncExpiration = NoWork;
            function computeUniqueAsyncExpiration() {
              var currentTime = requestCurrentTime();
              var result = computeAsyncExpiration(currentTime);
              if (result <= lastUniqueAsyncExpiration) {
                // Since we assume the current time monotonically increases, we only hit
                // this branch when computeUniqueAsyncExpiration is fired multiple times
                // within a 200ms window (or whatever the async bucket size is).
                result -= 1;
              }
              lastUniqueAsyncExpiration = result;
              return result;
            }

            function scheduleUpdateOnFiber(fiber, expirationTime) {
              checkForNestedUpdates();
              warnAboutInvalidUpdatesOnClassComponentsInDEV(fiber);

              var root = markUpdateTimeFromFiberToRoot(fiber, expirationTime);
              if (root === null) {
                warnAboutUpdateOnUnmountedFiberInDEV(fiber);
                return;
              }

              root.pingTime = NoWork;

              checkForInterruption(fiber, expirationTime);
              recordScheduleUpdate();

              // TODO: computeExpirationForFiber also reads the priority. Pass the
              // priority as an argument to that function and this one.
              var priorityLevel = getCurrentPriorityLevel();

              if (expirationTime === Sync) {
                if (
                  // Check if we're inside unbatchedUpdates
                  (executionContext & LegacyUnbatchedContext) !== NoContext &&
                  // Check if we're not already rendering
                  (executionContext & (RenderContext | CommitContext)) === NoContext
                ) {
                  // Register pending interactions on the root to avoid losing traced interaction data.
                  schedulePendingInteractions(root, expirationTime);

                  // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
                  // root inside of batchedUpdates should be synchronous, but layout updates
                  // should be deferred until the end of the batch.
                  var callback = renderRoot(root, Sync, true);
                  while (callback !== null) {
                    callback = callback(true);
                  }
                } else {
                  scheduleCallbackForRoot(root, ImmediatePriority, Sync);
                  if (executionContext === NoContext) {
                    // Flush the synchronous work now, wnless we're already working or inside
                    // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
                    // scheduleCallbackForFiber to preserve the ability to schedule a callback
                    // without immediately flushing it. We only do this for user-initiated
                    // updates, to preserve historical behavior of sync mode.
                    flushSyncCallbackQueue();
                  }
                }
              } else {
                scheduleCallbackForRoot(root, priorityLevel, expirationTime);
              }

              if (
                (executionContext & DiscreteEventContext) !== NoContext &&
                // Only updates at user-blocking priority or greater are considered
                // discrete, even inside a discrete event.
                (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority)
              ) {
                // This is the result of a discrete event. Track the lowest priority
                // discrete update per root so we can flush them early, if needed.
                if (rootsWithPendingDiscreteUpdates === null) {
                  rootsWithPendingDiscreteUpdates = new Map([[root, expirationTime]]);
                } else {
                  var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root);
                  if (lastDiscreteTime === undefined || lastDiscreteTime > expirationTime) {
                    rootsWithPendingDiscreteUpdates.set(root, expirationTime);
                  }
                }
              }
            }
            var scheduleWork = scheduleUpdateOnFiber;

            // This is split into a separate function so we can mark a fiber with pending
            // work without treating it as a typical update that originates from an event;
            // e.g. retrying a Suspense boundary isn't an update, but it does schedule work
            // on a fiber.
            function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
              // Update the source fiber's expiration time
              if (fiber.expirationTime < expirationTime) {
                fiber.expirationTime = expirationTime;
              }
              var alternate = fiber.alternate;
              if (alternate !== null && alternate.expirationTime < expirationTime) {
                alternate.expirationTime = expirationTime;
              }
              // Walk the parent path to the root and update the child expiration time.
              var node = fiber.return;
              var root = null;
              if (node === null && fiber.tag === HostRoot) {
                root = fiber.stateNode;
              } else {
                while (node !== null) {
                  alternate = node.alternate;
                  if (node.childExpirationTime < expirationTime) {
                    node.childExpirationTime = expirationTime;
                    if (alternate !== null && alternate.childExpirationTime < expirationTime) {
                      alternate.childExpirationTime = expirationTime;
                    }
                  } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
                    alternate.childExpirationTime = expirationTime;
                  }
                  if (node.return === null && node.tag === HostRoot) {
                    root = node.stateNode;
                    break;
                  }
                  node = node.return;
                }
              }

              if (root !== null) {
                // Update the first and last pending expiration times in this root
                var firstPendingTime = root.firstPendingTime;
                if (expirationTime > firstPendingTime) {
                  root.firstPendingTime = expirationTime;
                }
                var lastPendingTime = root.lastPendingTime;
                if (lastPendingTime === NoWork || expirationTime < lastPendingTime) {
                  root.lastPendingTime = expirationTime;
                }
              }

              return root;
            }

            // Use this function, along with runRootCallback, to ensure that only a single
            // callback per root is scheduled. It's still possible to call renderRoot
            // directly, but scheduling via this function helps avoid excessive callbacks.
            // It works by storing the callback node and expiration time on the root. When a
            // new callback comes in, it compares the expiration time to determine if it
            // should cancel the previous one. It also relies on commitRoot scheduling a
            // callback to render the next level, because that means we don't need a
            // separate callback per expiration time.
            function scheduleCallbackForRoot(root, priorityLevel, expirationTime) {
              var existingCallbackExpirationTime = root.callbackExpirationTime;
              if (existingCallbackExpirationTime < expirationTime) {
                // New callback has higher priority than the existing one.
                var existingCallbackNode = root.callbackNode;
                if (existingCallbackNode !== null) {
                  cancelCallback(existingCallbackNode);
                }
                root.callbackExpirationTime = expirationTime;

                if (expirationTime === Sync) {
                  // Sync React callbacks are scheduled on a special internal queue
                  root.callbackNode = scheduleSyncCallback(
                    runRootCallback.bind(null, root, renderRoot.bind(null, root, expirationTime)),
                  );
                } else {
                  var options = null;
                  if (
                    !disableSchedulerTimeoutBasedOnReactExpirationTime &&
                    expirationTime !== Never
                  ) {
                    var timeout = expirationTimeToMs(expirationTime) - now();
                    options = { timeout: timeout };
                  }

                  root.callbackNode = scheduleCallback(
                    priorityLevel,
                    runRootCallback.bind(null, root, renderRoot.bind(null, root, expirationTime)),
                    options,
                  );
                  if (
                    enableUserTimingAPI &&
                    expirationTime !== Sync &&
                    (executionContext & (RenderContext | CommitContext)) === NoContext
                  ) {
                    // Scheduled an async callback, and we're not already working. Add an
                    // entry to the flamegraph that shows we're waiting for a callback
                    // to fire.
                    startRequestCallbackTimer();
                  }
                }
              }

              // Associate the current interactions with this new root+priority.
              schedulePendingInteractions(root, expirationTime);
            }

            function runRootCallback(root, callback, isSync) {
              var prevCallbackNode = root.callbackNode;
              var continuation = null;
              try {
                continuation = callback(isSync);
                if (continuation !== null) {
                  return runRootCallback.bind(null, root, continuation);
                } else {
                  return null;
                }
              } finally {
                // If the callback exits without returning a continuation, remove the
                // corresponding callback node from the root. Unless the callback node
                // has changed, which implies that it was already cancelled by a high
                // priority update.
                if (continuation === null && prevCallbackNode === root.callbackNode) {
                  root.callbackNode = null;
                  root.callbackExpirationTime = NoWork;
                }
              }
            }

            function flushRoot(root, expirationTime) {
              if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
                (function() {
                  {
                    {
                      throw ReactError(
                        Error(
                          'work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.',
                        ),
                      );
                    }
                  }
                })();
              }
              scheduleSyncCallback(renderRoot.bind(null, root, expirationTime));
              flushSyncCallbackQueue();
            }

            function flushDiscreteUpdates() {
              // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
              // However, `act` uses `batchedUpdates`, so there's no way to distinguish
              // those two cases. Need to fix this before exposing flushDiscreteUpdates
              // as a public API.
              if (
                (executionContext & (BatchedContext | RenderContext | CommitContext)) !==
                NoContext
              ) {
                if (true && (executionContext & RenderContext) !== NoContext) {
                  warning$1(
                    false,
                    'unstable_flushDiscreteUpdates: Cannot flush updates when React is ' +
                      'already rendering.',
                  );
                }
                // We're already rendering, so we can't synchronously flush pending work.
                // This is probably a nested event dispatch triggered by a lifecycle/effect,
                // like `el.focus()`. Exit.
                return;
              }
              flushPendingDiscreteUpdates();
              if (!revertPassiveEffectsChange) {
                // If the discrete updates scheduled passive effects, flush them now so that
                // they fire before the next serial event.
                flushPassiveEffects();
              }
            }

            function resolveLocksOnRoot(root, expirationTime) {
              var firstBatch = root.firstBatch;
              if (
                firstBatch !== null &&
                firstBatch._defer &&
                firstBatch._expirationTime >= expirationTime
              ) {
                scheduleCallback(NormalPriority, function() {
                  firstBatch._onComplete();
                  return null;
                });
                return true;
              } else {
                return false;
              }
            }

            function flushPendingDiscreteUpdates() {
              if (rootsWithPendingDiscreteUpdates !== null) {
                // For each root with pending discrete updates, schedule a callback to
                // immediately flush them.
                var roots = rootsWithPendingDiscreteUpdates;
                rootsWithPendingDiscreteUpdates = null;
                roots.forEach(function(expirationTime, root) {
                  scheduleSyncCallback(renderRoot.bind(null, root, expirationTime));
                });
                // Now flush the immediate queue.
                flushSyncCallbackQueue();
              }
            }

            function batchedUpdates$1(fn, a) {
              var prevExecutionContext = executionContext;
              executionContext |= BatchedContext;
              try {
                return fn(a);
              } finally {
                executionContext = prevExecutionContext;
                if (executionContext === NoContext) {
                  // Flush the immediate callbacks that were scheduled during this batch
                  flushSyncCallbackQueue();
                }
              }
            }

            function batchedEventUpdates$1(fn, a) {
              var prevExecutionContext = executionContext;
              executionContext |= EventContext;
              try {
                return fn(a);
              } finally {
                executionContext = prevExecutionContext;
                if (executionContext === NoContext) {
                  // Flush the immediate callbacks that were scheduled during this batch
                  flushSyncCallbackQueue();
                }
              }
            }

            function discreteUpdates$1(fn, a, b, c) {
              var prevExecutionContext = executionContext;
              executionContext |= DiscreteEventContext;
              try {
                // Should this
                return runWithPriority$2(UserBlockingPriority$2, fn.bind(null, a, b, c));
              } finally {
                executionContext = prevExecutionContext;
                if (executionContext === NoContext) {
                  // Flush the immediate callbacks that were scheduled during this batch
                  flushSyncCallbackQueue();
                }
              }
            }

            function unbatchedUpdates(fn, a) {
              var prevExecutionContext = executionContext;
              executionContext &= ~BatchedContext;
              executionContext |= LegacyUnbatchedContext;
              try {
                return fn(a);
              } finally {
                executionContext = prevExecutionContext;
                if (executionContext === NoContext) {
                  // Flush the immediate callbacks that were scheduled during this batch
                  flushSyncCallbackQueue();
                }
              }
            }

            function flushSync(fn, a) {
              if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
                (function() {
                  {
                    {
                      throw ReactError(
                        Error(
                          'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.',
                        ),
                      );
                    }
                  }
                })();
              }
              var prevExecutionContext = executionContext;
              executionContext |= BatchedContext;
              try {
                return runWithPriority$2(ImmediatePriority, fn.bind(null, a));
              } finally {
                executionContext = prevExecutionContext;
                // Flush the immediate callbacks that were scheduled during this batch.
                // Note that this will happen even if batchedUpdates is higher up
                // the stack.
                flushSyncCallbackQueue();
              }
            }

            function flushControlled(fn) {
              var prevExecutionContext = executionContext;
              executionContext |= BatchedContext;
              try {
                runWithPriority$2(ImmediatePriority, fn);
              } finally {
                executionContext = prevExecutionContext;
                if (executionContext === NoContext) {
                  // Flush the immediate callbacks that were scheduled during this batch
                  flushSyncCallbackQueue();
                }
              }
            }

            function prepareFreshStack(root, expirationTime) {
              root.finishedWork = null;
              root.finishedExpirationTime = NoWork;

              var timeoutHandle = root.timeoutHandle;
              if (timeoutHandle !== noTimeout) {
                // The root previous suspended and scheduled a timeout to commit a fallback
                // state. Now that we have additional work, cancel the timeout.
                root.timeoutHandle = noTimeout;
                // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
                cancelTimeout(timeoutHandle);
              }

              if (workInProgress !== null) {
                var interruptedWork = workInProgress.return;
                while (interruptedWork !== null) {
                  unwindInterruptedWork(interruptedWork);
                  interruptedWork = interruptedWork.return;
                }
              }
              workInProgressRoot = root;
              workInProgress = createWorkInProgress(root.current, null, expirationTime);
              renderExpirationTime = expirationTime;
              workInProgressRootExitStatus = RootIncomplete;
              workInProgressRootLatestProcessedExpirationTime = Sync;
              workInProgressRootLatestSuspenseTimeout = Sync;
              workInProgressRootCanSuspendUsingConfig = null;
              workInProgressRootHasPendingPing = false;

              if (enableSchedulerTracing) {
                spawnedWorkDuringRender = null;
              }

              {
                ReactStrictModeWarnings.discardPendingWarnings();
                componentsThatTriggeredHighPriSuspend = null;
              }
            }

            function renderRoot(root, expirationTime, isSync) {
              (function() {
                if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
                  {
                    throw ReactError(Error('Should not already be working.'));
                  }
                }
              })();

              if (enableUserTimingAPI && expirationTime !== Sync) {
                var didExpire = isSync;
                stopRequestCallbackTimer(didExpire);
              }

              if (root.firstPendingTime < expirationTime) {
                // If there's no work left at this expiration time, exit immediately. This
                // happens when multiple callbacks are scheduled for a single root, but an
                // earlier callback flushes the work of a later one.
                return null;
              }

              if (isSync && root.finishedExpirationTime === expirationTime) {
                // There's already a pending commit at this expiration time.
                // TODO: This is poorly factored. This case only exists for the
                // batch.commit() API.
                return commitRoot.bind(null, root);
              }

              flushPassiveEffects();

              // If the root or expiration time have changed, throw out the existing stack
              // and prepare a fresh one. Otherwise we'll continue where we left off.
              if (root !== workInProgressRoot || expirationTime !== renderExpirationTime) {
                prepareFreshStack(root, expirationTime);
                startWorkOnPendingInteractions(root, expirationTime);
              } else if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                // We could've received an update at a lower priority while we yielded.
                // We're suspended in a delayed state. Once we complete this render we're
                // just going to try to recover at the last pending time anyway so we might
                // as well start doing that eagerly.
                // Ideally we should be able to do this even for retries but we don't yet
                // know if we're going to process an update which wants to commit earlier,
                // and this path happens very early so it would happen too often. Instead,
                // for that case, we'll wait until we complete.
                if (workInProgressRootHasPendingPing) {
                  // We have a ping at this expiration. Let's restart to see if we get unblocked.
                  prepareFreshStack(root, expirationTime);
                } else {
                  var lastPendingTime = root.lastPendingTime;
                  if (lastPendingTime < expirationTime) {
                    // There's lower priority work. It might be unsuspended. Try rendering
                    // at that level immediately, while preserving the position in the queue.
                    return renderRoot.bind(null, root, lastPendingTime);
                  }
                }
              }

              // If we have a work-in-progress fiber, it means there's still work to do
              // in this root.
              if (workInProgress !== null) {
                var prevExecutionContext = executionContext;
                executionContext |= RenderContext;
                var prevDispatcher = ReactCurrentDispatcher.current;
                if (prevDispatcher === null) {
                  // The React isomorphic package does not include a default dispatcher.
                  // Instead the first renderer will lazily attach one, in order to give
                  // nicer error messages.
                  prevDispatcher = ContextOnlyDispatcher;
                }
                ReactCurrentDispatcher.current = ContextOnlyDispatcher;
                var prevInteractions = null;
                if (enableSchedulerTracing) {
                  prevInteractions = tracing.__interactionsRef.current;
                  tracing.__interactionsRef.current = root.memoizedInteractions;
                }

                startWorkLoopTimer(workInProgress);

                // TODO: Fork renderRoot into renderRootSync and renderRootAsync
                if (isSync) {
                  if (expirationTime !== Sync) {
                    // An async update expired. There may be other expired updates on
                    // this root. We should render all the expired work in a
                    // single batch.
                    var currentTime = requestCurrentTime();
                    if (currentTime < expirationTime) {
                      // Restart at the current time.
                      executionContext = prevExecutionContext;
                      resetContextDependencies();
                      ReactCurrentDispatcher.current = prevDispatcher;
                      if (enableSchedulerTracing) {
                        tracing.__interactionsRef.current = prevInteractions;
                      }
                      return renderRoot.bind(null, root, currentTime);
                    }
                  }
                } else {
                  // Since we know we're in a React event, we can clear the current
                  // event time. The next update will compute a new event time.
                  currentEventTime = NoWork;
                }

                do {
                  try {
                    if (isSync) {
                      workLoopSync();
                    } else {
                      workLoop();
                    }
                    break;
                  } catch (thrownValue) {
                    // Reset module-level state that was set during the render phase.
                    resetContextDependencies();
                    resetHooks();

                    var sourceFiber = workInProgress;
                    if (sourceFiber === null || sourceFiber.return === null) {
                      // Expected to be working on a non-root fiber. This is a fatal error
                      // because there's no ancestor that can handle it; the root is
                      // supposed to capture all errors that weren't caught by an error
                      // boundary.
                      prepareFreshStack(root, expirationTime);
                      executionContext = prevExecutionContext;
                      throw thrownValue;
                    }

                    if (enableProfilerTimer && sourceFiber.mode & ProfileMode) {
                      // Record the time spent rendering before an error was thrown. This
                      // avoids inaccurate Profiler durations in the case of a
                      // suspended render.
                      stopProfilerTimerIfRunningAndRecordDelta(sourceFiber, true);
                    }

                    var returnFiber = sourceFiber.return;
                    throwException(
                      root,
                      returnFiber,
                      sourceFiber,
                      thrownValue,
                      renderExpirationTime,
                    );
                    workInProgress = completeUnitOfWork(sourceFiber);
                  }
                } while (true);

                executionContext = prevExecutionContext;
                resetContextDependencies();
                ReactCurrentDispatcher.current = prevDispatcher;
                if (enableSchedulerTracing) {
                  tracing.__interactionsRef.current = prevInteractions;
                }

                if (workInProgress !== null) {
                  // There's still work left over. Return a continuation.
                  stopInterruptedWorkLoopTimer();
                  if (expirationTime !== Sync) {
                    startRequestCallbackTimer();
                  }
                  return renderRoot.bind(null, root, expirationTime);
                }
              }

              // We now have a consistent tree. The next step is either to commit it, or, if
              // something suspended, wait to commit it after a timeout.
              stopFinishedWorkLoopTimer();

              root.finishedWork = root.current.alternate;
              root.finishedExpirationTime = expirationTime;

              var isLocked = resolveLocksOnRoot(root, expirationTime);
              if (isLocked) {
                // This root has a lock that prevents it from committing. Exit. If we begin
                // work on the root again, without any intervening updates, it will finish
                // without doing additional work.
                return null;
              }

              // Set this to null to indicate there's no in-progress render.
              workInProgressRoot = null;

              switch (workInProgressRootExitStatus) {
                case RootIncomplete: {
                  (function() {
                    {
                      {
                        throw ReactError(Error('Should have a work-in-progress.'));
                      }
                    }
                  })();
                }
                // Flow knows about invariant, so it complains if I add a break statement,
                // but eslint doesn't know about invariant, so it complains if I do.
                // eslint-disable-next-line no-fallthrough
                case RootErrored: {
                  // An error was thrown. First check if there is lower priority work
                  // scheduled on this root.
                  var _lastPendingTime = root.lastPendingTime;
                  if (_lastPendingTime < expirationTime) {
                    // There's lower priority work. Before raising the error, try rendering
                    // at the lower priority to see if it fixes it. Use a continuation to
                    // maintain the existing priority and position in the queue.
                    return renderRoot.bind(null, root, _lastPendingTime);
                  }
                  if (!isSync) {
                    // If we're rendering asynchronously, it's possible the error was
                    // caused by tearing due to a mutation during an event. Try rendering
                    // one more time without yiedling to events.
                    prepareFreshStack(root, expirationTime);
                    scheduleSyncCallback(renderRoot.bind(null, root, expirationTime));
                    return null;
                  }
                  // If we're already rendering synchronously, commit the root in its
                  // errored state.
                  return commitRoot.bind(null, root);
                }
                case RootSuspended: {
                  flushSuspensePriorityWarningInDEV();

                  // We have an acceptable loading state. We need to figure out if we should
                  // immediately commit it or wait a bit.

                  // If we have processed new updates during this render, we may now have a
                  // new loading state ready. We want to ensure that we commit that as soon as
                  // possible.
                  var hasNotProcessedNewUpdates =
                    workInProgressRootLatestProcessedExpirationTime === Sync;
                  if (
                    hasNotProcessedNewUpdates &&
                    !isSync &&
                    // do not delay if we're inside an act() scope
                    !(true && flushSuspenseFallbacksInTests && IsThisRendererActing.current)
                  ) {
                    // If we have not processed any new updates during this pass, then this is
                    // either a retry of an existing fallback state or a hidden tree.
                    // Hidden trees shouldn't be batched with other work and after that's
                    // fixed it can only be a retry.
                    // We're going to throttle committing retries so that we don't show too
                    // many loading states too quickly.
                    var msUntilTimeout =
                      globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                    // Don't bother with a very short suspense time.
                    if (msUntilTimeout > 10) {
                      if (workInProgressRootHasPendingPing) {
                        // This render was pinged but we didn't get to restart earlier so try
                        // restarting now instead.
                        prepareFreshStack(root, expirationTime);
                        return renderRoot.bind(null, root, expirationTime);
                      }
                      var _lastPendingTime2 = root.lastPendingTime;
                      if (_lastPendingTime2 < expirationTime) {
                        // There's lower priority work. It might be unsuspended. Try rendering
                        // at that level.
                        return renderRoot.bind(null, root, _lastPendingTime2);
                      }
                      // The render is suspended, it hasn't timed out, and there's no lower
                      // priority work to do. Instead of committing the fallback
                      // immediately, wait for more data to arrive.
                      root.timeoutHandle = scheduleTimeout(
                        commitRoot.bind(null, root),
                        msUntilTimeout,
                      );
                      return null;
                    }
                  }
                  // The work expired. Commit immediately.
                  return commitRoot.bind(null, root);
                }
                case RootSuspendedWithDelay: {
                  flushSuspensePriorityWarningInDEV();

                  if (
                    !isSync &&
                    // do not delay if we're inside an act() scope
                    !(true && flushSuspenseFallbacksInTests && IsThisRendererActing.current)
                  ) {
                    // We're suspended in a state that should be avoided. We'll try to avoid committing
                    // it for as long as the timeouts let us.
                    if (workInProgressRootHasPendingPing) {
                      // This render was pinged but we didn't get to restart earlier so try
                      // restarting now instead.
                      prepareFreshStack(root, expirationTime);
                      return renderRoot.bind(null, root, expirationTime);
                    }
                    var _lastPendingTime3 = root.lastPendingTime;
                    if (_lastPendingTime3 < expirationTime) {
                      // There's lower priority work. It might be unsuspended. Try rendering
                      // at that level immediately.
                      return renderRoot.bind(null, root, _lastPendingTime3);
                    }

                    var _msUntilTimeout = void 0;
                    if (workInProgressRootLatestSuspenseTimeout !== Sync) {
                      // We have processed a suspense config whose expiration time we can use as
                      // the timeout.
                      _msUntilTimeout =
                        expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now();
                    } else if (workInProgressRootLatestProcessedExpirationTime === Sync) {
                      // This should never normally happen because only new updates cause
                      // delayed states, so we should have processed something. However,
                      // this could also happen in an offscreen tree.
                      _msUntilTimeout = 0;
                    } else {
                      // If we don't have a suspense config, we're going to use a heuristic to
                      var eventTimeMs = inferTimeFromExpirationTime(
                        workInProgressRootLatestProcessedExpirationTime,
                      );
                      var currentTimeMs = now();
                      var timeUntilExpirationMs =
                        expirationTimeToMs(expirationTime) - currentTimeMs;
                      var timeElapsed = currentTimeMs - eventTimeMs;
                      if (timeElapsed < 0) {
                        // We get this wrong some time since we estimate the time.
                        timeElapsed = 0;
                      }

                      _msUntilTimeout = jnd(timeElapsed) - timeElapsed;

                      // Clamp the timeout to the expiration time.
                      // TODO: Once the event time is exact instead of inferred from expiration time
                      // we don't need this.
                      if (timeUntilExpirationMs < _msUntilTimeout) {
                        _msUntilTimeout = timeUntilExpirationMs;
                      }
                    }

                    // Don't bother with a very short suspense time.
                    if (_msUntilTimeout > 10) {
                      // The render is suspended, it hasn't timed out, and there's no lower
                      // priority work to do. Instead of committing the fallback
                      // immediately, wait for more data to arrive.
                      root.timeoutHandle = scheduleTimeout(
                        commitRoot.bind(null, root),
                        _msUntilTimeout,
                      );
                      return null;
                    }
                  }
                  // The work expired. Commit immediately.
                  return commitRoot.bind(null, root);
                }
                case RootCompleted: {
                  // The work completed. Ready to commit.
                  if (
                    !isSync &&
                    // do not delay if we're inside an act() scope
                    !(true && flushSuspenseFallbacksInTests && IsThisRendererActing.current) &&
                    workInProgressRootLatestProcessedExpirationTime !== Sync &&
                    workInProgressRootCanSuspendUsingConfig !== null
                  ) {
                    // If we have exceeded the minimum loading delay, which probably
                    // means we have shown a spinner already, we might have to suspend
                    // a bit longer to ensure that the spinner is shown for enough time.
                    var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(
                      workInProgressRootLatestProcessedExpirationTime,
                      expirationTime,
                      workInProgressRootCanSuspendUsingConfig,
                    );
                    if (_msUntilTimeout2 > 10) {
                      root.timeoutHandle = scheduleTimeout(
                        commitRoot.bind(null, root),
                        _msUntilTimeout2,
                      );
                      return null;
                    }
                  }
                  return commitRoot.bind(null, root);
                }
                default: {
                  (function() {
                    {
                      {
                        throw ReactError(Error('Unknown root exit status.'));
                      }
                    }
                  })();
                }
              }
            }

            function markCommitTimeOfFallback() {
              globalMostRecentFallbackTime = now();
            }

            function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
              if (
                expirationTime < workInProgressRootLatestProcessedExpirationTime &&
                expirationTime > Never
              ) {
                workInProgressRootLatestProcessedExpirationTime = expirationTime;
              }
              if (suspenseConfig !== null) {
                if (
                  expirationTime < workInProgressRootLatestSuspenseTimeout &&
                  expirationTime > Never
                ) {
                  workInProgressRootLatestSuspenseTimeout = expirationTime;
                  // Most of the time we only have one config and getting wrong is not bad.
                  workInProgressRootCanSuspendUsingConfig = suspenseConfig;
                }
              }
            }

            function renderDidSuspend() {
              if (workInProgressRootExitStatus === RootIncomplete) {
                workInProgressRootExitStatus = RootSuspended;
              }
            }

            function renderDidSuspendDelayIfPossible() {
              if (
                workInProgressRootExitStatus === RootIncomplete ||
                workInProgressRootExitStatus === RootSuspended
              ) {
                workInProgressRootExitStatus = RootSuspendedWithDelay;
              }
            }

            function renderDidError() {
              if (workInProgressRootExitStatus !== RootCompleted) {
                workInProgressRootExitStatus = RootErrored;
              }
            }

            // Called during render to determine if anything has suspended.
            // Returns false if we're not sure.
            function renderHasNotSuspendedYet() {
              // If something errored or completed, we can't really be sure,
              // so those are false.
              return workInProgressRootExitStatus === RootIncomplete;
            }

            function inferTimeFromExpirationTime(expirationTime) {
              // We don't know exactly when the update was scheduled, but we can infer an
              // approximate start time from the expiration time.
              var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
              return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
            }

            function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
              // We don't know exactly when the update was scheduled, but we can infer an
              // approximate start time from the expiration time by subtracting the timeout
              // that was added to the event time.
              var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
              return (
                earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION)
              );
            }

            function workLoopSync() {
              // Already timed out, so perform work without checking if we need to yield.
              while (workInProgress !== null) {
                workInProgress = performUnitOfWork(workInProgress);
              }
            }

            function workLoop() {
              // Perform work until Scheduler asks us to yield
              while (workInProgress !== null && !shouldYield()) {
                workInProgress = performUnitOfWork(workInProgress);
              }
            }

            function performUnitOfWork(unitOfWork) {
              // The current, flushed, state of this fiber is the alternate. Ideally
              // nothing should rely on this, but relying on it here means that we don't
              // need an additional field on the work in progress.
              var current$$1 = unitOfWork.alternate;

              startWorkTimer(unitOfWork);
              setCurrentFiber(unitOfWork);

              var next = void 0;
              if (enableProfilerTimer && (unitOfWork.mode & ProfileMode) !== NoMode) {
                startProfilerTimer(unitOfWork);
                next = beginWork$$1(current$$1, unitOfWork, renderExpirationTime);
                stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
              } else {
                next = beginWork$$1(current$$1, unitOfWork, renderExpirationTime);
              }

              resetCurrentFiber();
              unitOfWork.memoizedProps = unitOfWork.pendingProps;
              if (next === null) {
                // If this doesn't spawn new work, complete the current work.
                next = completeUnitOfWork(unitOfWork);
              }

              ReactCurrentOwner$2.current = null;
              return next;
            }

            function completeUnitOfWork(unitOfWork) {
              // Attempt to complete the current unit of work, then move to the next
              // sibling. If there are no more siblings, return to the parent fiber.
              workInProgress = unitOfWork;
              do {
                // The current, flushed, state of this fiber is the alternate. Ideally
                // nothing should rely on this, but relying on it here means that we don't
                // need an additional field on the work in progress.
                var current$$1 = workInProgress.alternate;
                var returnFiber = workInProgress.return;

                // Check if the work completed or if something threw.
                if ((workInProgress.effectTag & Incomplete) === NoEffect) {
                  setCurrentFiber(workInProgress);
                  var next = void 0;
                  if (!enableProfilerTimer || (workInProgress.mode & ProfileMode) === NoMode) {
                    next = completeWork(current$$1, workInProgress, renderExpirationTime);
                  } else {
                    startProfilerTimer(workInProgress);
                    next = completeWork(current$$1, workInProgress, renderExpirationTime);
                    // Update render duration assuming we didn't error.
                    stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
                  }
                  stopWorkTimer(workInProgress);
                  resetCurrentFiber();
                  resetChildExpirationTime(workInProgress);

                  if (next !== null) {
                    // Completing this fiber spawned new work. Work on that next.
                    return next;
                  }

                  if (
                    returnFiber !== null &&
                    // Do not append effects to parents if a sibling failed to complete
                    (returnFiber.effectTag & Incomplete) === NoEffect
                  ) {
                    // Append all the effects of the subtree and this fiber onto the effect
                    // list of the parent. The completion order of the children affects the
                    // side-effect order.
                    if (returnFiber.firstEffect === null) {
                      returnFiber.firstEffect = workInProgress.firstEffect;
                    }
                    if (workInProgress.lastEffect !== null) {
                      if (returnFiber.lastEffect !== null) {
                        returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
                      }
                      returnFiber.lastEffect = workInProgress.lastEffect;
                    }

                    // If this fiber had side-effects, we append it AFTER the children's
                    // side-effects. We can perform certain side-effects earlier if needed,
                    // by doing multiple passes over the effect list. We don't want to
                    // schedule our own side-effect on our own list because if end up
                    // reusing children we'll schedule this effect onto itself since we're
                    // at the end.
                    var effectTag = workInProgress.effectTag;

                    // Skip both NoWork and PerformedWork tags when creating the effect
                    // list. PerformedWork effect is read by React DevTools but shouldn't be
                    // committed.
                    if (effectTag > PerformedWork) {
                      if (returnFiber.lastEffect !== null) {
                        returnFiber.lastEffect.nextEffect = workInProgress;
                      } else {
                        returnFiber.firstEffect = workInProgress;
                      }
                      returnFiber.lastEffect = workInProgress;
                    }
                  }
                } else {
                  // This fiber did not complete because something threw. Pop values off
                  // the stack without entering the complete phase. If this is a boundary,
                  // capture values if possible.
                  var _next = unwindWork(workInProgress, renderExpirationTime);

                  // Because this fiber did not complete, don't reset its expiration time.

                  if (enableProfilerTimer && (workInProgress.mode & ProfileMode) !== NoMode) {
                    // Record the render duration for the fiber that errored.
                    stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);

                    // Include the time spent working on failed children before continuing.
                    var actualDuration = workInProgress.actualDuration;
                    var child = workInProgress.child;
                    while (child !== null) {
                      actualDuration += child.actualDuration;
                      child = child.sibling;
                    }
                    workInProgress.actualDuration = actualDuration;
                  }

                  if (_next !== null) {
                    // If completing this work spawned new work, do that next. We'll come
                    // back here again.
                    // Since we're restarting, remove anything that is not a host effect
                    // from the effect tag.
                    // TODO: The name stopFailedWorkTimer is misleading because Suspense
                    // also captures and restarts.
                    stopFailedWorkTimer(workInProgress);
                    _next.effectTag &= HostEffectMask;
                    return _next;
                  }
                  stopWorkTimer(workInProgress);

                  if (returnFiber !== null) {
                    // Mark the parent fiber as incomplete and clear its effect list.
                    returnFiber.firstEffect = returnFiber.lastEffect = null;
                    returnFiber.effectTag |= Incomplete;
                  }
                }

                var siblingFiber = workInProgress.sibling;
                if (siblingFiber !== null) {
                  // If there is more work to do in this returnFiber, do that next.
                  return siblingFiber;
                }
                // Otherwise, return to the parent
                workInProgress = returnFiber;
              } while (workInProgress !== null);

              // We've reached the root.
              if (workInProgressRootExitStatus === RootIncomplete) {
                workInProgressRootExitStatus = RootCompleted;
              }
              return null;
            }

            function resetChildExpirationTime(completedWork) {
              if (renderExpirationTime !== Never && completedWork.childExpirationTime === Never) {
                // The children of this component are hidden. Don't bubble their
                // expiration times.
                return;
              }

              var newChildExpirationTime = NoWork;

              // Bubble up the earliest expiration time.
              if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {
                // In profiling mode, resetChildExpirationTime is also used to reset
                // profiler durations.
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;

                // When a fiber is cloned, its actualDuration is reset to 0. This value will
                // only be updated if work is done on the fiber (i.e. it doesn't bailout).
                // When work is done, it should bubble to the parent's actualDuration. If
                // the fiber has not been cloned though, (meaning no work was done), then
                // this value will reflect the amount of time spent working on a previous
                // render. In that case it should not bubble. We determine whether it was
                // cloned by comparing the child pointer.
                var shouldBubbleActualDurations =
                  completedWork.alternate === null ||
                  completedWork.child !== completedWork.alternate.child;

                var child = completedWork.child;
                while (child !== null) {
                  var childUpdateExpirationTime = child.expirationTime;
                  var childChildExpirationTime = child.childExpirationTime;
                  if (childUpdateExpirationTime > newChildExpirationTime) {
                    newChildExpirationTime = childUpdateExpirationTime;
                  }
                  if (childChildExpirationTime > newChildExpirationTime) {
                    newChildExpirationTime = childChildExpirationTime;
                  }
                  if (shouldBubbleActualDurations) {
                    actualDuration += child.actualDuration;
                  }
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  var _childUpdateExpirationTime = _child.expirationTime;
                  var _childChildExpirationTime = _child.childExpirationTime;
                  if (_childUpdateExpirationTime > newChildExpirationTime) {
                    newChildExpirationTime = _childUpdateExpirationTime;
                  }
                  if (_childChildExpirationTime > newChildExpirationTime) {
                    newChildExpirationTime = _childChildExpirationTime;
                  }
                  _child = _child.sibling;
                }
              }

              completedWork.childExpirationTime = newChildExpirationTime;
            }

            function commitRoot(root) {
              var renderPriorityLevel = getCurrentPriorityLevel();
              runWithPriority$2(
                ImmediatePriority,
                commitRootImpl.bind(null, root, renderPriorityLevel),
              );
              // If there are passive effects, schedule a callback to flush them. This goes
              // outside commitRootImpl so that it inherits the priority of the render.
              if (rootWithPendingPassiveEffects !== null) {
                scheduleCallback(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
              return null;
            }

            function commitRootImpl(root, renderPriorityLevel) {
              flushPassiveEffects();
              flushRenderPhaseStrictModeWarningsInDEV();

              (function() {
                if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
                  {
                    throw ReactError(Error('Should not already be working.'));
                  }
                }
              })();

              var finishedWork = root.finishedWork;
              var expirationTime = root.finishedExpirationTime;
              if (finishedWork === null) {
                return null;
              }
              root.finishedWork = null;
              root.finishedExpirationTime = NoWork;

              (function() {
                if (!(finishedWork !== root.current)) {
                  {
                    throw ReactError(
                      Error(
                        'Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.',
                      ),
                    );
                  }
                }
              })();

              // commitRoot never returns a continuation; it always finishes synchronously.
              // So we can clear these now to allow a new callback to be scheduled.
              root.callbackNode = null;
              root.callbackExpirationTime = NoWork;

              startCommitTimer();

              // Update the first and last pending times on this root. The new first
              // pending time is whatever is left on the root fiber.
              var updateExpirationTimeBeforeCommit = finishedWork.expirationTime;
              var childExpirationTimeBeforeCommit = finishedWork.childExpirationTime;
              var firstPendingTimeBeforeCommit =
                childExpirationTimeBeforeCommit > updateExpirationTimeBeforeCommit
                  ? childExpirationTimeBeforeCommit
                  : updateExpirationTimeBeforeCommit;
              root.firstPendingTime = firstPendingTimeBeforeCommit;
              if (firstPendingTimeBeforeCommit < root.lastPendingTime) {
                // This usually means we've finished all the work, but it can also happen
                // when something gets downprioritized during render, like a hidden tree.
                root.lastPendingTime = firstPendingTimeBeforeCommit;
              }

              if (root === workInProgressRoot) {
                // We can reset these now that they are finished.
                workInProgressRoot = null;
                workInProgress = null;
                renderExpirationTime = NoWork;
              } else {
              }
              // This indicates that the last root we worked on is not the same one that
              // we're committing now. This most commonly happens when a suspended root
              // times out.

              // Get the list of effects.
              var firstEffect = void 0;
              if (finishedWork.effectTag > PerformedWork) {
                // A fiber's effect list consists only of its children, not itself. So if
                // the root has an effect, we need to add it to the end of the list. The
                // resulting list is the set that would belong to the root's parent, if it
                // had one; that is, all the effects in the tree including the root.
                if (finishedWork.lastEffect !== null) {
                  finishedWork.lastEffect.nextEffect = finishedWork;
                  firstEffect = finishedWork.firstEffect;
                } else {
                  firstEffect = finishedWork;
                }
              } else {
                // There is no effect on the root.
                firstEffect = finishedWork.firstEffect;
              }

              if (firstEffect !== null) {
                var prevExecutionContext = executionContext;
                executionContext |= CommitContext;
                var prevInteractions = null;
                if (enableSchedulerTracing) {
                  prevInteractions = tracing.__interactionsRef.current;
                  tracing.__interactionsRef.current = root.memoizedInteractions;
                }

                // Reset this to null before calling lifecycles
                ReactCurrentOwner$2.current = null;

                // The commit phase is broken into several sub-phases. We do a separate pass
                // of the effect list for each phase: all mutation effects come before all
                // layout effects, and so on.

                // The first phase a "before mutation" phase. We use this phase to read the
                // state of the host tree right before we mutate it. This is where
                // getSnapshotBeforeUpdate is called.
                startCommitSnapshotEffectsTimer();
                prepareForCommit(root.containerInfo);
                nextEffect = firstEffect;
                do {
                  {
                    invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                    if (hasCaughtError()) {
                      (function() {
                        if (!(nextEffect !== null)) {
                          {
                            throw ReactError(Error('Should be working on an effect.'));
                          }
                        }
                      })();
                      var error = clearCaughtError();
                      captureCommitPhaseError(nextEffect, error);
                      nextEffect = nextEffect.nextEffect;
                    }
                  }
                } while (nextEffect !== null);
                stopCommitSnapshotEffectsTimer();

                if (enableProfilerTimer) {
                  // Mark the current commit time to be shared by all Profilers in this
                  // batch. This enables them to be grouped later.
                  recordCommitTime();
                }

                // The next phase is the mutation phase, where we mutate the host tree.
                startCommitHostEffectsTimer();
                nextEffect = firstEffect;
                do {
                  {
                    invokeGuardedCallback(null, commitMutationEffects, null, renderPriorityLevel);
                    if (hasCaughtError()) {
                      (function() {
                        if (!(nextEffect !== null)) {
                          {
                            throw ReactError(Error('Should be working on an effect.'));
                          }
                        }
                      })();
                      var _error = clearCaughtError();
                      captureCommitPhaseError(nextEffect, _error);
                      nextEffect = nextEffect.nextEffect;
                    }
                  }
                } while (nextEffect !== null);
                stopCommitHostEffectsTimer();
                resetAfterCommit(root.containerInfo);

                // The work-in-progress tree is now the current tree. This must come after
                // the mutation phase, so that the previous tree is still current during
                // componentWillUnmount, but before the layout phase, so that the finished
                // work is current during componentDidMount/Update.
                root.current = finishedWork;

                // The next phase is the layout phase, where we call effects that read
                // the host tree after it's been mutated. The idiomatic use case for this is
                // layout, but class component lifecycles also fire here for legacy reasons.
                startCommitLifeCyclesTimer();
                nextEffect = firstEffect;
                do {
                  {
                    invokeGuardedCallback(null, commitLayoutEffects, null, root, expirationTime);
                    if (hasCaughtError()) {
                      (function() {
                        if (!(nextEffect !== null)) {
                          {
                            throw ReactError(Error('Should be working on an effect.'));
                          }
                        }
                      })();
                      var _error2 = clearCaughtError();
                      captureCommitPhaseError(nextEffect, _error2);
                      nextEffect = nextEffect.nextEffect;
                    }
                  }
                } while (nextEffect !== null);
                stopCommitLifeCyclesTimer();

                nextEffect = null;

                // Tell Scheduler to yield at the end of the frame, so the browser has an
                // opportunity to paint.
                requestPaint();

                if (enableSchedulerTracing) {
                  tracing.__interactionsRef.current = prevInteractions;
                }
                executionContext = prevExecutionContext;
              } else {
                // No effects.
                root.current = finishedWork;
                // Measure these anyway so the flamegraph explicitly shows that there were
                // no effects.
                // TODO: Maybe there's a better way to report this.
                startCommitSnapshotEffectsTimer();
                stopCommitSnapshotEffectsTimer();
                if (enableProfilerTimer) {
                  recordCommitTime();
                }
                startCommitHostEffectsTimer();
                stopCommitHostEffectsTimer();
                startCommitLifeCyclesTimer();
                stopCommitLifeCyclesTimer();
              }

              stopCommitTimer();

              var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

              if (rootDoesHavePassiveEffects) {
                // This commit has passive effects. Stash a reference to them. But don't
                // schedule a callback until after flushing layout work.
                rootDoesHavePassiveEffects = false;
                rootWithPendingPassiveEffects = root;
                pendingPassiveEffectsExpirationTime = expirationTime;
                pendingPassiveEffectsRenderPriority = renderPriorityLevel;
              } else {
                // We are done with the effect chain at this point so let's clear the
                // nextEffect pointers to assist with GC. If we have passive effects, we'll
                // clear this in flushPassiveEffects.
                nextEffect = firstEffect;
                while (nextEffect !== null) {
                  var nextNextEffect = nextEffect.nextEffect;
                  nextEffect.nextEffect = null;
                  nextEffect = nextNextEffect;
                }
              }

              // Check if there's remaining work on this root
              var remainingExpirationTime = root.firstPendingTime;
              if (remainingExpirationTime !== NoWork) {
                var currentTime = requestCurrentTime();
                var priorityLevel = inferPriorityFromExpirationTime(
                  currentTime,
                  remainingExpirationTime,
                );

                if (enableSchedulerTracing) {
                  if (spawnedWorkDuringRender !== null) {
                    var expirationTimes = spawnedWorkDuringRender;
                    spawnedWorkDuringRender = null;
                    for (var i = 0; i < expirationTimes.length; i++) {
                      scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
                    }
                  }
                }

                scheduleCallbackForRoot(root, priorityLevel, remainingExpirationTime);
              } else {
                // If there's no remaining work, we can clear the set of already failed
                // error boundaries.
                legacyErrorBoundariesThatAlreadyFailed = null;
              }

              if (enableSchedulerTracing) {
                if (!rootDidHavePassiveEffects) {
                  // If there are no passive effects, then we can complete the pending interactions.
                  // Otherwise, we'll wait until after the passive effects are flushed.
                  // Wait to do this until after remaining work has been scheduled,
                  // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
                  finishPendingInteractions(root, expirationTime);
                }
              }

              onCommitRoot(finishedWork.stateNode, expirationTime);

              if (remainingExpirationTime === Sync) {
                // Count the number of times the root synchronously re-renders without
                // finishing. If there are too many, it indicates an infinite update loop.
                if (root === rootWithNestedUpdates) {
                  nestedUpdateCount++;
                } else {
                  nestedUpdateCount = 0;
                  rootWithNestedUpdates = root;
                }
              } else {
                nestedUpdateCount = 0;
              }

              if (hasUncaughtError) {
                hasUncaughtError = false;
                var _error3 = firstUncaughtError;
                firstUncaughtError = null;
                throw _error3;
              }

              if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
                // This is a legacy edge case. We just committed the initial mount of
                // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
                // synchronously, but layout updates should be deferred until the end
                // of the batch.
                return null;
              }

              // If layout work was scheduled, flush it now.
              flushSyncCallbackQueue();
              return null;
            }

            function commitBeforeMutationEffects() {
              while (nextEffect !== null) {
                if ((nextEffect.effectTag & Snapshot) !== NoEffect) {
                  setCurrentFiber(nextEffect);
                  recordEffect();

                  var current$$1 = nextEffect.alternate;
                  commitBeforeMutationLifeCycles(current$$1, nextEffect);

                  resetCurrentFiber();
                }
                nextEffect = nextEffect.nextEffect;
              }
            }

            function commitMutationEffects(renderPriorityLevel) {
              // TODO: Should probably move the bulk of this function to commitWork.
              while (nextEffect !== null) {
                setCurrentFiber(nextEffect);

                var effectTag = nextEffect.effectTag;

                if (effectTag & ContentReset) {
                  commitResetTextContent(nextEffect);
                }

                if (effectTag & Ref) {
                  var current$$1 = nextEffect.alternate;
                  if (current$$1 !== null) {
                    commitDetachRef(current$$1);
                  }
                }

                // The following switch statement is only concerned about placement,
                // updates, and deletions. To avoid needing to add a case for every possible
                // bitmap value, we remove the secondary effects from the effect tag and
                // switch on that value.
                var primaryEffectTag = effectTag & (Placement | Update | Deletion);
                switch (primaryEffectTag) {
                  case Placement: {
                    commitPlacement(nextEffect);
                    // Clear the "placement" from effect tag so that we know that this is
                    // inserted, before any life-cycles like componentDidMount gets called.
                    // TODO: findDOMNode doesn't rely on this any more but isMounted does
                    // and isMounted is deprecated anyway so we should be able to kill this.
                    nextEffect.effectTag &= ~Placement;
                    break;
                  }
                  case PlacementAndUpdate: {
                    // Placement
                    commitPlacement(nextEffect);
                    // Clear the "placement" from effect tag so that we know that this is
                    // inserted, before any life-cycles like componentDidMount gets called.
                    nextEffect.effectTag &= ~Placement;

                    // Update
                    var _current = nextEffect.alternate;
                    commitWork(_current, nextEffect);
                    break;
                  }
                  case Update: {
                    var _current2 = nextEffect.alternate;
                    commitWork(_current2, nextEffect);
                    break;
                  }
                  case Deletion: {
                    commitDeletion(nextEffect, renderPriorityLevel);
                    break;
                  }
                }

                // TODO: Only record a mutation effect if primaryEffectTag is non-zero.
                recordEffect();

                resetCurrentFiber();
                nextEffect = nextEffect.nextEffect;
              }
            }

            function commitLayoutEffects(root, committedExpirationTime) {
              // TODO: Should probably move the bulk of this function to commitWork.
              while (nextEffect !== null) {
                setCurrentFiber(nextEffect);

                var effectTag = nextEffect.effectTag;

                if (effectTag & (Update | Callback)) {
                  recordEffect();
                  var current$$1 = nextEffect.alternate;
                  commitLifeCycles(root, current$$1, nextEffect, committedExpirationTime);
                }

                if (effectTag & Ref) {
                  recordEffect();
                  commitAttachRef(nextEffect);
                }

                if (effectTag & Passive) {
                  rootDoesHavePassiveEffects = true;
                }

                resetCurrentFiber();
                nextEffect = nextEffect.nextEffect;
              }
            }

            function flushPassiveEffects() {
              if (rootWithPendingPassiveEffects === null) {
                return false;
              }
              var root = rootWithPendingPassiveEffects;
              var expirationTime = pendingPassiveEffectsExpirationTime;
              var renderPriorityLevel = pendingPassiveEffectsRenderPriority;
              rootWithPendingPassiveEffects = null;
              pendingPassiveEffectsExpirationTime = NoWork;
              pendingPassiveEffectsRenderPriority = NoPriority;
              var priorityLevel =
                renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
              return runWithPriority$2(
                priorityLevel,
                flushPassiveEffectsImpl.bind(null, root, expirationTime),
              );
            }

            function flushPassiveEffectsImpl(root, expirationTime) {
              var prevInteractions = null;
              if (enableSchedulerTracing) {
                prevInteractions = tracing.__interactionsRef.current;
                tracing.__interactionsRef.current = root.memoizedInteractions;
              }

              (function() {
                if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
                  {
                    throw ReactError(
                      Error('Cannot flush passive effects while already rendering.'),
                    );
                  }
                }
              })();
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;

              // Note: This currently assumes there are no passive effects on the root
              // fiber, because the root is not part of its own effect list. This could
              // change in the future.
              var effect = root.current.firstEffect;
              while (effect !== null) {
                {
                  setCurrentFiber(effect);
                  invokeGuardedCallback(null, commitPassiveHookEffects, null, effect);
                  if (hasCaughtError()) {
                    (function() {
                      if (!(effect !== null)) {
                        {
                          throw ReactError(Error('Should be working on an effect.'));
                        }
                      }
                    })();
                    var error = clearCaughtError();
                    captureCommitPhaseError(effect, error);
                  }
                  resetCurrentFiber();
                }
                var nextNextEffect = effect.nextEffect;
                // Remove nextEffect pointer to assist GC
                effect.nextEffect = null;
                effect = nextNextEffect;
              }

              if (enableSchedulerTracing) {
                tracing.__interactionsRef.current = prevInteractions;
                finishPendingInteractions(root, expirationTime);
              }

              executionContext = prevExecutionContext;
              flushSyncCallbackQueue();

              // If additional passive effects were scheduled, increment a counter. If this
              // exceeds the limit, we'll fire a warning.
              nestedPassiveUpdateCount =
                rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;

              return true;
            }

            function isAlreadyFailedLegacyErrorBoundary(instance) {
              return (
                legacyErrorBoundariesThatAlreadyFailed !== null &&
                legacyErrorBoundariesThatAlreadyFailed.has(instance)
              );
            }

            function markLegacyErrorBoundaryAsFailed(instance) {
              if (legacyErrorBoundariesThatAlreadyFailed === null) {
                legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
              } else {
                legacyErrorBoundariesThatAlreadyFailed.add(instance);
              }
            }

            function prepareToThrowUncaughtError(error) {
              if (!hasUncaughtError) {
                hasUncaughtError = true;
                firstUncaughtError = error;
              }
            }
            var onUncaughtError = prepareToThrowUncaughtError;

            function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
              var errorInfo = createCapturedValue(error, sourceFiber);
              var update = createRootErrorUpdate(rootFiber, errorInfo, Sync);
              enqueueUpdate(rootFiber, update);
              var root = markUpdateTimeFromFiberToRoot(rootFiber, Sync);
              if (root !== null) {
                scheduleCallbackForRoot(root, ImmediatePriority, Sync);
              }
            }

            function captureCommitPhaseError(sourceFiber, error) {
              if (sourceFiber.tag === HostRoot) {
                // Error was thrown at the root. There is no parent, so the root
                // itself should capture it.
                captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
                return;
              }

              var fiber = sourceFiber.return;
              while (fiber !== null) {
                if (fiber.tag === HostRoot) {
                  captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
                  return;
                } else if (fiber.tag === ClassComponent) {
                  var ctor = fiber.type;
                  var instance = fiber.stateNode;
                  if (
                    typeof ctor.getDerivedStateFromError === 'function' ||
                    (typeof instance.componentDidCatch === 'function' &&
                      !isAlreadyFailedLegacyErrorBoundary(instance))
                  ) {
                    var errorInfo = createCapturedValue(error, sourceFiber);
                    var update = createClassErrorUpdate(
                      fiber,
                      errorInfo,
                      // TODO: This is always sync
                      Sync,
                    );
                    enqueueUpdate(fiber, update);
                    var root = markUpdateTimeFromFiberToRoot(fiber, Sync);
                    if (root !== null) {
                      scheduleCallbackForRoot(root, ImmediatePriority, Sync);
                    }
                    return;
                  }
                }
                fiber = fiber.return;
              }
            }

            function pingSuspendedRoot(root, thenable, suspendedTime) {
              var pingCache = root.pingCache;
              if (pingCache !== null) {
                // The thenable resolved, so we no longer need to memoize, because it will
                // never be thrown again.
                pingCache.delete(thenable);
              }

              if (workInProgressRoot === root && renderExpirationTime === suspendedTime) {
                // Received a ping at the same priority level at which we're currently
                // rendering. We might want to restart this render. This should mirror
                // the logic of whether or not a root suspends once it completes.

                // TODO: If we're rendering sync either due to Sync, Batched or expired,
                // we should probably never restart.

                // If we're suspended with delay, we'll always suspend so we can always
                // restart. If we're suspended without any updates, it might be a retry.
                // If it's early in the retry we can restart. We can't know for sure
                // whether we'll eventually process an update during this render pass,
                // but it's somewhat unlikely that we get to a ping before that, since
                // getting to the root most update is usually very fast.
                if (
                  workInProgressRootExitStatus === RootSuspendedWithDelay ||
                  (workInProgressRootExitStatus === RootSuspended &&
                    workInProgressRootLatestProcessedExpirationTime === Sync &&
                    now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)
                ) {
                  // Restart from the root. Don't need to schedule a ping because
                  // we're already working on this tree.
                  prepareFreshStack(root, renderExpirationTime);
                } else {
                  // Even though we can't restart right now, we might get an
                  // opportunity later. So we mark this render as having a ping.
                  workInProgressRootHasPendingPing = true;
                }
                return;
              }

              var lastPendingTime = root.lastPendingTime;
              if (lastPendingTime < suspendedTime) {
                // The root is no longer suspended at this time.
                return;
              }

              var pingTime = root.pingTime;
              if (pingTime !== NoWork && pingTime < suspendedTime) {
                // There's already a lower priority ping scheduled.
                return;
              }

              // Mark the time at which this ping was scheduled.
              root.pingTime = suspendedTime;

              if (root.finishedExpirationTime === suspendedTime) {
                // If there's a pending fallback waiting to commit, throw it away.
                root.finishedExpirationTime = NoWork;
                root.finishedWork = null;
              }

              var currentTime = requestCurrentTime();
              var priorityLevel = inferPriorityFromExpirationTime(currentTime, suspendedTime);
              scheduleCallbackForRoot(root, priorityLevel, suspendedTime);
            }

            function retryTimedOutBoundary(boundaryFiber) {
              // The boundary fiber (a Suspense component or SuspenseList component)
              // previously was rendered in its fallback state. One of the promises that
              // suspended it has resolved, which means at least part of the tree was
              // likely unblocked. Try rendering again, at a new expiration time.
              var currentTime = requestCurrentTime();
              var suspenseConfig = null; // Retries don't carry over the already committed update.
              var retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
              // TODO: Special case idle priority?
              var priorityLevel = inferPriorityFromExpirationTime(currentTime, retryTime);
              var root = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);
              if (root !== null) {
                scheduleCallbackForRoot(root, priorityLevel, retryTime);
              }
            }

            function resolveRetryThenable(boundaryFiber, thenable) {
              var retryCache = void 0;
              if (enableSuspenseServerRenderer) {
                switch (boundaryFiber.tag) {
                  case SuspenseComponent:
                    retryCache = boundaryFiber.stateNode;
                    break;
                  case DehydratedSuspenseComponent:
                    retryCache = boundaryFiber.memoizedState;
                    break;
                  default:
                    (function() {
                      {
                        {
                          throw ReactError(
                            Error(
                              'Pinged unknown suspense boundary type. This is probably a bug in React.',
                            ),
                          );
                        }
                      }
                    })();
                }
              } else {
                retryCache = boundaryFiber.stateNode;
              }

              if (retryCache !== null) {
                // The thenable resolved, so we no longer need to memoize, because it will
                // never be thrown again.
                retryCache.delete(thenable);
              }

              retryTimedOutBoundary(boundaryFiber);
            }

            // Computes the next Just Noticeable Difference (JND) boundary.
            // The theory is that a person can't tell the difference between small differences in time.
            // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
            // difference in the experience. However, waiting for longer might mean that we can avoid
            // showing an intermediate loading state. The longer we have already waited, the harder it
            // is to tell small differences in time. Therefore, the longer we've already waited,
            // the longer we can wait additionally. At some point we have to give up though.
            // We pick a train model where the next boundary commits at a consistent schedule.
            // These particular numbers are vague estimates. We expect to adjust them based on research.
            function jnd(timeElapsed) {
              return timeElapsed < 120
                ? 120
                : timeElapsed < 480
                ? 480
                : timeElapsed < 1080
                ? 1080
                : timeElapsed < 1920
                ? 1920
                : timeElapsed < 3000
                ? 3000
                : timeElapsed < 4320
                ? 4320
                : ceil(timeElapsed / 1960) * 1960;
            }

            function computeMsUntilSuspenseLoadingDelay(
              mostRecentEventTime,
              committedExpirationTime,
              suspenseConfig,
            ) {
              var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;
              if (busyMinDurationMs <= 0) {
                return 0;
              }
              var busyDelayMs = suspenseConfig.busyDelayMs | 0;

              // Compute the time until this render pass would expire.
              var currentTimeMs = now();
              var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(
                mostRecentEventTime,
                suspenseConfig,
              );
              var timeElapsed = currentTimeMs - eventTimeMs;
              if (timeElapsed <= busyDelayMs) {
                // If we haven't yet waited longer than the initial delay, we don't
                // have to wait any additional time.
                return 0;
              }
              var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed;
              // This is the value that is passed to `setTimeout`.
              return msUntilTimeout;
            }

            function checkForNestedUpdates() {
              if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = null;
                (function() {
                  {
                    {
                      throw ReactError(
                        Error(
                          'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.',
                        ),
                      );
                    }
                  }
                })();
              }

              {
                if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                  nestedPassiveUpdateCount = 0;
                  warning$1(
                    false,
                    'Maximum update depth exceeded. This can happen when a component ' +
                      "calls setState inside useEffect, but useEffect either doesn't " +
                      'have a dependency array, or one of the dependencies changes on ' +
                      'every render.',
                  );
                }
              }
            }

            function flushRenderPhaseStrictModeWarningsInDEV() {
              {
                ReactStrictModeWarnings.flushLegacyContextWarning();

                if (warnAboutDeprecatedLifecycles) {
                  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
                }
              }
            }

            function stopFinishedWorkLoopTimer() {
              var didCompleteRoot = true;
              stopWorkLoopTimer(interruptedBy, didCompleteRoot);
              interruptedBy = null;
            }

            function stopInterruptedWorkLoopTimer() {
              // TODO: Track which fiber caused the interruption.
              var didCompleteRoot = false;
              stopWorkLoopTimer(interruptedBy, didCompleteRoot);
              interruptedBy = null;
            }

            function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) {
              if (
                enableUserTimingAPI &&
                workInProgressRoot !== null &&
                updateExpirationTime > renderExpirationTime
              ) {
                interruptedBy = fiberThatReceivedUpdate;
              }
            }

            var didWarnStateUpdateForUnmountedComponent = null;
            function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
              {
                var tag = fiber.tag;
                if (
                  tag !== HostRoot &&
                  tag !== ClassComponent &&
                  tag !== FunctionComponent &&
                  tag !== ForwardRef &&
                  tag !== MemoComponent &&
                  tag !== SimpleMemoComponent
                ) {
                  // Only warn for user-defined components, not internal ones like Suspense.
                  return;
                }
                // We show the whole stack but dedupe on the top component's name because
                // the problematic code almost always lies inside that component.
                var componentName = getComponentName(fiber.type) || 'ReactComponent';
                if (didWarnStateUpdateForUnmountedComponent !== null) {
                  if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                    return;
                  }
                  didWarnStateUpdateForUnmountedComponent.add(componentName);
                } else {
                  didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
                }
                warningWithoutStack$1(
                  false,
                  "Can't perform a React state update on an unmounted component. This " +
                    'is a no-op, but it indicates a memory leak in your application. To ' +
                    'fix, cancel all subscriptions and asynchronous tasks in %s.%s',
                  tag === ClassComponent
                    ? 'the componentWillUnmount method'
                    : 'a useEffect cleanup function',
                  getStackByFiberInDevAndProd(fiber),
                );
              }
            }

            var beginWork$$1 = void 0;
            if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
              var dummyFiber = null;
              beginWork$$1 = function(current$$1, unitOfWork, expirationTime) {
                // If a component throws an error, we replay it again in a synchronously
                // dispatched event, so that the debugger will treat it as an uncaught
                // error See ReactErrorUtils for more information.

                // Before entering the begin phase, copy the work-in-progress onto a dummy
                // fiber. If beginWork throws, we'll use this to reset the state.
                var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
                try {
                  return beginWork$1(current$$1, unitOfWork, expirationTime);
                } catch (originalError) {
                  if (
                    originalError !== null &&
                    typeof originalError === 'object' &&
                    typeof originalError.then === 'function'
                  ) {
                    // Don't replay promises. Treat everything else like an error.
                    throw originalError;
                  }

                  // Keep this code in sync with renderRoot; any changes here must have
                  // corresponding changes there.
                  resetContextDependencies();
                  resetHooks();

                  // Unwind the failed stack frame
                  unwindInterruptedWork(unitOfWork);

                  // Restore the original properties of the fiber.
                  assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

                  if (enableProfilerTimer && unitOfWork.mode & ProfileMode) {
                    // Reset the profiler timer.
                    startProfilerTimer(unitOfWork);
                  }

                  // Run beginWork again.
                  invokeGuardedCallback(
                    null,
                    beginWork$1,
                    null,
                    current$$1,
                    unitOfWork,
                    expirationTime,
                  );

                  if (hasCaughtError()) {
                    var replayError = clearCaughtError();
                    // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
                    // Rethrow this error instead of the original one.
                    throw replayError;
                  } else {
                    // This branch is reachable if the render phase is impure.
                    throw originalError;
                  }
                }
              };
            } else {
              beginWork$$1 = beginWork$1;
            }

            var didWarnAboutUpdateInRender = false;
            var didWarnAboutUpdateInGetChildContext = false;
            function warnAboutInvalidUpdatesOnClassComponentsInDEV(fiber) {
              {
                if (fiber.tag === ClassComponent) {
                  switch (phase) {
                    case 'getChildContext':
                      if (didWarnAboutUpdateInGetChildContext) {
                        return;
                      }
                      warningWithoutStack$1(
                        false,
                        'setState(...): Cannot call setState() inside getChildContext()',
                      );
                      didWarnAboutUpdateInGetChildContext = true;
                      break;
                    case 'render':
                      if (didWarnAboutUpdateInRender) {
                        return;
                      }
                      warningWithoutStack$1(
                        false,
                        'Cannot update during an existing state transition (such as ' +
                          'within `render`). Render methods should be a pure function of ' +
                          'props and state.',
                      );
                      didWarnAboutUpdateInRender = true;
                      break;
                  }
                }
              }
            }

            // a 'shared' variable that changes when act() opens/closes in tests.
            var IsThisRendererActing = { current: false };

            function warnIfNotScopedWithMatchingAct(fiber) {
              {
                if (
                  warnsIfNotActing === true &&
                  IsSomeRendererActing.current === true &&
                  IsThisRendererActing.current !== true
                ) {
                  warningWithoutStack$1(
                    false,
                    "It looks like you're using the wrong act() around your test interactions.\n" +
                      'Be sure to use the matching version of act() corresponding to your renderer:\n\n' +
                      '// for react-dom:\n' +
                      "import {act} from 'react-dom/test-utils';\n" +
                      '//...\n' +
                      'act(() => ...);\n\n' +
                      '// for react-test-renderer:\n' +
                      "import TestRenderer from 'react-test-renderer';\n" +
                      'const {act} = TestRenderer;\n' +
                      '//...\n' +
                      'act(() => ...);' +
                      '%s',
                    getStackByFiberInDevAndProd(fiber),
                  );
                }
              }
            }

            function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
              {
                if (
                  warnsIfNotActing === true &&
                  (fiber.mode & StrictMode) !== NoMode &&
                  IsSomeRendererActing.current === false &&
                  IsThisRendererActing.current === false
                ) {
                  warningWithoutStack$1(
                    false,
                    'An update to %s ran an effect, but was not wrapped in act(...).\n\n' +
                      'When testing, code that causes React state updates should be ' +
                      'wrapped into act(...):\n\n' +
                      'act(() => {\n' +
                      '  /* fire events that update state */\n' +
                      '});\n' +
                      '/* assert on the output */\n\n' +
                      "This ensures that you're testing the behavior the user would see " +
                      'in the browser.' +
                      ' Learn more at https://fb.me/react-wrap-tests-with-act' +
                      '%s',
                    getComponentName(fiber.type),
                    getStackByFiberInDevAndProd(fiber),
                  );
                }
              }
            }

            function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
              {
                if (
                  warnsIfNotActing === true &&
                  executionContext === NoContext &&
                  IsSomeRendererActing.current === false &&
                  IsThisRendererActing.current === false
                ) {
                  warningWithoutStack$1(
                    false,
                    'An update to %s inside a test was not wrapped in act(...).\n\n' +
                      'When testing, code that causes React state updates should be ' +
                      'wrapped into act(...):\n\n' +
                      'act(() => {\n' +
                      '  /* fire events that update state */\n' +
                      '});\n' +
                      '/* assert on the output */\n\n' +
                      "This ensures that you're testing the behavior the user would see " +
                      'in the browser.' +
                      ' Learn more at https://fb.me/react-wrap-tests-with-act' +
                      '%s',
                    getComponentName(fiber.type),
                    getStackByFiberInDevAndProd(fiber),
                  );
                }
              }
            }

            var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;

            // In tests, we want to enforce a mocked scheduler.
            var didWarnAboutUnmockedScheduler = false;
            // TODO Before we release concurrent mode, revisit this and decide whether a mocked
            // scheduler is the actual recommendation. The alternative could be a testing build,
            // a new lib, or whatever; we dunno just yet. This message is for early adopters
            // to get their tests right.

            function warnIfUnmockedScheduler(fiber) {
              {
                if (
                  didWarnAboutUnmockedScheduler === false &&
                  Scheduler.unstable_flushAllWithoutAsserting === undefined
                ) {
                  if (fiber.mode & BatchedMode || fiber.mode & ConcurrentMode) {
                    didWarnAboutUnmockedScheduler = true;
                    warningWithoutStack$1(
                      false,
                      'In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' +
                        'to guarantee consistent behaviour across tests and browsers. ' +
                        'For example, with jest: \n' +
                        "jest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\n" +
                        'For more info, visit https://fb.me/react-mock-scheduler',
                    );
                  } else if (warnAboutUnmockedScheduler === true) {
                    didWarnAboutUnmockedScheduler = true;
                    warningWithoutStack$1(
                      false,
                      'Starting from React v17, the "scheduler" module will need to be mocked ' +
                        'to guarantee consistent behaviour across tests and browsers. ' +
                        'For example, with jest: \n' +
                        "jest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\n" +
                        'For more info, visit https://fb.me/react-mock-scheduler',
                    );
                  }
                }
              }
            }

            var componentsThatTriggeredHighPriSuspend = null;
            function checkForWrongSuspensePriorityInDEV(sourceFiber) {
              {
                var currentPriorityLevel = getCurrentPriorityLevel();
                if (
                  (sourceFiber.mode & ConcurrentMode) !== NoEffect &&
                  (currentPriorityLevel === UserBlockingPriority$2 ||
                    currentPriorityLevel === ImmediatePriority)
                ) {
                  var workInProgressNode = sourceFiber;
                  while (workInProgressNode !== null) {
                    // Add the component that triggered the suspense
                    var current$$1 = workInProgressNode.alternate;
                    if (current$$1 !== null) {
                      // TODO: warn component that triggers the high priority
                      // suspend is the HostRoot
                      switch (workInProgressNode.tag) {
                        case ClassComponent:
                          // Loop through the component's update queue and see whether the component
                          // has triggered any high priority updates
                          var updateQueue = current$$1.updateQueue;
                          if (updateQueue !== null) {
                            var update = updateQueue.firstUpdate;
                            while (update !== null) {
                              var priorityLevel = update.priority;
                              if (
                                priorityLevel === UserBlockingPriority$2 ||
                                priorityLevel === ImmediatePriority
                              ) {
                                if (componentsThatTriggeredHighPriSuspend === null) {
                                  componentsThatTriggeredHighPriSuspend = new Set([
                                    getComponentName(workInProgressNode.type),
                                  ]);
                                } else {
                                  componentsThatTriggeredHighPriSuspend.add(
                                    getComponentName(workInProgressNode.type),
                                  );
                                }
                                break;
                              }
                              update = update.next;
                            }
                          }
                          break;
                        case FunctionComponent:
                        case ForwardRef:
                        case SimpleMemoComponent:
                          if (
                            workInProgressNode.memoizedState !== null &&
                            workInProgressNode.memoizedState.baseUpdate !== null
                          ) {
                            var _update = workInProgressNode.memoizedState.baseUpdate;
                            // Loop through the functional component's memoized state to see whether
                            // the component has triggered any high pri updates
                            while (_update !== null) {
                              var priority = _update.priority;
                              if (
                                priority === UserBlockingPriority$2 ||
                                priority === ImmediatePriority
                              ) {
                                if (componentsThatTriggeredHighPriSuspend === null) {
                                  componentsThatTriggeredHighPriSuspend = new Set([
                                    getComponentName(workInProgressNode.type),
                                  ]);
                                } else {
                                  componentsThatTriggeredHighPriSuspend.add(
                                    getComponentName(workInProgressNode.type),
                                  );
                                }
                                break;
                              }
                              if (_update.next === workInProgressNode.memoizedState.baseUpdate) {
                                break;
                              }
                              _update = _update.next;
                            }
                          }
                          break;
                        default:
                          break;
                      }
                    }
                    workInProgressNode = workInProgressNode.return;
                  }
                }
              }
            }

            function flushSuspensePriorityWarningInDEV() {
              {
                if (componentsThatTriggeredHighPriSuspend !== null) {
                  var componentNames = [];
                  componentsThatTriggeredHighPriSuspend.forEach(function(name) {
                    return componentNames.push(name);
                  });
                  componentsThatTriggeredHighPriSuspend = null;

                  if (componentNames.length > 0) {
                    warningWithoutStack$1(
                      false,
                      '%s triggered a user-blocking update that suspended.' +
                        '\n\n' +
                        'The fix is to split the update into multiple parts: a user-blocking ' +
                        'update to provide immediate feedback, and another update that ' +
                        'triggers the bulk of the changes.' +
                        '\n\n' +
                        'Refer to the documentation for useSuspenseTransition to learn how ' +
                        'to implement this pattern.',
                      // TODO: Add link to React docs with more information, once it exists
                      componentNames.sort().join(', '),
                    );
                  }
                }
              }
            }

            function computeThreadID(root, expirationTime) {
              // Interaction threads are unique per root and expiration time.
              return expirationTime * 1000 + root.interactionThreadID;
            }

            function markSpawnedWork(expirationTime) {
              if (!enableSchedulerTracing) {
                return;
              }
              if (spawnedWorkDuringRender === null) {
                spawnedWorkDuringRender = [expirationTime];
              } else {
                spawnedWorkDuringRender.push(expirationTime);
              }
            }

            function scheduleInteractions(root, expirationTime, interactions) {
              if (!enableSchedulerTracing) {
                return;
              }

              if (interactions.size > 0) {
                var pendingInteractionMap = root.pendingInteractionMap;
                var pendingInteractions = pendingInteractionMap.get(expirationTime);
                if (pendingInteractions != null) {
                  interactions.forEach(function(interaction) {
                    if (!pendingInteractions.has(interaction)) {
                      // Update the pending async work count for previously unscheduled interaction.
                      interaction.__count++;
                    }

                    pendingInteractions.add(interaction);
                  });
                } else {
                  pendingInteractionMap.set(expirationTime, new Set(interactions));

                  // Update the pending async work count for the current interactions.
                  interactions.forEach(function(interaction) {
                    interaction.__count++;
                  });
                }

                var subscriber = tracing.__subscriberRef.current;
                if (subscriber !== null) {
                  var threadID = computeThreadID(root, expirationTime);
                  subscriber.onWorkScheduled(interactions, threadID);
                }
              }
            }

            function schedulePendingInteractions(root, expirationTime) {
              // This is called when work is scheduled on a root.
              // It associates the current interactions with the newly-scheduled expiration.
              // They will be restored when that expiration is later committed.
              if (!enableSchedulerTracing) {
                return;
              }

              scheduleInteractions(root, expirationTime, tracing.__interactionsRef.current);
            }

            function startWorkOnPendingInteractions(root, expirationTime) {
              // This is called when new work is started on a root.
              if (!enableSchedulerTracing) {
                return;
              }

              // Determine which interactions this batch of work currently includes, So that
              // we can accurately attribute time spent working on it, And so that cascading
              // work triggered during the render phase will be associated with it.
              var interactions = new Set();
              root.pendingInteractionMap.forEach(function(
                scheduledInteractions,
                scheduledExpirationTime,
              ) {
                if (scheduledExpirationTime >= expirationTime) {
                  scheduledInteractions.forEach(function(interaction) {
                    return interactions.add(interaction);
                  });
                }
              });

              // Store the current set of interactions on the FiberRoot for a few reasons:
              // We can re-use it in hot functions like renderRoot() without having to
              // recalculate it. We will also use it in commitWork() to pass to any Profiler
              // onRender() hooks. This also provides DevTools with a way to access it when
              // the onCommitRoot() hook is called.
              root.memoizedInteractions = interactions;

              if (interactions.size > 0) {
                var subscriber = tracing.__subscriberRef.current;
                if (subscriber !== null) {
                  var threadID = computeThreadID(root, expirationTime);
                  try {
                    subscriber.onWorkStarted(interactions, threadID);
                  } catch (error) {
                    // If the subscriber throws, rethrow it in a separate task
                    scheduleCallback(ImmediatePriority, function() {
                      throw error;
                    });
                  }
                }
              }
            }

            function finishPendingInteractions(root, committedExpirationTime) {
              if (!enableSchedulerTracing) {
                return;
              }

              var earliestRemainingTimeAfterCommit = root.firstPendingTime;

              var subscriber = void 0;

              try {
                subscriber = tracing.__subscriberRef.current;
                if (subscriber !== null && root.memoizedInteractions.size > 0) {
                  var threadID = computeThreadID(root, committedExpirationTime);
                  subscriber.onWorkStopped(root.memoizedInteractions, threadID);
                }
              } catch (error) {
                // If the subscriber throws, rethrow it in a separate task
                scheduleCallback(ImmediatePriority, function() {
                  throw error;
                });
              } finally {
                // Clear completed interactions from the pending Map.
                // Unless the render was suspended or cascading work was scheduled,
                // In which case– leave pending interactions until the subsequent render.
                var pendingInteractionMap = root.pendingInteractionMap;
                pendingInteractionMap.forEach(function(
                  scheduledInteractions,
                  scheduledExpirationTime,
                ) {
                  // Only decrement the pending interaction count if we're done.
                  // If there's still work at the current priority,
                  // That indicates that we are waiting for suspense data.
                  if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
                    pendingInteractionMap.delete(scheduledExpirationTime);

                    scheduledInteractions.forEach(function(interaction) {
                      interaction.__count--;

                      if (subscriber !== null && interaction.__count === 0) {
                        try {
                          subscriber.onInteractionScheduledWorkCompleted(interaction);
                        } catch (error) {
                          // If the subscriber throws, rethrow it in a separate task
                          scheduleCallback(ImmediatePriority, function() {
                            throw error;
                          });
                        }
                      }
                    });
                  }
                });
              }
            }

            var onCommitFiberRoot = null;
            var onCommitFiberUnmount = null;
            var hasLoggedError = false;

            var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';

            function injectInternals(internals) {
              if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
                // No DevTools
                return false;
              }
              var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
              if (hook.isDisabled) {
                // This isn't a real property on the hook, but it can be set to opt out
                // of DevTools integration and associated warnings and logs.
                // https://github.com/facebook/react/issues/3877
                return true;
              }
              if (!hook.supportsFiber) {
                {
                  warningWithoutStack$1(
                    false,
                    'The installed version of React DevTools is too old and will not work ' +
                      'with the current version of React. Please update React DevTools. ' +
                      'https://fb.me/react-devtools',
                  );
                }
                // DevTools exists, even though it doesn't support Fiber.
                return true;
              }
              try {
                var rendererID = hook.inject(internals);
                // We have successfully injected, so now it is safe to set up hooks.
                onCommitFiberRoot = function(root, expirationTime) {
                  try {
                    var didError = (root.current.effectTag & DidCapture) === DidCapture;
                    if (enableProfilerTimer) {
                      var currentTime = requestCurrentTime();
                      var priorityLevel = inferPriorityFromExpirationTime(
                        currentTime,
                        expirationTime,
                      );
                      hook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
                    } else {
                      hook.onCommitFiberRoot(rendererID, root, undefined, didError);
                    }
                  } catch (err) {
                    if (true && !hasLoggedError) {
                      hasLoggedError = true;
                      warningWithoutStack$1(false, 'React DevTools encountered an error: %s', err);
                    }
                  }
                };
                onCommitFiberUnmount = function(fiber) {
                  try {
                    hook.onCommitFiberUnmount(rendererID, fiber);
                  } catch (err) {
                    if (true && !hasLoggedError) {
                      hasLoggedError = true;
                      warningWithoutStack$1(false, 'React DevTools encountered an error: %s', err);
                    }
                  }
                };
              } catch (err) {
                // Catch all errors because it is unsafe to throw during initialization.
                {
                  warningWithoutStack$1(false, 'React DevTools encountered an error: %s.', err);
                }
              }
              // DevTools exists
              return true;
            }

            function onCommitRoot(root, expirationTime) {
              if (typeof onCommitFiberRoot === 'function') {
                onCommitFiberRoot(root, expirationTime);
              }
            }

            function onCommitUnmount(fiber) {
              if (typeof onCommitFiberUnmount === 'function') {
                onCommitFiberUnmount(fiber);
              }
            }

            var hasBadMapPolyfill = void 0;

            {
              hasBadMapPolyfill = false;
              try {
                var nonExtensibleObject = Object.preventExtensions({});
                var testMap = new Map([[nonExtensibleObject, null]]);
                var testSet = new Set([nonExtensibleObject]);
                // This is necessary for Rollup to not consider these unused.
                // https://github.com/rollup/rollup/issues/1771
                // TODO: we can remove these if Rollup fixes the bug.
                testMap.set(0, 0);
                testSet.add(0);
              } catch (e) {
                // TODO: Consider warning about bad polyfills
                hasBadMapPolyfill = true;
              }
            }

            // A Fiber is work on a Component that needs to be done or was done. There can
            // be more than one per component.

            var debugCounter = void 0;

            {
              debugCounter = 1;
            }

            function FiberNode(tag, pendingProps, key, mode) {
              // Instance
              this.tag = tag;
              this.key = key;
              this.elementType = null;
              this.type = null;
              this.stateNode = null;

              // Fiber
              this.return = null;
              this.child = null;
              this.sibling = null;
              this.index = 0;

              this.ref = null;

              this.pendingProps = pendingProps;
              this.memoizedProps = null;
              this.updateQueue = null;
              this.memoizedState = null;
              this.dependencies = null;

              this.mode = mode;

              // Effects
              this.effectTag = NoEffect;
              this.nextEffect = null;

              this.firstEffect = null;
              this.lastEffect = null;

              this.expirationTime = NoWork;
              this.childExpirationTime = NoWork;

              this.alternate = null;

              if (enableProfilerTimer) {
                // Note: The following is done to avoid a v8 performance cliff.
                //
                // Initializing the fields below to smis and later updating them with
                // double values will cause Fibers to end up having separate shapes.
                // This behavior/bug has something to do with Object.preventExtension().
                // Fortunately this only impacts DEV builds.
                // Unfortunately it makes React unusably slow for some applications.
                // To work around this, initialize the fields below with doubles.
                //
                // Learn more about this here:
                // https://github.com/facebook/react/issues/14365
                // https://bugs.chromium.org/p/v8/issues/detail?id=8538
                this.actualDuration = Number.NaN;
                this.actualStartTime = Number.NaN;
                this.selfBaseDuration = Number.NaN;
                this.treeBaseDuration = Number.NaN;

                // It's okay to replace the initial doubles with smis after initialization.
                // This won't trigger the performance cliff mentioned above,
                // and it simplifies other profiler code (including DevTools).
                this.actualDuration = 0;
                this.actualStartTime = -1;
                this.selfBaseDuration = 0;
                this.treeBaseDuration = 0;
              }

              {
                this._debugID = debugCounter++;
                this._debugSource = null;
                this._debugOwner = null;
                this._debugIsCurrentlyTiming = false;
                this._debugNeedsRemount = false;
                this._debugHookTypes = null;
                if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
                  Object.preventExtensions(this);
                }
              }
            }

            // This is a constructor function, rather than a POJO constructor, still
            // please ensure we do the following:
            // 1) Nobody should add any instance methods on this. Instance methods can be
            //    more difficult to predict when they get optimized and they are almost
            //    never inlined properly in static compilers.
            // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
            //    always know when it is a fiber.
            // 3) We might want to experiment with using numeric keys since they are easier
            //    to optimize in a non-JIT environment.
            // 4) We can easily go from a constructor to a createFiber object literal if that
            //    is faster.
            // 5) It should be easy to port this to a C struct and keep a C implementation
            //    compatible.
            var createFiber = function(tag, pendingProps, key, mode) {
              // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
              return new FiberNode(tag, pendingProps, key, mode);
            };

            function shouldConstruct(Component) {
              var prototype = Component.prototype;
              return !!(prototype && prototype.isReactComponent);
            }

            function isSimpleFunctionComponent(type) {
              return (
                typeof type === 'function' &&
                !shouldConstruct(type) &&
                type.defaultProps === undefined
              );
            }

            function resolveLazyComponentTag(Component) {
              if (typeof Component === 'function') {
                return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
              } else if (Component !== undefined && Component !== null) {
                var $$typeof = Component.$$typeof;
                if ($$typeof === REACT_FORWARD_REF_TYPE) {
                  return ForwardRef;
                }
                if ($$typeof === REACT_MEMO_TYPE) {
                  return MemoComponent;
                }
              }
              return IndeterminateComponent;
            }

            // This is used to create an alternate fiber to do work on.
            function createWorkInProgress(current, pendingProps, expirationTime) {
              var workInProgress = current.alternate;
              if (workInProgress === null) {
                // We use a double buffering pooling technique because we know that we'll
                // only ever need at most two versions of a tree. We pool the "other" unused
                // node that we're free to reuse. This is lazily created to avoid allocating
                // extra objects for things that are never updated. It also allow us to
                // reclaim the extra memory if needed.
                workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
                workInProgress.elementType = current.elementType;
                workInProgress.type = current.type;
                workInProgress.stateNode = current.stateNode;

                {
                  // DEV-only fields
                  workInProgress._debugID = current._debugID;
                  workInProgress._debugSource = current._debugSource;
                  workInProgress._debugOwner = current._debugOwner;
                  workInProgress._debugHookTypes = current._debugHookTypes;
                }

                workInProgress.alternate = current;
                current.alternate = workInProgress;
              } else {
                workInProgress.pendingProps = pendingProps;

                // We already have an alternate.
                // Reset the effect tag.
                workInProgress.effectTag = NoEffect;

                // The effect list is no longer valid.
                workInProgress.nextEffect = null;
                workInProgress.firstEffect = null;
                workInProgress.lastEffect = null;

                if (enableProfilerTimer) {
                  // We intentionally reset, rather than copy, actualDuration & actualStartTime.
                  // This prevents time from endlessly accumulating in new commits.
                  // This has the downside of resetting values for different priority renders,
                  // But works for yielding (the common case) and should support resuming.
                  workInProgress.actualDuration = 0;
                  workInProgress.actualStartTime = -1;
                }
              }

              workInProgress.childExpirationTime = current.childExpirationTime;
              workInProgress.expirationTime = current.expirationTime;

              workInProgress.child = current.child;
              workInProgress.memoizedProps = current.memoizedProps;
              workInProgress.memoizedState = current.memoizedState;
              workInProgress.updateQueue = current.updateQueue;

              // Clone the dependencies object. This is mutated during the render phase, so
              // it cannot be shared with the current fiber.
              var currentDependencies = current.dependencies;
              workInProgress.dependencies =
                currentDependencies === null
                  ? null
                  : {
                      expirationTime: currentDependencies.expirationTime,
                      firstContext: currentDependencies.firstContext,
                      responders: currentDependencies.responders,
                    };

              // These will be overridden during the parent's reconciliation
              workInProgress.sibling = current.sibling;
              workInProgress.index = current.index;
              workInProgress.ref = current.ref;

              if (enableProfilerTimer) {
                workInProgress.selfBaseDuration = current.selfBaseDuration;
                workInProgress.treeBaseDuration = current.treeBaseDuration;
              }

              {
                workInProgress._debugNeedsRemount = current._debugNeedsRemount;
                switch (workInProgress.tag) {
                  case IndeterminateComponent:
                  case FunctionComponent:
                  case SimpleMemoComponent:
                    workInProgress.type = resolveFunctionForHotReloading(current.type);
                    break;
                  case ClassComponent:
                    workInProgress.type = resolveClassForHotReloading(current.type);
                    break;
                  case ForwardRef:
                    workInProgress.type = resolveForwardRefForHotReloading(current.type);
                    break;
                  default:
                    break;
                }
              }

              return workInProgress;
            }

            // Used to reuse a Fiber for a second pass.
            function resetWorkInProgress(workInProgress, renderExpirationTime) {
              // This resets the Fiber to what createFiber or createWorkInProgress would
              // have set the values to before during the first pass. Ideally this wouldn't
              // be necessary but unfortunately many code paths reads from the workInProgress
              // when they should be reading from current and writing to workInProgress.

              // We assume pendingProps, index, key, ref, return are still untouched to
              // avoid doing another reconciliation.

              // Reset the effect tag but keep any Placement tags, since that's something
              // that child fiber is setting, not the reconciliation.
              workInProgress.effectTag &= Placement;

              // The effect list is no longer valid.
              workInProgress.nextEffect = null;
              workInProgress.firstEffect = null;
              workInProgress.lastEffect = null;

              var current = workInProgress.alternate;
              if (current === null) {
                // Reset to createFiber's initial values.
                workInProgress.childExpirationTime = NoWork;
                workInProgress.expirationTime = renderExpirationTime;

                workInProgress.child = null;
                workInProgress.memoizedProps = null;
                workInProgress.memoizedState = null;
                workInProgress.updateQueue = null;

                workInProgress.dependencies = null;

                if (enableProfilerTimer) {
                  // Note: We don't reset the actualTime counts. It's useful to accumulate
                  // actual time across multiple render passes.
                  workInProgress.selfBaseDuration = 0;
                  workInProgress.treeBaseDuration = 0;
                }
              } else {
                // Reset to the cloned values that createWorkInProgress would've.
                workInProgress.childExpirationTime = current.childExpirationTime;
                workInProgress.expirationTime = current.expirationTime;

                workInProgress.child = current.child;
                workInProgress.memoizedProps = current.memoizedProps;
                workInProgress.memoizedState = current.memoizedState;
                workInProgress.updateQueue = current.updateQueue;

                // Clone the dependencies object. This is mutated during the render phase, so
                // it cannot be shared with the current fiber.
                var currentDependencies = current.dependencies;
                workInProgress.dependencies =
                  currentDependencies === null
                    ? null
                    : {
                        expirationTime: currentDependencies.expirationTime,
                        firstContext: currentDependencies.firstContext,
                        responders: currentDependencies.responders,
                      };

                if (enableProfilerTimer) {
                  // Note: We don't reset the actualTime counts. It's useful to accumulate
                  // actual time across multiple render passes.
                  workInProgress.selfBaseDuration = current.selfBaseDuration;
                  workInProgress.treeBaseDuration = current.treeBaseDuration;
                }
              }

              return workInProgress;
            }

            function createHostRootFiber(tag) {
              var mode = void 0;
              if (tag === ConcurrentRoot) {
                mode = ConcurrentMode | BatchedMode | StrictMode;
              } else if (tag === BatchedRoot) {
                mode = BatchedMode | StrictMode;
              } else {
                mode = NoMode;
              }

              if (enableProfilerTimer && isDevToolsPresent) {
                // Always collect profile timings when DevTools are present.
                // This enables DevTools to start capturing timing at any point–
                // Without some nodes in the tree having empty base times.
                mode |= ProfileMode;
              }

              return createFiber(HostRoot, null, null, mode);
            }

            function createFiberFromTypeAndProps(
              type, // React$ElementType
              key,
              pendingProps,
              owner,
              mode,
              expirationTime,
            ) {
              var fiber = void 0;

              var fiberTag = IndeterminateComponent;
              // The resolved type is set if we know what the final type will be. I.e. it's not lazy.
              var resolvedType = type;
              if (typeof type === 'function') {
                if (shouldConstruct(type)) {
                  fiberTag = ClassComponent;
                  {
                    resolvedType = resolveClassForHotReloading(resolvedType);
                  }
                } else {
                  {
                    resolvedType = resolveFunctionForHotReloading(resolvedType);
                  }
                }
              } else if (typeof type === 'string') {
                fiberTag = HostComponent;
              } else {
                getTag: switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(
                      pendingProps.children,
                      mode,
                      expirationTime,
                      key,
                    );
                  case REACT_CONCURRENT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= ConcurrentMode | BatchedMode | StrictMode;
                    break;
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictMode;
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, expirationTime, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, expirationTime, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key);
                  default: {
                    if (typeof type === 'object' && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          // This is a consumer
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                        case REACT_FUNDAMENTAL_TYPE:
                          if (enableFundamentalAPI) {
                            return createFiberFromFundamental(
                              type,
                              pendingProps,
                              mode,
                              expirationTime,
                              key,
                            );
                          }
                          break;
                      }
                    }
                    var info = '';
                    {
                      if (
                        type === undefined ||
                        (typeof type === 'object' &&
                          type !== null &&
                          Object.keys(type).length === 0)
                      ) {
                        info +=
                          ' You likely forgot to export your component from the file ' +
                          "it's defined in, or you might have mixed up default and " +
                          'named imports.';
                      }
                      var ownerName = owner ? getComponentName(owner.type) : null;
                      if (ownerName) {
                        info += '\n\nCheck the render method of `' + ownerName + '`.';
                      }
                    }
                    (function() {
                      {
                        {
                          throw ReactError(
                            Error(
                              'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: ' +
                                (type == null ? type : typeof type) +
                                '.' +
                                info,
                            ),
                          );
                        }
                      }
                    })();
                  }
                }
              }

              fiber = createFiber(fiberTag, pendingProps, key, mode);
              fiber.elementType = type;
              fiber.type = resolvedType;
              fiber.expirationTime = expirationTime;

              return fiber;
            }

            function createFiberFromElement(element, mode, expirationTime) {
              var owner = null;
              {
                owner = element._owner;
              }
              var type = element.type;
              var key = element.key;
              var pendingProps = element.props;
              var fiber = createFiberFromTypeAndProps(
                type,
                key,
                pendingProps,
                owner,
                mode,
                expirationTime,
              );
              {
                fiber._debugSource = element._source;
                fiber._debugOwner = element._owner;
              }
              return fiber;
            }

            function createFiberFromFragment(elements, mode, expirationTime, key) {
              var fiber = createFiber(Fragment, elements, key, mode);
              fiber.expirationTime = expirationTime;
              return fiber;
            }

            function createFiberFromFundamental(
              fundamentalComponent,
              pendingProps,
              mode,
              expirationTime,
              key,
            ) {
              var fiber = createFiber(FundamentalComponent, pendingProps, key, mode);
              fiber.elementType = fundamentalComponent;
              fiber.type = fundamentalComponent;
              fiber.expirationTime = expirationTime;
              return fiber;
            }

            function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
              {
                if (
                  typeof pendingProps.id !== 'string' ||
                  typeof pendingProps.onRender !== 'function'
                ) {
                  warningWithoutStack$1(
                    false,
                    'Profiler must specify an "id" string and "onRender" function as props',
                  );
                }
              }

              var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
              // TODO: The Profiler fiber shouldn't have a type. It has a tag.
              fiber.elementType = REACT_PROFILER_TYPE;
              fiber.type = REACT_PROFILER_TYPE;
              fiber.expirationTime = expirationTime;

              return fiber;
            }

            function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
              var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);

              // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
              // This needs to be fixed in getComponentName so that it relies on the tag
              // instead.
              fiber.type = REACT_SUSPENSE_TYPE;
              fiber.elementType = REACT_SUSPENSE_TYPE;

              fiber.expirationTime = expirationTime;
              return fiber;
            }

            function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key) {
              var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
              {
                // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
                // This needs to be fixed in getComponentName so that it relies on the tag
                // instead.
                fiber.type = REACT_SUSPENSE_LIST_TYPE;
              }
              fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
              fiber.expirationTime = expirationTime;
              return fiber;
            }

            function createFiberFromText(content, mode, expirationTime) {
              var fiber = createFiber(HostText, content, null, mode);
              fiber.expirationTime = expirationTime;
              return fiber;
            }

            function createFiberFromHostInstanceForDeletion() {
              var fiber = createFiber(HostComponent, null, null, NoMode);
              // TODO: These should not need a type.
              fiber.elementType = 'DELETED';
              fiber.type = 'DELETED';
              return fiber;
            }

            function createFiberFromPortal(portal, mode, expirationTime) {
              var pendingProps = portal.children !== null ? portal.children : [];
              var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
              fiber.expirationTime = expirationTime;
              fiber.stateNode = {
                containerInfo: portal.containerInfo,
                pendingChildren: null, // Used by persistent updates
                implementation: portal.implementation,
              };
              return fiber;
            }

            // Used for stashing WIP properties to replay failed work in DEV.
            function assignFiberPropertiesInDEV(target, source) {
              if (target === null) {
                // This Fiber's initial properties will always be overwritten.
                // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
                target = createFiber(IndeterminateComponent, null, null, NoMode);
              }

              // This is intentionally written as a list of all properties.
              // We tried to use Object.assign() instead but this is called in
              // the hottest path, and Object.assign() was too slow:
              // https://github.com/facebook/react/issues/12502
              // This code is DEV-only so size is not a concern.

              target.tag = source.tag;
              target.key = source.key;
              target.elementType = source.elementType;
              target.type = source.type;
              target.stateNode = source.stateNode;
              target.return = source.return;
              target.child = source.child;
              target.sibling = source.sibling;
              target.index = source.index;
              target.ref = source.ref;
              target.pendingProps = source.pendingProps;
              target.memoizedProps = source.memoizedProps;
              target.updateQueue = source.updateQueue;
              target.memoizedState = source.memoizedState;
              target.dependencies = source.dependencies;
              target.mode = source.mode;
              target.effectTag = source.effectTag;
              target.nextEffect = source.nextEffect;
              target.firstEffect = source.firstEffect;
              target.lastEffect = source.lastEffect;
              target.expirationTime = source.expirationTime;
              target.childExpirationTime = source.childExpirationTime;
              target.alternate = source.alternate;
              if (enableProfilerTimer) {
                target.actualDuration = source.actualDuration;
                target.actualStartTime = source.actualStartTime;
                target.selfBaseDuration = source.selfBaseDuration;
                target.treeBaseDuration = source.treeBaseDuration;
              }
              target._debugID = source._debugID;
              target._debugSource = source._debugSource;
              target._debugOwner = source._debugOwner;
              target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
              target._debugNeedsRemount = source._debugNeedsRemount;
              target._debugHookTypes = source._debugHookTypes;
              return target;
            }

            // TODO: This should be lifted into the renderer.

            // The following attributes are only used by interaction tracing builds.
            // They enable interactions to be associated with their async work,
            // And expose interaction metadata to the React DevTools Profiler plugin.
            // Note that these attributes are only defined when the enableSchedulerTracing flag is enabled.

            // Exported FiberRoot type includes all properties,
            // To avoid requiring potentially error-prone :any casts throughout the project.
            // Profiling properties are only safe to access in profiling builds (when enableSchedulerTracing is true).
            // The types are defined separately within this file to ensure they stay in sync.
            // (We don't have to use an inline :any cast when enableSchedulerTracing is disabled.)

            function FiberRootNode(containerInfo, tag, hydrate) {
              this.tag = tag;
              this.current = null;
              this.containerInfo = containerInfo;
              this.pendingChildren = null;
              this.pingCache = null;
              this.finishedExpirationTime = NoWork;
              this.finishedWork = null;
              this.timeoutHandle = noTimeout;
              this.context = null;
              this.pendingContext = null;
              this.hydrate = hydrate;
              this.firstBatch = null;
              this.callbackNode = null;
              this.callbackExpirationTime = NoWork;
              this.firstPendingTime = NoWork;
              this.lastPendingTime = NoWork;
              this.pingTime = NoWork;

              if (enableSchedulerTracing) {
                this.interactionThreadID = tracing.unstable_getThreadID();
                this.memoizedInteractions = new Set();
                this.pendingInteractionMap = new Map();
              }
            }

            function createFiberRoot(containerInfo, tag, hydrate) {
              var root = new FiberRootNode(containerInfo, tag, hydrate);

              // Cyclic construction. This cheats the type system right now because
              // stateNode is any.
              var uninitializedFiber = createHostRootFiber(tag);
              root.current = uninitializedFiber;
              uninitializedFiber.stateNode = root;

              return root;
            }

            // This lets us hook into Fiber to debug what it's doing.
            // See https://github.com/facebook/react/pull/8033.
            // This is not part of the public API, not even for React DevTools.
            // You may only inject a debugTool if you work on React Fiber itself.
            var ReactFiberInstrumentation = {
              debugTool: null,
            };

            var ReactFiberInstrumentation_1 = ReactFiberInstrumentation;

            // 0 is PROD, 1 is DEV.
            // Might add PROFILE later.

            var didWarnAboutNestedUpdates = void 0;
            var didWarnAboutFindNodeInStrictMode = void 0;

            {
              didWarnAboutNestedUpdates = false;
              didWarnAboutFindNodeInStrictMode = {};
            }

            function getContextForSubtree(parentComponent) {
              if (!parentComponent) {
                return emptyContextObject;
              }

              var fiber = get(parentComponent);
              var parentContext = findCurrentUnmaskedContext(fiber);

              if (fiber.tag === ClassComponent) {
                var Component = fiber.type;
                if (isContextProvider(Component)) {
                  return processChildContext(fiber, Component, parentContext);
                }
              }

              return parentContext;
            }

            function scheduleRootUpdate(
              current$$1,
              element,
              expirationTime,
              suspenseConfig,
              callback,
            ) {
              {
                if (phase === 'render' && current !== null && !didWarnAboutNestedUpdates) {
                  didWarnAboutNestedUpdates = true;
                  warningWithoutStack$1(
                    false,
                    'Render methods should be a pure function of props and state; ' +
                      'triggering nested component updates from render is not allowed. ' +
                      'If necessary, trigger nested updates in componentDidUpdate.\n\n' +
                      'Check the render method of %s.',
                    getComponentName(current.type) || 'Unknown',
                  );
                }
              }

              var update = createUpdate(expirationTime, suspenseConfig);
              // Caution: React DevTools currently depends on this property
              // being called "element".
              update.payload = { element: element };

              callback = callback === undefined ? null : callback;
              if (callback !== null) {
                !(typeof callback === 'function')
                  ? warningWithoutStack$1(
                      false,
                      'render(...): Expected the last optional `callback` argument to be a ' +
                        'function. Instead received: %s.',
                      callback,
                    )
                  : void 0;
                update.callback = callback;
              }

              if (revertPassiveEffectsChange) {
                flushPassiveEffects();
              }
              enqueueUpdate(current$$1, update);
              scheduleWork(current$$1, expirationTime);

              return expirationTime;
            }

            function updateContainerAtExpirationTime(
              element,
              container,
              parentComponent,
              expirationTime,
              suspenseConfig,
              callback,
            ) {
              // TODO: If this is a nested container, this won't be the root.
              var current$$1 = container.current;

              {
                if (ReactFiberInstrumentation_1.debugTool) {
                  if (current$$1.alternate === null) {
                    ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
                  } else if (element === null) {
                    ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
                  } else {
                    ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
                  }
                }
              }

              var context = getContextForSubtree(parentComponent);
              if (container.context === null) {
                container.context = context;
              } else {
                container.pendingContext = context;
              }

              return scheduleRootUpdate(
                current$$1,
                element,
                expirationTime,
                suspenseConfig,
                callback,
              );
            }

            function findHostInstance(component) {
              var fiber = get(component);
              if (fiber === undefined) {
                if (typeof component.render === 'function') {
                  (function() {
                    {
                      {
                        throw ReactError(Error('Unable to find node on an unmounted component.'));
                      }
                    }
                  })();
                } else {
                  (function() {
                    {
                      {
                        throw ReactError(
                          Error(
                            'Argument appears to not be a ReactComponent. Keys: ' +
                              Object.keys(component),
                          ),
                        );
                      }
                    }
                  })();
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              return hostFiber.stateNode;
            }

            function findHostInstanceWithWarning(component, methodName) {
              {
                var fiber = get(component);
                if (fiber === undefined) {
                  if (typeof component.render === 'function') {
                    (function() {
                      {
                        {
                          throw ReactError(Error('Unable to find node on an unmounted component.'));
                        }
                      }
                    })();
                  } else {
                    (function() {
                      {
                        {
                          throw ReactError(
                            Error(
                              'Argument appears to not be a ReactComponent. Keys: ' +
                                Object.keys(component),
                            ),
                          );
                        }
                      }
                    })();
                  }
                }
                var hostFiber = findCurrentHostFiber(fiber);
                if (hostFiber === null) {
                  return null;
                }
                if (hostFiber.mode & StrictMode) {
                  var componentName = getComponentName(fiber.type) || 'Component';
                  if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                    didWarnAboutFindNodeInStrictMode[componentName] = true;
                    if (fiber.mode & StrictMode) {
                      warningWithoutStack$1(
                        false,
                        '%s is deprecated in StrictMode. ' +
                          '%s was passed an instance of %s which is inside StrictMode. ' +
                          'Instead, add a ref directly to the element you want to reference.' +
                          '\n%s' +
                          '\n\nLearn more about using refs safely here:' +
                          '\nhttps://fb.me/react-strict-mode-find-node',
                        methodName,
                        methodName,
                        componentName,
                        getStackByFiberInDevAndProd(hostFiber),
                      );
                    } else {
                      warningWithoutStack$1(
                        false,
                        '%s is deprecated in StrictMode. ' +
                          '%s was passed an instance of %s which renders StrictMode children. ' +
                          'Instead, add a ref directly to the element you want to reference.' +
                          '\n%s' +
                          '\n\nLearn more about using refs safely here:' +
                          '\nhttps://fb.me/react-strict-mode-find-node',
                        methodName,
                        methodName,
                        componentName,
                        getStackByFiberInDevAndProd(hostFiber),
                      );
                    }
                  }
                }
                return hostFiber.stateNode;
              }
              return findHostInstance(component);
            }

            function createContainer(containerInfo, tag, hydrate) {
              return createFiberRoot(containerInfo, tag, hydrate);
            }

            function updateContainer(element, container, parentComponent, callback) {
              var current$$1 = container.current;
              var currentTime = requestCurrentTime();
              {
                // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
                if ('undefined' !== typeof jest) {
                  warnIfUnmockedScheduler(current$$1);
                  warnIfNotScopedWithMatchingAct(current$$1);
                }
              }
              var suspenseConfig = requestCurrentSuspenseConfig();
              var expirationTime = computeExpirationForFiber(
                currentTime,
                current$$1,
                suspenseConfig,
              );
              return updateContainerAtExpirationTime(
                element,
                container,
                parentComponent,
                expirationTime,
                suspenseConfig,
                callback,
              );
            }

            function getPublicRootInstance(container) {
              var containerFiber = container.current;
              if (!containerFiber.child) {
                return null;
              }
              switch (containerFiber.child.tag) {
                case HostComponent:
                  return getPublicInstance(containerFiber.child.stateNode);
                default:
                  return containerFiber.child.stateNode;
              }
            }

            function findHostInstanceWithNoPortals(fiber) {
              var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.tag === FundamentalComponent) {
                return hostFiber.stateNode.instance;
              }
              return hostFiber.stateNode;
            }

            var shouldSuspendImpl = function(fiber) {
              return false;
            };

            function shouldSuspend(fiber) {
              return shouldSuspendImpl(fiber);
            }

            var overrideHookState = null;
            var overrideProps = null;
            var scheduleUpdate = null;
            var setSuspenseHandler = null;

            {
              var copyWithSetImpl = function(obj, path, idx, value) {
                if (idx >= path.length) {
                  return value;
                }
                var key = path[idx];
                var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
                // $FlowFixMe number or string is fine here
                updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
                return updated;
              };

              var copyWithSet = function(obj, path, value) {
                return copyWithSetImpl(obj, path, 0, value);
              };

              // Support DevTools editable values for useState and useReducer.
              overrideHookState = function(fiber, id, path, value) {
                // For now, the "id" of stateful hooks is just the stateful hook index.
                // This may change in the future with e.g. nested hooks.
                var currentHook = fiber.memoizedState;
                while (currentHook !== null && id > 0) {
                  currentHook = currentHook.next;
                  id--;
                }
                if (currentHook !== null) {
                  if (revertPassiveEffectsChange) {
                    flushPassiveEffects();
                  }

                  var newState = copyWithSet(currentHook.memoizedState, path, value);
                  currentHook.memoizedState = newState;
                  currentHook.baseState = newState;

                  // We aren't actually adding an update to the queue,
                  // because there is no update we can add for useReducer hooks that won't trigger an error.
                  // (There's no appropriate action type for DevTools overrides.)
                  // As a result though, React will see the scheduled update as a noop and bailout.
                  // Shallow cloning props works as a workaround for now to bypass the bailout check.
                  fiber.memoizedProps = _assign({}, fiber.memoizedProps);

                  scheduleWork(fiber, Sync);
                }
              };

              // Support DevTools props for function components, forwardRef, memo, host components, etc.
              overrideProps = function(fiber, path, value) {
                if (revertPassiveEffectsChange) {
                  flushPassiveEffects();
                }
                fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
                if (fiber.alternate) {
                  fiber.alternate.pendingProps = fiber.pendingProps;
                }
                scheduleWork(fiber, Sync);
              };

              scheduleUpdate = function(fiber) {
                if (revertPassiveEffectsChange) {
                  flushPassiveEffects();
                }
                scheduleWork(fiber, Sync);
              };

              setSuspenseHandler = function(newShouldSuspendImpl) {
                shouldSuspendImpl = newShouldSuspendImpl;
              };
            }

            function injectIntoDevTools(devToolsConfig) {
              var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
              var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;

              return injectInternals(
                _assign({}, devToolsConfig, {
                  overrideHookState: overrideHookState,
                  overrideProps: overrideProps,
                  setSuspenseHandler: setSuspenseHandler,
                  scheduleUpdate: scheduleUpdate,
                  currentDispatcherRef: ReactCurrentDispatcher,
                  findHostInstanceByFiber: function(fiber) {
                    var hostFiber = findCurrentHostFiber(fiber);
                    if (hostFiber === null) {
                      return null;
                    }
                    return hostFiber.stateNode;
                  },
                  findFiberByHostInstance: function(instance) {
                    if (!findFiberByHostInstance) {
                      // Might not be implemented by the renderer.
                      return null;
                    }
                    return findFiberByHostInstance(instance);
                  },

                  // React Refresh
                  findHostInstancesForRefresh: findHostInstancesForRefresh,
                  scheduleRefresh: scheduleRefresh,
                  scheduleRoot: scheduleRoot,
                  setRefreshHandler: setRefreshHandler,
                  // Enables DevTools to append owner stacks to error messages in DEV mode.
                  getCurrentFiber: function() {
                    return current;
                  },
                }),
              );
            }

            // This file intentionally does *not* have the Flow annotation.
            // Don't add it. See `./inline-typed.js` for an explanation.

            function createPortal$1(
              children,
              containerInfo,
              // TODO: figure out the API for cross-renderer implementation.
              implementation,
            ) {
              var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

              return {
                // This tag allow us to uniquely identify this as a React Portal
                $$typeof: REACT_PORTAL_TYPE,
                key: key == null ? null : '' + key,
                children: children,
                containerInfo: containerInfo,
                implementation: implementation,
              };
            }

            // TODO: this is special because it gets imported during build.

            var ReactVersion = '16.9.0';

            // TODO: This type is shared between the reconciler and ReactDOM, but will
            // eventually be lifted out to the renderer.

            var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;

            var topLevelUpdateWarnings = void 0;
            var warnOnInvalidCallback = void 0;
            var didWarnAboutUnstableCreatePortal = false;

            {
              if (
                typeof Map !== 'function' ||
                // $FlowIssue Flow incorrectly thinks Map has no prototype
                Map.prototype == null ||
                typeof Map.prototype.forEach !== 'function' ||
                typeof Set !== 'function' ||
                // $FlowIssue Flow incorrectly thinks Set has no prototype
                Set.prototype == null ||
                typeof Set.prototype.clear !== 'function' ||
                typeof Set.prototype.forEach !== 'function'
              ) {
                warningWithoutStack$1(
                  false,
                  'React depends on Map and Set built-in types. Make sure that you load a ' +
                    'polyfill in older browsers. https://fb.me/react-polyfills',
                );
              }

              topLevelUpdateWarnings = function(container) {
                if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                  var hostInstance = findHostInstanceWithNoPortals(
                    container._reactRootContainer._internalRoot.current,
                  );
                  if (hostInstance) {
                    !(hostInstance.parentNode === container)
                      ? warningWithoutStack$1(
                          false,
                          'render(...): It looks like the React-rendered content of this ' +
                            'container was removed without using React. This is not ' +
                            'supported and will cause errors. Instead, call ' +
                            'ReactDOM.unmountComponentAtNode to empty a container.',
                        )
                      : void 0;
                  }
                }

                var isRootRenderedBySomeReact = !!container._reactRootContainer;
                var rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));

                !(!hasNonRootReactChild || isRootRenderedBySomeReact)
                  ? warningWithoutStack$1(
                      false,
                      'render(...): Replacing React-rendered children with a new root ' +
                        'component. If you intended to update the children of this node, ' +
                        'you should instead have the existing children update their state ' +
                        'and render the new components instead of calling ReactDOM.render.',
                    )
                  : void 0;

                !(
                  container.nodeType !== ELEMENT_NODE ||
                  !container.tagName ||
                  container.tagName.toUpperCase() !== 'BODY'
                )
                  ? warningWithoutStack$1(
                      false,
                      'render(): Rendering components directly into document.body is ' +
                        'discouraged, since its children are often manipulated by third-party ' +
                        'scripts and browser extensions. This may lead to subtle ' +
                        'reconciliation issues. Try rendering into a container element created ' +
                        'for your app.',
                    )
                  : void 0;
              };

              warnOnInvalidCallback = function(callback, callerName) {
                !(callback === null || typeof callback === 'function')
                  ? warningWithoutStack$1(
                      false,
                      '%s(...): Expected the last optional `callback` argument to be a ' +
                        'function. Instead received: %s.',
                      callerName,
                      callback,
                    )
                  : void 0;
              };
            }

            setRestoreImplementation(restoreControlledState$1);

            function ReactBatch(root) {
              var expirationTime = computeUniqueAsyncExpiration();
              this._expirationTime = expirationTime;
              this._root = root;
              this._next = null;
              this._callbacks = null;
              this._didComplete = false;
              this._hasChildren = false;
              this._children = null;
              this._defer = true;
            }
            ReactBatch.prototype.render = function(children) {
              var _this = this;

              (function() {
                if (!_this._defer) {
                  {
                    throw ReactError(
                      Error('batch.render: Cannot render a batch that already committed.'),
                    );
                  }
                }
              })();
              this._hasChildren = true;
              this._children = children;
              var internalRoot = this._root._internalRoot;
              var expirationTime = this._expirationTime;
              var work = new ReactWork();
              updateContainerAtExpirationTime(
                children,
                internalRoot,
                null,
                expirationTime,
                null,
                work._onCommit,
              );
              return work;
            };
            ReactBatch.prototype.then = function(onComplete) {
              if (this._didComplete) {
                onComplete();
                return;
              }
              var callbacks = this._callbacks;
              if (callbacks === null) {
                callbacks = this._callbacks = [];
              }
              callbacks.push(onComplete);
            };
            ReactBatch.prototype.commit = function() {
              var _this2 = this;

              var internalRoot = this._root._internalRoot;
              var firstBatch = internalRoot.firstBatch;
              (function() {
                if (!(_this2._defer && firstBatch !== null)) {
                  {
                    throw ReactError(Error('batch.commit: Cannot commit a batch multiple times.'));
                  }
                }
              })();

              if (!this._hasChildren) {
                // This batch is empty. Return.
                this._next = null;
                this._defer = false;
                return;
              }

              var expirationTime = this._expirationTime;

              // Ensure this is the first batch in the list.
              if (firstBatch !== this) {
                // This batch is not the earliest batch. We need to move it to the front.
                // Update its expiration time to be the expiration time of the earliest
                // batch, so that we can flush it without flushing the other batches.
                if (this._hasChildren) {
                  expirationTime = this._expirationTime = firstBatch._expirationTime;
                  // Rendering this batch again ensures its children will be the final state
                  // when we flush (updates are processed in insertion order: last
                  // update wins).
                  // TODO: This forces a restart. Should we print a warning?
                  this.render(this._children);
                }

                // Remove the batch from the list.
                var previous = null;
                var batch = firstBatch;
                while (batch !== this) {
                  previous = batch;
                  batch = batch._next;
                }
                (function() {
                  if (!(previous !== null)) {
                    {
                      throw ReactError(
                        Error('batch.commit: Cannot commit a batch multiple times.'),
                      );
                    }
                  }
                })();
                previous._next = batch._next;

                // Add it to the front.
                this._next = firstBatch;
                firstBatch = internalRoot.firstBatch = this;
              }

              // Synchronously flush all the work up to this batch's expiration time.
              this._defer = false;
              flushRoot(internalRoot, expirationTime);

              // Pop the batch from the list.
              var next = this._next;
              this._next = null;
              firstBatch = internalRoot.firstBatch = next;

              // Append the next earliest batch's children to the update queue.
              if (firstBatch !== null && firstBatch._hasChildren) {
                firstBatch.render(firstBatch._children);
              }
            };
            ReactBatch.prototype._onComplete = function() {
              if (this._didComplete) {
                return;
              }
              this._didComplete = true;
              var callbacks = this._callbacks;
              if (callbacks === null) {
                return;
              }
              // TODO: Error handling.
              for (var i = 0; i < callbacks.length; i++) {
                var _callback = callbacks[i];
                _callback();
              }
            };

            function ReactWork() {
              this._callbacks = null;
              this._didCommit = false;
              // TODO: Avoid need to bind by replacing callbacks in the update queue with
              // list of Work objects.
              this._onCommit = this._onCommit.bind(this);
            }
            ReactWork.prototype.then = function(onCommit) {
              if (this._didCommit) {
                onCommit();
                return;
              }
              var callbacks = this._callbacks;
              if (callbacks === null) {
                callbacks = this._callbacks = [];
              }
              callbacks.push(onCommit);
            };
            ReactWork.prototype._onCommit = function() {
              if (this._didCommit) {
                return;
              }
              this._didCommit = true;
              var callbacks = this._callbacks;
              if (callbacks === null) {
                return;
              }
              // TODO: Error handling.
              for (var i = 0; i < callbacks.length; i++) {
                var _callback2 = callbacks[i];
                (function() {
                  if (!(typeof _callback2 === 'function')) {
                    {
                      throw ReactError(
                        Error(
                          'Invalid argument passed as callback. Expected a function. Instead received: ' +
                            _callback2,
                        ),
                      );
                    }
                  }
                })();
                _callback2();
              }
            };

            function ReactSyncRoot(container, tag, hydrate) {
              // Tag is either LegacyRoot or Concurrent Root
              var root = createContainer(container, tag, hydrate);
              this._internalRoot = root;
            }

            function ReactRoot(container, hydrate) {
              var root = createContainer(container, ConcurrentRoot, hydrate);
              this._internalRoot = root;
            }

            ReactRoot.prototype.render = ReactSyncRoot.prototype.render = function(
              children,
              callback,
            ) {
              var root = this._internalRoot;
              var work = new ReactWork();
              callback = callback === undefined ? null : callback;
              {
                warnOnInvalidCallback(callback, 'render');
              }
              if (callback !== null) {
                work.then(callback);
              }
              updateContainer(children, root, null, work._onCommit);
              return work;
            };

            ReactRoot.prototype.unmount = ReactSyncRoot.prototype.unmount = function(callback) {
              var root = this._internalRoot;
              var work = new ReactWork();
              callback = callback === undefined ? null : callback;
              {
                warnOnInvalidCallback(callback, 'render');
              }
              if (callback !== null) {
                work.then(callback);
              }
              updateContainer(null, root, null, work._onCommit);
              return work;
            };

            // Sync roots cannot create batches. Only concurrent ones.
            ReactRoot.prototype.createBatch = function() {
              var batch = new ReactBatch(this);
              var expirationTime = batch._expirationTime;

              var internalRoot = this._internalRoot;
              var firstBatch = internalRoot.firstBatch;
              if (firstBatch === null) {
                internalRoot.firstBatch = batch;
                batch._next = null;
              } else {
                // Insert sorted by expiration time then insertion order
                var insertAfter = null;
                var insertBefore = firstBatch;
                while (insertBefore !== null && insertBefore._expirationTime >= expirationTime) {
                  insertAfter = insertBefore;
                  insertBefore = insertBefore._next;
                }
                batch._next = insertBefore;
                if (insertAfter !== null) {
                  insertAfter._next = batch;
                }
              }

              return batch;
            };

            /**
             * True if the supplied DOM node is a valid node element.
             *
             * @param {?DOMElement} node The candidate DOM node.
             * @return {boolean} True if the DOM is a valid DOM node.
             * @internal
             */
            function isValidContainer(node) {
              return !!(
                node &&
                (node.nodeType === ELEMENT_NODE ||
                  node.nodeType === DOCUMENT_NODE ||
                  node.nodeType === DOCUMENT_FRAGMENT_NODE ||
                  (node.nodeType === COMMENT_NODE &&
                    node.nodeValue === ' react-mount-point-unstable '))
              );
            }

            function getReactRootElementInContainer(container) {
              if (!container) {
                return null;
              }

              if (container.nodeType === DOCUMENT_NODE) {
                return container.documentElement;
              } else {
                return container.firstChild;
              }
            }

            function shouldHydrateDueToLegacyHeuristic(container) {
              var rootElement = getReactRootElementInContainer(container);
              return !!(
                rootElement &&
                rootElement.nodeType === ELEMENT_NODE &&
                rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME)
              );
            }

            setBatchingImplementation(
              batchedUpdates$1,
              discreteUpdates$1,
              flushDiscreteUpdates,
              batchedEventUpdates$1,
            );

            var warnedAboutHydrateAPI = false;

            function legacyCreateRootFromDOMContainer(container, forceHydrate) {
              var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
              // First clear any existing content.
              if (!shouldHydrate) {
                var warned = false;
                var rootSibling = void 0;
                while ((rootSibling = container.lastChild)) {
                  {
                    if (
                      !warned &&
                      rootSibling.nodeType === ELEMENT_NODE &&
                      rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)
                    ) {
                      warned = true;
                      warningWithoutStack$1(
                        false,
                        'render(): Target node has markup rendered by React, but there ' +
                          'are unrelated nodes as well. This is most commonly caused by ' +
                          'white-space inserted around server-rendered markup.',
                      );
                    }
                  }
                  container.removeChild(rootSibling);
                }
              }
              {
                if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
                  warnedAboutHydrateAPI = true;
                  lowPriorityWarning$1(
                    false,
                    'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' +
                      'will stop working in React v17. Replace the ReactDOM.render() call ' +
                      'with ReactDOM.hydrate() if you want React to attach to the server HTML.',
                  );
                }
              }

              // Legacy roots are not batched.
              return new ReactSyncRoot(container, LegacyRoot, shouldHydrate);
            }

            function legacyRenderSubtreeIntoContainer(
              parentComponent,
              children,
              container,
              forceHydrate,
              callback,
            ) {
              {
                topLevelUpdateWarnings(container);
                warnOnInvalidCallback(callback === undefined ? null : callback, 'render');
              }

              // TODO: Without `any` type, Flow says "Property cannot be accessed on any
              // member of intersection type." Whyyyyyy.
              var root = container._reactRootContainer;
              var fiberRoot = void 0;
              if (!root) {
                // Initial mount
                root = container._reactRootContainer = legacyCreateRootFromDOMContainer(
                  container,
                  forceHydrate,
                );
                fiberRoot = root._internalRoot;
                if (typeof callback === 'function') {
                  var originalCallback = callback;
                  callback = function() {
                    var instance = getPublicRootInstance(fiberRoot);
                    originalCallback.call(instance);
                  };
                }
                // Initial mount should not be batched.
                unbatchedUpdates(function() {
                  updateContainer(children, fiberRoot, parentComponent, callback);
                });
              } else {
                fiberRoot = root._internalRoot;
                if (typeof callback === 'function') {
                  var _originalCallback = callback;
                  callback = function() {
                    var instance = getPublicRootInstance(fiberRoot);
                    _originalCallback.call(instance);
                  };
                }
                // Update
                updateContainer(children, fiberRoot, parentComponent, callback);
              }
              return getPublicRootInstance(fiberRoot);
            }

            function createPortal$$1(children, container) {
              var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

              (function() {
                if (!isValidContainer(container)) {
                  {
                    throw ReactError(Error('Target container is not a DOM element.'));
                  }
                }
              })();
              // TODO: pass ReactDOM portal implementation as third argument
              return createPortal$1(children, container, null, key);
            }

            var ReactDOM = {
              createPortal: createPortal$$1,

              findDOMNode: function(componentOrElement) {
                {
                  var owner = ReactCurrentOwner.current;
                  if (owner !== null && owner.stateNode !== null) {
                    var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                    !warnedAboutRefsInRender
                      ? warningWithoutStack$1(
                          false,
                          '%s is accessing findDOMNode inside its render(). ' +
                            'render() should be a pure function of props and state. It should ' +
                            'never access something that requires stale data from the previous ' +
                            'render, such as refs. Move this logic to componentDidMount and ' +
                            'componentDidUpdate instead.',
                          getComponentName(owner.type) || 'A component',
                        )
                      : void 0;
                    owner.stateNode._warnedAboutRefsInRender = true;
                  }
                }
                if (componentOrElement == null) {
                  return null;
                }
                if (componentOrElement.nodeType === ELEMENT_NODE) {
                  return componentOrElement;
                }
                {
                  return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
                }
                return findHostInstance(componentOrElement);
              },
              hydrate: function(element, container, callback) {
                (function() {
                  if (!isValidContainer(container)) {
                    {
                      throw ReactError(Error('Target container is not a DOM element.'));
                    }
                  }
                })();
                {
                  !!container._reactHasBeenPassedToCreateRootDEV
                    ? warningWithoutStack$1(
                        false,
                        'You are calling ReactDOM.hydrate() on a container that was previously ' +
                          'passed to ReactDOM.%s(). This is not supported. ' +
                          'Did you mean to call createRoot(container, {hydrate: true}).render(element)?',
                        enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot',
                      )
                    : void 0;
                }
                // TODO: throw or warn if we couldn't hydrate?
                return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
              },
              render: function(element, container, callback) {
                (function() {
                  if (!isValidContainer(container)) {
                    {
                      throw ReactError(Error('Target container is not a DOM element.'));
                    }
                  }
                })();
                {
                  !!container._reactHasBeenPassedToCreateRootDEV
                    ? warningWithoutStack$1(
                        false,
                        'You are calling ReactDOM.render() on a container that was previously ' +
                          'passed to ReactDOM.%s(). This is not supported. ' +
                          'Did you mean to call root.render(element)?',
                        enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot',
                      )
                    : void 0;
                }
                return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
              },
              unstable_renderSubtreeIntoContainer: function(
                parentComponent,
                element,
                containerNode,
                callback,
              ) {
                (function() {
                  if (!isValidContainer(containerNode)) {
                    {
                      throw ReactError(Error('Target container is not a DOM element.'));
                    }
                  }
                })();
                (function() {
                  if (!(parentComponent != null && has(parentComponent))) {
                    {
                      throw ReactError(Error('parentComponent must be a valid React Component'));
                    }
                  }
                })();
                return legacyRenderSubtreeIntoContainer(
                  parentComponent,
                  element,
                  containerNode,
                  false,
                  callback,
                );
              },
              unmountComponentAtNode: function(container) {
                (function() {
                  if (!isValidContainer(container)) {
                    {
                      throw ReactError(
                        Error(
                          'unmountComponentAtNode(...): Target container is not a DOM element.',
                        ),
                      );
                    }
                  }
                })();

                {
                  !!container._reactHasBeenPassedToCreateRootDEV
                    ? warningWithoutStack$1(
                        false,
                        'You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' +
                          'passed to ReactDOM.%s(). This is not supported. Did you mean to call root.unmount()?',
                        enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot',
                      )
                    : void 0;
                }

                if (container._reactRootContainer) {
                  {
                    var rootEl = getReactRootElementInContainer(container);
                    var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
                    !!renderedByDifferentReact
                      ? warningWithoutStack$1(
                          false,
                          "unmountComponentAtNode(): The node you're attempting to unmount " +
                            'was rendered by another copy of React.',
                        )
                      : void 0;
                  }

                  // Unmount should not be batched.
                  unbatchedUpdates(function() {
                    legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                      container._reactRootContainer = null;
                    });
                  });
                  // If you call unmountComponentAtNode twice in quick succession, you'll
                  // get `true` twice. That's probably fine?
                  return true;
                } else {
                  {
                    var _rootEl = getReactRootElementInContainer(container);
                    var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl));

                    // Check if the container itself is a React root node.
                    var isContainerReactRoot =
                      container.nodeType === ELEMENT_NODE &&
                      isValidContainer(container.parentNode) &&
                      !!container.parentNode._reactRootContainer;

                    !!hasNonRootReactChild
                      ? warningWithoutStack$1(
                          false,
                          "unmountComponentAtNode(): The node you're attempting to unmount " +
                            'was rendered by React and is not a top-level container. %s',
                          isContainerReactRoot
                            ? 'You may have accidentally passed in a React root node instead ' +
                                'of its container.'
                            : 'Instead, have the parent component update its state and ' +
                                'rerender in order to remove this component.',
                        )
                      : void 0;
                  }

                  return false;
                }
              },

              // Temporary alias since we already shipped React 16 RC with it.
              // TODO: remove in React 17.
              unstable_createPortal: function() {
                if (!didWarnAboutUnstableCreatePortal) {
                  didWarnAboutUnstableCreatePortal = true;
                  lowPriorityWarning$1(
                    false,
                    'The ReactDOM.unstable_createPortal() alias has been deprecated, ' +
                      'and will be removed in React 17+. Update your code to use ' +
                      'ReactDOM.createPortal() instead. It has the exact same API, ' +
                      'but without the "unstable_" prefix.',
                  );
                }
                return createPortal$$1.apply(undefined, arguments);
              },

              unstable_batchedUpdates: batchedUpdates$1,

              // TODO remove this legacy method, unstable_discreteUpdates replaces it
              unstable_interactiveUpdates: function(fn, a, b, c) {
                flushDiscreteUpdates();
                return discreteUpdates$1(fn, a, b, c);
              },

              unstable_discreteUpdates: discreteUpdates$1,
              unstable_flushDiscreteUpdates: flushDiscreteUpdates,

              flushSync: flushSync,

              unstable_createRoot: createRoot,
              unstable_createSyncRoot: createSyncRoot,
              unstable_flushControlled: flushControlled,

              __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
                // Keep in sync with ReactDOMUnstableNativeDependencies.js
                // ReactTestUtils.js, and ReactTestUtilsAct.js. This is an array for better minification.
                Events: [
                  getInstanceFromNode$1,
                  getNodeFromInstance$1,
                  getFiberCurrentPropsFromNode$1,
                  injection.injectEventPluginsByName,
                  eventNameDispatchConfigs,
                  accumulateTwoPhaseDispatches,
                  accumulateDirectDispatches,
                  enqueueStateRestore,
                  restoreStateIfNeeded,
                  dispatchEvent,
                  runEventsInBatch,
                  flushPassiveEffects,
                  IsThisRendererActing,
                ],
              },
            };

            function createRoot(container, options) {
              var functionName = enableStableConcurrentModeAPIs
                ? 'createRoot'
                : 'unstable_createRoot';
              (function() {
                if (!isValidContainer(container)) {
                  {
                    throw ReactError(
                      Error(functionName + '(...): Target container is not a DOM element.'),
                    );
                  }
                }
              })();
              warnIfReactDOMContainerInDEV(container);
              var hydrate = options != null && options.hydrate === true;
              return new ReactRoot(container, hydrate);
            }

            function createSyncRoot(container, options) {
              var functionName = enableStableConcurrentModeAPIs
                ? 'createRoot'
                : 'unstable_createRoot';
              (function() {
                if (!isValidContainer(container)) {
                  {
                    throw ReactError(
                      Error(functionName + '(...): Target container is not a DOM element.'),
                    );
                  }
                }
              })();
              warnIfReactDOMContainerInDEV(container);
              var hydrate = options != null && options.hydrate === true;
              return new ReactSyncRoot(container, BatchedRoot, hydrate);
            }

            function warnIfReactDOMContainerInDEV(container) {
              {
                !!container._reactRootContainer
                  ? warningWithoutStack$1(
                      false,
                      'You are calling ReactDOM.%s() on a container that was previously ' +
                        'passed to ReactDOM.render(). This is not supported.',
                      enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot',
                    )
                  : void 0;
                container._reactHasBeenPassedToCreateRootDEV = true;
              }
            }

            if (enableStableConcurrentModeAPIs) {
              ReactDOM.createRoot = createRoot;
              ReactDOM.createSyncRoot = createSyncRoot;
            }

            var foundDevTools = injectIntoDevTools({
              findFiberByHostInstance: getClosestInstanceFromNode,
              bundleType: 1,
              version: ReactVersion,
              rendererPackageName: 'react-dom',
            });

            {
              if (!foundDevTools && canUseDOM && window.top === window.self) {
                // If we're in Chrome or Firefox, provide a download link if not installed.
                if (
                  (navigator.userAgent.indexOf('Chrome') > -1 &&
                    navigator.userAgent.indexOf('Edge') === -1) ||
                  navigator.userAgent.indexOf('Firefox') > -1
                ) {
                  var protocol = window.location.protocol;
                  // Don't warn in exotic cases like chrome-extension://.
                  if (/^(https?|file):$/.test(protocol)) {
                    console.info(
                      '%cDownload the React DevTools ' +
                        'for a better development experience: ' +
                        'https://fb.me/react-devtools' +
                        (protocol === 'file:'
                          ? '\nYou might need to use a local HTTP server (instead of file://): ' +
                            'https://fb.me/react-devtools-faq'
                          : ''),
                      'font-weight:bold',
                    );
                  }
                }
              }
            }

            var ReactDOM$2 = Object.freeze({
              default: ReactDOM,
            });

            var ReactDOM$3 = (ReactDOM$2 && ReactDOM) || ReactDOM$2;

            // TODO: decide on the top-level export form.
            // This is hacky but makes it work with both Rollup and Jest.
            var reactDom = ReactDOM$3.default || ReactDOM$3;

            module.exports = reactDom;
          })();
        }

        /***/
      },

    /***/ './node_modules/react-dom/index.js':
      /*!*****************************************!*\
  !*** ./node_modules/react-dom/index.js ***!
  \*****************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';

        function checkDCE() {
          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
          if (
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
          ) {
            return;
          }
          if (true) {
            // This branch is unreachable because this function is only called
            // in production, but the condition is true only in development.
            // Therefore if the branch is still here, dead code elimination wasn't
            // properly applied.
            // Don't change the message. React DevTools relies on it. Also make sure
            // this message doesn't occur elsewhere in this function, or it will cause
            // a false positive.
            throw new Error('^_^');
          }
          try {
            // Verify that the code above has been dead code eliminated (DCE'd).
            __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
          } catch (err) {
            // DevTools shouldn't crash React, no matter what.
            // We should still report in case we break this code.
            console.error(err);
          }
        }

        if (false) {
        } else {
          module.exports = __webpack_require__(
            /*! ./cjs/react-dom.development.js */ './node_modules/react-dom/cjs/react-dom.development.js',
          );
        }

        /***/
      },

    /***/ './node_modules/react-is/cjs/react-is.development.js':
      /*!***********************************************************!*\
  !*** ./node_modules/react-is/cjs/react-is.development.js ***!
  \***********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';
        /** @license React v16.9.0
         * react-is.development.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */

        if (true) {
          (function() {
            'use strict';

            Object.defineProperty(exports, '__esModule', { value: true });

            // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
            // nor polyfill, then a plain number is used for performance.
            var hasSymbol = typeof Symbol === 'function' && Symbol.for;

            var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
            var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
            var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
            var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
            var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
            var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
            var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
            // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
            // (unstable) APIs that have been removed. Can we remove the symbols?
            var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
            var REACT_CONCURRENT_MODE_TYPE = hasSymbol
              ? Symbol.for('react.concurrent_mode')
              : 0xeacf;
            var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
            var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
            var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
            var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
            var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
            var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
            var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;

            function isValidElementType(type) {
              return (
                typeof type === 'string' ||
                typeof type === 'function' ||
                // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
                type === REACT_FRAGMENT_TYPE ||
                type === REACT_CONCURRENT_MODE_TYPE ||
                type === REACT_PROFILER_TYPE ||
                type === REACT_STRICT_MODE_TYPE ||
                type === REACT_SUSPENSE_TYPE ||
                type === REACT_SUSPENSE_LIST_TYPE ||
                (typeof type === 'object' &&
                  type !== null &&
                  (type.$$typeof === REACT_LAZY_TYPE ||
                    type.$$typeof === REACT_MEMO_TYPE ||
                    type.$$typeof === REACT_PROVIDER_TYPE ||
                    type.$$typeof === REACT_CONTEXT_TYPE ||
                    type.$$typeof === REACT_FORWARD_REF_TYPE ||
                    type.$$typeof === REACT_FUNDAMENTAL_TYPE ||
                    type.$$typeof === REACT_RESPONDER_TYPE))
              );
            }

            /**
             * Forked from fbjs/warning:
             * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
             *
             * Only change is we use console.warn instead of console.error,
             * and do nothing when 'console' is not supported.
             * This really simplifies the code.
             * ---
             * Similar to invariant but only logs a warning if the condition is not met.
             * This can be used to log issues in development environments in critical
             * paths. Removing the logging code for production environments will keep the
             * same logic and follow the same code paths.
             */

            var lowPriorityWarning = function() {};

            {
              var printWarning = function(format) {
                for (
                  var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1;
                  _key < _len;
                  _key++
                ) {
                  args[_key - 1] = arguments[_key];
                }

                var argIndex = 0;
                var message =
                  'Warning: ' +
                  format.replace(/%s/g, function() {
                    return args[argIndex++];
                  });
                if (typeof console !== 'undefined') {
                  console.warn(message);
                }
                try {
                  // --- Welcome to debugging React ---
                  // This error was thrown as a convenience so that you can use this stack
                  // to find the callsite that caused this warning to fire.
                  throw new Error(message);
                } catch (x) {}
              };

              lowPriorityWarning = function(condition, format) {
                if (format === undefined) {
                  throw new Error(
                    '`lowPriorityWarning(condition, format, ...args)` requires a warning ' +
                      'message argument',
                  );
                }
                if (!condition) {
                  for (
                    var _len2 = arguments.length,
                      args = Array(_len2 > 2 ? _len2 - 2 : 0),
                      _key2 = 2;
                    _key2 < _len2;
                    _key2++
                  ) {
                    args[_key2 - 2] = arguments[_key2];
                  }

                  printWarning.apply(undefined, [format].concat(args));
                }
              };
            }

            var lowPriorityWarning$1 = lowPriorityWarning;

            function typeOf(object) {
              if (typeof object === 'object' && object !== null) {
                var $$typeof = object.$$typeof;
                switch ($$typeof) {
                  case REACT_ELEMENT_TYPE:
                    var type = object.type;

                    switch (type) {
                      case REACT_ASYNC_MODE_TYPE:
                      case REACT_CONCURRENT_MODE_TYPE:
                      case REACT_FRAGMENT_TYPE:
                      case REACT_PROFILER_TYPE:
                      case REACT_STRICT_MODE_TYPE:
                      case REACT_SUSPENSE_TYPE:
                        return type;
                      default:
                        var $$typeofType = type && type.$$typeof;

                        switch ($$typeofType) {
                          case REACT_CONTEXT_TYPE:
                          case REACT_FORWARD_REF_TYPE:
                          case REACT_PROVIDER_TYPE:
                            return $$typeofType;
                          default:
                            return $$typeof;
                        }
                    }
                  case REACT_LAZY_TYPE:
                  case REACT_MEMO_TYPE:
                  case REACT_PORTAL_TYPE:
                    return $$typeof;
                }
              }

              return undefined;
            }

            // AsyncMode is deprecated along with isAsyncMode
            var AsyncMode = REACT_ASYNC_MODE_TYPE;
            var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
            var ContextConsumer = REACT_CONTEXT_TYPE;
            var ContextProvider = REACT_PROVIDER_TYPE;
            var Element = REACT_ELEMENT_TYPE;
            var ForwardRef = REACT_FORWARD_REF_TYPE;
            var Fragment = REACT_FRAGMENT_TYPE;
            var Lazy = REACT_LAZY_TYPE;
            var Memo = REACT_MEMO_TYPE;
            var Portal = REACT_PORTAL_TYPE;
            var Profiler = REACT_PROFILER_TYPE;
            var StrictMode = REACT_STRICT_MODE_TYPE;
            var Suspense = REACT_SUSPENSE_TYPE;

            var hasWarnedAboutDeprecatedIsAsyncMode = false;

            // AsyncMode should be deprecated
            function isAsyncMode(object) {
              {
                if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                  hasWarnedAboutDeprecatedIsAsyncMode = true;
                  lowPriorityWarning$1(
                    false,
                    'The ReactIs.isAsyncMode() alias has been deprecated, ' +
                      'and will be removed in React 17+. Update your code to use ' +
                      'ReactIs.isConcurrentMode() instead. It has the exact same API.',
                  );
                }
              }
              return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
            }
            function isConcurrentMode(object) {
              return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
            }
            function isContextConsumer(object) {
              return typeOf(object) === REACT_CONTEXT_TYPE;
            }
            function isContextProvider(object) {
              return typeOf(object) === REACT_PROVIDER_TYPE;
            }
            function isElement(object) {
              return (
                typeof object === 'object' &&
                object !== null &&
                object.$$typeof === REACT_ELEMENT_TYPE
              );
            }
            function isForwardRef(object) {
              return typeOf(object) === REACT_FORWARD_REF_TYPE;
            }
            function isFragment(object) {
              return typeOf(object) === REACT_FRAGMENT_TYPE;
            }
            function isLazy(object) {
              return typeOf(object) === REACT_LAZY_TYPE;
            }
            function isMemo(object) {
              return typeOf(object) === REACT_MEMO_TYPE;
            }
            function isPortal(object) {
              return typeOf(object) === REACT_PORTAL_TYPE;
            }
            function isProfiler(object) {
              return typeOf(object) === REACT_PROFILER_TYPE;
            }
            function isStrictMode(object) {
              return typeOf(object) === REACT_STRICT_MODE_TYPE;
            }
            function isSuspense(object) {
              return typeOf(object) === REACT_SUSPENSE_TYPE;
            }

            exports.typeOf = typeOf;
            exports.AsyncMode = AsyncMode;
            exports.ConcurrentMode = ConcurrentMode;
            exports.ContextConsumer = ContextConsumer;
            exports.ContextProvider = ContextProvider;
            exports.Element = Element;
            exports.ForwardRef = ForwardRef;
            exports.Fragment = Fragment;
            exports.Lazy = Lazy;
            exports.Memo = Memo;
            exports.Portal = Portal;
            exports.Profiler = Profiler;
            exports.StrictMode = StrictMode;
            exports.Suspense = Suspense;
            exports.isValidElementType = isValidElementType;
            exports.isAsyncMode = isAsyncMode;
            exports.isConcurrentMode = isConcurrentMode;
            exports.isContextConsumer = isContextConsumer;
            exports.isContextProvider = isContextProvider;
            exports.isElement = isElement;
            exports.isForwardRef = isForwardRef;
            exports.isFragment = isFragment;
            exports.isLazy = isLazy;
            exports.isMemo = isMemo;
            exports.isPortal = isPortal;
            exports.isProfiler = isProfiler;
            exports.isStrictMode = isStrictMode;
            exports.isSuspense = isSuspense;
          })();
        }

        /***/
      },

    /***/ './node_modules/react-is/index.js':
      /*!****************************************!*\
  !*** ./node_modules/react-is/index.js ***!
  \****************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';

        if (false) {
        } else {
          module.exports = __webpack_require__(
            /*! ./cjs/react-is.development.js */ './node_modules/react-is/cjs/react-is.development.js',
          );
        }

        /***/
      },

    /***/ './node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js':
      /*!****************************************************************************!*\
  !*** ./node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js ***!
  \****************************************************************************/
      /*! exports provided: polyfill */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          'polyfill',
          function() {
            return polyfill;
          },
        );
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */

        function componentWillMount() {
          // Call this.constructor.gDSFP to support sub-classes.
          var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
          if (state !== null && state !== undefined) {
            this.setState(state);
          }
        }

        function componentWillReceiveProps(nextProps) {
          // Call this.constructor.gDSFP to support sub-classes.
          // Use the setState() updater to ensure state isn't stale in certain edge cases.
          function updater(prevState) {
            var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
            return state !== null && state !== undefined ? state : null;
          }
          // Binding "this" is important for shallow renderer support.
          this.setState(updater.bind(this));
        }

        function componentWillUpdate(nextProps, nextState) {
          try {
            var prevProps = this.props;
            var prevState = this.state;
            this.props = nextProps;
            this.state = nextState;
            this.__reactInternalSnapshotFlag = true;
            this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(prevProps, prevState);
          } finally {
            this.props = prevProps;
            this.state = prevState;
          }
        }

        // React may warn about cWM/cWRP/cWU methods being deprecated.
        // Add a flag to suppress these warnings for this special case.
        componentWillMount.__suppressDeprecationWarning = true;
        componentWillReceiveProps.__suppressDeprecationWarning = true;
        componentWillUpdate.__suppressDeprecationWarning = true;

        function polyfill(Component) {
          var prototype = Component.prototype;

          if (!prototype || !prototype.isReactComponent) {
            throw new Error('Can only polyfill class components');
          }

          if (
            typeof Component.getDerivedStateFromProps !== 'function' &&
            typeof prototype.getSnapshotBeforeUpdate !== 'function'
          ) {
            return Component;
          }

          // If new component APIs are defined, "unsafe" lifecycles won't be called.
          // Error if any of these lifecycles are present,
          // Because they would work differently between older and newer (16.3+) versions of React.
          var foundWillMountName = null;
          var foundWillReceivePropsName = null;
          var foundWillUpdateName = null;
          if (typeof prototype.componentWillMount === 'function') {
            foundWillMountName = 'componentWillMount';
          } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
            foundWillMountName = 'UNSAFE_componentWillMount';
          }
          if (typeof prototype.componentWillReceiveProps === 'function') {
            foundWillReceivePropsName = 'componentWillReceiveProps';
          } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {
            foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
          }
          if (typeof prototype.componentWillUpdate === 'function') {
            foundWillUpdateName = 'componentWillUpdate';
          } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
            foundWillUpdateName = 'UNSAFE_componentWillUpdate';
          }
          if (
            foundWillMountName !== null ||
            foundWillReceivePropsName !== null ||
            foundWillUpdateName !== null
          ) {
            var componentName = Component.displayName || Component.name;
            var newApiName =
              typeof Component.getDerivedStateFromProps === 'function'
                ? 'getDerivedStateFromProps()'
                : 'getSnapshotBeforeUpdate()';

            throw Error(
              'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' +
                componentName +
                ' uses ' +
                newApiName +
                ' but also contains the following legacy lifecycles:' +
                (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') +
                (foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '') +
                (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') +
                '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' +
                'https://fb.me/react-async-component-lifecycle-hooks',
            );
          }

          // React <= 16.2 does not support static getDerivedStateFromProps.
          // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
          // Newer versions of React will ignore these lifecycles if gDSFP exists.
          if (typeof Component.getDerivedStateFromProps === 'function') {
            prototype.componentWillMount = componentWillMount;
            prototype.componentWillReceiveProps = componentWillReceiveProps;
          }

          // React <= 16.2 does not support getSnapshotBeforeUpdate.
          // As a workaround, use cWU to invoke the new lifecycle.
          // Newer versions of React will ignore that lifecycle if gSBU exists.
          if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
            if (typeof prototype.componentDidUpdate !== 'function') {
              throw new Error(
                'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype',
              );
            }

            prototype.componentWillUpdate = componentWillUpdate;

            var componentDidUpdate = prototype.componentDidUpdate;

            prototype.componentDidUpdate = function componentDidUpdatePolyfill(
              prevProps,
              prevState,
              maybeSnapshot,
            ) {
              // 16.3+ will not execute our will-update method;
              // It will pass a snapshot value to did-update though.
              // Older versions will require our polyfilled will-update value.
              // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
              // Because for <= 15.x versions this might be a "prevContext" object.
              // We also can't just check "__reactInternalSnapshot",
              // Because get-snapshot might return a falsy value.
              // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
              var snapshot = this.__reactInternalSnapshotFlag
                ? this.__reactInternalSnapshot
                : maybeSnapshot;

              componentDidUpdate.call(this, prevProps, prevState, snapshot);
            };
          }

          return Component;
        }

        /***/
      },

    /***/ './node_modules/react/cjs/react.development.js':
      /*!*****************************************************!*\
  !*** ./node_modules/react/cjs/react.development.js ***!
  \*****************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';
        /** @license React v16.9.0
         * react.development.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */

        if (true) {
          (function() {
            'use strict';

            var _assign = __webpack_require__(
              /*! object-assign */ './node_modules/object-assign/index.js',
            );
            var checkPropTypes = __webpack_require__(
              /*! prop-types/checkPropTypes */ './node_modules/prop-types/checkPropTypes.js',
            );

            // TODO: this is special because it gets imported during build.

            var ReactVersion = '16.9.0';

            // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
            // nor polyfill, then a plain number is used for performance.
            var hasSymbol = typeof Symbol === 'function' && Symbol.for;

            var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
            var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
            var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
            var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
            var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
            var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
            var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
            // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
            // (unstable) APIs that have been removed. Can we remove the symbols?

            var REACT_CONCURRENT_MODE_TYPE = hasSymbol
              ? Symbol.for('react.concurrent_mode')
              : 0xeacf;
            var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
            var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
            var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
            var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
            var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
            var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
            var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;

            var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
            var FAUX_ITERATOR_SYMBOL = '@@iterator';

            function getIteratorFn(maybeIterable) {
              if (maybeIterable === null || typeof maybeIterable !== 'object') {
                return null;
              }
              var maybeIterator =
                (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
                maybeIterable[FAUX_ITERATOR_SYMBOL];
              if (typeof maybeIterator === 'function') {
                return maybeIterator;
              }
              return null;
            }

            // Do not require this module directly! Use normal `invariant` calls with
            // template literal strings. The messages will be converted to ReactError during
            // build, and in production they will be minified.

            // Do not require this module directly! Use normal `invariant` calls with
            // template literal strings. The messages will be converted to ReactError during
            // build, and in production they will be minified.

            function ReactError(error) {
              error.name = 'Invariant Violation';
              return error;
            }

            /**
             * Use invariant() to assert state which your program assumes to be true.
             *
             * Provide sprintf-style format (only %s is supported) and arguments
             * to provide information about what broke and what you were
             * expecting.
             *
             * The invariant message will be stripped in production, but the invariant
             * will remain to ensure logic does not differ in production.
             */

            /**
             * Forked from fbjs/warning:
             * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
             *
             * Only change is we use console.warn instead of console.error,
             * and do nothing when 'console' is not supported.
             * This really simplifies the code.
             * ---
             * Similar to invariant but only logs a warning if the condition is not met.
             * This can be used to log issues in development environments in critical
             * paths. Removing the logging code for production environments will keep the
             * same logic and follow the same code paths.
             */

            var lowPriorityWarning = function() {};

            {
              var printWarning = function(format) {
                for (
                  var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1;
                  _key < _len;
                  _key++
                ) {
                  args[_key - 1] = arguments[_key];
                }

                var argIndex = 0;
                var message =
                  'Warning: ' +
                  format.replace(/%s/g, function() {
                    return args[argIndex++];
                  });
                if (typeof console !== 'undefined') {
                  console.warn(message);
                }
                try {
                  // --- Welcome to debugging React ---
                  // This error was thrown as a convenience so that you can use this stack
                  // to find the callsite that caused this warning to fire.
                  throw new Error(message);
                } catch (x) {}
              };

              lowPriorityWarning = function(condition, format) {
                if (format === undefined) {
                  throw new Error(
                    '`lowPriorityWarning(condition, format, ...args)` requires a warning ' +
                      'message argument',
                  );
                }
                if (!condition) {
                  for (
                    var _len2 = arguments.length,
                      args = Array(_len2 > 2 ? _len2 - 2 : 0),
                      _key2 = 2;
                    _key2 < _len2;
                    _key2++
                  ) {
                    args[_key2 - 2] = arguments[_key2];
                  }

                  printWarning.apply(undefined, [format].concat(args));
                }
              };
            }

            var lowPriorityWarning$1 = lowPriorityWarning;

            /**
             * Similar to invariant but only logs a warning if the condition is not met.
             * This can be used to log issues in development environments in critical
             * paths. Removing the logging code for production environments will keep the
             * same logic and follow the same code paths.
             */

            var warningWithoutStack = function() {};

            {
              warningWithoutStack = function(condition, format) {
                for (
                  var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2;
                  _key < _len;
                  _key++
                ) {
                  args[_key - 2] = arguments[_key];
                }

                if (format === undefined) {
                  throw new Error(
                    '`warningWithoutStack(condition, format, ...args)` requires a warning ' +
                      'message argument',
                  );
                }
                if (args.length > 8) {
                  // Check before the condition to catch violations early.
                  throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
                }
                if (condition) {
                  return;
                }
                if (typeof console !== 'undefined') {
                  var argsWithFormat = args.map(function(item) {
                    return '' + item;
                  });
                  argsWithFormat.unshift('Warning: ' + format);

                  // We intentionally don't use spread (or .apply) directly because it
                  // breaks IE9: https://github.com/facebook/react/issues/13610
                  Function.prototype.apply.call(console.error, console, argsWithFormat);
                }
                try {
                  // --- Welcome to debugging React ---
                  // This error was thrown as a convenience so that you can use this stack
                  // to find the callsite that caused this warning to fire.
                  var argIndex = 0;
                  var message =
                    'Warning: ' +
                    format.replace(/%s/g, function() {
                      return args[argIndex++];
                    });
                  throw new Error(message);
                } catch (x) {}
              };
            }

            var warningWithoutStack$1 = warningWithoutStack;

            var didWarnStateUpdateForUnmountedComponent = {};

            function warnNoop(publicInstance, callerName) {
              {
                var _constructor = publicInstance.constructor;
                var componentName =
                  (_constructor && (_constructor.displayName || _constructor.name)) || 'ReactClass';
                var warningKey = componentName + '.' + callerName;
                if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                  return;
                }
                warningWithoutStack$1(
                  false,
                  "Can't call %s on a component that is not yet mounted. " +
                    'This is a no-op, but it might indicate a bug in your application. ' +
                    'Instead, assign to `this.state` directly or define a `state = {};` ' +
                    'class property with the desired state in the %s component.',
                  callerName,
                  componentName,
                );
                didWarnStateUpdateForUnmountedComponent[warningKey] = true;
              }
            }

            /**
             * This is the abstract API for an update queue.
             */
            var ReactNoopUpdateQueue = {
              /**
               * Checks whether or not this composite component is mounted.
               * @param {ReactClass} publicInstance The instance we want to test.
               * @return {boolean} True if mounted, false otherwise.
               * @protected
               * @final
               */
              isMounted: function(publicInstance) {
                return false;
              },

              /**
               * Forces an update. This should only be invoked when it is known with
               * certainty that we are **not** in a DOM transaction.
               *
               * You may want to call this when you know that some deeper aspect of the
               * component's state has changed but `setState` was not called.
               *
               * This will not invoke `shouldComponentUpdate`, but it will invoke
               * `componentWillUpdate` and `componentDidUpdate`.
               *
               * @param {ReactClass} publicInstance The instance that should rerender.
               * @param {?function} callback Called after component is updated.
               * @param {?string} callerName name of the calling function in the public API.
               * @internal
               */
              enqueueForceUpdate: function(publicInstance, callback, callerName) {
                warnNoop(publicInstance, 'forceUpdate');
              },

              /**
               * Replaces all of the state. Always use this or `setState` to mutate state.
               * You should treat `this.state` as immutable.
               *
               * There is no guarantee that `this.state` will be immediately updated, so
               * accessing `this.state` after calling this method may return the old value.
               *
               * @param {ReactClass} publicInstance The instance that should rerender.
               * @param {object} completeState Next state.
               * @param {?function} callback Called after component is updated.
               * @param {?string} callerName name of the calling function in the public API.
               * @internal
               */
              enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
                warnNoop(publicInstance, 'replaceState');
              },

              /**
               * Sets a subset of the state. This only exists because _pendingState is
               * internal. This provides a merging strategy that is not available to deep
               * properties which is confusing. TODO: Expose pendingState or don't use it
               * during the merge.
               *
               * @param {ReactClass} publicInstance The instance that should rerender.
               * @param {object} partialState Next partial state to be merged with state.
               * @param {?function} callback Called after component is updated.
               * @param {?string} Name of the calling function in the public API.
               * @internal
               */
              enqueueSetState: function(publicInstance, partialState, callback, callerName) {
                warnNoop(publicInstance, 'setState');
              },
            };

            var emptyObject = {};
            {
              Object.freeze(emptyObject);
            }

            /**
             * Base class helpers for the updating state of a component.
             */
            function Component(props, context, updater) {
              this.props = props;
              this.context = context;
              // If a component has string refs, we will assign a different object later.
              this.refs = emptyObject;
              // We initialize the default updater but the real one gets injected by the
              // renderer.
              this.updater = updater || ReactNoopUpdateQueue;
            }

            Component.prototype.isReactComponent = {};

            /**
             * Sets a subset of the state. Always use this to mutate
             * state. You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * There is no guarantee that calls to `setState` will run synchronously,
             * as they may eventually be batched together.  You can provide an optional
             * callback that will be executed when the call to setState is actually
             * completed.
             *
             * When a function is provided to setState, it will be called at some point in
             * the future (not synchronously). It will be called with the up to date
             * component arguments (state, props, context). These values can be different
             * from this.* because your function may be called after receiveProps but before
             * shouldComponentUpdate, and this new state, props, and context will not yet be
             * assigned to this.
             *
             * @param {object|function} partialState Next partial state or function to
             *        produce next partial state to be merged with current state.
             * @param {?function} callback Called after state is updated.
             * @final
             * @protected
             */
            Component.prototype.setState = function(partialState, callback) {
              (function() {
                if (
                  !(
                    typeof partialState === 'object' ||
                    typeof partialState === 'function' ||
                    partialState == null
                  )
                ) {
                  {
                    throw ReactError(
                      Error(
                        'setState(...): takes an object of state variables to update or a function which returns an object of state variables.',
                      ),
                    );
                  }
                }
              })();
              this.updater.enqueueSetState(this, partialState, callback, 'setState');
            };

            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {?function} callback Called after update is complete.
             * @final
             * @protected
             */
            Component.prototype.forceUpdate = function(callback) {
              this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
            };

            /**
             * Deprecated APIs. These APIs used to exist on classic React classes but since
             * we would like to deprecate them, we're not going to move them over to this
             * modern base class. Instead, we define a getter that warns if it's accessed.
             */
            {
              var deprecatedAPIs = {
                isMounted: [
                  'isMounted',
                  'Instead, make sure to clean up subscriptions and pending requests in ' +
                    'componentWillUnmount to prevent memory leaks.',
                ],
                replaceState: [
                  'replaceState',
                  'Refactor your code to use setState instead (see ' +
                    'https://github.com/facebook/react/issues/3236).',
                ],
              };
              var defineDeprecationWarning = function(methodName, info) {
                Object.defineProperty(Component.prototype, methodName, {
                  get: function() {
                    lowPriorityWarning$1(
                      false,
                      '%s(...) is deprecated in plain JavaScript React classes. %s',
                      info[0],
                      info[1],
                    );
                    return undefined;
                  },
                });
              };
              for (var fnName in deprecatedAPIs) {
                if (deprecatedAPIs.hasOwnProperty(fnName)) {
                  defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
                }
              }
            }

            function ComponentDummy() {}
            ComponentDummy.prototype = Component.prototype;

            /**
             * Convenience component with default shallow equality check for sCU.
             */
            function PureComponent(props, context, updater) {
              this.props = props;
              this.context = context;
              // If a component has string refs, we will assign a different object later.
              this.refs = emptyObject;
              this.updater = updater || ReactNoopUpdateQueue;
            }

            var pureComponentPrototype = (PureComponent.prototype = new ComponentDummy());
            pureComponentPrototype.constructor = PureComponent;
            // Avoid an extra prototype jump for these methods.
            _assign(pureComponentPrototype, Component.prototype);
            pureComponentPrototype.isPureReactComponent = true;

            // an immutable object with a single mutable value
            function createRef() {
              var refObject = {
                current: null,
              };
              {
                Object.seal(refObject);
              }
              return refObject;
            }

            /**
             * Keeps track of the current dispatcher.
             */
            var ReactCurrentDispatcher = {
              /**
               * @internal
               * @type {ReactComponent}
               */
              current: null,
            };

            /**
             * Keeps track of the current batch's configuration such as how long an update
             * should suspend for if it needs to.
             */
            var ReactCurrentBatchConfig = {
              suspense: null,
            };

            /**
             * Keeps track of the current owner.
             *
             * The current owner is the component who should own any components that are
             * currently being constructed.
             */
            var ReactCurrentOwner = {
              /**
               * @internal
               * @type {ReactComponent}
               */
              current: null,
            };

            var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

            var describeComponentFrame = function(name, source, ownerName) {
              var sourceInfo = '';
              if (source) {
                var path = source.fileName;
                var fileName = path.replace(BEFORE_SLASH_RE, '');
                {
                  // In DEV, include code for a common special case:
                  // prefer "folder/index.js" instead of just "index.js".
                  if (/^index\./.test(fileName)) {
                    var match = path.match(BEFORE_SLASH_RE);
                    if (match) {
                      var pathBeforeSlash = match[1];
                      if (pathBeforeSlash) {
                        var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
                        fileName = folderName + '/' + fileName;
                      }
                    }
                  }
                }
                sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
              } else if (ownerName) {
                sourceInfo = ' (created by ' + ownerName + ')';
              }
              return '\n    in ' + (name || 'Unknown') + sourceInfo;
            };

            var Resolved = 1;

            function refineResolvedLazyComponent(lazyComponent) {
              return lazyComponent._status === Resolved ? lazyComponent._result : null;
            }

            function getWrappedName(outerType, innerType, wrapperName) {
              var functionName = innerType.displayName || innerType.name || '';
              return (
                outerType.displayName ||
                (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName)
              );
            }

            function getComponentName(type) {
              if (type == null) {
                // Host root, text node or just invalid type.
                return null;
              }
              {
                if (typeof type.tag === 'number') {
                  warningWithoutStack$1(
                    false,
                    'Received an unexpected object in getComponentName(). ' +
                      'This is likely a bug in React. Please file an issue.',
                  );
                }
              }
              if (typeof type === 'function') {
                return type.displayName || type.name || null;
              }
              if (typeof type === 'string') {
                return type;
              }
              switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return 'Fragment';
                case REACT_PORTAL_TYPE:
                  return 'Portal';
                case REACT_PROFILER_TYPE:
                  return 'Profiler';
                case REACT_STRICT_MODE_TYPE:
                  return 'StrictMode';
                case REACT_SUSPENSE_TYPE:
                  return 'Suspense';
                case REACT_SUSPENSE_LIST_TYPE:
                  return 'SuspenseList';
              }
              if (typeof type === 'object') {
                switch (type.$$typeof) {
                  case REACT_CONTEXT_TYPE:
                    return 'Context.Consumer';
                  case REACT_PROVIDER_TYPE:
                    return 'Context.Provider';
                  case REACT_FORWARD_REF_TYPE:
                    return getWrappedName(type, type.render, 'ForwardRef');
                  case REACT_MEMO_TYPE:
                    return getComponentName(type.type);
                  case REACT_LAZY_TYPE: {
                    var thenable = type;
                    var resolvedThenable = refineResolvedLazyComponent(thenable);
                    if (resolvedThenable) {
                      return getComponentName(resolvedThenable);
                    }
                    break;
                  }
                }
              }
              return null;
            }

            var ReactDebugCurrentFrame = {};

            var currentlyValidatingElement = null;

            function setCurrentlyValidatingElement(element) {
              {
                currentlyValidatingElement = element;
              }
            }

            {
              // Stack implementation injected by the current renderer.
              ReactDebugCurrentFrame.getCurrentStack = null;

              ReactDebugCurrentFrame.getStackAddendum = function() {
                var stack = '';

                // Add an extra top frame while an element is being validated
                if (currentlyValidatingElement) {
                  var name = getComponentName(currentlyValidatingElement.type);
                  var owner = currentlyValidatingElement._owner;
                  stack += describeComponentFrame(
                    name,
                    currentlyValidatingElement._source,
                    owner && getComponentName(owner.type),
                  );
                }

                // Delegate to the injected renderer-specific implementation
                var impl = ReactDebugCurrentFrame.getCurrentStack;
                if (impl) {
                  stack += impl() || '';
                }

                return stack;
              };
            }

            /**
             * Used by act() to track whether you're inside an act() scope.
             */

            var IsSomeRendererActing = {
              current: false,
            };

            var ReactSharedInternals = {
              ReactCurrentDispatcher: ReactCurrentDispatcher,
              ReactCurrentBatchConfig: ReactCurrentBatchConfig,
              ReactCurrentOwner: ReactCurrentOwner,
              IsSomeRendererActing: IsSomeRendererActing,
              // Used by renderers to avoid bundling object-assign twice in UMD bundles:
              assign: _assign,
            };

            {
              _assign(ReactSharedInternals, {
                // These should not be included in production.
                ReactDebugCurrentFrame: ReactDebugCurrentFrame,
                // Shim for React DOM 16.0.0 which still destructured (but not used) this.
                // TODO: remove in React 17.0.
                ReactComponentTreeHook: {},
              });
            }

            /**
             * Similar to invariant but only logs a warning if the condition is not met.
             * This can be used to log issues in development environments in critical
             * paths. Removing the logging code for production environments will keep the
             * same logic and follow the same code paths.
             */

            var warning = warningWithoutStack$1;

            {
              warning = function(condition, format) {
                if (condition) {
                  return;
                }
                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
                var stack = ReactDebugCurrentFrame.getStackAddendum();
                // eslint-disable-next-line react-internal/warning-and-invariant-args

                for (
                  var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2;
                  _key < _len;
                  _key++
                ) {
                  args[_key - 2] = arguments[_key];
                }

                warningWithoutStack$1.apply(
                  undefined,
                  [false, format + '%s'].concat(args, [stack]),
                );
              };
            }

            var warning$1 = warning;

            var hasOwnProperty = Object.prototype.hasOwnProperty;

            var RESERVED_PROPS = {
              key: true,
              ref: true,
              __self: true,
              __source: true,
            };

            var specialPropKeyWarningShown = void 0;
            var specialPropRefWarningShown = void 0;

            function hasValidRef(config) {
              {
                if (hasOwnProperty.call(config, 'ref')) {
                  var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
                  if (getter && getter.isReactWarning) {
                    return false;
                  }
                }
              }
              return config.ref !== undefined;
            }

            function hasValidKey(config) {
              {
                if (hasOwnProperty.call(config, 'key')) {
                  var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
                  if (getter && getter.isReactWarning) {
                    return false;
                  }
                }
              }
              return config.key !== undefined;
            }

            function defineKeyPropWarningGetter(props, displayName) {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  warningWithoutStack$1(
                    false,
                    '%s: `key` is not a prop. Trying to access it will result ' +
                      'in `undefined` being returned. If you need to access the same ' +
                      'value within the child component, you should pass it as a different ' +
                      'prop. (https://fb.me/react-special-props)',
                    displayName,
                  );
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, 'key', {
                get: warnAboutAccessingKey,
                configurable: true,
              });
            }

            function defineRefPropWarningGetter(props, displayName) {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  warningWithoutStack$1(
                    false,
                    '%s: `ref` is not a prop. Trying to access it will result ' +
                      'in `undefined` being returned. If you need to access the same ' +
                      'value within the child component, you should pass it as a different ' +
                      'prop. (https://fb.me/react-special-props)',
                    displayName,
                  );
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, 'ref', {
                get: warnAboutAccessingRef,
                configurable: true,
              });
            }

            /**
             * Factory method to create a new React element. This no longer adheres to
             * the class pattern, so do not use new to call it. Also, no instanceof check
             * will work. Instead test $$typeof field against Symbol.for('react.element') to check
             * if something is a React Element.
             *
             * @param {*} type
             * @param {*} props
             * @param {*} key
             * @param {string|object} ref
             * @param {*} owner
             * @param {*} self A *temporary* helper to detect places where `this` is
             * different from the `owner` when React.createElement is called, so that we
             * can warn. We want to get rid of owner and replace string `ref`s with arrow
             * functions, and as long as `this` and owner are the same, there will be no
             * change in behavior.
             * @param {*} source An annotation object (added by a transpiler or otherwise)
             * indicating filename, line number, and/or other information.
             * @internal
             */
            var ReactElement = function(type, key, ref, self, source, owner, props) {
              var element = {
                // This tag allows us to uniquely identify this as a React Element
                $$typeof: REACT_ELEMENT_TYPE,

                // Built-in properties that belong on the element
                type: type,
                key: key,
                ref: ref,
                props: props,

                // Record the component responsible for creating this element.
                _owner: owner,
              };

              {
                // The validation flag is currently mutative. We put it on
                // an external backing store so that we can freeze the whole object.
                // This can be replaced with a WeakMap once they are implemented in
                // commonly used development environments.
                element._store = {};

                // To make comparing ReactElements easier for testing purposes, we make
                // the validation flag non-enumerable (where possible, which should
                // include every environment we run tests in), so the test framework
                // ignores it.
                Object.defineProperty(element._store, 'validated', {
                  configurable: false,
                  enumerable: false,
                  writable: true,
                  value: false,
                });
                // self and source are DEV only properties.
                Object.defineProperty(element, '_self', {
                  configurable: false,
                  enumerable: false,
                  writable: false,
                  value: self,
                });
                // Two elements created in two different places should be considered
                // equal for testing purposes and therefore we hide it from enumeration.
                Object.defineProperty(element, '_source', {
                  configurable: false,
                  enumerable: false,
                  writable: false,
                  value: source,
                });
                if (Object.freeze) {
                  Object.freeze(element.props);
                  Object.freeze(element);
                }
              }

              return element;
            };

            /**
             * https://github.com/reactjs/rfcs/pull/107
             * @param {*} type
             * @param {object} props
             * @param {string} key
             */

            /**
             * https://github.com/reactjs/rfcs/pull/107
             * @param {*} type
             * @param {object} props
             * @param {string} key
             */
            function jsxDEV(type, config, maybeKey, source, self) {
              var propName = void 0;

              // Reserved names are extracted
              var props = {};

              var key = null;
              var ref = null;

              if (hasValidRef(config)) {
                ref = config.ref;
              }

              if (hasValidKey(config)) {
                key = '' + config.key;
              }

              // Remaining properties are added to a new props object
              for (propName in config) {
                if (
                  hasOwnProperty.call(config, propName) &&
                  !RESERVED_PROPS.hasOwnProperty(propName)
                ) {
                  props[propName] = config[propName];
                }
              }

              // intentionally not checking if key was set above
              // this key is higher priority as it's static
              if (maybeKey !== undefined) {
                key = '' + maybeKey;
              }

              // Resolve default props
              if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;
                for (propName in defaultProps) {
                  if (props[propName] === undefined) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }

              if (key || ref) {
                var displayName =
                  typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }

              return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
            }

            /**
             * Create and return a new ReactElement of the given type.
             * See https://reactjs.org/docs/react-api.html#createelement
             */
            function createElement(type, config, children) {
              var propName = void 0;

              // Reserved names are extracted
              var props = {};

              var key = null;
              var ref = null;
              var self = null;
              var source = null;

              if (config != null) {
                if (hasValidRef(config)) {
                  ref = config.ref;
                }
                if (hasValidKey(config)) {
                  key = '' + config.key;
                }

                self = config.__self === undefined ? null : config.__self;
                source = config.__source === undefined ? null : config.__source;
                // Remaining properties are added to a new props object
                for (propName in config) {
                  if (
                    hasOwnProperty.call(config, propName) &&
                    !RESERVED_PROPS.hasOwnProperty(propName)
                  ) {
                    props[propName] = config[propName];
                  }
                }
              }

              // Children can be more than one argument, and those are transferred onto
              // the newly allocated props object.
              var childrenLength = arguments.length - 2;
              if (childrenLength === 1) {
                props.children = children;
              } else if (childrenLength > 1) {
                var childArray = Array(childrenLength);
                for (var i = 0; i < childrenLength; i++) {
                  childArray[i] = arguments[i + 2];
                }
                {
                  if (Object.freeze) {
                    Object.freeze(childArray);
                  }
                }
                props.children = childArray;
              }

              // Resolve default props
              if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;
                for (propName in defaultProps) {
                  if (props[propName] === undefined) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }
              {
                if (key || ref) {
                  var displayName =
                    typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
                  if (key) {
                    defineKeyPropWarningGetter(props, displayName);
                  }
                  if (ref) {
                    defineRefPropWarningGetter(props, displayName);
                  }
                }
              }
              return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
            }

            /**
             * Return a function that produces ReactElements of a given type.
             * See https://reactjs.org/docs/react-api.html#createfactory
             */

            function cloneAndReplaceKey(oldElement, newKey) {
              var newElement = ReactElement(
                oldElement.type,
                newKey,
                oldElement.ref,
                oldElement._self,
                oldElement._source,
                oldElement._owner,
                oldElement.props,
              );

              return newElement;
            }

            /**
             * Clone and return a new ReactElement using element as the starting point.
             * See https://reactjs.org/docs/react-api.html#cloneelement
             */
            function cloneElement(element, config, children) {
              (function() {
                if (!!(element === null || element === undefined)) {
                  {
                    throw ReactError(
                      Error(
                        'React.cloneElement(...): The argument must be a React element, but you passed ' +
                          element +
                          '.',
                      ),
                    );
                  }
                }
              })();

              var propName = void 0;

              // Original props are copied
              var props = _assign({}, element.props);

              // Reserved names are extracted
              var key = element.key;
              var ref = element.ref;
              // Self is preserved since the owner is preserved.
              var self = element._self;
              // Source is preserved since cloneElement is unlikely to be targeted by a
              // transpiler, and the original source is probably a better indicator of the
              // true owner.
              var source = element._source;

              // Owner will be preserved, unless ref is overridden
              var owner = element._owner;

              if (config != null) {
                if (hasValidRef(config)) {
                  // Silently steal the ref from the parent.
                  ref = config.ref;
                  owner = ReactCurrentOwner.current;
                }
                if (hasValidKey(config)) {
                  key = '' + config.key;
                }

                // Remaining properties override existing props
                var defaultProps = void 0;
                if (element.type && element.type.defaultProps) {
                  defaultProps = element.type.defaultProps;
                }
                for (propName in config) {
                  if (
                    hasOwnProperty.call(config, propName) &&
                    !RESERVED_PROPS.hasOwnProperty(propName)
                  ) {
                    if (config[propName] === undefined && defaultProps !== undefined) {
                      // Resolve default props
                      props[propName] = defaultProps[propName];
                    } else {
                      props[propName] = config[propName];
                    }
                  }
                }
              }

              // Children can be more than one argument, and those are transferred onto
              // the newly allocated props object.
              var childrenLength = arguments.length - 2;
              if (childrenLength === 1) {
                props.children = children;
              } else if (childrenLength > 1) {
                var childArray = Array(childrenLength);
                for (var i = 0; i < childrenLength; i++) {
                  childArray[i] = arguments[i + 2];
                }
                props.children = childArray;
              }

              return ReactElement(element.type, key, ref, self, source, owner, props);
            }

            /**
             * Verifies the object is a ReactElement.
             * See https://reactjs.org/docs/react-api.html#isvalidelement
             * @param {?object} object
             * @return {boolean} True if `object` is a ReactElement.
             * @final
             */
            function isValidElement(object) {
              return (
                typeof object === 'object' &&
                object !== null &&
                object.$$typeof === REACT_ELEMENT_TYPE
              );
            }

            var SEPARATOR = '.';
            var SUBSEPARATOR = ':';

            /**
             * Escape and wrap key so it is safe to use as a reactid
             *
             * @param {string} key to be escaped.
             * @return {string} the escaped key.
             */
            function escape(key) {
              var escapeRegex = /[=:]/g;
              var escaperLookup = {
                '=': '=0',
                ':': '=2',
              };
              var escapedString = ('' + key).replace(escapeRegex, function(match) {
                return escaperLookup[match];
              });

              return '$' + escapedString;
            }

            /**
             * TODO: Test that a single child and an array with one item have the same key
             * pattern.
             */

            var didWarnAboutMaps = false;

            var userProvidedKeyEscapeRegex = /\/+/g;
            function escapeUserProvidedKey(text) {
              return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
            }

            var POOL_SIZE = 10;
            var traverseContextPool = [];
            function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
              if (traverseContextPool.length) {
                var traverseContext = traverseContextPool.pop();
                traverseContext.result = mapResult;
                traverseContext.keyPrefix = keyPrefix;
                traverseContext.func = mapFunction;
                traverseContext.context = mapContext;
                traverseContext.count = 0;
                return traverseContext;
              } else {
                return {
                  result: mapResult,
                  keyPrefix: keyPrefix,
                  func: mapFunction,
                  context: mapContext,
                  count: 0,
                };
              }
            }

            function releaseTraverseContext(traverseContext) {
              traverseContext.result = null;
              traverseContext.keyPrefix = null;
              traverseContext.func = null;
              traverseContext.context = null;
              traverseContext.count = 0;
              if (traverseContextPool.length < POOL_SIZE) {
                traverseContextPool.push(traverseContext);
              }
            }

            /**
             * @param {?*} children Children tree container.
             * @param {!string} nameSoFar Name of the key path so far.
             * @param {!function} callback Callback to invoke with each child found.
             * @param {?*} traverseContext Used to pass information throughout the traversal
             * process.
             * @return {!number} The number of children in this subtree.
             */
            function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
              var type = typeof children;

              if (type === 'undefined' || type === 'boolean') {
                // All of the above are perceived as null.
                children = null;
              }

              var invokeCallback = false;

              if (children === null) {
                invokeCallback = true;
              } else {
                switch (type) {
                  case 'string':
                  case 'number':
                    invokeCallback = true;
                    break;
                  case 'object':
                    switch (children.$$typeof) {
                      case REACT_ELEMENT_TYPE:
                      case REACT_PORTAL_TYPE:
                        invokeCallback = true;
                    }
                }
              }

              if (invokeCallback) {
                callback(
                  traverseContext,
                  children,
                  // If it's the only child, treat the name as if it was wrapped in an array
                  // so that it's consistent if the number of children grows.
                  nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,
                );
                return 1;
              }

              var child = void 0;
              var nextName = void 0;
              var subtreeCount = 0; // Count of children found in the current subtree.
              var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

              if (Array.isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                  child = children[i];
                  nextName = nextNamePrefix + getComponentKey(child, i);
                  subtreeCount += traverseAllChildrenImpl(
                    child,
                    nextName,
                    callback,
                    traverseContext,
                  );
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === 'function') {
                  {
                    // Warn about using Maps as children
                    if (iteratorFn === children.entries) {
                      !didWarnAboutMaps
                        ? warning$1(
                            false,
                            'Using Maps as children is unsupported and will likely yield ' +
                              'unexpected results. Convert it to a sequence/iterable of keyed ' +
                              'ReactElements instead.',
                          )
                        : void 0;
                      didWarnAboutMaps = true;
                    }
                  }

                  var iterator = iteratorFn.call(children);
                  var step = void 0;
                  var ii = 0;
                  while (!(step = iterator.next()).done) {
                    child = step.value;
                    nextName = nextNamePrefix + getComponentKey(child, ii++);
                    subtreeCount += traverseAllChildrenImpl(
                      child,
                      nextName,
                      callback,
                      traverseContext,
                    );
                  }
                } else if (type === 'object') {
                  var addendum = '';
                  {
                    addendum =
                      ' If you meant to render a collection of children, use an array ' +
                      'instead.' +
                      ReactDebugCurrentFrame.getStackAddendum();
                  }
                  var childrenString = '' + children;
                  (function() {
                    {
                      {
                        throw ReactError(
                          Error(
                            'Objects are not valid as a React child (found: ' +
                              (childrenString === '[object Object]'
                                ? 'object with keys {' + Object.keys(children).join(', ') + '}'
                                : childrenString) +
                              ').' +
                              addendum,
                          ),
                        );
                      }
                    }
                  })();
                }
              }

              return subtreeCount;
            }

            /**
             * Traverses children that are typically specified as `props.children`, but
             * might also be specified through attributes:
             *
             * - `traverseAllChildren(this.props.children, ...)`
             * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
             *
             * The `traverseContext` is an optional argument that is passed through the
             * entire traversal. It can be used to store accumulations or anything else that
             * the callback might find relevant.
             *
             * @param {?*} children Children tree object.
             * @param {!function} callback To invoke upon traversing each child.
             * @param {?*} traverseContext Context for traversal.
             * @return {!number} The number of children in this subtree.
             */
            function traverseAllChildren(children, callback, traverseContext) {
              if (children == null) {
                return 0;
              }

              return traverseAllChildrenImpl(children, '', callback, traverseContext);
            }

            /**
             * Generate a key string that identifies a component within a set.
             *
             * @param {*} component A component that could contain a manual key.
             * @param {number} index Index that is used if a manual key is not provided.
             * @return {string}
             */
            function getComponentKey(component, index) {
              // Do some typechecking here since we call this blindly. We want to ensure
              // that we don't block potential future ES APIs.
              if (typeof component === 'object' && component !== null && component.key != null) {
                // Explicit key
                return escape(component.key);
              }
              // Implicit key determined by the index in the set
              return index.toString(36);
            }

            function forEachSingleChild(bookKeeping, child, name) {
              var func = bookKeeping.func,
                context = bookKeeping.context;

              func.call(context, child, bookKeeping.count++);
            }

            /**
             * Iterates through children that are typically specified as `props.children`.
             *
             * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
             *
             * The provided forEachFunc(child, index) will be called for each
             * leaf child.
             *
             * @param {?*} children Children tree container.
             * @param {function(*, int)} forEachFunc
             * @param {*} forEachContext Context for forEachContext.
             */
            function forEachChildren(children, forEachFunc, forEachContext) {
              if (children == null) {
                return children;
              }
              var traverseContext = getPooledTraverseContext(
                null,
                null,
                forEachFunc,
                forEachContext,
              );
              traverseAllChildren(children, forEachSingleChild, traverseContext);
              releaseTraverseContext(traverseContext);
            }

            function mapSingleChildIntoContext(bookKeeping, child, childKey) {
              var result = bookKeeping.result,
                keyPrefix = bookKeeping.keyPrefix,
                func = bookKeeping.func,
                context = bookKeeping.context;

              var mappedChild = func.call(context, child, bookKeeping.count++);
              if (Array.isArray(mappedChild)) {
                mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    keyPrefix +
                      (mappedChild.key && (!child || child.key !== mappedChild.key)
                        ? escapeUserProvidedKey(mappedChild.key) + '/'
                        : '') +
                      childKey,
                  );
                }
                result.push(mappedChild);
              }
            }

            function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
              var escapedPrefix = '';
              if (prefix != null) {
                escapedPrefix = escapeUserProvidedKey(prefix) + '/';
              }
              var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
              traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
              releaseTraverseContext(traverseContext);
            }

            /**
             * Maps children that are typically specified as `props.children`.
             *
             * See https://reactjs.org/docs/react-api.html#reactchildrenmap
             *
             * The provided mapFunction(child, key, index) will be called for each
             * leaf child.
             *
             * @param {?*} children Children tree container.
             * @param {function(*, int)} func The map function.
             * @param {*} context Context for mapFunction.
             * @return {object} Object containing the ordered map of results.
             */
            function mapChildren(children, func, context) {
              if (children == null) {
                return children;
              }
              var result = [];
              mapIntoWithKeyPrefixInternal(children, result, null, func, context);
              return result;
            }

            /**
             * Count the number of children that are typically specified as
             * `props.children`.
             *
             * See https://reactjs.org/docs/react-api.html#reactchildrencount
             *
             * @param {?*} children Children tree container.
             * @return {number} The number of children.
             */
            function countChildren(children) {
              return traverseAllChildren(
                children,
                function() {
                  return null;
                },
                null,
              );
            }

            /**
             * Flatten a children object (typically specified as `props.children`) and
             * return an array with appropriately re-keyed children.
             *
             * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
             */
            function toArray(children) {
              var result = [];
              mapIntoWithKeyPrefixInternal(children, result, null, function(child) {
                return child;
              });
              return result;
            }

            /**
             * Returns the first child in a collection of children and verifies that there
             * is only one child in the collection.
             *
             * See https://reactjs.org/docs/react-api.html#reactchildrenonly
             *
             * The current implementation of this function assumes that a single child gets
             * passed without a wrapper, but the purpose of this helper function is to
             * abstract away the particular structure of children.
             *
             * @param {?object} children Child collection structure.
             * @return {ReactElement} The first and only `ReactElement` contained in the
             * structure.
             */
            function onlyChild(children) {
              (function() {
                if (!isValidElement(children)) {
                  {
                    throw ReactError(
                      Error(
                        'React.Children.only expected to receive a single React element child.',
                      ),
                    );
                  }
                }
              })();
              return children;
            }

            function createContext(defaultValue, calculateChangedBits) {
              if (calculateChangedBits === undefined) {
                calculateChangedBits = null;
              } else {
                {
                  !(calculateChangedBits === null || typeof calculateChangedBits === 'function')
                    ? warningWithoutStack$1(
                        false,
                        'createContext: Expected the optional second argument to be a ' +
                          'function. Instead received: %s',
                        calculateChangedBits,
                      )
                    : void 0;
                }
              }

              var context = {
                $$typeof: REACT_CONTEXT_TYPE,
                _calculateChangedBits: calculateChangedBits,
                // As a workaround to support multiple concurrent renderers, we categorize
                // some renderers as primary and others as secondary. We only expect
                // there to be two concurrent renderers at most: React Native (primary) and
                // Fabric (secondary); React DOM (primary) and React ART (secondary).
                // Secondary renderers store their context values on separate fields.
                _currentValue: defaultValue,
                _currentValue2: defaultValue,
                // Used to track how many concurrent renderers this context currently
                // supports within in a single renderer. Such as parallel server rendering.
                _threadCount: 0,
                // These are circular
                Provider: null,
                Consumer: null,
              };

              context.Provider = {
                $$typeof: REACT_PROVIDER_TYPE,
                _context: context,
              };

              var hasWarnedAboutUsingNestedContextConsumers = false;
              var hasWarnedAboutUsingConsumerProvider = false;

              {
                // A separate object, but proxies back to the original context object for
                // backwards compatibility. It has a different $$typeof, so we can properly
                // warn for the incorrect usage of Context as a Consumer.
                var Consumer = {
                  $$typeof: REACT_CONTEXT_TYPE,
                  _context: context,
                  _calculateChangedBits: context._calculateChangedBits,
                };
                // $FlowFixMe: Flow complains about not setting a value, which is intentional here
                Object.defineProperties(Consumer, {
                  Provider: {
                    get: function() {
                      if (!hasWarnedAboutUsingConsumerProvider) {
                        hasWarnedAboutUsingConsumerProvider = true;
                        warning$1(
                          false,
                          'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' +
                            'a future major release. Did you mean to render <Context.Provider> instead?',
                        );
                      }
                      return context.Provider;
                    },
                    set: function(_Provider) {
                      context.Provider = _Provider;
                    },
                  },
                  _currentValue: {
                    get: function() {
                      return context._currentValue;
                    },
                    set: function(_currentValue) {
                      context._currentValue = _currentValue;
                    },
                  },
                  _currentValue2: {
                    get: function() {
                      return context._currentValue2;
                    },
                    set: function(_currentValue2) {
                      context._currentValue2 = _currentValue2;
                    },
                  },
                  _threadCount: {
                    get: function() {
                      return context._threadCount;
                    },
                    set: function(_threadCount) {
                      context._threadCount = _threadCount;
                    },
                  },
                  Consumer: {
                    get: function() {
                      if (!hasWarnedAboutUsingNestedContextConsumers) {
                        hasWarnedAboutUsingNestedContextConsumers = true;
                        warning$1(
                          false,
                          'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' +
                            'a future major release. Did you mean to render <Context.Consumer> instead?',
                        );
                      }
                      return context.Consumer;
                    },
                  },
                });
                // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
                context.Consumer = Consumer;
              }

              {
                context._currentRenderer = null;
                context._currentRenderer2 = null;
              }

              return context;
            }

            function lazy(ctor) {
              var lazyType = {
                $$typeof: REACT_LAZY_TYPE,
                _ctor: ctor,
                // React uses these fields to store the result.
                _status: -1,
                _result: null,
              };

              {
                // In production, this would just set it on the object.
                var defaultProps = void 0;
                var propTypes = void 0;
                Object.defineProperties(lazyType, {
                  defaultProps: {
                    configurable: true,
                    get: function() {
                      return defaultProps;
                    },
                    set: function(newDefaultProps) {
                      warning$1(
                        false,
                        'React.lazy(...): It is not supported to assign `defaultProps` to ' +
                          'a lazy component import. Either specify them where the component ' +
                          'is defined, or create a wrapping component around it.',
                      );
                      defaultProps = newDefaultProps;
                      // Match production behavior more closely:
                      Object.defineProperty(lazyType, 'defaultProps', {
                        enumerable: true,
                      });
                    },
                  },
                  propTypes: {
                    configurable: true,
                    get: function() {
                      return propTypes;
                    },
                    set: function(newPropTypes) {
                      warning$1(
                        false,
                        'React.lazy(...): It is not supported to assign `propTypes` to ' +
                          'a lazy component import. Either specify them where the component ' +
                          'is defined, or create a wrapping component around it.',
                      );
                      propTypes = newPropTypes;
                      // Match production behavior more closely:
                      Object.defineProperty(lazyType, 'propTypes', {
                        enumerable: true,
                      });
                    },
                  },
                });
              }

              return lazyType;
            }

            function forwardRef(render) {
              {
                if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                  warningWithoutStack$1(
                    false,
                    'forwardRef requires a render function but received a `memo` ' +
                      'component. Instead of forwardRef(memo(...)), use ' +
                      'memo(forwardRef(...)).',
                  );
                } else if (typeof render !== 'function') {
                  warningWithoutStack$1(
                    false,
                    'forwardRef requires a render function but was given %s.',
                    render === null ? 'null' : typeof render,
                  );
                } else {
                  !// Do not warn for 0 arguments because it could be due to usage of the 'arguments' object
                  (render.length === 0 || render.length === 2)
                    ? warningWithoutStack$1(
                        false,
                        'forwardRef render functions accept exactly two parameters: props and ref. %s',
                        render.length === 1
                          ? 'Did you forget to use the ref parameter?'
                          : 'Any additional parameter will be undefined.',
                      )
                    : void 0;
                }

                if (render != null) {
                  !(render.defaultProps == null && render.propTypes == null)
                    ? warningWithoutStack$1(
                        false,
                        'forwardRef render functions do not support propTypes or defaultProps. ' +
                          'Did you accidentally pass a React component?',
                      )
                    : void 0;
                }
              }

              return {
                $$typeof: REACT_FORWARD_REF_TYPE,
                render: render,
              };
            }

            function isValidElementType(type) {
              return (
                typeof type === 'string' ||
                typeof type === 'function' ||
                // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
                type === REACT_FRAGMENT_TYPE ||
                type === REACT_CONCURRENT_MODE_TYPE ||
                type === REACT_PROFILER_TYPE ||
                type === REACT_STRICT_MODE_TYPE ||
                type === REACT_SUSPENSE_TYPE ||
                type === REACT_SUSPENSE_LIST_TYPE ||
                (typeof type === 'object' &&
                  type !== null &&
                  (type.$$typeof === REACT_LAZY_TYPE ||
                    type.$$typeof === REACT_MEMO_TYPE ||
                    type.$$typeof === REACT_PROVIDER_TYPE ||
                    type.$$typeof === REACT_CONTEXT_TYPE ||
                    type.$$typeof === REACT_FORWARD_REF_TYPE ||
                    type.$$typeof === REACT_FUNDAMENTAL_TYPE ||
                    type.$$typeof === REACT_RESPONDER_TYPE))
              );
            }

            function memo(type, compare) {
              {
                if (!isValidElementType(type)) {
                  warningWithoutStack$1(
                    false,
                    'memo: The first argument must be a component. Instead ' + 'received: %s',
                    type === null ? 'null' : typeof type,
                  );
                }
              }
              return {
                $$typeof: REACT_MEMO_TYPE,
                type: type,
                compare: compare === undefined ? null : compare,
              };
            }

            function resolveDispatcher() {
              var dispatcher = ReactCurrentDispatcher.current;
              (function() {
                if (!(dispatcher !== null)) {
                  {
                    throw ReactError(
                      Error(
                        'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.',
                      ),
                    );
                  }
                }
              })();
              return dispatcher;
            }

            function useContext(Context, unstable_observedBits) {
              var dispatcher = resolveDispatcher();
              {
                !(unstable_observedBits === undefined)
                  ? warning$1(
                      false,
                      'useContext() second argument is reserved for future ' +
                        'use in React. Passing it is not supported. ' +
                        'You passed: %s.%s',
                      unstable_observedBits,
                      typeof unstable_observedBits === 'number' && Array.isArray(arguments[2])
                        ? '\n\nDid you call array.map(useContext)? ' +
                            'Calling Hooks inside a loop is not supported. ' +
                            'Learn more at https://fb.me/rules-of-hooks'
                        : '',
                    )
                  : void 0;

                // TODO: add a more generic warning for invalid values.
                if (Context._context !== undefined) {
                  var realContext = Context._context;
                  // Don't deduplicate because this legitimately causes bugs
                  // and nobody should be using this in existing code.
                  if (realContext.Consumer === Context) {
                    warning$1(
                      false,
                      'Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' +
                        'removed in a future major release. Did you mean to call useContext(Context) instead?',
                    );
                  } else if (realContext.Provider === Context) {
                    warning$1(
                      false,
                      'Calling useContext(Context.Provider) is not supported. ' +
                        'Did you mean to call useContext(Context) instead?',
                    );
                  }
                }
              }
              return dispatcher.useContext(Context, unstable_observedBits);
            }

            function useState(initialState) {
              var dispatcher = resolveDispatcher();
              return dispatcher.useState(initialState);
            }

            function useReducer(reducer, initialArg, init) {
              var dispatcher = resolveDispatcher();
              return dispatcher.useReducer(reducer, initialArg, init);
            }

            function useRef(initialValue) {
              var dispatcher = resolveDispatcher();
              return dispatcher.useRef(initialValue);
            }

            function useEffect(create, inputs) {
              var dispatcher = resolveDispatcher();
              return dispatcher.useEffect(create, inputs);
            }

            function useLayoutEffect(create, inputs) {
              var dispatcher = resolveDispatcher();
              return dispatcher.useLayoutEffect(create, inputs);
            }

            function useCallback(callback, inputs) {
              var dispatcher = resolveDispatcher();
              return dispatcher.useCallback(callback, inputs);
            }

            function useMemo(create, inputs) {
              var dispatcher = resolveDispatcher();
              return dispatcher.useMemo(create, inputs);
            }

            function useImperativeHandle(ref, create, inputs) {
              var dispatcher = resolveDispatcher();
              return dispatcher.useImperativeHandle(ref, create, inputs);
            }

            function useDebugValue(value, formatterFn) {
              {
                var dispatcher = resolveDispatcher();
                return dispatcher.useDebugValue(value, formatterFn);
              }
            }

            var emptyObject$1 = {};

            function useResponder(responder, listenerProps) {
              var dispatcher = resolveDispatcher();
              {
                if (responder == null || responder.$$typeof !== REACT_RESPONDER_TYPE) {
                  warning$1(
                    false,
                    'useResponder: invalid first argument. Expected an event responder, but instead got %s',
                    responder,
                  );
                  return;
                }
              }
              return dispatcher.useResponder(responder, listenerProps || emptyObject$1);
            }

            // Within the scope of the callback, mark all updates as being allowed to suspend.
            function withSuspenseConfig(scope, config) {
              var previousConfig = ReactCurrentBatchConfig.suspense;
              ReactCurrentBatchConfig.suspense = config === undefined ? null : config;
              try {
                scope();
              } finally {
                ReactCurrentBatchConfig.suspense = previousConfig;
              }
            }

            /**
             * ReactElementValidator provides a wrapper around a element factory
             * which validates the props passed to the element. This is intended to be
             * used only in DEV and could be replaced by a static type checker for languages
             * that support it.
             */

            var propTypesMisspellWarningShown = void 0;

            {
              propTypesMisspellWarningShown = false;
            }

            function getDeclarationErrorAddendum() {
              if (ReactCurrentOwner.current) {
                var name = getComponentName(ReactCurrentOwner.current.type);
                if (name) {
                  return '\n\nCheck the render method of `' + name + '`.';
                }
              }
              return '';
            }

            function getSourceInfoErrorAddendum(source) {
              if (source !== undefined) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, '');
                var lineNumber = source.lineNumber;
                return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
              }
              return '';
            }

            function getSourceInfoErrorAddendumForProps(elementProps) {
              if (elementProps !== null && elementProps !== undefined) {
                return getSourceInfoErrorAddendum(elementProps.__source);
              }
              return '';
            }

            /**
             * Warn if there's no key explicitly set on dynamic arrays of children or
             * object keys are not valid. This allows us to keep track of children between
             * updates.
             */
            var ownerHasKeyUseWarning = {};

            function getCurrentComponentErrorInfo(parentType) {
              var info = getDeclarationErrorAddendum();

              if (!info) {
                var parentName =
                  typeof parentType === 'string'
                    ? parentType
                    : parentType.displayName || parentType.name;
                if (parentName) {
                  info = '\n\nCheck the top-level render call using <' + parentName + '>.';
                }
              }
              return info;
            }

            /**
             * Warn if the element doesn't have an explicit key assigned to it.
             * This element is in an array. The array could grow and shrink or be
             * reordered. All children that haven't already been validated are required to
             * have a "key" property assigned to it. Error statuses are cached so a warning
             * will only be shown once.
             *
             * @internal
             * @param {ReactElement} element Element that requires a key.
             * @param {*} parentType element's parent's type.
             */
            function validateExplicitKey(element, parentType) {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;

              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

              // Usually the current owner is the offender, but if it accepts children as a
              // property, it may be the creator of the child that's responsible for
              // assigning it a key.
              var childOwner = '';
              if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
                // Give the component that originally created this child.
                childOwner =
                  ' It was passed a child from ' + getComponentName(element._owner.type) + '.';
              }

              setCurrentlyValidatingElement(element);
              {
                warning$1(
                  false,
                  'Each child in a list should have a unique "key" prop.' +
                    '%s%s See https://fb.me/react-warning-keys for more information.',
                  currentComponentErrorInfo,
                  childOwner,
                );
              }
              setCurrentlyValidatingElement(null);
            }

            /**
             * Ensure that every element either is passed in a static location, in an
             * array with an explicit keys property defined, or in an object literal
             * with valid key property.
             *
             * @internal
             * @param {ReactNode} node Statically passed child of any type.
             * @param {*} parentType node's parent's type.
             */
            function validateChildKeys(node, parentType) {
              if (typeof node !== 'object') {
                return;
              }
              if (Array.isArray(node)) {
                for (var i = 0; i < node.length; i++) {
                  var child = node[i];
                  if (isValidElement(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement(node)) {
                // This element was passed in a valid location.
                if (node._store) {
                  node._store.validated = true;
                }
              } else if (node) {
                var iteratorFn = getIteratorFn(node);
                if (typeof iteratorFn === 'function') {
                  // Entry iterators used to provide implicit keys,
                  // but now we print a separate warning for them later.
                  if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step = void 0;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }

            /**
             * Given an element, validate that its props follow the propTypes definition,
             * provided by the type.
             *
             * @param {ReactElement} element
             */
            function validatePropTypes(element) {
              var type = element.type;
              if (type === null || type === undefined || typeof type === 'string') {
                return;
              }
              var name = getComponentName(type);
              var propTypes = void 0;
              if (typeof type === 'function') {
                propTypes = type.propTypes;
              } else if (
                typeof type === 'object' &&
                (type.$$typeof === REACT_FORWARD_REF_TYPE ||
                  // Note: Memo only checks outer props here.
                  // Inner props are checked in the reconciler.
                  type.$$typeof === REACT_MEMO_TYPE)
              ) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                setCurrentlyValidatingElement(element);
                checkPropTypes(
                  propTypes,
                  element.props,
                  'prop',
                  name,
                  ReactDebugCurrentFrame.getStackAddendum,
                );
                setCurrentlyValidatingElement(null);
              } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                warningWithoutStack$1(
                  false,
                  'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?',
                  name || 'Unknown',
                );
              }
              if (typeof type.getDefaultProps === 'function') {
                !type.getDefaultProps.isReactClassApproved
                  ? warningWithoutStack$1(
                      false,
                      'getDefaultProps is only used on classic React.createClass ' +
                        'definitions. Use a static property named `defaultProps` instead.',
                    )
                  : void 0;
              }
            }

            /**
             * Given a fragment, validate that it can only be provided with fragment props
             * @param {ReactElement} fragment
             */
            function validateFragmentProps(fragment) {
              setCurrentlyValidatingElement(fragment);

              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== 'children' && key !== 'key') {
                  warning$1(
                    false,
                    'Invalid prop `%s` supplied to `React.Fragment`. ' +
                      'React.Fragment can only have `key` and `children` props.',
                    key,
                  );
                  break;
                }
              }

              if (fragment.ref !== null) {
                warning$1(false, 'Invalid attribute `ref` supplied to `React.Fragment`.');
              }

              setCurrentlyValidatingElement(null);
            }

            function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
              var validType = isValidElementType(type);

              // We warn in this case but don't throw. We expect the element creation to
              // succeed and there will likely be errors in render.
              if (!validType) {
                var info = '';
                if (
                  type === undefined ||
                  (typeof type === 'object' && type !== null && Object.keys(type).length === 0)
                ) {
                  info +=
                    ' You likely forgot to export your component from the file ' +
                    "it's defined in, or you might have mixed up default and named imports.";
                }

                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }

                var typeString = void 0;
                if (type === null) {
                  typeString = 'null';
                } else if (Array.isArray(type)) {
                  typeString = 'array';
                } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = '<' + (getComponentName(type.type) || 'Unknown') + ' />';
                  info = ' Did you accidentally export a JSX literal instead of a component?';
                } else {
                  typeString = typeof type;
                }

                warning$1(
                  false,
                  'React.jsx: type is invalid -- expected a string (for ' +
                    'built-in components) or a class/function (for composite ' +
                    'components) but got: %s.%s',
                  typeString,
                  info,
                );
              }

              var element = jsxDEV(type, props, key, source, self);

              // The result can be nullish if a mock or a custom function is used.
              // TODO: Drop this when these are no longer allowed as the type argument.
              if (element == null) {
                return element;
              }

              // Skip key warning if the type isn't valid since our key validation logic
              // doesn't expect a non-string/function type and can throw confusing errors.
              // We don't want exception behavior to differ between dev and prod.
              // (Rendering will throw with a helpful message and as soon as the type is
              // fixed, the key warnings will appear.)
              if (validType) {
                var children = props.children;
                if (children !== undefined) {
                  if (isStaticChildren) {
                    for (var i = 0; i < children.length; i++) {
                      validateChildKeys(children[i], type);
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }

              if (props.key !== undefined) {
                warning$1(
                  false,
                  'React.jsx: Spreading a key to JSX is a deprecated pattern. ' +
                    'Explicitly pass a key after spreading props in your JSX call. ' +
                    'E.g. <ComponentName {...props} key={key} />',
                );
              }

              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }

              return element;
            }

            // These two functions exist to still get child warnings in dev
            // even with the prod transform. This means that jsxDEV is purely
            // opt-in behavior for better messages but that we won't stop
            // giving you warnings if you use production apis.
            function jsxWithValidationStatic(type, props, key) {
              return jsxWithValidation(type, props, key, true);
            }

            function jsxWithValidationDynamic(type, props, key) {
              return jsxWithValidation(type, props, key, false);
            }

            function createElementWithValidation(type, props, children) {
              var validType = isValidElementType(type);

              // We warn in this case but don't throw. We expect the element creation to
              // succeed and there will likely be errors in render.
              if (!validType) {
                var info = '';
                if (
                  type === undefined ||
                  (typeof type === 'object' && type !== null && Object.keys(type).length === 0)
                ) {
                  info +=
                    ' You likely forgot to export your component from the file ' +
                    "it's defined in, or you might have mixed up default and named imports.";
                }

                var sourceInfo = getSourceInfoErrorAddendumForProps(props);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }

                var typeString = void 0;
                if (type === null) {
                  typeString = 'null';
                } else if (Array.isArray(type)) {
                  typeString = 'array';
                } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = '<' + (getComponentName(type.type) || 'Unknown') + ' />';
                  info = ' Did you accidentally export a JSX literal instead of a component?';
                } else {
                  typeString = typeof type;
                }

                warning$1(
                  false,
                  'React.createElement: type is invalid -- expected a string (for ' +
                    'built-in components) or a class/function (for composite ' +
                    'components) but got: %s.%s',
                  typeString,
                  info,
                );
              }

              var element = createElement.apply(this, arguments);

              // The result can be nullish if a mock or a custom function is used.
              // TODO: Drop this when these are no longer allowed as the type argument.
              if (element == null) {
                return element;
              }

              // Skip key warning if the type isn't valid since our key validation logic
              // doesn't expect a non-string/function type and can throw confusing errors.
              // We don't want exception behavior to differ between dev and prod.
              // (Rendering will throw with a helpful message and as soon as the type is
              // fixed, the key warnings will appear.)
              if (validType) {
                for (var i = 2; i < arguments.length; i++) {
                  validateChildKeys(arguments[i], type);
                }
              }

              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }

              return element;
            }

            function createFactoryWithValidation(type) {
              var validatedFactory = createElementWithValidation.bind(null, type);
              validatedFactory.type = type;
              // Legacy hook: remove it
              {
                Object.defineProperty(validatedFactory, 'type', {
                  enumerable: false,
                  get: function() {
                    lowPriorityWarning$1(
                      false,
                      'Factory.type is deprecated. Access the class directly ' +
                        'before passing it to createFactory.',
                    );
                    Object.defineProperty(this, 'type', {
                      value: type,
                    });
                    return type;
                  },
                });
              }

              return validatedFactory;
            }

            function cloneElementWithValidation(element, props, children) {
              var newElement = cloneElement.apply(this, arguments);
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], newElement.type);
              }
              validatePropTypes(newElement);
              return newElement;
            }

            var hasBadMapPolyfill = void 0;

            {
              hasBadMapPolyfill = false;
              try {
                var frozenObject = Object.freeze({});
                var testMap = new Map([[frozenObject, null]]);
                var testSet = new Set([frozenObject]);
                // This is necessary for Rollup to not consider these unused.
                // https://github.com/rollup/rollup/issues/1771
                // TODO: we can remove these if Rollup fixes the bug.
                testMap.set(0, 0);
                testSet.add(0);
              } catch (e) {
                // TODO: Consider warning about bad polyfills
                hasBadMapPolyfill = true;
              }
            }

            function createFundamentalComponent(impl) {
              // We use responder as a Map key later on. When we have a bad
              // polyfill, then we can't use it as a key as the polyfill tries
              // to add a property to the object.
              if (true && !hasBadMapPolyfill) {
                Object.freeze(impl);
              }
              var fundamantalComponent = {
                $$typeof: REACT_FUNDAMENTAL_TYPE,
                impl: impl,
              };
              {
                Object.freeze(fundamantalComponent);
              }
              return fundamantalComponent;
            }

            function createEventResponder(displayName, responderConfig) {
              var getInitialState = responderConfig.getInitialState,
                onEvent = responderConfig.onEvent,
                onMount = responderConfig.onMount,
                onUnmount = responderConfig.onUnmount,
                onOwnershipChange = responderConfig.onOwnershipChange,
                onRootEvent = responderConfig.onRootEvent,
                rootEventTypes = responderConfig.rootEventTypes,
                targetEventTypes = responderConfig.targetEventTypes;

              var eventResponder = {
                $$typeof: REACT_RESPONDER_TYPE,
                displayName: displayName,
                getInitialState: getInitialState || null,
                onEvent: onEvent || null,
                onMount: onMount || null,
                onOwnershipChange: onOwnershipChange || null,
                onRootEvent: onRootEvent || null,
                onUnmount: onUnmount || null,
                rootEventTypes: rootEventTypes || null,
                targetEventTypes: targetEventTypes || null,
              };
              // We use responder as a Map key later on. When we have a bad
              // polyfill, then we can't use it as a key as the polyfill tries
              // to add a property to the object.
              if (true && !hasBadMapPolyfill) {
                Object.freeze(eventResponder);
              }
              return eventResponder;
            }

            // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:

            // In some cases, StrictMode should also double-render lifecycles.
            // This can be confusing for tests though,
            // And it can be bad for performance in production.
            // This feature flag can be used to control the behavior:

            // To preserve the "Pause on caught exceptions" behavior of the debugger, we
            // replay the begin phase of a failed component inside invokeGuardedCallback.

            // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:

            // Gather advanced timing metrics for Profiler subtrees.

            // Trace which interactions trigger each commit.

            // Only used in www builds.
            // TODO: true? Here it might just be false.

            // Only used in www builds.

            // Only used in www builds.

            // Disable javascript: URL strings in href for XSS protection.

            // React Fire: prevent the value and checked attributes from syncing
            // with their related DOM properties

            // These APIs will no longer be "unstable" in the upcoming 16.7 release,
            // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.

            // See https://github.com/react-native-community/discussions-and-proposals/issues/72 for more information
            // This is a flag so we can fix warnings in RN core before turning it on

            // Experimental React Flare event system and event components support.
            var enableFlareAPI = false;

            // Experimental Host Component support.
            var enableFundamentalAPI = false;

            // New API for JSX transforms to target - https://github.com/reactjs/rfcs/pull/107
            var enableJSXTransformAPI = false;

            // We will enforce mocking scheduler with scheduler/unstable_mock at some point. (v17?)
            // Till then, we warn about the missing mock, but still fallback to a sync mode compatible version

            // Temporary flag to revert the fix in #15650

            // For tests, we flush suspense fallbacks in an act scope;
            // *except* in some of our own tests, where we test incremental loading states.

            // Changes priority of some events like mousemove to user-blocking priority,
            // but without making them discrete. The flag exists in case it causes
            // starvation problems.

            // Add a callback property to suspense to notify which promises are currently
            // in the update queue. This allows reporting and tracing of what is causing
            // the user to see a loading state.

            // Part of the simplification of React.createElement so we can eventually move
            // from React.createElement to React.jsx
            // https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md

            var React = {
              Children: {
                map: mapChildren,
                forEach: forEachChildren,
                count: countChildren,
                toArray: toArray,
                only: onlyChild,
              },

              createRef: createRef,
              Component: Component,
              PureComponent: PureComponent,

              createContext: createContext,
              forwardRef: forwardRef,
              lazy: lazy,
              memo: memo,

              useCallback: useCallback,
              useContext: useContext,
              useEffect: useEffect,
              useImperativeHandle: useImperativeHandle,
              useDebugValue: useDebugValue,
              useLayoutEffect: useLayoutEffect,
              useMemo: useMemo,
              useReducer: useReducer,
              useRef: useRef,
              useState: useState,

              Fragment: REACT_FRAGMENT_TYPE,
              Profiler: REACT_PROFILER_TYPE,
              StrictMode: REACT_STRICT_MODE_TYPE,
              Suspense: REACT_SUSPENSE_TYPE,
              unstable_SuspenseList: REACT_SUSPENSE_LIST_TYPE,

              createElement: createElementWithValidation,
              cloneElement: cloneElementWithValidation,
              createFactory: createFactoryWithValidation,
              isValidElement: isValidElement,

              version: ReactVersion,

              unstable_withSuspenseConfig: withSuspenseConfig,

              __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals,
            };

            if (enableFlareAPI) {
              React.unstable_useResponder = useResponder;
              React.unstable_createResponder = createEventResponder;
            }

            if (enableFundamentalAPI) {
              React.unstable_createFundamental = createFundamentalComponent;
            }

            // Note: some APIs are added with feature flags.
            // Make sure that stable builds for open source
            // don't modify the React object to avoid deopts.
            // Also let's not expose their names in stable builds.

            if (enableJSXTransformAPI) {
              {
                React.jsxDEV = jsxWithValidation;
                React.jsx = jsxWithValidationDynamic;
                React.jsxs = jsxWithValidationStatic;
              }
            }

            var React$2 = Object.freeze({
              default: React,
            });

            var React$3 = (React$2 && React) || React$2;

            // TODO: decide on the top-level export form.
            // This is hacky but makes it work with both Rollup and Jest.
            var react = React$3.default || React$3;

            module.exports = react;
          })();
        }

        /***/
      },

    /***/ './node_modules/react/index.js':
      /*!*************************************!*\
  !*** ./node_modules/react/index.js ***!
  \*************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';

        if (false) {
        } else {
          module.exports = __webpack_require__(
            /*! ./cjs/react.development.js */ './node_modules/react/cjs/react.development.js',
          );
        }

        /***/
      },

    /***/ './node_modules/scheduler/cjs/scheduler-tracing.development.js':
      /*!*********************************************************************!*\
  !*** ./node_modules/scheduler/cjs/scheduler-tracing.development.js ***!
  \*********************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';
        /** @license React v0.15.0
         * scheduler-tracing.development.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */

        if (true) {
          (function() {
            'use strict';

            Object.defineProperty(exports, '__esModule', { value: true });

            // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:

            // In some cases, StrictMode should also double-render lifecycles.
            // This can be confusing for tests though,
            // And it can be bad for performance in production.
            // This feature flag can be used to control the behavior:

            // To preserve the "Pause on caught exceptions" behavior of the debugger, we
            // replay the begin phase of a failed component inside invokeGuardedCallback.

            // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:

            // Gather advanced timing metrics for Profiler subtrees.

            // Trace which interactions trigger each commit.
            var enableSchedulerTracing = true;

            // Only used in www builds.
            // TODO: true? Here it might just be false.

            // Only used in www builds.

            // Only used in www builds.

            // Disable javascript: URL strings in href for XSS protection.

            // React Fire: prevent the value and checked attributes from syncing
            // with their related DOM properties

            // These APIs will no longer be "unstable" in the upcoming 16.7 release,
            // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.

            // See https://github.com/react-native-community/discussions-and-proposals/issues/72 for more information
            // This is a flag so we can fix warnings in RN core before turning it on

            // Experimental React Flare event system and event components support.

            // Experimental Host Component support.

            // New API for JSX transforms to target - https://github.com/reactjs/rfcs/pull/107

            // We will enforce mocking scheduler with scheduler/unstable_mock at some point. (v17?)
            // Till then, we warn about the missing mock, but still fallback to a sync mode compatible version

            // Temporary flag to revert the fix in #15650

            // For tests, we flush suspense fallbacks in an act scope;
            // *except* in some of our own tests, where we test incremental loading states.

            // Changes priority of some events like mousemove to user-blocking priority,
            // but without making them discrete. The flag exists in case it causes
            // starvation problems.

            // Add a callback property to suspense to notify which promises are currently
            // in the update queue. This allows reporting and tracing of what is causing
            // the user to see a loading state.

            // Part of the simplification of React.createElement so we can eventually move
            // from React.createElement to React.jsx
            // https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md

            var DEFAULT_THREAD_ID = 0;

            // Counters used to generate unique IDs.
            var interactionIDCounter = 0;
            var threadIDCounter = 0;

            // Set of currently traced interactions.
            // Interactions "stack"–
            // Meaning that newly traced interactions are appended to the previously active set.
            // When an interaction goes out of scope, the previous set (if any) is restored.
            exports.__interactionsRef = null;

            // Listener(s) to notify when interactions begin and end.
            exports.__subscriberRef = null;

            if (enableSchedulerTracing) {
              exports.__interactionsRef = {
                current: new Set(),
              };
              exports.__subscriberRef = {
                current: null,
              };
            }

            function unstable_clear(callback) {
              if (!enableSchedulerTracing) {
                return callback();
              }

              var prevInteractions = exports.__interactionsRef.current;
              exports.__interactionsRef.current = new Set();

              try {
                return callback();
              } finally {
                exports.__interactionsRef.current = prevInteractions;
              }
            }

            function unstable_getCurrent() {
              if (!enableSchedulerTracing) {
                return null;
              } else {
                return exports.__interactionsRef.current;
              }
            }

            function unstable_getThreadID() {
              return ++threadIDCounter;
            }

            function unstable_trace(name, timestamp, callback) {
              var threadID =
                arguments.length > 3 && arguments[3] !== undefined
                  ? arguments[3]
                  : DEFAULT_THREAD_ID;

              if (!enableSchedulerTracing) {
                return callback();
              }

              var interaction = {
                __count: 1,
                id: interactionIDCounter++,
                name: name,
                timestamp: timestamp,
              };

              var prevInteractions = exports.__interactionsRef.current;

              // Traced interactions should stack/accumulate.
              // To do that, clone the current interactions.
              // The previous set will be restored upon completion.
              var interactions = new Set(prevInteractions);
              interactions.add(interaction);
              exports.__interactionsRef.current = interactions;

              var subscriber = exports.__subscriberRef.current;
              var returnValue = void 0;

              try {
                if (subscriber !== null) {
                  subscriber.onInteractionTraced(interaction);
                }
              } finally {
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStarted(interactions, threadID);
                  }
                } finally {
                  try {
                    returnValue = callback();
                  } finally {
                    exports.__interactionsRef.current = prevInteractions;

                    try {
                      if (subscriber !== null) {
                        subscriber.onWorkStopped(interactions, threadID);
                      }
                    } finally {
                      interaction.__count--;

                      // If no async work was scheduled for this interaction,
                      // Notify subscribers that it's completed.
                      if (subscriber !== null && interaction.__count === 0) {
                        subscriber.onInteractionScheduledWorkCompleted(interaction);
                      }
                    }
                  }
                }
              }

              return returnValue;
            }

            function unstable_wrap(callback) {
              var threadID =
                arguments.length > 1 && arguments[1] !== undefined
                  ? arguments[1]
                  : DEFAULT_THREAD_ID;

              if (!enableSchedulerTracing) {
                return callback;
              }

              var wrappedInteractions = exports.__interactionsRef.current;

              var subscriber = exports.__subscriberRef.current;
              if (subscriber !== null) {
                subscriber.onWorkScheduled(wrappedInteractions, threadID);
              }

              // Update the pending async work count for the current interactions.
              // Update after calling subscribers in case of error.
              wrappedInteractions.forEach(function(interaction) {
                interaction.__count++;
              });

              var hasRun = false;

              function wrapped() {
                var prevInteractions = exports.__interactionsRef.current;
                exports.__interactionsRef.current = wrappedInteractions;

                subscriber = exports.__subscriberRef.current;

                try {
                  var returnValue = void 0;

                  try {
                    if (subscriber !== null) {
                      subscriber.onWorkStarted(wrappedInteractions, threadID);
                    }
                  } finally {
                    try {
                      returnValue = callback.apply(undefined, arguments);
                    } finally {
                      exports.__interactionsRef.current = prevInteractions;

                      if (subscriber !== null) {
                        subscriber.onWorkStopped(wrappedInteractions, threadID);
                      }
                    }
                  }

                  return returnValue;
                } finally {
                  if (!hasRun) {
                    // We only expect a wrapped function to be executed once,
                    // But in the event that it's executed more than once–
                    // Only decrement the outstanding interaction counts once.
                    hasRun = true;

                    // Update pending async counts for all wrapped interactions.
                    // If this was the last scheduled async work for any of them,
                    // Mark them as completed.
                    wrappedInteractions.forEach(function(interaction) {
                      interaction.__count--;

                      if (subscriber !== null && interaction.__count === 0) {
                        subscriber.onInteractionScheduledWorkCompleted(interaction);
                      }
                    });
                  }
                }
              }

              wrapped.cancel = function cancel() {
                subscriber = exports.__subscriberRef.current;

                try {
                  if (subscriber !== null) {
                    subscriber.onWorkCanceled(wrappedInteractions, threadID);
                  }
                } finally {
                  // Update pending async counts for all wrapped interactions.
                  // If this was the last scheduled async work for any of them,
                  // Mark them as completed.
                  wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;

                    if (subscriber && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  });
                }
              };

              return wrapped;
            }

            var subscribers = null;
            if (enableSchedulerTracing) {
              subscribers = new Set();
            }

            function unstable_subscribe(subscriber) {
              if (enableSchedulerTracing) {
                subscribers.add(subscriber);

                if (subscribers.size === 1) {
                  exports.__subscriberRef.current = {
                    onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
                    onInteractionTraced: onInteractionTraced,
                    onWorkCanceled: onWorkCanceled,
                    onWorkScheduled: onWorkScheduled,
                    onWorkStarted: onWorkStarted,
                    onWorkStopped: onWorkStopped,
                  };
                }
              }
            }

            function unstable_unsubscribe(subscriber) {
              if (enableSchedulerTracing) {
                subscribers.delete(subscriber);

                if (subscribers.size === 0) {
                  exports.__subscriberRef.current = null;
                }
              }
            }

            function onInteractionTraced(interaction) {
              var didCatchError = false;
              var caughtError = null;

              subscribers.forEach(function(subscriber) {
                try {
                  subscriber.onInteractionTraced(interaction);
                } catch (error) {
                  if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                  }
                }
              });

              if (didCatchError) {
                throw caughtError;
              }
            }

            function onInteractionScheduledWorkCompleted(interaction) {
              var didCatchError = false;
              var caughtError = null;

              subscribers.forEach(function(subscriber) {
                try {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                } catch (error) {
                  if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                  }
                }
              });

              if (didCatchError) {
                throw caughtError;
              }
            }

            function onWorkScheduled(interactions, threadID) {
              var didCatchError = false;
              var caughtError = null;

              subscribers.forEach(function(subscriber) {
                try {
                  subscriber.onWorkScheduled(interactions, threadID);
                } catch (error) {
                  if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                  }
                }
              });

              if (didCatchError) {
                throw caughtError;
              }
            }

            function onWorkStarted(interactions, threadID) {
              var didCatchError = false;
              var caughtError = null;

              subscribers.forEach(function(subscriber) {
                try {
                  subscriber.onWorkStarted(interactions, threadID);
                } catch (error) {
                  if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                  }
                }
              });

              if (didCatchError) {
                throw caughtError;
              }
            }

            function onWorkStopped(interactions, threadID) {
              var didCatchError = false;
              var caughtError = null;

              subscribers.forEach(function(subscriber) {
                try {
                  subscriber.onWorkStopped(interactions, threadID);
                } catch (error) {
                  if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                  }
                }
              });

              if (didCatchError) {
                throw caughtError;
              }
            }

            function onWorkCanceled(interactions, threadID) {
              var didCatchError = false;
              var caughtError = null;

              subscribers.forEach(function(subscriber) {
                try {
                  subscriber.onWorkCanceled(interactions, threadID);
                } catch (error) {
                  if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                  }
                }
              });

              if (didCatchError) {
                throw caughtError;
              }
            }

            exports.unstable_clear = unstable_clear;
            exports.unstable_getCurrent = unstable_getCurrent;
            exports.unstable_getThreadID = unstable_getThreadID;
            exports.unstable_trace = unstable_trace;
            exports.unstable_wrap = unstable_wrap;
            exports.unstable_subscribe = unstable_subscribe;
            exports.unstable_unsubscribe = unstable_unsubscribe;
          })();
        }

        /***/
      },

    /***/ './node_modules/scheduler/cjs/scheduler.development.js':
      /*!*************************************************************!*\
  !*** ./node_modules/scheduler/cjs/scheduler.development.js ***!
  \*************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';
        /** @license React v0.15.0
         * scheduler.development.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */

        if (true) {
          (function() {
            'use strict';

            Object.defineProperty(exports, '__esModule', { value: true });

            var enableSchedulerDebugging = false;
            var enableIsInputPending = false;
            var requestIdleCallbackBeforeFirstFrame = false;
            var requestTimerEventBeforeFirstFrame = false;
            var enableMessageLoopImplementation = false;

            // The DOM Scheduler implementation is similar to requestIdleCallback. It
            // works by scheduling a requestAnimationFrame, storing the time for the start
            // of the frame, then scheduling a postMessage which gets scheduled after paint.
            // Within the postMessage handler do as much work as possible until time + frame
            // rate. By separating the idle call into a separate event tick we ensure that
            // layout, paint and other browser work is counted against the available time.
            // The frame rate is dynamically adjusted.

            var requestHostCallback = void 0;

            var requestHostTimeout = void 0;
            var cancelHostTimeout = void 0;
            var shouldYieldToHost = void 0;
            var requestPaint = void 0;
            exports.unstable_now = void 0;
            exports.unstable_forceFrameRate = void 0;

            if (
              // If Scheduler runs in a non-DOM environment, it falls back to a naive
              // implementation using setTimeout.
              typeof window === 'undefined' ||
              // Check if MessageChannel is supported, too.
              typeof MessageChannel !== 'function'
            ) {
              // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
              // fallback to a naive implementation.
              var _callback = null;
              var _timeoutID = null;
              var _flushCallback = function() {
                if (_callback !== null) {
                  try {
                    var currentTime = exports.unstable_now();
                    var hasRemainingTime = true;
                    _callback(hasRemainingTime, currentTime);
                    _callback = null;
                  } catch (e) {
                    setTimeout(_flushCallback, 0);
                    throw e;
                  }
                }
              };
              exports.unstable_now = function() {
                return Date.now();
              };
              requestHostCallback = function(cb) {
                if (_callback !== null) {
                  // Protect against re-entrancy.
                  setTimeout(requestHostCallback, 0, cb);
                } else {
                  _callback = cb;
                  setTimeout(_flushCallback, 0);
                }
              };
              requestHostTimeout = function(cb, ms) {
                _timeoutID = setTimeout(cb, ms);
              };
              cancelHostTimeout = function() {
                clearTimeout(_timeoutID);
              };
              shouldYieldToHost = function() {
                return false;
              };
              requestPaint = exports.unstable_forceFrameRate = function() {};
            } else {
              // Capture local references to native APIs, in case a polyfill overrides them.
              var performance = window.performance;
              var _Date = window.Date;
              var _setTimeout = window.setTimeout;
              var _clearTimeout = window.clearTimeout;
              var requestAnimationFrame = window.requestAnimationFrame;
              var cancelAnimationFrame = window.cancelAnimationFrame;
              var requestIdleCallback = window.requestIdleCallback;

              if (typeof console !== 'undefined') {
                // TODO: Remove fb.me link
                if (typeof requestAnimationFrame !== 'function') {
                  console.error(
                    "This browser doesn't support requestAnimationFrame. " +
                      'Make sure that you load a ' +
                      'polyfill in older browsers. https://fb.me/react-polyfills',
                  );
                }
                if (typeof cancelAnimationFrame !== 'function') {
                  console.error(
                    "This browser doesn't support cancelAnimationFrame. " +
                      'Make sure that you load a ' +
                      'polyfill in older browsers. https://fb.me/react-polyfills',
                  );
                }
              }

              var requestIdleCallbackBeforeFirstFrame$1 =
                requestIdleCallbackBeforeFirstFrame &&
                typeof requestIdleCallback === 'function' &&
                typeof cancelIdleCallback === 'function';

              exports.unstable_now =
                typeof performance === 'object' && typeof performance.now === 'function'
                  ? function() {
                      return performance.now();
                    }
                  : function() {
                      return _Date.now();
                    };

              var isRAFLoopRunning = false;
              var isMessageLoopRunning = false;
              var scheduledHostCallback = null;
              var rAFTimeoutID = -1;
              var taskTimeoutID = -1;

              var frameLength = enableMessageLoopImplementation // We won't attempt to align with the vsync. Instead we'll yield multiple
                ? // times per frame, often enough to keep it responsive even at really
                  // high frame rates > 120.
                  5 // Use a heuristic to measure the frame rate and yield at the end of the
                : // frame. We start out assuming that we run at 30fps but then the
                  // heuristic tracking will adjust this value to a faster fps if we get
                  // more frequent animation frames.
                  33.33;

              var prevRAFTime = -1;
              var prevRAFInterval = -1;
              var frameDeadline = 0;

              var fpsLocked = false;

              // TODO: Make this configurable
              // TODO: Adjust this based on priority?
              var maxFrameLength = 300;
              var needsPaint = false;

              if (
                enableIsInputPending &&
                navigator !== undefined &&
                navigator.scheduling !== undefined &&
                navigator.scheduling.isInputPending !== undefined
              ) {
                var scheduling = navigator.scheduling;
                shouldYieldToHost = function() {
                  var currentTime = exports.unstable_now();
                  if (currentTime >= frameDeadline) {
                    // There's no time left in the frame. We may want to yield control of
                    // the main thread, so the browser can perform high priority tasks. The
                    // main ones are painting and user input. If there's a pending paint or
                    // a pending input, then we should yield. But if there's neither, then
                    // we can yield less often while remaining responsive. We'll eventually
                    // yield regardless, since there could be a pending paint that wasn't
                    // accompanied by a call to `requestPaint`, or other main thread tasks
                    // like network events.
                    if (needsPaint || scheduling.isInputPending()) {
                      // There is either a pending paint or a pending input.
                      return true;
                    }
                    // There's no pending input. Only yield if we've reached the max
                    // frame length.
                    return currentTime >= frameDeadline + maxFrameLength;
                  } else {
                    // There's still time left in the frame.
                    return false;
                  }
                };

                requestPaint = function() {
                  needsPaint = true;
                };
              } else {
                // `isInputPending` is not available. Since we have no way of knowing if
                // there's pending input, always yield at the end of the frame.
                shouldYieldToHost = function() {
                  return exports.unstable_now() >= frameDeadline;
                };

                // Since we yield every frame regardless, `requestPaint` has no effect.
                requestPaint = function() {};
              }

              exports.unstable_forceFrameRate = function(fps) {
                if (fps < 0 || fps > 125) {
                  console.error(
                    'forceFrameRate takes a positive int between 0 and 125, ' +
                      'forcing framerates higher than 125 fps is not unsupported',
                  );
                  return;
                }
                if (fps > 0) {
                  frameLength = Math.floor(1000 / fps);
                  fpsLocked = true;
                } else {
                  // reset the framerate
                  frameLength = 33.33;
                  fpsLocked = false;
                }
              };

              var performWorkUntilDeadline = function() {
                if (enableMessageLoopImplementation) {
                  if (scheduledHostCallback !== null) {
                    var currentTime = exports.unstable_now();
                    // Yield after `frameLength` ms, regardless of where we are in the vsync
                    // cycle. This means there's always time remaining at the beginning of
                    // the message event.
                    frameDeadline = currentTime + frameLength;
                    var hasTimeRemaining = true;
                    try {
                      var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                      if (!hasMoreWork) {
                        isMessageLoopRunning = false;
                        scheduledHostCallback = null;
                      } else {
                        // If there's more work, schedule the next message event at the end
                        // of the preceding one.
                        port.postMessage(null);
                      }
                    } catch (error) {
                      // If a scheduler task throws, exit the current browser task so the
                      // error can be observed.
                      port.postMessage(null);
                      throw error;
                    }
                  }
                  // Yielding to the browser will give it a chance to paint, so we can
                  // reset this.
                  needsPaint = false;
                } else {
                  if (scheduledHostCallback !== null) {
                    var _currentTime = exports.unstable_now();
                    var _hasTimeRemaining = frameDeadline - _currentTime > 0;
                    try {
                      var _hasMoreWork = scheduledHostCallback(_hasTimeRemaining, _currentTime);
                      if (!_hasMoreWork) {
                        scheduledHostCallback = null;
                      }
                    } catch (error) {
                      // If a scheduler task throws, exit the current browser task so the
                      // error can be observed, and post a new task as soon as possible
                      // so we can continue where we left off.
                      port.postMessage(null);
                      throw error;
                    }
                  }
                  // Yielding to the browser will give it a chance to paint, so we can
                  // reset this.
                  needsPaint = false;
                }
              };

              var channel = new MessageChannel();
              var port = channel.port2;
              channel.port1.onmessage = performWorkUntilDeadline;

              var onAnimationFrame = function(rAFTime) {
                if (scheduledHostCallback === null) {
                  // No scheduled work. Exit.
                  prevRAFTime = -1;
                  prevRAFInterval = -1;
                  isRAFLoopRunning = false;
                  return;
                }

                // Eagerly schedule the next animation callback at the beginning of the
                // frame. If the scheduler queue is not empty at the end of the frame, it
                // will continue flushing inside that callback. If the queue *is* empty,
                // then it will exit immediately. Posting the callback at the start of the
                // frame ensures it's fired within the earliest possible frame. If we
                // waited until the end of the frame to post the callback, we risk the
                // browser skipping a frame and not firing the callback until the frame
                // after that.
                isRAFLoopRunning = true;
                requestAnimationFrame(function(nextRAFTime) {
                  _clearTimeout(rAFTimeoutID);
                  onAnimationFrame(nextRAFTime);
                });

                // requestAnimationFrame is throttled when the tab is backgrounded. We
                // don't want to stop working entirely. So we'll fallback to a timeout loop.
                // TODO: Need a better heuristic for backgrounded work.
                var onTimeout = function() {
                  frameDeadline = exports.unstable_now() + frameLength / 2;
                  performWorkUntilDeadline();
                  rAFTimeoutID = _setTimeout(onTimeout, frameLength * 3);
                };
                rAFTimeoutID = _setTimeout(onTimeout, frameLength * 3);

                if (
                  prevRAFTime !== -1 &&
                  // Make sure this rAF time is different from the previous one. This check
                  // could fail if two rAFs fire in the same frame.
                  rAFTime - prevRAFTime > 0.1
                ) {
                  var rAFInterval = rAFTime - prevRAFTime;
                  if (!fpsLocked && prevRAFInterval !== -1) {
                    // We've observed two consecutive frame intervals. We'll use this to
                    // dynamically adjust the frame rate.
                    //
                    // If one frame goes long, then the next one can be short to catch up.
                    // If two frames are short in a row, then that's an indication that we
                    // actually have a higher frame rate than what we're currently
                    // optimizing. For example, if we're running on 120hz display or 90hz VR
                    // display. Take the max of the two in case one of them was an anomaly
                    // due to missed frame deadlines.
                    if (rAFInterval < frameLength && prevRAFInterval < frameLength) {
                      frameLength = rAFInterval < prevRAFInterval ? prevRAFInterval : rAFInterval;
                      if (frameLength < 8.33) {
                        // Defensive coding. We don't support higher frame rates than 120hz.
                        // If the calculated frame length gets lower than 8, it is probably
                        // a bug.
                        frameLength = 8.33;
                      }
                    }
                  }
                  prevRAFInterval = rAFInterval;
                }
                prevRAFTime = rAFTime;
                frameDeadline = rAFTime + frameLength;

                // We use the postMessage trick to defer idle work until after the repaint.
                port.postMessage(null);
              };

              requestHostCallback = function(callback) {
                scheduledHostCallback = callback;
                if (enableMessageLoopImplementation) {
                  if (!isMessageLoopRunning) {
                    isMessageLoopRunning = true;
                    port.postMessage(null);
                  }
                } else {
                  if (!isRAFLoopRunning) {
                    // Start a rAF loop.
                    isRAFLoopRunning = true;
                    requestAnimationFrame(function(rAFTime) {
                      if (requestIdleCallbackBeforeFirstFrame$1) {
                        cancelIdleCallback(idleCallbackID);
                      }
                      if (requestTimerEventBeforeFirstFrame) {
                        _clearTimeout(idleTimeoutID);
                      }
                      onAnimationFrame(rAFTime);
                    });

                    // If we just missed the last vsync, the next rAF might not happen for
                    // another frame. To claim as much idle time as possible, post a
                    // callback with `requestIdleCallback`, which should fire if there's
                    // idle time left in the frame.
                    //
                    // This should only be an issue for the first rAF in the loop;
                    // subsequent rAFs are scheduled at the beginning of the
                    // preceding frame.
                    var idleCallbackID = void 0;
                    if (requestIdleCallbackBeforeFirstFrame$1) {
                      idleCallbackID = requestIdleCallback(
                        function onIdleCallbackBeforeFirstFrame() {
                          if (requestTimerEventBeforeFirstFrame) {
                            _clearTimeout(idleTimeoutID);
                          }
                          frameDeadline = exports.unstable_now() + frameLength;
                          performWorkUntilDeadline();
                        },
                      );
                    }
                    // Alternate strategy to address the same problem. Scheduler a timer
                    // with no delay. If this fires before the rAF, that likely indicates
                    // that there's idle time before the next vsync. This isn't always the
                    // case, but we'll be aggressive and assume it is, as a trade off to
                    // prevent idle periods.
                    var idleTimeoutID = void 0;
                    if (requestTimerEventBeforeFirstFrame) {
                      idleTimeoutID = _setTimeout(function onTimerEventBeforeFirstFrame() {
                        if (requestIdleCallbackBeforeFirstFrame$1) {
                          cancelIdleCallback(idleCallbackID);
                        }
                        frameDeadline = exports.unstable_now() + frameLength;
                        performWorkUntilDeadline();
                      }, 0);
                    }
                  }
                }
              };

              requestHostTimeout = function(callback, ms) {
                taskTimeoutID = _setTimeout(function() {
                  callback(exports.unstable_now());
                }, ms);
              };

              cancelHostTimeout = function() {
                _clearTimeout(taskTimeoutID);
                taskTimeoutID = -1;
              };
            }

            /* eslint-disable no-var */

            // TODO: Use symbols?
            var ImmediatePriority = 1;
            var UserBlockingPriority = 2;
            var NormalPriority = 3;
            var LowPriority = 4;
            var IdlePriority = 5;

            // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
            // Math.pow(2, 30) - 1
            // 0b111111111111111111111111111111
            var maxSigned31BitInt = 1073741823;

            // Times out immediately
            var IMMEDIATE_PRIORITY_TIMEOUT = -1;
            // Eventually times out
            var USER_BLOCKING_PRIORITY = 250;
            var NORMAL_PRIORITY_TIMEOUT = 5000;
            var LOW_PRIORITY_TIMEOUT = 10000;
            // Never times out
            var IDLE_PRIORITY = maxSigned31BitInt;

            // Tasks are stored as a circular, doubly linked list.
            var firstTask = null;
            var firstDelayedTask = null;

            // Pausing the scheduler is useful for debugging.
            var isSchedulerPaused = false;

            var currentTask = null;
            var currentPriorityLevel = NormalPriority;

            // This is set while performing work, to prevent re-entrancy.
            var isPerformingWork = false;

            var isHostCallbackScheduled = false;
            var isHostTimeoutScheduled = false;

            function scheduler_flushTaskAtPriority_Immediate(callback, didTimeout) {
              return callback(didTimeout);
            }
            function scheduler_flushTaskAtPriority_UserBlocking(callback, didTimeout) {
              return callback(didTimeout);
            }
            function scheduler_flushTaskAtPriority_Normal(callback, didTimeout) {
              return callback(didTimeout);
            }
            function scheduler_flushTaskAtPriority_Low(callback, didTimeout) {
              return callback(didTimeout);
            }
            function scheduler_flushTaskAtPriority_Idle(callback, didTimeout) {
              return callback(didTimeout);
            }

            function flushTask(task, currentTime) {
              // Remove the task from the list before calling the callback. That way the
              // list is in a consistent state even if the callback throws.
              var next = task.next;
              if (next === task) {
                // This is the only scheduled task. Clear the list.
                firstTask = null;
              } else {
                // Remove the task from its position in the list.
                if (task === firstTask) {
                  firstTask = next;
                }
                var previous = task.previous;
                previous.next = next;
                next.previous = previous;
              }
              task.next = task.previous = null;

              // Now it's safe to execute the task.
              var callback = task.callback;
              var previousPriorityLevel = currentPriorityLevel;
              var previousTask = currentTask;
              currentPriorityLevel = task.priorityLevel;
              currentTask = task;
              var continuationCallback;
              try {
                var didUserCallbackTimeout = task.expirationTime <= currentTime;
                // Add an extra function to the callstack. Profiling tools can use this
                // to infer the priority of work that appears higher in the stack.
                switch (currentPriorityLevel) {
                  case ImmediatePriority:
                    continuationCallback = scheduler_flushTaskAtPriority_Immediate(
                      callback,
                      didUserCallbackTimeout,
                    );
                    break;
                  case UserBlockingPriority:
                    continuationCallback = scheduler_flushTaskAtPriority_UserBlocking(
                      callback,
                      didUserCallbackTimeout,
                    );
                    break;
                  case NormalPriority:
                    continuationCallback = scheduler_flushTaskAtPriority_Normal(
                      callback,
                      didUserCallbackTimeout,
                    );
                    break;
                  case LowPriority:
                    continuationCallback = scheduler_flushTaskAtPriority_Low(
                      callback,
                      didUserCallbackTimeout,
                    );
                    break;
                  case IdlePriority:
                    continuationCallback = scheduler_flushTaskAtPriority_Idle(
                      callback,
                      didUserCallbackTimeout,
                    );
                    break;
                }
              } catch (error) {
                throw error;
              } finally {
                currentPriorityLevel = previousPriorityLevel;
                currentTask = previousTask;
              }

              // A callback may return a continuation. The continuation should be scheduled
              // with the same priority and expiration as the just-finished callback.
              if (typeof continuationCallback === 'function') {
                var expirationTime = task.expirationTime;
                var continuationTask = task;
                continuationTask.callback = continuationCallback;

                // Insert the new callback into the list, sorted by its timeout. This is
                // almost the same as the code in `scheduleCallback`, except the callback
                // is inserted into the list *before* callbacks of equal timeout instead
                // of after.
                if (firstTask === null) {
                  // This is the first callback in the list.
                  firstTask = continuationTask.next = continuationTask.previous = continuationTask;
                } else {
                  var nextAfterContinuation = null;
                  var t = firstTask;
                  do {
                    if (expirationTime <= t.expirationTime) {
                      // This task times out at or after the continuation. We will insert
                      // the continuation *before* this task.
                      nextAfterContinuation = t;
                      break;
                    }
                    t = t.next;
                  } while (t !== firstTask);
                  if (nextAfterContinuation === null) {
                    // No equal or lower priority task was found, which means the new task
                    // is the lowest priority task in the list.
                    nextAfterContinuation = firstTask;
                  } else if (nextAfterContinuation === firstTask) {
                    // The new task is the highest priority task in the list.
                    firstTask = continuationTask;
                  }

                  var _previous = nextAfterContinuation.previous;
                  _previous.next = nextAfterContinuation.previous = continuationTask;
                  continuationTask.next = nextAfterContinuation;
                  continuationTask.previous = _previous;
                }
              }
            }

            function advanceTimers(currentTime) {
              // Check for tasks that are no longer delayed and add them to the queue.
              if (firstDelayedTask !== null && firstDelayedTask.startTime <= currentTime) {
                do {
                  var task = firstDelayedTask;
                  var next = task.next;
                  if (task === next) {
                    firstDelayedTask = null;
                  } else {
                    firstDelayedTask = next;
                    var previous = task.previous;
                    previous.next = next;
                    next.previous = previous;
                  }
                  task.next = task.previous = null;
                  insertScheduledTask(task, task.expirationTime);
                } while (firstDelayedTask !== null && firstDelayedTask.startTime <= currentTime);
              }
            }

            function handleTimeout(currentTime) {
              isHostTimeoutScheduled = false;
              advanceTimers(currentTime);

              if (!isHostCallbackScheduled) {
                if (firstTask !== null) {
                  isHostCallbackScheduled = true;
                  requestHostCallback(flushWork);
                } else if (firstDelayedTask !== null) {
                  requestHostTimeout(handleTimeout, firstDelayedTask.startTime - currentTime);
                }
              }
            }

            function flushWork(hasTimeRemaining, initialTime) {
              // Exit right away if we're currently paused
              if (enableSchedulerDebugging && isSchedulerPaused) {
                return;
              }

              // We'll need a host callback the next time work is scheduled.
              isHostCallbackScheduled = false;
              if (isHostTimeoutScheduled) {
                // We scheduled a timeout but it's no longer needed. Cancel it.
                isHostTimeoutScheduled = false;
                cancelHostTimeout();
              }

              var currentTime = initialTime;
              advanceTimers(currentTime);

              isPerformingWork = true;
              try {
                if (!hasTimeRemaining) {
                  // Flush all the expired callbacks without yielding.
                  // TODO: Split flushWork into two separate functions instead of using
                  // a boolean argument?
                  while (
                    firstTask !== null &&
                    firstTask.expirationTime <= currentTime &&
                    !(enableSchedulerDebugging && isSchedulerPaused)
                  ) {
                    flushTask(firstTask, currentTime);
                    currentTime = exports.unstable_now();
                    advanceTimers(currentTime);
                  }
                } else {
                  // Keep flushing callbacks until we run out of time in the frame.
                  if (firstTask !== null) {
                    do {
                      flushTask(firstTask, currentTime);
                      currentTime = exports.unstable_now();
                      advanceTimers(currentTime);
                    } while (
                      firstTask !== null &&
                      !shouldYieldToHost() &&
                      !(enableSchedulerDebugging && isSchedulerPaused)
                    );
                  }
                }
                // Return whether there's additional work
                if (firstTask !== null) {
                  return true;
                } else {
                  if (firstDelayedTask !== null) {
                    requestHostTimeout(handleTimeout, firstDelayedTask.startTime - currentTime);
                  }
                  return false;
                }
              } finally {
                isPerformingWork = false;
              }
            }

            function unstable_runWithPriority(priorityLevel, eventHandler) {
              switch (priorityLevel) {
                case ImmediatePriority:
                case UserBlockingPriority:
                case NormalPriority:
                case LowPriority:
                case IdlePriority:
                  break;
                default:
                  priorityLevel = NormalPriority;
              }

              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = priorityLevel;

              try {
                return eventHandler();
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            }

            function unstable_next(eventHandler) {
              var priorityLevel;
              switch (currentPriorityLevel) {
                case ImmediatePriority:
                case UserBlockingPriority:
                case NormalPriority:
                  // Shift down to normal priority
                  priorityLevel = NormalPriority;
                  break;
                default:
                  // Anything lower than normal priority should remain at the current level.
                  priorityLevel = currentPriorityLevel;
                  break;
              }

              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = priorityLevel;

              try {
                return eventHandler();
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            }

            function unstable_wrapCallback(callback) {
              var parentPriorityLevel = currentPriorityLevel;
              return function() {
                // This is a fork of runWithPriority, inlined for performance.
                var previousPriorityLevel = currentPriorityLevel;
                currentPriorityLevel = parentPriorityLevel;

                try {
                  return callback.apply(this, arguments);
                } finally {
                  currentPriorityLevel = previousPriorityLevel;
                }
              };
            }

            function timeoutForPriorityLevel(priorityLevel) {
              switch (priorityLevel) {
                case ImmediatePriority:
                  return IMMEDIATE_PRIORITY_TIMEOUT;
                case UserBlockingPriority:
                  return USER_BLOCKING_PRIORITY;
                case IdlePriority:
                  return IDLE_PRIORITY;
                case LowPriority:
                  return LOW_PRIORITY_TIMEOUT;
                case NormalPriority:
                default:
                  return NORMAL_PRIORITY_TIMEOUT;
              }
            }

            function unstable_scheduleCallback(priorityLevel, callback, options) {
              var currentTime = exports.unstable_now();

              var startTime;
              var timeout;
              if (typeof options === 'object' && options !== null) {
                var delay = options.delay;
                if (typeof delay === 'number' && delay > 0) {
                  startTime = currentTime + delay;
                } else {
                  startTime = currentTime;
                }
                timeout =
                  typeof options.timeout === 'number'
                    ? options.timeout
                    : timeoutForPriorityLevel(priorityLevel);
              } else {
                timeout = timeoutForPriorityLevel(priorityLevel);
                startTime = currentTime;
              }

              var expirationTime = startTime + timeout;

              var newTask = {
                callback: callback,
                priorityLevel: priorityLevel,
                startTime: startTime,
                expirationTime: expirationTime,
                next: null,
                previous: null,
              };

              if (startTime > currentTime) {
                // This is a delayed task.
                insertDelayedTask(newTask, startTime);
                if (firstTask === null && firstDelayedTask === newTask) {
                  // All tasks are delayed, and this is the task with the earliest delay.
                  if (isHostTimeoutScheduled) {
                    // Cancel an existing timeout.
                    cancelHostTimeout();
                  } else {
                    isHostTimeoutScheduled = true;
                  }
                  // Schedule a timeout.
                  requestHostTimeout(handleTimeout, startTime - currentTime);
                }
              } else {
                insertScheduledTask(newTask, expirationTime);
                // Schedule a host callback, if needed. If we're already performing work,
                // wait until the next time we yield.
                if (!isHostCallbackScheduled && !isPerformingWork) {
                  isHostCallbackScheduled = true;
                  requestHostCallback(flushWork);
                }
              }

              return newTask;
            }

            function insertScheduledTask(newTask, expirationTime) {
              // Insert the new task into the list, ordered first by its timeout, then by
              // insertion. So the new task is inserted after any other task the
              // same timeout
              if (firstTask === null) {
                // This is the first task in the list.
                firstTask = newTask.next = newTask.previous = newTask;
              } else {
                var next = null;
                var task = firstTask;
                do {
                  if (expirationTime < task.expirationTime) {
                    // The new task times out before this one.
                    next = task;
                    break;
                  }
                  task = task.next;
                } while (task !== firstTask);

                if (next === null) {
                  // No task with a later timeout was found, which means the new task has
                  // the latest timeout in the list.
                  next = firstTask;
                } else if (next === firstTask) {
                  // The new task has the earliest expiration in the entire list.
                  firstTask = newTask;
                }

                var previous = next.previous;
                previous.next = next.previous = newTask;
                newTask.next = next;
                newTask.previous = previous;
              }
            }

            function insertDelayedTask(newTask, startTime) {
              // Insert the new task into the list, ordered by its start time.
              if (firstDelayedTask === null) {
                // This is the first task in the list.
                firstDelayedTask = newTask.next = newTask.previous = newTask;
              } else {
                var next = null;
                var task = firstDelayedTask;
                do {
                  if (startTime < task.startTime) {
                    // The new task times out before this one.
                    next = task;
                    break;
                  }
                  task = task.next;
                } while (task !== firstDelayedTask);

                if (next === null) {
                  // No task with a later timeout was found, which means the new task has
                  // the latest timeout in the list.
                  next = firstDelayedTask;
                } else if (next === firstDelayedTask) {
                  // The new task has the earliest expiration in the entire list.
                  firstDelayedTask = newTask;
                }

                var previous = next.previous;
                previous.next = next.previous = newTask;
                newTask.next = next;
                newTask.previous = previous;
              }
            }

            function unstable_pauseExecution() {
              isSchedulerPaused = true;
            }

            function unstable_continueExecution() {
              isSchedulerPaused = false;
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }

            function unstable_getFirstCallbackNode() {
              return firstTask;
            }

            function unstable_cancelCallback(task) {
              var next = task.next;
              if (next === null) {
                // Already cancelled.
                return;
              }

              if (task === next) {
                if (task === firstTask) {
                  firstTask = null;
                } else if (task === firstDelayedTask) {
                  firstDelayedTask = null;
                }
              } else {
                if (task === firstTask) {
                  firstTask = next;
                } else if (task === firstDelayedTask) {
                  firstDelayedTask = next;
                }
                var previous = task.previous;
                previous.next = next;
                next.previous = previous;
              }

              task.next = task.previous = null;
            }

            function unstable_getCurrentPriorityLevel() {
              return currentPriorityLevel;
            }

            function unstable_shouldYield() {
              var currentTime = exports.unstable_now();
              advanceTimers(currentTime);
              return (
                (currentTask !== null &&
                  firstTask !== null &&
                  firstTask.startTime <= currentTime &&
                  firstTask.expirationTime < currentTask.expirationTime) ||
                shouldYieldToHost()
              );
            }

            var unstable_requestPaint = requestPaint;

            exports.unstable_ImmediatePriority = ImmediatePriority;
            exports.unstable_UserBlockingPriority = UserBlockingPriority;
            exports.unstable_NormalPriority = NormalPriority;
            exports.unstable_IdlePriority = IdlePriority;
            exports.unstable_LowPriority = LowPriority;
            exports.unstable_runWithPriority = unstable_runWithPriority;
            exports.unstable_next = unstable_next;
            exports.unstable_scheduleCallback = unstable_scheduleCallback;
            exports.unstable_cancelCallback = unstable_cancelCallback;
            exports.unstable_wrapCallback = unstable_wrapCallback;
            exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
            exports.unstable_shouldYield = unstable_shouldYield;
            exports.unstable_requestPaint = unstable_requestPaint;
            exports.unstable_continueExecution = unstable_continueExecution;
            exports.unstable_pauseExecution = unstable_pauseExecution;
            exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          })();
        }

        /***/
      },

    /***/ './node_modules/scheduler/index.js':
      /*!*****************************************!*\
  !*** ./node_modules/scheduler/index.js ***!
  \*****************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';

        if (false) {
        } else {
          module.exports = __webpack_require__(
            /*! ./cjs/scheduler.development.js */ './node_modules/scheduler/cjs/scheduler.development.js',
          );
        }

        /***/
      },

    /***/ './node_modules/scheduler/tracing.js':
      /*!*******************************************!*\
  !*** ./node_modules/scheduler/tracing.js ***!
  \*******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        'use strict';

        if (false) {
        } else {
          module.exports = __webpack_require__(
            /*! ./cjs/scheduler-tracing.development.js */ './node_modules/scheduler/cjs/scheduler-tracing.development.js',
          );
        }

        /***/
      },

    /***/ './node_modules/webpack/buildin/global.js':
      /*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        var g;

        // This works in non-strict mode
        g = (function() {
          return this;
        })();

        try {
          // This works if eval is allowed (see CSP)
          g = g || new Function('return this')();
        } catch (e) {
          // This works if the window reference is available
          if (typeof window === 'object') g = window;
        }

        // g can still be undefined, but nothing to do about it...
        // We return undefined, instead of nothing here, so it's
        // easier to handle this case. if(!global) { ...}

        module.exports = g;

        /***/
      },

    /***/ './src/Combobox.jsx':
      /*!**************************!*\
  !*** ./src/Combobox.jsx ***!
  \**************************/
      /*! exports provided: default */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! react */ './node_modules/react/index.js',
        );
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(
          react__WEBPACK_IMPORTED_MODULE_0__,
        );
        /* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          /*! prop-types */ './node_modules/prop-types/index.js',
        );
        /* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(
          prop_types__WEBPACK_IMPORTED_MODULE_1__,
        );
        /* harmony import */ var _Select__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          /*! ./Select */ './src/Select.jsx',
        );
        function ownKeys(object, enumerableOnly) {
          var keys = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly)
              symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              });
            keys.push.apply(keys, symbols);
          }
          return keys;
        }

        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            if (i % 2) {
              ownKeys(source, true).forEach(function(key) {
                _defineProperty(target, key, source[key]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
            } else {
              ownKeys(source).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
              });
            }
          }
          return target;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _possibleConstructorReturn(self, call) {
          if (call && (typeof call === 'object' || typeof call === 'function')) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError('Super expression must either be null or a function');
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: { value: subClass, writable: true, configurable: true },
          });
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }

        var formatOption = function formatOption(option, disabledOptions) {
          var value = ''.concat(option);

          if (option < 10) {
            value = '0'.concat(option);
          }

          var disabled = false;

          if (disabledOptions && disabledOptions.indexOf(option) >= 0) {
            disabled = true;
          }

          return {
            value: value,
            disabled: disabled,
          };
        };

        var Combobox =
          /*#__PURE__*/
          (function(_Component) {
            _inherits(Combobox, _Component);

            function Combobox() {
              var _getPrototypeOf2;

              var _this;

              _classCallCheck(this, Combobox);

              for (
                var _len = arguments.length, args = new Array(_len), _key = 0;
                _key < _len;
                _key++
              ) {
                args[_key] = arguments[_key];
              }

              _this = _possibleConstructorReturn(
                this,
                (_getPrototypeOf2 = _getPrototypeOf(Combobox)).call.apply(
                  _getPrototypeOf2,
                  [this].concat(args),
                ),
              );

              _defineProperty(_assertThisInitialized(_this), 'onItemChange', function(
                type,
                itemValue,
              ) {
                var _this$props = _this.props,
                  onChange = _this$props.onChange,
                  defaultOpenValue = _this$props.defaultOpenValue,
                  use12Hours = _this$props.use12Hours,
                  propValue = _this$props.value,
                  isAM = _this$props.isAM,
                  onAmPmChange = _this$props.onAmPmChange;
                var value = (propValue || defaultOpenValue).clone();

                if (type === 'hour') {
                  if (use12Hours) {
                    if (isAM) {
                      value.hour(+itemValue % 12);
                    } else {
                      value.hour((+itemValue % 12) + 12);
                    }
                  } else {
                    value.hour(+itemValue);
                  }
                } else if (type === 'minute') {
                  value.minute(+itemValue);
                } else if (type === 'ampm') {
                  var ampm = itemValue.toUpperCase();

                  if (use12Hours) {
                    if (ampm === 'PM' && value.hour() < 12) {
                      value.hour((value.hour() % 12) + 12);
                    }

                    if (ampm === 'AM') {
                      if (value.hour() >= 12) {
                        value.hour(value.hour() - 12);
                      }
                    }
                  }

                  onAmPmChange(ampm);
                } else {
                  value.second(+itemValue);
                }

                onChange(value);
              });

              _defineProperty(_assertThisInitialized(_this), 'onEnterSelectPanel', function(range) {
                var onCurrentSelectPanelChange = _this.props.onCurrentSelectPanelChange;
                onCurrentSelectPanelChange(range);
              });

              return _this;
            }

            _createClass(Combobox, [
              {
                key: 'getHourSelect',
                value: function getHourSelect(hour) {
                  var _this2 = this;

                  var _this$props2 = this.props,
                    prefixCls = _this$props2.prefixCls,
                    hourOptions = _this$props2.hourOptions,
                    disabledHours = _this$props2.disabledHours,
                    showHour = _this$props2.showHour,
                    use12Hours = _this$props2.use12Hours,
                    onEsc = _this$props2.onEsc;

                  if (!showHour) {
                    return null;
                  }

                  var disabledOptions = disabledHours();
                  var hourOptionsAdj;
                  var hourAdj;

                  if (use12Hours) {
                    hourOptionsAdj = [12].concat(
                      hourOptions.filter(function(h) {
                        return h < 12 && h > 0;
                      }),
                    );
                    hourAdj = hour % 12 || 12;
                  } else {
                    hourOptionsAdj = hourOptions;
                    hourAdj = hour;
                  }

                  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                    _Select__WEBPACK_IMPORTED_MODULE_2__['default'],
                    {
                      prefixCls: prefixCls,
                      options: hourOptionsAdj.map(function(option) {
                        return formatOption(option, disabledOptions);
                      }),
                      selectedIndex: hourOptionsAdj.indexOf(hourAdj),
                      type: 'hour',
                      onSelect: this.onItemChange,
                      onMouseEnter: function onMouseEnter() {
                        return _this2.onEnterSelectPanel('hour');
                      },
                      onEsc: onEsc,
                    },
                  );
                },
              },
              {
                key: 'getMinuteSelect',
                value: function getMinuteSelect(minute) {
                  var _this3 = this;

                  var _this$props3 = this.props,
                    prefixCls = _this$props3.prefixCls,
                    minuteOptions = _this$props3.minuteOptions,
                    disabledMinutes = _this$props3.disabledMinutes,
                    defaultOpenValue = _this$props3.defaultOpenValue,
                    showMinute = _this$props3.showMinute,
                    propValue = _this$props3.value,
                    onEsc = _this$props3.onEsc;

                  if (!showMinute) {
                    return null;
                  }

                  var value = propValue || defaultOpenValue;
                  var disabledOptions = disabledMinutes(value.hour());
                  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                    _Select__WEBPACK_IMPORTED_MODULE_2__['default'],
                    {
                      prefixCls: prefixCls,
                      options: minuteOptions
                        .map(function(option) {
                          return formatOption(option, disabledOptions);
                        })
                        .map(function(option) {
                          return _objectSpread({}, option, {
                            displayValue: ''
                              .concat(option.value, ' - ')
                              .concat(parseInt(option.value) + 15),
                          });
                        }),
                      selectedIndex: minuteOptions.indexOf(minute),
                      type: 'minute',
                      onSelect: this.onItemChange,
                      onMouseEnter: function onMouseEnter() {
                        return _this3.onEnterSelectPanel('minute');
                      },
                      onEsc: onEsc,
                    },
                  );
                },
              },
              {
                key: 'getSecondSelect',
                value: function getSecondSelect(second) {
                  var _this4 = this;

                  var _this$props4 = this.props,
                    prefixCls = _this$props4.prefixCls,
                    secondOptions = _this$props4.secondOptions,
                    disabledSeconds = _this$props4.disabledSeconds,
                    showSecond = _this$props4.showSecond,
                    defaultOpenValue = _this$props4.defaultOpenValue,
                    propValue = _this$props4.value,
                    onEsc = _this$props4.onEsc;

                  if (!showSecond) {
                    return null;
                  }

                  var value = propValue || defaultOpenValue;
                  var disabledOptions = disabledSeconds(value.hour(), value.minute());
                  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                    _Select__WEBPACK_IMPORTED_MODULE_2__['default'],
                    {
                      prefixCls: prefixCls,
                      options: secondOptions.map(function(option) {
                        return formatOption(option, disabledOptions);
                      }),
                      selectedIndex: secondOptions.indexOf(second),
                      type: 'second',
                      onSelect: this.onItemChange,
                      onMouseEnter: function onMouseEnter() {
                        return _this4.onEnterSelectPanel('second');
                      },
                      onEsc: onEsc,
                    },
                  );
                },
              },
              {
                key: 'getAMPMSelect',
                value: function getAMPMSelect() {
                  var _this5 = this;

                  var _this$props5 = this.props,
                    prefixCls = _this$props5.prefixCls,
                    use12Hours = _this$props5.use12Hours,
                    format = _this$props5.format,
                    isAM = _this$props5.isAM,
                    onEsc = _this$props5.onEsc;

                  if (!use12Hours) {
                    return null;
                  }

                  var AMPMOptions = ['am', 'pm'] // If format has A char, then we should uppercase AM/PM
                    .map(function(c) {
                      return format.match(/\sA/) ? c.toUpperCase() : c;
                    })
                    .map(function(c) {
                      return {
                        value: c,
                      };
                    });
                  var selected = isAM ? 0 : 1;
                  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                    _Select__WEBPACK_IMPORTED_MODULE_2__['default'],
                    {
                      prefixCls: prefixCls,
                      options: AMPMOptions,
                      selectedIndex: selected,
                      type: 'ampm',
                      onSelect: this.onItemChange,
                      onMouseEnter: function onMouseEnter() {
                        return _this5.onEnterSelectPanel('ampm');
                      },
                      onEsc: onEsc,
                    },
                  );
                },
              },
              {
                key: 'render',
                value: function render() {
                  var _this$props6 = this.props,
                    prefixCls = _this$props6.prefixCls,
                    defaultOpenValue = _this$props6.defaultOpenValue,
                    propValue = _this$props6.value;
                  var value = propValue || defaultOpenValue;
                  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                    'div',
                    {
                      className: ''.concat(prefixCls, '-combobox'),
                    },
                    this.getHourSelect(value.hour()),
                    this.getMinuteSelect(value.minute()),
                    this.getSecondSelect(value.second()),
                    this.getAMPMSelect(value.hour()),
                  );
                },
              },
            ]);

            return Combobox;
          })(react__WEBPACK_IMPORTED_MODULE_0__['Component']);

        _defineProperty(Combobox, 'propTypes', {
          format: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,
          defaultOpenValue: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object,
          prefixCls: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,
          value: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object,
          onChange: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          onAmPmChange: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          showHour: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
          showMinute: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
          showSecond: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
          hourOptions: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.array,
          minuteOptions: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.array,
          secondOptions: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.array,
          disabledHours: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          disabledMinutes: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          disabledSeconds: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          onCurrentSelectPanelChange: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          use12Hours: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
          onEsc: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          isAM: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
        });

        /* harmony default export */ __webpack_exports__['default'] = Combobox;

        /***/
      },

    /***/ './src/Header.jsx':
      /*!************************!*\
  !*** ./src/Header.jsx ***!
  \************************/
      /*! exports provided: default */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! react */ './node_modules/react/index.js',
        );
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(
          react__WEBPACK_IMPORTED_MODULE_0__,
        );
        /* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          /*! prop-types */ './node_modules/prop-types/index.js',
        );
        /* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(
          prop_types__WEBPACK_IMPORTED_MODULE_1__,
        );
        /* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          /*! moment */ './node_modules/moment/moment.js',
        );
        /* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __webpack_require__.n(
          moment__WEBPACK_IMPORTED_MODULE_2__,
        );
        /* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
          /*! classnames */ './node_modules/classnames/index.js',
        );
        /* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/ __webpack_require__.n(
          classnames__WEBPACK_IMPORTED_MODULE_3__,
        );
        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _possibleConstructorReturn(self, call) {
          if (call && (typeof call === 'object' || typeof call === 'function')) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError('Super expression must either be null or a function');
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: { value: subClass, writable: true, configurable: true },
          });
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }

        var Header =
          /*#__PURE__*/
          (function(_Component) {
            _inherits(Header, _Component);

            function Header(props) {
              var _this;

              _classCallCheck(this, Header);

              _this = _possibleConstructorReturn(this, _getPrototypeOf(Header).call(this, props));

              _defineProperty(_assertThisInitialized(_this), 'onInputChange', function(event) {
                var str = event.target.value;

                _this.setState({
                  str: str,
                });

                var _this$props = _this.props,
                  format = _this$props.format,
                  hourOptions = _this$props.hourOptions,
                  minuteOptions = _this$props.minuteOptions,
                  secondOptions = _this$props.secondOptions,
                  disabledHours = _this$props.disabledHours,
                  disabledMinutes = _this$props.disabledMinutes,
                  disabledSeconds = _this$props.disabledSeconds,
                  onChange = _this$props.onChange;

                if (str) {
                  var originalValue = _this.props.value;

                  var value = _this.getProtoValue().clone();

                  var parsed = moment__WEBPACK_IMPORTED_MODULE_2___default()(str, format, true);

                  if (!parsed.isValid()) {
                    _this.setState({
                      invalid: true,
                    });

                    return;
                  }

                  value
                    .hour(parsed.hour())
                    .minute(parsed.minute())
                    .second(parsed.second()); // if time value not allowed, response warning.

                  if (
                    hourOptions.indexOf(value.hour()) < 0 ||
                    minuteOptions.indexOf(value.minute()) < 0 ||
                    secondOptions.indexOf(value.second()) < 0
                  ) {
                    _this.setState({
                      invalid: true,
                    });

                    return;
                  } // if time value is disabled, response warning.

                  var disabledHourOptions = disabledHours();
                  var disabledMinuteOptions = disabledMinutes(value.hour());
                  var disabledSecondOptions = disabledSeconds(value.hour(), value.minute());

                  if (
                    (disabledHourOptions && disabledHourOptions.indexOf(value.hour()) >= 0) ||
                    (disabledMinuteOptions && disabledMinuteOptions.indexOf(value.minute()) >= 0) ||
                    (disabledSecondOptions && disabledSecondOptions.indexOf(value.second()) >= 0)
                  ) {
                    _this.setState({
                      invalid: true,
                    });

                    return;
                  }

                  if (originalValue) {
                    if (
                      originalValue.hour() !== value.hour() ||
                      originalValue.minute() !== value.minute() ||
                      originalValue.second() !== value.second()
                    ) {
                      // keep other fields for rc-calendar
                      var changedValue = originalValue.clone();
                      changedValue.hour(value.hour());
                      changedValue.minute(value.minute());
                      changedValue.second(value.second());
                      onChange(changedValue);
                    }
                  } else if (originalValue !== value) {
                    onChange(value);
                  }
                } else {
                  onChange(null);
                }

                _this.setState({
                  invalid: false,
                });
              });

              _defineProperty(_assertThisInitialized(_this), 'onKeyDown', function(e) {
                var _this$props2 = _this.props,
                  onEsc = _this$props2.onEsc,
                  onKeyDown = _this$props2.onKeyDown;

                if (e.keyCode === 27) {
                  onEsc();
                }

                onKeyDown(e);
              });

              var _value = props.value,
                _format = props.format;
              _this.state = {
                str: (_value && _value.format(_format)) || '',
                invalid: false,
              };
              return _this;
            }

            _createClass(Header, [
              {
                key: 'componentDidMount',
                value: function componentDidMount() {
                  var _this2 = this;

                  var focusOnOpen = this.props.focusOnOpen;

                  if (focusOnOpen) {
                    // Wait one frame for the panel to be positioned before focusing
                    var requestAnimationFrame = window.requestAnimationFrame || window.setTimeout;
                    requestAnimationFrame(function() {
                      _this2.refInput.focus();

                      _this2.refInput.select();
                    });
                  }
                },
              },
              {
                key: 'componentDidUpdate',
                value: function componentDidUpdate(prevProps) {
                  var _this$props3 = this.props,
                    value = _this$props3.value,
                    format = _this$props3.format;

                  if (value !== prevProps.value) {
                    // eslint-disable-next-line react/no-did-update-set-state
                    this.setState({
                      str: (value && value.format(format)) || '',
                      invalid: false,
                    });
                  }
                },
              },
              {
                key: 'getProtoValue',
                value: function getProtoValue() {
                  var _this$props4 = this.props,
                    value = _this$props4.value,
                    defaultOpenValue = _this$props4.defaultOpenValue;
                  return value || defaultOpenValue;
                },
              },
              {
                key: 'getInput',
                value: function getInput() {
                  var _this3 = this;

                  var _this$props5 = this.props,
                    prefixCls = _this$props5.prefixCls,
                    placeholder = _this$props5.placeholder,
                    inputReadOnly = _this$props5.inputReadOnly;
                  var _this$state = this.state,
                    invalid = _this$state.invalid,
                    str = _this$state.str;
                  var invalidClass = invalid ? ''.concat(prefixCls, '-input-invalid') : '';
                  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement('input', {
                    className: classnames__WEBPACK_IMPORTED_MODULE_3___default()(
                      ''.concat(prefixCls, '-input'),
                      invalidClass,
                    ),
                    ref: function ref(_ref) {
                      _this3.refInput = _ref;
                    },
                    onKeyDown: this.onKeyDown,
                    value: str,
                    placeholder: placeholder,
                    onChange: this.onInputChange,
                    readOnly: !!inputReadOnly,
                  });
                },
              },
              {
                key: 'render',
                value: function render() {
                  var prefixCls = this.props.prefixCls;
                  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                    'div',
                    {
                      className: ''.concat(prefixCls, '-input-wrap'),
                    },
                    this.getInput(),
                  );
                },
              },
            ]);

            return Header;
          })(react__WEBPACK_IMPORTED_MODULE_0__['Component']);

        _defineProperty(Header, 'propTypes', {
          format: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,
          prefixCls: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,
          disabledDate: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          placeholder: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,
          clearText: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,
          value: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object,
          inputReadOnly: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
          hourOptions: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.array,
          minuteOptions: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.array,
          secondOptions: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.array,
          disabledHours: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          disabledMinutes: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          disabledSeconds: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          onChange: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          onEsc: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          defaultOpenValue: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object,
          currentSelectPanel: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,
          focusOnOpen: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
          onKeyDown: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          clearIcon: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.node,
        });

        _defineProperty(Header, 'defaultProps', {
          inputReadOnly: false,
        });

        /* harmony default export */ __webpack_exports__['default'] = Header;

        /***/
      },

    /***/ './src/Panel.jsx':
      /*!***********************!*\
  !*** ./src/Panel.jsx ***!
  \***********************/
      /*! exports provided: default */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! react */ './node_modules/react/index.js',
        );
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(
          react__WEBPACK_IMPORTED_MODULE_0__,
        );
        /* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          /*! prop-types */ './node_modules/prop-types/index.js',
        );
        /* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(
          prop_types__WEBPACK_IMPORTED_MODULE_1__,
        );
        /* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          /*! moment */ './node_modules/moment/moment.js',
        );
        /* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __webpack_require__.n(
          moment__WEBPACK_IMPORTED_MODULE_2__,
        );
        /* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
          /*! classnames */ './node_modules/classnames/index.js',
        );
        /* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/ __webpack_require__.n(
          classnames__WEBPACK_IMPORTED_MODULE_3__,
        );
        /* harmony import */ var react_lifecycles_compat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
          /*! react-lifecycles-compat */ './node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js',
        );
        /* harmony import */ var _Header__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
          /*! ./Header */ './src/Header.jsx',
        );
        /* harmony import */ var _Combobox__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
          /*! ./Combobox */ './src/Combobox.jsx',
        );
        function ownKeys(object, enumerableOnly) {
          var keys = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly)
              symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              });
            keys.push.apply(keys, symbols);
          }
          return keys;
        }

        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            if (i % 2) {
              ownKeys(source, true).forEach(function(key) {
                _defineProperty(target, key, source[key]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
            } else {
              ownKeys(source).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
              });
            }
          }
          return target;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _possibleConstructorReturn(self, call) {
          if (call && (typeof call === 'object' || typeof call === 'function')) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError('Super expression must either be null or a function');
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: { value: subClass, writable: true, configurable: true },
          });
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }

        function noop() {}

        function generateOptions(length, disabledOptions, hideDisabledOptions) {
          var step = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
          var arr = [];

          for (var value = 0; value < length; value += step) {
            if (!disabledOptions || disabledOptions.indexOf(value) < 0 || !hideDisabledOptions) {
              arr.push(value);
            }
          }

          return arr;
        }

        function toNearestValidTime(time, hourOptions, minuteOptions, secondOptions) {
          var hour = hourOptions.slice().sort(function(a, b) {
            return Math.abs(time.hour() - a) - Math.abs(time.hour() - b);
          })[0];
          var minute = minuteOptions.slice().sort(function(a, b) {
            return Math.abs(time.minute() - a) - Math.abs(time.minute() - b);
          })[0];
          var second = secondOptions.slice().sort(function(a, b) {
            return Math.abs(time.second() - a) - Math.abs(time.second() - b);
          })[0];
          return moment__WEBPACK_IMPORTED_MODULE_2___default()(
            ''
              .concat(hour, ':')
              .concat(minute, ':')
              .concat(second),
            'HH:mm:ss',
          );
        }

        var Panel =
          /*#__PURE__*/
          (function(_Component) {
            _inherits(Panel, _Component);

            function Panel() {
              var _getPrototypeOf2;

              var _this;

              _classCallCheck(this, Panel);

              for (
                var _len = arguments.length, args = new Array(_len), _key = 0;
                _key < _len;
                _key++
              ) {
                args[_key] = arguments[_key];
              }

              _this = _possibleConstructorReturn(
                this,
                (_getPrototypeOf2 = _getPrototypeOf(Panel)).call.apply(
                  _getPrototypeOf2,
                  [this].concat(args),
                ),
              );

              _defineProperty(_assertThisInitialized(_this), 'state', {});

              _defineProperty(_assertThisInitialized(_this), 'onChange', function(newValue) {
                var onChange = _this.props.onChange;

                _this.setState({
                  value: newValue,
                });

                onChange(newValue);
              });

              _defineProperty(_assertThisInitialized(_this), 'onAmPmChange', function(ampm) {
                var onAmPmChange = _this.props.onAmPmChange;
                onAmPmChange(ampm);
              });

              _defineProperty(_assertThisInitialized(_this), 'onCurrentSelectPanelChange', function(
                currentSelectPanel,
              ) {
                _this.setState({
                  currentSelectPanel: currentSelectPanel,
                });
              });

              _defineProperty(_assertThisInitialized(_this), 'disabledHours', function() {
                var _this$props = _this.props,
                  use12Hours = _this$props.use12Hours,
                  disabledHours = _this$props.disabledHours;
                var disabledOptions = disabledHours();

                if (use12Hours && Array.isArray(disabledOptions)) {
                  if (_this.isAM()) {
                    disabledOptions = disabledOptions
                      .filter(function(h) {
                        return h < 12;
                      })
                      .map(function(h) {
                        return h === 0 ? 12 : h;
                      });
                  } else {
                    disabledOptions = disabledOptions.map(function(h) {
                      return h === 12 ? 12 : h - 12;
                    });
                  }
                }

                return disabledOptions;
              });

              return _this;
            }

            _createClass(
              Panel,
              [
                {
                  key: 'close',
                  // https://github.com/ant-design/ant-design/issues/5829
                  value: function close() {
                    var onEsc = this.props.onEsc;
                    onEsc();
                  },
                },
                {
                  key: 'isAM',
                  value: function isAM() {
                    var defaultOpenValue = this.props.defaultOpenValue;
                    var value = this.state.value;
                    var realValue = value || defaultOpenValue;
                    return realValue.hour() >= 0 && realValue.hour() < 12;
                  },
                },
                {
                  key: 'render',
                  value: function render() {
                    var _this$props2 = this.props,
                      prefixCls = _this$props2.prefixCls,
                      className = _this$props2.className,
                      placeholder = _this$props2.placeholder,
                      disabledMinutes = _this$props2.disabledMinutes,
                      disabledSeconds = _this$props2.disabledSeconds,
                      hideDisabledOptions = _this$props2.hideDisabledOptions,
                      showHour = _this$props2.showHour,
                      showMinute = _this$props2.showMinute,
                      showSecond = _this$props2.showSecond,
                      format = _this$props2.format,
                      defaultOpenValue = _this$props2.defaultOpenValue,
                      clearText = _this$props2.clearText,
                      onEsc = _this$props2.onEsc,
                      addon = _this$props2.addon,
                      use12Hours = _this$props2.use12Hours,
                      focusOnOpen = _this$props2.focusOnOpen,
                      onKeyDown = _this$props2.onKeyDown,
                      hourStep = _this$props2.hourStep,
                      minuteStep = _this$props2.minuteStep,
                      secondStep = _this$props2.secondStep,
                      inputReadOnly = _this$props2.inputReadOnly,
                      clearIcon = _this$props2.clearIcon;
                    var _this$state = this.state,
                      value = _this$state.value,
                      currentSelectPanel = _this$state.currentSelectPanel;
                    var disabledHourOptions = this.disabledHours();
                    var disabledMinuteOptions = disabledMinutes(value ? value.hour() : null);
                    var disabledSecondOptions = disabledSeconds(
                      value ? value.hour() : null,
                      value ? value.minute() : null,
                    );
                    var hourOptions = generateOptions(
                      24,
                      disabledHourOptions,
                      hideDisabledOptions,
                      hourStep,
                    );
                    var minuteOptions = generateOptions(
                      60,
                      disabledMinuteOptions,
                      hideDisabledOptions,
                      minuteStep,
                    );
                    var secondOptions = generateOptions(
                      60,
                      disabledSecondOptions,
                      hideDisabledOptions,
                      secondStep,
                    );
                    var validDefaultOpenValue = toNearestValidTime(
                      defaultOpenValue,
                      hourOptions,
                      minuteOptions,
                      secondOptions,
                    );
                    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                      'div',
                      {
                        className: classnames__WEBPACK_IMPORTED_MODULE_3___default()(
                          className,
                          ''.concat(prefixCls, '-inner'),
                        ),
                      },
                      react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                        _Header__WEBPACK_IMPORTED_MODULE_5__['default'],
                        {
                          clearText: clearText,
                          prefixCls: prefixCls,
                          defaultOpenValue: validDefaultOpenValue,
                          value: value,
                          currentSelectPanel: currentSelectPanel,
                          onEsc: onEsc,
                          format: format,
                          placeholder: placeholder,
                          hourOptions: hourOptions,
                          minuteOptions: minuteOptions,
                          secondOptions: secondOptions,
                          disabledHours: this.disabledHours,
                          disabledMinutes: disabledMinutes,
                          disabledSeconds: disabledSeconds,
                          onChange: this.onChange,
                          focusOnOpen: focusOnOpen,
                          onKeyDown: onKeyDown,
                          inputReadOnly: inputReadOnly,
                          clearIcon: clearIcon,
                        },
                      ),
                      react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                        _Combobox__WEBPACK_IMPORTED_MODULE_6__['default'],
                        {
                          prefixCls: prefixCls,
                          value: value,
                          defaultOpenValue: validDefaultOpenValue,
                          format: format,
                          onChange: this.onChange,
                          onAmPmChange: this.onAmPmChange,
                          showHour: showHour,
                          showMinute: showMinute,
                          showSecond: showSecond,
                          hourOptions: hourOptions,
                          minuteOptions: minuteOptions,
                          secondOptions: secondOptions,
                          disabledHours: this.disabledHours,
                          disabledMinutes: disabledMinutes,
                          disabledSeconds: disabledSeconds,
                          onCurrentSelectPanelChange: this.onCurrentSelectPanelChange,
                          use12Hours: use12Hours,
                          onEsc: onEsc,
                          isAM: this.isAM(),
                        },
                      ),
                      addon(this),
                    );
                  },
                },
              ],
              [
                {
                  key: 'getDerivedStateFromProps',
                  value: function getDerivedStateFromProps(props, state) {
                    if ('value' in props) {
                      return _objectSpread({}, state, {
                        value: props.value,
                      });
                    }

                    return null;
                  },
                },
              ],
            );

            return Panel;
          })(react__WEBPACK_IMPORTED_MODULE_0__['Component']);

        _defineProperty(Panel, 'propTypes', {
          clearText: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,
          prefixCls: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,
          className: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,
          defaultOpenValue: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object,
          value: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object,
          placeholder: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,
          format: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,
          inputReadOnly: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
          disabledHours: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          disabledMinutes: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          disabledSeconds: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          hideDisabledOptions: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
          onChange: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          onAmPmChange: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          onEsc: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          showHour: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
          showMinute: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
          showSecond: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
          use12Hours: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
          hourStep: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number,
          minuteStep: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number,
          secondStep: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number,
          addon: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          focusOnOpen: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
          onKeyDown: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          clearIcon: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.node,
        });

        _defineProperty(Panel, 'defaultProps', {
          prefixCls: 'rc-time-picker-panel',
          onChange: noop,
          disabledHours: noop,
          disabledMinutes: noop,
          disabledSeconds: noop,
          defaultOpenValue: moment__WEBPACK_IMPORTED_MODULE_2___default()(),
          use12Hours: false,
          addon: noop,
          onKeyDown: noop,
          onAmPmChange: noop,
          inputReadOnly: false,
        });

        Object(react_lifecycles_compat__WEBPACK_IMPORTED_MODULE_4__['polyfill'])(Panel);
        /* harmony default export */ __webpack_exports__['default'] = Panel;

        /***/
      },

    /***/ './src/Select.jsx':
      /*!************************!*\
  !*** ./src/Select.jsx ***!
  \************************/
      /*! exports provided: default */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! react */ './node_modules/react/index.js',
        );
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(
          react__WEBPACK_IMPORTED_MODULE_0__,
        );
        /* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          /*! prop-types */ './node_modules/prop-types/index.js',
        );
        /* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(
          prop_types__WEBPACK_IMPORTED_MODULE_1__,
        );
        /* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          /*! react-dom */ './node_modules/react-dom/index.js',
        );
        /* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __webpack_require__.n(
          react_dom__WEBPACK_IMPORTED_MODULE_2__,
        );
        /* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
          /*! classnames */ './node_modules/classnames/index.js',
        );
        /* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/ __webpack_require__.n(
          classnames__WEBPACK_IMPORTED_MODULE_3__,
        );
        /* harmony import */ var raf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
          /*! raf */ './node_modules/raf/index.js',
        );
        /* harmony import */ var raf__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/ __webpack_require__.n(
          raf__WEBPACK_IMPORTED_MODULE_4__,
        );
        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _possibleConstructorReturn(self, call) {
          if (call && (typeof call === 'object' || typeof call === 'function')) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError('Super expression must either be null or a function');
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: { value: subClass, writable: true, configurable: true },
          });
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }

        /* eslint jsx-a11y/no-noninteractive-element-to-interactive-role: 0 */

        var scrollTo = function scrollTo(element, to, duration) {
          // jump to target if duration zero
          if (duration <= 0) {
            raf__WEBPACK_IMPORTED_MODULE_4___default()(function() {
              element.scrollTop = to;
            });
            return;
          }

          var difference = to - element.scrollTop;
          var perTick = (difference / duration) * 10;
          raf__WEBPACK_IMPORTED_MODULE_4___default()(function() {
            element.scrollTop += perTick;
            if (element.scrollTop === to) return;
            scrollTo(element, to, duration - 10);
          });
        };

        var Select =
          /*#__PURE__*/
          (function(_Component) {
            _inherits(Select, _Component);

            function Select() {
              var _getPrototypeOf2;

              var _this;

              _classCallCheck(this, Select);

              for (
                var _len = arguments.length, args = new Array(_len), _key = 0;
                _key < _len;
                _key++
              ) {
                args[_key] = arguments[_key];
              }

              _this = _possibleConstructorReturn(
                this,
                (_getPrototypeOf2 = _getPrototypeOf(Select)).call.apply(
                  _getPrototypeOf2,
                  [this].concat(args),
                ),
              );

              _defineProperty(_assertThisInitialized(_this), 'state', {
                active: false,
              });

              _defineProperty(_assertThisInitialized(_this), 'onSelect', function(value) {
                var _this$props = _this.props,
                  onSelect = _this$props.onSelect,
                  type = _this$props.type;
                onSelect(type, value);
              });

              _defineProperty(_assertThisInitialized(_this), 'handleMouseEnter', function(e) {
                var onMouseEnter = _this.props.onMouseEnter;

                _this.setState({
                  active: true,
                });

                onMouseEnter(e);
              });

              _defineProperty(_assertThisInitialized(_this), 'handleMouseLeave', function() {
                _this.setState({
                  active: false,
                });
              });

              _defineProperty(_assertThisInitialized(_this), 'saveList', function(node) {
                _this.list = node;
              });

              return _this;
            }

            _createClass(Select, [
              {
                key: 'componentDidMount',
                value: function componentDidMount() {
                  // jump to selected option
                  this.scrollToSelected(0);
                },
              },
              {
                key: 'componentDidUpdate',
                value: function componentDidUpdate(prevProps) {
                  var selectedIndex = this.props.selectedIndex; // smooth scroll to selected option

                  if (prevProps.selectedIndex !== selectedIndex) {
                    this.scrollToSelected(120);
                  }
                },
              },
              {
                key: 'getOptions',
                value: function getOptions() {
                  var _this2 = this;

                  var _this$props2 = this.props,
                    options = _this$props2.options,
                    selectedIndex = _this$props2.selectedIndex,
                    prefixCls = _this$props2.prefixCls,
                    onEsc = _this$props2.onEsc;
                  return options.map(function(item, index) {
                    var _classNames;

                    var cls = classnames__WEBPACK_IMPORTED_MODULE_3___default()(
                      ((_classNames = {}),
                      _defineProperty(
                        _classNames,
                        ''.concat(prefixCls, '-select-option-selected'),
                        selectedIndex === index,
                      ),
                      _defineProperty(
                        _classNames,
                        ''.concat(prefixCls, '-select-option-disabled'),
                        item.disabled,
                      ),
                      _classNames),
                    );
                    var onClick = item.disabled
                      ? undefined
                      : function() {
                          _this2.onSelect(item.value);
                        };

                    var onKeyDown = function onKeyDown(e) {
                      if (e.keyCode === 13) onClick();
                      else if (e.keyCode === 27) onEsc();
                    };

                    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                      'li',
                      {
                        role: 'button',
                        onClick: onClick,
                        className: cls,
                        key: index,
                        disabled: item.disabled,
                        tabIndex: '0',
                        onKeyDown: onKeyDown,
                      },
                      item.displayValue ? item.displayValue : item.value,
                    );
                  });
                },
              },
              {
                key: 'scrollToSelected',
                value: function scrollToSelected(duration) {
                  // move to selected item
                  var selectedIndex = this.props.selectedIndex;
                  var select = react_dom__WEBPACK_IMPORTED_MODULE_2___default.a.findDOMNode(this);
                  var list = react_dom__WEBPACK_IMPORTED_MODULE_2___default.a.findDOMNode(
                    this.list,
                  );

                  if (!list) {
                    return;
                  }

                  var index = selectedIndex;

                  if (index < 0) {
                    index = 0;
                  }

                  var topOption = list.children[index];
                  var to = topOption.offsetTop;
                  scrollTo(select, to, duration);
                },
              },
              {
                key: 'render',
                value: function render() {
                  var _this$props3 = this.props,
                    prefixCls = _this$props3.prefixCls,
                    options = _this$props3.options;
                  var active = this.state.active;

                  if (options.length === 0) {
                    return null;
                  }

                  var cls = classnames__WEBPACK_IMPORTED_MODULE_3___default()(
                    ''.concat(prefixCls, '-select'),
                    _defineProperty({}, ''.concat(prefixCls, '-select-active'), active),
                  );
                  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                    'div',
                    {
                      className: cls,
                      onMouseEnter: this.handleMouseEnter,
                      onMouseLeave: this.handleMouseLeave,
                    },
                    react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                      'ul',
                      {
                        ref: this.saveList,
                      },
                      this.getOptions(),
                    ),
                  );
                },
              },
            ]);

            return Select;
          })(react__WEBPACK_IMPORTED_MODULE_0__['Component']);

        _defineProperty(Select, 'propTypes', {
          prefixCls: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,
          options: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.array,
          selectedIndex: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number,
          type: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,
          onSelect: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          onMouseEnter: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          onEsc: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
        });

        /* harmony default export */ __webpack_exports__['default'] = Select;

        /***/
      },

    /***/ './src/TimePicker.jsx':
      /*!****************************!*\
  !*** ./src/TimePicker.jsx ***!
  \****************************/
      /*! exports provided: default */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! react */ './node_modules/react/index.js',
        );
        /* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(
          react__WEBPACK_IMPORTED_MODULE_0__,
        );
        /* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          /*! prop-types */ './node_modules/prop-types/index.js',
        );
        /* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(
          prop_types__WEBPACK_IMPORTED_MODULE_1__,
        );
        /* harmony import */ var rc_trigger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          /*! rc-trigger */ './node_modules/rc-trigger/es/index.js',
        );
        /* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
          /*! moment */ './node_modules/moment/moment.js',
        );
        /* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/ __webpack_require__.n(
          moment__WEBPACK_IMPORTED_MODULE_3__,
        );
        /* harmony import */ var react_lifecycles_compat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
          /*! react-lifecycles-compat */ './node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js',
        );
        /* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
          /*! classnames */ './node_modules/classnames/index.js',
        );
        /* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/ __webpack_require__.n(
          classnames__WEBPACK_IMPORTED_MODULE_5__,
        );
        /* harmony import */ var _Panel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
          /*! ./Panel */ './src/Panel.jsx',
        );
        /* harmony import */ var _placements__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
          /*! ./placements */ './src/placements.js',
        );
        function ownKeys(object, enumerableOnly) {
          var keys = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly)
              symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              });
            keys.push.apply(keys, symbols);
          }
          return keys;
        }

        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            if (i % 2) {
              ownKeys(source, true).forEach(function(key) {
                _defineProperty(target, key, source[key]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
            } else {
              ownKeys(source).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
              });
            }
          }
          return target;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _possibleConstructorReturn(self, call) {
          if (call && (typeof call === 'object' || typeof call === 'function')) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError('Super expression must either be null or a function');
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: { value: subClass, writable: true, configurable: true },
          });
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }

        /* eslint jsx-a11y/no-autofocus: 0 */

        function noop() {}

        function refFn(field, component) {
          this[field] = component;
        }

        var Picker =
          /*#__PURE__*/
          (function(_Component) {
            _inherits(Picker, _Component);

            function Picker(props) {
              var _this;

              _classCallCheck(this, Picker);

              _this = _possibleConstructorReturn(this, _getPrototypeOf(Picker).call(this, props));

              _defineProperty(_assertThisInitialized(_this), 'onPanelChange', function(value) {
                _this.setValue(value);
              });

              _defineProperty(_assertThisInitialized(_this), 'onAmPmChange', function(ampm) {
                var onAmPmChange = _this.props.onAmPmChange;
                onAmPmChange(ampm);
              });

              _defineProperty(_assertThisInitialized(_this), 'onClear', function(event) {
                event.stopPropagation();

                _this.setValue(null);

                _this.setOpen(false);
              });

              _defineProperty(_assertThisInitialized(_this), 'onVisibleChange', function(open) {
                _this.setOpen(open);
              });

              _defineProperty(_assertThisInitialized(_this), 'onEsc', function() {
                _this.setOpen(false);

                _this.focus();
              });

              _defineProperty(_assertThisInitialized(_this), 'onKeyDown', function(e) {
                if (e.keyCode === 40) {
                  _this.setOpen(true);
                }
              });

              _this.saveInputRef = refFn.bind(_assertThisInitialized(_this), 'picker');
              _this.savePanelRef = refFn.bind(_assertThisInitialized(_this), 'panelInstance');

              var defaultOpen = props.defaultOpen,
                defaultValue = props.defaultValue,
                _props$open = props.open,
                _open = _props$open === void 0 ? defaultOpen : _props$open,
                _props$value = props.value,
                _value = _props$value === void 0 ? defaultValue : _props$value;

              _this.state = {
                open: _open,
                value: _value,
              };
              return _this;
            }

            _createClass(
              Picker,
              [
                {
                  key: 'setValue',
                  value: function setValue(value) {
                    var onChange = this.props.onChange;

                    if (!('value' in this.props)) {
                      this.setState({
                        value: value,
                      });
                    }

                    onChange(value);
                  },
                },
                {
                  key: 'getFormat',
                  value: function getFormat() {
                    var _this$props = this.props,
                      format = _this$props.format,
                      showHour = _this$props.showHour,
                      showMinute = _this$props.showMinute,
                      showSecond = _this$props.showSecond,
                      use12Hours = _this$props.use12Hours;

                    if (format) {
                      return format;
                    }

                    if (use12Hours) {
                      var fmtString = [
                        showHour ? 'h' : '',
                        showMinute ? 'mm' : '',
                        showSecond ? 'ss' : '',
                      ]
                        .filter(function(item) {
                          return !!item;
                        })
                        .join(':');
                      return fmtString.concat(' a');
                    }

                    return [showHour ? 'HH' : '', showMinute ? 'mm' : '', showSecond ? 'ss' : '']
                      .filter(function(item) {
                        return !!item;
                      })
                      .join(':');
                  },
                },
                {
                  key: 'getPanelElement',
                  value: function getPanelElement() {
                    var _this$props2 = this.props,
                      prefixCls = _this$props2.prefixCls,
                      placeholder = _this$props2.placeholder,
                      disabledHours = _this$props2.disabledHours,
                      disabledMinutes = _this$props2.disabledMinutes,
                      disabledSeconds = _this$props2.disabledSeconds,
                      hideDisabledOptions = _this$props2.hideDisabledOptions,
                      inputReadOnly = _this$props2.inputReadOnly,
                      showHour = _this$props2.showHour,
                      showMinute = _this$props2.showMinute,
                      showSecond = _this$props2.showSecond,
                      defaultOpenValue = _this$props2.defaultOpenValue,
                      clearText = _this$props2.clearText,
                      addon = _this$props2.addon,
                      use12Hours = _this$props2.use12Hours,
                      focusOnOpen = _this$props2.focusOnOpen,
                      onKeyDown = _this$props2.onKeyDown,
                      hourStep = _this$props2.hourStep,
                      minuteStep = _this$props2.minuteStep,
                      secondStep = _this$props2.secondStep,
                      clearIcon = _this$props2.clearIcon;
                    var value = this.state.value;
                    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                      _Panel__WEBPACK_IMPORTED_MODULE_6__['default'],
                      {
                        clearText: clearText,
                        prefixCls: ''.concat(prefixCls, '-panel'),
                        ref: this.savePanelRef,
                        value: value,
                        inputReadOnly: inputReadOnly,
                        onChange: this.onPanelChange,
                        onAmPmChange: this.onAmPmChange,
                        defaultOpenValue: defaultOpenValue,
                        showHour: showHour,
                        showMinute: showMinute,
                        showSecond: showSecond,
                        onEsc: this.onEsc,
                        format: this.getFormat(),
                        placeholder: placeholder,
                        disabledHours: disabledHours,
                        disabledMinutes: disabledMinutes,
                        disabledSeconds: disabledSeconds,
                        hideDisabledOptions: hideDisabledOptions,
                        use12Hours: use12Hours,
                        hourStep: hourStep,
                        minuteStep: minuteStep,
                        secondStep: secondStep,
                        addon: addon,
                        focusOnOpen: focusOnOpen,
                        onKeyDown: onKeyDown,
                        clearIcon: clearIcon,
                      },
                    );
                  },
                },
                {
                  key: 'getPopupClassName',
                  value: function getPopupClassName() {
                    var _this$props3 = this.props,
                      showHour = _this$props3.showHour,
                      showMinute = _this$props3.showMinute,
                      showSecond = _this$props3.showSecond,
                      use12Hours = _this$props3.use12Hours,
                      prefixCls = _this$props3.prefixCls,
                      popupClassName = _this$props3.popupClassName;
                    var selectColumnCount = 0;

                    if (showHour) {
                      selectColumnCount += 1;
                    }

                    if (showMinute) {
                      selectColumnCount += 1;
                    }

                    if (showSecond) {
                      selectColumnCount += 1;
                    }

                    if (use12Hours) {
                      selectColumnCount += 1;
                    } // Keep it for old compatibility

                    return classnames__WEBPACK_IMPORTED_MODULE_5___default()(
                      popupClassName,
                      _defineProperty(
                        {},
                        ''.concat(prefixCls, '-panel-narrow'),
                        (!showHour || !showMinute || !showSecond) && !use12Hours,
                      ),
                      ''.concat(prefixCls, '-panel-column-').concat(selectColumnCount),
                    );
                  },
                },
                {
                  key: 'setOpen',
                  value: function setOpen(open) {
                    var _this$props4 = this.props,
                      onOpen = _this$props4.onOpen,
                      onClose = _this$props4.onClose;
                    var currentOpen = this.state.open;

                    if (currentOpen !== open) {
                      if (!('open' in this.props)) {
                        this.setState({
                          open: open,
                        });
                      }

                      if (open) {
                        onOpen({
                          open: open,
                        });
                      } else {
                        onClose({
                          open: open,
                        });
                      }
                    }
                  },
                },
                {
                  key: 'focus',
                  value: function focus() {
                    this.picker.focus();
                  },
                },
                {
                  key: 'blur',
                  value: function blur() {
                    this.picker.blur();
                  },
                },
                {
                  key: 'renderClearButton',
                  value: function renderClearButton() {
                    var _this2 = this;

                    var value = this.state.value;
                    var _this$props5 = this.props,
                      prefixCls = _this$props5.prefixCls,
                      allowEmpty = _this$props5.allowEmpty,
                      clearIcon = _this$props5.clearIcon,
                      clearText = _this$props5.clearText,
                      disabled = _this$props5.disabled;

                    if (!allowEmpty || !value || disabled) {
                      return null;
                    }

                    if (react__WEBPACK_IMPORTED_MODULE_0___default.a.isValidElement(clearIcon)) {
                      var _ref = clearIcon.props || {},
                        _onClick = _ref.onClick;

                      return react__WEBPACK_IMPORTED_MODULE_0___default.a.cloneElement(clearIcon, {
                        onClick: function onClick() {
                          if (_onClick) _onClick.apply(void 0, arguments);

                          _this2.onClear.apply(_this2, arguments);
                        },
                      });
                    }

                    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                      'a',
                      {
                        role: 'button',
                        className: ''.concat(prefixCls, '-clear'),
                        title: clearText,
                        onClick: this.onClear,
                        tabIndex: 0,
                      },
                      clearIcon ||
                        react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement('i', {
                          className: ''.concat(prefixCls, '-clear-icon'),
                        }),
                    );
                  },
                },
                {
                  key: 'render',
                  value: function render() {
                    var _this$props6 = this.props,
                      prefixCls = _this$props6.prefixCls,
                      placeholder = _this$props6.placeholder,
                      placement = _this$props6.placement,
                      align = _this$props6.align,
                      id = _this$props6.id,
                      disabled = _this$props6.disabled,
                      transitionName = _this$props6.transitionName,
                      style = _this$props6.style,
                      className = _this$props6.className,
                      getPopupContainer = _this$props6.getPopupContainer,
                      name = _this$props6.name,
                      autoComplete = _this$props6.autoComplete,
                      onFocus = _this$props6.onFocus,
                      onBlur = _this$props6.onBlur,
                      autoFocus = _this$props6.autoFocus,
                      inputReadOnly = _this$props6.inputReadOnly,
                      inputIcon = _this$props6.inputIcon,
                      popupStyle = _this$props6.popupStyle;
                    var _this$state = this.state,
                      open = _this$state.open,
                      value = _this$state.value;
                    var popupClassName = this.getPopupClassName();
                    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                      rc_trigger__WEBPACK_IMPORTED_MODULE_2__['default'],
                      {
                        prefixCls: ''.concat(prefixCls, '-panel'),
                        popupClassName: popupClassName,
                        popupStyle: popupStyle,
                        popup: this.getPanelElement(),
                        popupAlign: align,
                        builtinPlacements: _placements__WEBPACK_IMPORTED_MODULE_7__['default'],
                        popupPlacement: placement,
                        action: disabled ? [] : ['click'],
                        destroyPopupOnHide: true,
                        getPopupContainer: getPopupContainer,
                        popupTransitionName: transitionName,
                        popupVisible: open,
                        onPopupVisibleChange: this.onVisibleChange,
                      },
                      react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                        'span',
                        {
                          className: classnames__WEBPACK_IMPORTED_MODULE_5___default()(
                            prefixCls,
                            className,
                          ),
                          style: style,
                        },
                        react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement('input', {
                          className: ''.concat(prefixCls, '-input'),
                          ref: this.saveInputRef,
                          type: 'text',
                          placeholder: placeholder,
                          name: name,
                          onKeyDown: this.onKeyDown,
                          disabled: disabled,
                          value: (value && value.format(this.getFormat())) || '',
                          autoComplete: autoComplete,
                          onFocus: onFocus,
                          onBlur: onBlur,
                          autoFocus: autoFocus,
                          onChange: noop,
                          readOnly: !!inputReadOnly,
                          id: id,
                        }),
                        inputIcon ||
                          react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement('span', {
                            className: ''.concat(prefixCls, '-icon'),
                          }),
                        this.renderClearButton(),
                      ),
                    );
                  },
                },
              ],
              [
                {
                  key: 'getDerivedStateFromProps',
                  value: function getDerivedStateFromProps(props, state) {
                    var newState = {};

                    if ('value' in props) {
                      newState.value = props.value;
                    }

                    if (props.open !== undefined) {
                      newState.open = props.open;
                    }

                    return Object.keys(newState).length > 0
                      ? _objectSpread({}, state, {}, newState)
                      : null;
                  },
                },
              ],
            );

            return Picker;
          })(react__WEBPACK_IMPORTED_MODULE_0__['Component']);

        _defineProperty(Picker, 'propTypes', {
          prefixCls: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,
          clearText: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,
          value: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object,
          defaultOpenValue: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object,
          inputReadOnly: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
          disabled: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
          allowEmpty: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
          defaultValue: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object,
          open: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
          defaultOpen: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
          align: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object,
          placement: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.any,
          transitionName: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,
          getPopupContainer: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          placeholder: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,
          format: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,
          showHour: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
          showMinute: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
          showSecond: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
          style: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object,
          className: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,
          popupClassName: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,
          popupStyle: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object,
          disabledHours: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          disabledMinutes: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          disabledSeconds: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          hideDisabledOptions: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
          onChange: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          onAmPmChange: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          onOpen: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          onClose: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          onFocus: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          onBlur: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          addon: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          name: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,
          autoComplete: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,
          use12Hours: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
          hourStep: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number,
          minuteStep: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number,
          secondStep: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number,
          focusOnOpen: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
          onKeyDown: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
          autoFocus: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
          id: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,
          inputIcon: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.node,
          clearIcon: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.node,
        });

        _defineProperty(Picker, 'defaultProps', {
          clearText: 'clear',
          prefixCls: 'rc-time-picker',
          defaultOpen: false,
          inputReadOnly: false,
          style: {},
          className: '',
          popupClassName: '',
          popupStyle: {},
          id: '',
          align: {},
          defaultOpenValue: moment__WEBPACK_IMPORTED_MODULE_3___default()(),
          allowEmpty: true,
          showHour: true,
          showMinute: true,
          showSecond: true,
          disabledHours: noop,
          disabledMinutes: noop,
          disabledSeconds: noop,
          hideDisabledOptions: false,
          placement: 'bottomLeft',
          onChange: noop,
          onAmPmChange: noop,
          onOpen: noop,
          onClose: noop,
          onFocus: noop,
          onBlur: noop,
          addon: noop,
          use12Hours: false,
          focusOnOpen: false,
          onKeyDown: noop,
        });

        Object(react_lifecycles_compat__WEBPACK_IMPORTED_MODULE_4__['polyfill'])(Picker);
        /* harmony default export */ __webpack_exports__['default'] = Picker;

        /***/
      },

    /***/ './src/index.js':
      /*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
      /*! exports provided: default */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var _TimePicker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! ./TimePicker */ './src/TimePicker.jsx',
        );
        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          'default',
          function() {
            return _TimePicker__WEBPACK_IMPORTED_MODULE_0__['default'];
          },
        );

        /***/
      },

    /***/ './src/placements.js':
      /*!***************************!*\
  !*** ./src/placements.js ***!
  \***************************/
      /*! exports provided: default */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        var autoAdjustOverflow = {
          adjustX: 1,
          adjustY: 1,
        };
        var targetOffset = [0, 0];
        var placements = {
          bottomLeft: {
            points: ['tl', 'tl'],
            overflow: autoAdjustOverflow,
            offset: [0, -3],
            targetOffset: targetOffset,
          },
          bottomRight: {
            points: ['tr', 'tr'],
            overflow: autoAdjustOverflow,
            offset: [0, -3],
            targetOffset: targetOffset,
          },
          topRight: {
            points: ['br', 'br'],
            overflow: autoAdjustOverflow,
            offset: [0, 3],
            targetOffset: targetOffset,
          },
          topLeft: {
            points: ['bl', 'bl'],
            overflow: autoAdjustOverflow,
            offset: [0, 3],
            targetOffset: targetOffset,
          },
        };
        /* harmony default export */ __webpack_exports__['default'] = placements;

        /***/
      },
  },
]);
//# sourceMappingURL=common.js.map
